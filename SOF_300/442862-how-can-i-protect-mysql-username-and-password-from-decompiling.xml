<?xml version="1.0" encoding="utf-8"?>
<post><title>java - How can I protect MySQL username and password from decompiling? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>Java <code>.class</code> files can be decompiled fairly easily. How can I protect my database if I have to use the login data in the code?</p>
</div></text><author><a href="/users/834176/keith-pinson">Keith Pinson</a></author><comments><comment><text><span class="comment-copy">I hope you don't mind I retagged your question. I removed "username" and "password" and added "reverse-engineering" and "decompiling". I think they are more descriptive than the originals. Excellent question on the fundamentals, by the way!</span></text><author><a class="comment-user" href="/users/2405/william-brendel" title="22,538 reputation">William Brendel</a></author></comment><comment><text><span class="comment-copy">Note that the fact that your're using Java isn't really relevent here. Having hard-coded passwords in any language is problematic in pretty much the same way ("strings thebinary" shows string constants in C programs just as well).</span></text><author><a class="comment-user" href="/users/40342/joachim-sauer" title="197,306 reputation">Joachim Sauer</a></author></comment><comment><text><span class="comment-copy">@saua: True, but perhaps someone will post some sample code on how to decouple usernames and passwords in Java. I might even do that myself if I have the time.</span></text><author><a class="comment-user" href="/users/2405/william-brendel" title="22,538 reputation">William Brendel</a></author></comment><comment><text><span class="comment-copy">I added some Java code demonstrating this. The code is really quite basic, but it should be enough to get someone started.</span></text><author><a class="comment-user" href="/users/2405/william-brendel" title="22,538 reputation">William Brendel</a></author></comment><comment><text><span class="comment-copy">@Midday: Could you provide more information about your application? There seems to be some confusion in the comments. For example, where is this application being run? On a customer's machine? On a remote server? Local server? There might be bigger architectural problems depending on your answer.</span></text><author><a class="comment-user" href="/users/2405/william-brendel" title="22,538 reputation">William Brendel</a></author></comment><comment><text><span class="comment-copy">I've noticed that a lot of answers think that you are trying to hide the username/passwords from an unauthorized user while the user running the app is ok. I believe you want to hide the password from <i>EVERYONE</i>. Please clarify this in the question.</span></text><author><a class="comment-user" href="/users/2644/pek" title="8,511 reputation">pek</a></author></comment><comment><text><span class="comment-copy">For example, say that the credentials are used to connect to a server that nobody other than the application can login.</span></text><author><a class="comment-user" href="/users/2644/pek" title="8,511 reputation">pek</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Never hard-code passwords into your code. This was brought up recently in the <a href="http://blog.codinghorror.com/top-25-most-dangerous-programming-mistakes/" rel="noreferrer">Top 25 Most Dangerous Programming Mistakes</a>:</p>
<blockquote>
<p>Hard-coding a secret account and
  password into your software is
  extremely convenient -- for skilled
  reverse engineers. If the password is
  the same across all your software,
  then every customer becomes vulnerable
  when that password inevitably becomes
  known. And because it's hard-coded,
  it's a huge pain to fix.</p>
</blockquote>
<p>You should store configuration information, including passwords, in a separate file that the application reads when it starts. That is the only real way to prevent the password from leaking as a result of decompilation (never compile it into the binary to begin with).</p>
<p>For more information about this common mistake, you can read the <a href="http://cwe.mitre.org/data/definitions/259.html" rel="noreferrer">CWE-259 article</a>. The article contains a more thorough definition, examples, and lots of other information about the problem.</p>
<p>In Java, one of the easiest ways to do this is to use the Preferences class. It is designed to store all sorts of program settings, some of which could include a username and password.</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="pln">prefs</span><span class="pun">.</span><span class="typ">Preferences</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">DemoApplication</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="typ">Preferences</span><span class="pln"> preferences </span><span class="pun">=</span><span class="pln"> 
      </span><span class="typ">Preferences</span><span class="pun">.</span><span class="pln">userNodeForPackage</span><span class="pun">(</span><span class="typ">DemoApplication</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setCredentials</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> username</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> password</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    preferences</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"db_username"</span><span class="pun">,</span><span class="pln"> username</span><span class="pun">);</span><span class="pln">
    preferences</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"db_password"</span><span class="pun">,</span><span class="pln"> password</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getUsername</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> preferences</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">(</span><span class="str">"db_username"</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getPassword</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> preferences</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">(</span><span class="str">"db_password"</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="com">// your code here</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>In the above code, you could call the <code>setCredentials</code> method after showing a dialog askign for the username and password. When you need to connect to the database, you can just use the <code>getUsername</code> and <code>getPassword</code> methods to retrieve the stored values. The login credentials will not be hard-coded into your binaries, so decompilation will not pose a security risk.</p>
<p><strong>Important Note:</strong> The preference files are just plain text XML files. Make sure you take appropriate steps to prevent unauthorized users from viewing the raw files (UNIX permissions, Windows permissions, et cetera). In Linux, at least, this isn't a problem, because calling <code>Preferences.userNodeForPackage</code> will create the XML file in the current user's home directory, which is non-readable by other users anyway. In Windows, the situation might be different.</p>
<p><strong>More Important Notes:</strong> There has been a lot of discussion in the comments of this answer and others about what the correct architecture is for this situation. The original question doesn't really mention the context in which the application is being used, so I will talk about the two situations I can think of. The first is the case in which the person using the program already knows (and is authorized to know) the database credentials. The second is the case in which you, the developer, are trying to keep the database credentials secret from the person using the program.</p>
<p><strong>First Case: User is authorized to know the database login credentials</strong></p>
<p>In this case, the solution I mentioned above will work. The Java <code>Preference</code> class will stored the username and password in plain text, but the preferences file will only be readable by the authorized user. The user can simply open the preferences XML file and read the login credentials, but that is not a security risk because the user knew the credentials to begin with.</p>
<p><strong>Second Case: Trying to hide login credentials from the user</strong></p>
<p>This is the more complicated case: the user should not know the login credentials but still needs access to the database. In this case, the user running the application has direct access to the database, which means the program needs to know the login credentials ahead of time. The solution I mentioned above is not appropriate for this case. You can store the database login credentials in a preferences file, but he user will be able to read that file, since they will be the owner. In fact, there is really no good way to use this case in a secure way.</p>
<p><strong>Correct Case: Using a multi-tier architecture</strong></p>
<p>The correct way to do it is to have a middle layer, in between your database server and your client application, that authenticates individual users and allows a limited set of operations to be performed. Each user would have their own login credentials, but not for the database server. The credentials would allow access to the middle layer (the business logic tier) and would be different for each user.</p>
<p>Every user would have their own username and password, which could be stored locally in a preferences file without any security risk. This is called a <a href="http://en.wikipedia.org/wiki/Three-tier_%28computing%29" rel="noreferrer">three-tier architecture</a> (the tiers being your database server, business logic server, and client application). It is more complex, but it really is the most secure way to do this sort of thing.</p>
<p>The basic order of operations is:</p>
<ol>
<li>Client authenticates with business logic tier using the user's personal username/password. The username and password are known to the user and are not related to the database login credentials in any way.</li>
<li>If authentication succeeds, the client makes a request to the business logic tier asking for some information from the database. For example, an inventory of products. Note that the client's request is not a SQL query; it is a remote procedure call such as <code>getInventoryList</code>.</li>
<li>The business logic tier connects to the database and retrieves the requested information. The business logic tier is in charge of forming a secure SQL query based on the user's request. Any parameters to the SQL query should be sanitized to prevent SQL injection attacks.</li>
<li>The business logic tier sends the inventory list back to the client application.</li>
<li>The client displays the inventory list to the user.</li>
</ol>
<p>Note that in the entire process, <strong>the client application never connects directly to the database</strong>. The business logic tier receives a request from an authenticated user, processes the client's request for an inventory list, and only then executes a SQL query.</p>
</div></text><author><a href="/users/2405/william-brendel">William Brendel</a></author><comments><comment><text><span class="comment-copy">How exactly does this keep someone from getting the username/password? Can't you just read it from the file then?</span></text><author><a class="comment-user" href="/users/20471/joe-phillips" title="23,899 reputation">Joe Phillips</a></author></comment><comment><text><span class="comment-copy">As I said in my answer, if your file permissions are set properly, only the user running the program has read access to that preferences file. In UNIX environments, this is done automatically. Windows might require additional steps (I'm really not sure, since I don't use Windows much).</span></text><author><a class="comment-user" href="/users/2405/william-brendel" title="22,538 reputation">William Brendel</a></author></comment><comment><text><span class="comment-copy">I think the idea is that the user running the app isn't the one you are trying to keep it from. If that's the case, then you'd have to encrypt it.</span></text><author><a class="comment-user" href="/users/29/michael-haren" title="63,779 reputation">Michael Haren</a></author></comment><comment><text><span class="comment-copy">Yes, Michael is correct. Essentially the idea is that you already know the username/password, so there is no need to hide it from yourself. It will be hidden from other users, however, through file permissions.</span></text><author><a class="comment-user" href="/users/2405/william-brendel" title="22,538 reputation">William Brendel</a></author></comment><comment><text><span class="comment-copy">@Michael - encryption won't help in keeping the password from the user running the app. It just pushes the problem onto trying to protect the key, and in any case the user will need some API somewhere to use the password.</span></text><author><a class="comment-user" href="/users/42404/frankodwyer" title="11,167 reputation">frankodwyer</a></author></comment><comment><text><span class="comment-copy">If you are deploying (example) a DB editing application to a user and you don't want them to know the database username and password, then you've architected the solution wrong, and the client software should be communicating with a server (via e.g., a web service) that does the DB stuff.</span></text><author><a class="comment-user" href="/users/17832/jeebee" title="14,489 reputation">JeeBee</a></author></comment><comment><text><span class="comment-copy">@JeeBee: Exactly correct. In my answer I assumed the user knows the credentials, and the problem is finding a way to store that information outside of the compiled code. Attempts to give <i>untrusted</i> users <i>trusted</i> access to any system will always fail. Nice comment, JeeBee.</span></text><author><a class="comment-user" href="/users/2405/william-brendel" title="22,538 reputation">William Brendel</a></author></comment><comment><text><span class="comment-copy">I added more information to my original answer. It covers the basics of using a three-tier architecture, which is probably best for what the original poster wanted.</span></text><author><a class="comment-user" href="/users/2405/william-brendel" title="22,538 reputation">William Brendel</a></author></comment><comment><text><span class="comment-copy">That's a lovely comprehensive answer indeed now.</span></text><author><a class="comment-user" href="/users/17832/jeebee" title="14,489 reputation">JeeBee</a></author></comment><comment><text><span class="comment-copy">I dont't quite understand your saying: "<i>Client authenticates with business logic tier using the user's personal username/password. The username and password are known to the user and are not related to the database login credentials in any way.</i>" The business logic tier is a web-service (written in java, php, etc.)? If so, where the user credentials are stored? Perharps in a config file in the web-service platform? But, what if we want to create new accounts to register new users? What then? Although, it's possible to hash these credentials and to send them over network to the business logic</span></text><author><a class="comment-user" href="/users/3514908/john-astralidis" title="52 reputation">John Astralidis</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Put the password into a file that the application will read.  NEVER embed passwords in a source file. Period.</p>
<p>Ruby has a little-known module called <a href="https://rubygems.org/gems/dbi-dbrc" rel="nofollow noreferrer">DBI::DBRC</a> for such usage.  I have no doubt that Java has an equivalent.  Anyway, it is not difficult to write one.</p>
</div></text><author><a href="/users/16143/keltia">Keltia</a></author><comments><comment><text><span class="comment-copy">While that makes it slightly easier to change the passwords later on, it doesn't solve the basic security issue.</span></text><author><a class="comment-user" href="/users/15689/brian-knoblauch" title="12,280 reputation">Brian Knoblauch</a></author></comment><comment><text><span class="comment-copy">Yes it does. See also the answer from William Brendel.</span></text><author><a class="comment-user" href="/users/16143/keltia" title="10,977 reputation">Keltia</a></author></comment><comment><text><span class="comment-copy">The method Keltia and I pointed out is the accepted way of dealing with this problem. Decoupling your login credentials from your compiled code is one of the most basic software security practices. Putting the login credentials in a separate file is an effective way to achieve this.</span></text><author><a class="comment-user" href="/users/2405/william-brendel" title="22,538 reputation">William Brendel</a></author></comment><comment><text><span class="comment-copy">Furthermore, the fact that your configuration information is in a plaintext file should be canceled by operating system restrictions. For example, in UNIX, the plaintext file should be owned by the user running the program and have permissions 0600, so only the owner can read it.</span></text><author><a class="comment-user" href="/users/2405/william-brendel" title="22,538 reputation">William Brendel</a></author></comment><comment><text><span class="comment-copy">OK, so the file can only be read by the user running the program.  Great.  That solves nothing.  :-)  I, the user who we're trying to keep the password secret from, can read it just as easily as the app...</span></text><author><a class="comment-user" href="/users/15689/brian-knoblauch" title="12,280 reputation">Brian Knoblauch</a></author></comment><comment><text><span class="comment-copy">@Brian: You're trying to give <i>untrusted</i> users <i>trusted</i> access to a system, and you want it to be secure? That's just not possible. In that case, you really need to rethink your architecture. This is why copy protection doesn't work (it must give untrusted parties the ability to decrypt content).</span></text><author><a class="comment-user" href="/users/2405/william-brendel" title="22,538 reputation">William Brendel</a></author></comment><comment><text><span class="comment-copy">This method will make the access more difficult, but by no means will protect anything. Even if the data is encrypted on file, the code can still be decompiled (and that is my main problem at this moment). So, i have to put sensible data on file, encrypt, and obfuscate the code that deal with encryption/decryption...</span></text><author><a class="comment-user" href="/users/130028/marcolopes" title="3,807 reputation">marcolopes</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Are you writing a web application? If so, use JNDI to configure it externally to the application. An overview is available <a href="http://java.sun.com/j2se/1.4.2/docs/guide/jdbc/getstart/datasource.html" rel="nofollow noreferrer">here</a>:</p>
<blockquote>
<p>JNDI provides a uniform way for an
  application to find and access remote
  services over the network. The remote
  service may be any enterprise service,
  including a messaging service or an
  application-specific service, but, of
  course, a JDBC application is
  interested mainly in a database
  service. Once a DataSource object is
  created and registered with a JNDI
  naming service, an application can use
  the JNDI API to access that DataSource
  object, which can then be used to
  connect to the data source it
  represents.</p>
</blockquote>
</div></text><author><a href="/users/4276/tim-howland">Tim Howland</a></author><comments><comment><text><span class="comment-copy">provided link is bad</span></text><author><a class="comment-user" href="/users/1190934/james-oravec" title="6,721 reputation">James Oravec</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>This question shows how to store passwords and other data in an encrypted file: <a href="http://stackoverflow.com/questions/992019/java-256-bit-aes-password-based-encryption">Java 256-bit AES Password-Based Encryption</a></p>
</div></text><author><a href="/users/34088/aaron-digulla">Aaron Digulla</a></author><comments><comment><text><span class="comment-copy">Somewhere in source code still need to decrypts encrypted password to create connection, This considered password is still there.</span></text><author><a class="comment-user" href="/users/1429861/booboo-bear" title="58 reputation">BooBoo Bear</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>MD5 is a hash algorithm, not an encryption algorithm, in short u cant get back wat u hashed, u can only compare.
It should ideally be used when storing the user authentication information and not db username and password.
db username and pwd should be encrypted and kept in a config file, to do the least.</p>
</div></text><author><a href="/users/53270/renegademind">renegadeMind</a></author><comments><comment><text><span class="comment-copy">I've heard of people who generate all possible combinations of strings and store their corresponding MD5 hashes. So when they find somebody's MD5 hash, they just find the hash they stored, and they get the corresponding string.</span></text><author><a class="comment-user" href="/users/453673/nav" title="7,066 reputation">Nav</a></author></comment></comments></answer></answers></post>