<?xml version="1.0" encoding="utf-8"?>
<post><title>encryption - Why is security through obscurity a bad idea? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I recently came across a system where all of the DB connections were managed by routines obscured in various ways, including base 64 encoding, md5sums and various other techniques.</p>
<p>Is it just me, or is this overkill? What are the alternatives?</p>
</div></text><author><a href="/users/50776/casperone">casperOne</a></author><comments><comment><text><span class="comment-copy">/etc/shadow is providing adding security with obscurity. Before /etc/shadow the hashes were in /etc/passwd which any user could read, making them vulnerable to rainbow table attacks. Putting them in /etc/shadow which can only be read by root obscures the hashes from unprivileged users.</span></text><author><a class="comment-user" href="/users/1009847/alice-wonder" title="469 reputation">Alice Wonder</a></author></comment><comment><text><span class="comment-copy">Enforcing access control is usually nut considered "obscurity" (neither is password hashing if it is done correct).</span></text><author><a class="comment-user" href="/users/13189/eckes" title="6,386 reputation">eckes</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Security through obscurity would be burying your money under a tree. The only thing that makes it safe is no one knows it's there. Real security is putting it behind a lock or combination, say in a safe. You can put the safe on the street corner because what makes it secure is that no one can get inside it but <strong>you</strong>.</p>
<p>As mentioned by @ThomasPadron-McCarty below in a comment below: </p>
<blockquote>
<p>If someone discovers the password, you can just change the password, which is easy. If someone finds the location, you need to dig up the money and move it somewhere else, which is much more work. And if you use security by obscurity in a program, you would have to rewrite the program.</p>
</blockquote>
</div></text><author><a href="/users/67/rex-m">Rex M</a></author><comments><comment><text><span class="comment-copy">Excellent analogy</span></text><author><a class="comment-user" href="/users/2405/william-brendel" title="22,538 reputation">William Brendel</a></author></comment><comment><text><span class="comment-copy">The next question would be: What is the difference between keeping the location secret and keeping the password secret?</span></text><author><a class="comment-user" href="/users/40443/albert" title="375 reputation">Albert</a></author></comment><comment><text><span class="comment-copy">@Albert the difference is the order(s) of magnitude between the likelihood of finding the location/obscurity without knowledge (high) and finding the password without knowledge (low).</span></text><author><a class="comment-user" href="/users/67/rex-m" title="105,475 reputation">Rex M</a></author></comment><comment><text><span class="comment-copy">Another answer: If someone discovers the password, you can change the password, which is easy. If someone finds the location, you need to dig up the money and move it somewhere else, which is much more work. And if you use security by obscurity in a program, you would have to re-write the program...</span></text><author><a class="comment-user" href="/users/15727/thomas-padron-mccarthy" title="20,408 reputation">Thomas Padron-McCarthy</a></author></comment><comment><text><span class="comment-copy">Nice answer.  What tree do you bury your money under?</span></text><author><a class="comment-user" href="/users/1551/chris-ballance" title="21,483 reputation">Chris Ballance</a></author></comment><comment><text><span class="comment-copy">Does anyone have a shovel I can borrow?...</span></text><author><a class="comment-user" href="/users/26414/neil-barnwell" title="26,294 reputation">Neil Barnwell</a></author></comment><comment><text><span class="comment-copy">What if I burry my money under a tree, in a safe?</span></text><author><a class="comment-user" href="/users/5861/mathieu-pag%c3%a9" title="4,127 reputation">Mathieu Pagé</a></author></comment><comment><text><span class="comment-copy">nice answer! but to picky, if you put a safe on the street, someone could blow it up or something :)</span></text><author><a class="comment-user" href="/users/35364/hasen" title="65,908 reputation">hasen</a></author></comment><comment><text><span class="comment-copy">@Hasen j, what would happen to the money inside if you blew it up ?</span></text><author><a class="comment-user" href="/users/31671/alex" title="285,218 reputation">alex</a></author></comment><comment><text><span class="comment-copy">@alex The scene at the end of "The Apple Dumpling Gang" comes to mind...</span></text><author><a class="comment-user" href="/users/19179/doug-l" title="2,406 reputation">Doug L.</a></author></comment><comment><text><span class="comment-copy">@alex, it would probably burn (if it was paper money), but that maybe the culprit's intent.</span></text><author><a class="comment-user" href="/users/35364/hasen" title="65,908 reputation">hasen</a></author></comment><comment><text><span class="comment-copy">what is if someone steals that safe from the street? even if he can't break into it, your money is gone anyway ... :D</span></text><author><a class="comment-user" href="/users/92813/chris" title="7,918 reputation">Chris</a></author></comment><comment><text><span class="comment-copy">Bad answer. These are both "real" security. The question is what resource are you requiring.</span></text><author><a class="comment-user" href="/users/87280/good-person" title="1,055 reputation">Good Person</a></author></comment><comment><text><span class="comment-copy">Bury an empty safe nearby as a decoy. You could choose to dig up the money and bury it under another tree while they are digging up the safe or you could sit tight and wait.</span></text><author><a class="comment-user" href="/users/63810/rimian" title="15,934 reputation">Rimian</a></author></comment><comment><text><span class="comment-copy">@Neil Barnwell : I won't borrow you my shovel but I can rent it to you :P</span></text><author><a class="comment-user" href="/users/1796/andrei-r%c3%aenea" title="10,855 reputation">Andrei Rînea</a></author></comment><comment><text><span class="comment-copy">That is how <b>Linux</b> works. I'd say Microsoft counts on the fact Windows is too big.</span></text><author><a class="comment-user" href="/users/819822/imacake" title="712 reputation">imacake</a></author></comment><comment><text><span class="comment-copy">And what if you went back to the safe on the street the other day, and input your security combination, only to find out that the actual safe was gone and this was a decoy look alike just to grab the combination from you and send it to the decoy owner?? Phishing anyone????? :D</span></text><author><a class="comment-user" href="/users/807104/mohd-abdul-mujib" title="3,693 reputation">Mohd Abdul Mujib</a></author></comment><comment><text><span class="comment-copy">Both obscurity and encryption should be used, wisen up.</span></text><author><a class="comment-user" href="/users/3987423/seanyt123" title="326 reputation">seanyt123</a></author></comment><comment><text><span class="comment-copy">@ThomasPadron-McCarty this should be included in the answer. Adding it into the answer.</span></text><author><a class="comment-user" href="/users/1168661/aug" title="4,148 reputation">aug</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Security through obscurity can be said to be bad because it often implies that the obscurity is being used as the principal means of security. Obscurity is fine until it is discovered, but once someone has worked out your particular obscurity, then your system is vulnerable again. Given the persistence of attackers, this equates to no security at all.</p>
<p>Obscurity should never be used as an alternative to proper security techniques.</p>
<p>Obscurity as a means of hiding your source code to prevent copying is another subject. I'm rather split on that topic; I can understand why you might wish to do that, personally I've never been in a situation where it would be wanted.</p>
</div></text><author><a href="/users/15667/xan">xan</a></author><comments><comment><text><span class="comment-copy">+1: the code for encryption and proper key management can be completely exposed.  Read all the code you want, you'll never get the key.  If you pay your folks enough even social engineering won't reveal the keys.</span></text><author><a class="comment-user" href="/users/10661/s-lott" title="276,451 reputation">S.Lott</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Security through obscurity is an interesting topic.  It is (rightly) maligned as a substitute for effective security.  A typical principle in cryptography is that a message is unknown but the contents are not.  Algorithms for encyrption are typically widely published, analyzed by mathematicians and, after a time, some confidence is built up in their effectivness but there is never a guarantee that they're effective.</p>
<p>Some people hide their cryptographic algorithms but this is considered a dangerous practice because then such algorithms haven't gone through the same scrutiny.  Only organisations like the NSA, which has a significant budget and staff of mathematicians, can get away with this kind of approach.</p>
<p>One of the more interesting developments in recent years has been the risk of <a href="http://en.wikipedia.org/wiki/Steganography" rel="noreferrer">steganography</a>, which is the practice is hiding message in images, sound files or some other medium.  The biggest problem in steganalysis is identifying whether or not a message is there or not, making this security through obscurity.</p>
<p>Last year I came across a story that <a href="http://it.slashdot.org/article.pl?sid=08/11/04/1354207" rel="noreferrer">Researchers Calculate Capacity of a Steganographic Channel</a> but the really interesting thing about this is:</p>
<blockquote>
<p>Studying a stego-channel in this way
  leads to some counter-intuitive
  results: for example, in certain
  circumstances, doubling the number of
  algorithms looking for hidden data can
  increase the capacity of the
  steganographic channel.</p>
</blockquote>
<p>In other words, the more algorithms you use to identify messages the less effective it becomes, which goes against the normal criticism of security through obscurity.</p>
<p>Interesting stuff.</p>
</div></text><author><a href="/users/18393/cletus">cletus</a></author><comments><comment><text><span class="comment-copy">Security through obscurity - steganography - is useful if you're a criminal or terrorist organization living in the shadows. But if you're not living in the shadows, proper security techniques are your best bet.</span></text><author><a class="comment-user" href="/users/12349/yfeldblum" title="54,024 reputation">yfeldblum</a></author></comment><comment><text><span class="comment-copy">"Criminal or terrorist" gets a bit philosophical. Do you include Huguenots, samizdat publishers in the USSR, and Iranian homosexuals?</span></text><author><a class="comment-user" href="/users/9634/brent-longborough" title="6,171 reputation">Brent.Longborough</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The main reason it is a bad idea is that it does not FIX the underlying problems, just attempts to hide them.  Sooner or later, the problems will be discovered.</p>
<p>Also, extra encryption will incur additional overhead.</p>
<p>Finally excessive obscurity (like using checksums) makes maintenance a nightmare.</p>
<p>Better security alternatives is to eliminate potential weaknesses in your code such as enforced inputs to prevent injection attacks.</p>
</div></text><author><a href="/users/38264/z">z  -</a></author><comments><comment><text><span class="comment-copy">It's code integrity checking techniques, yes, but it was used to encrypt some aspects of the DB connections.</span></text><author><a class="comment-user owner" href="/users/6681/jrgns" title="10,882 reputation">Jrgns</a></author></comment><comment><text><span class="comment-copy">depending on how often your DB will be hit, adding in a few extra steps of encrypting/decrpyting could incur a huge overhead.</span></text><author><a class="comment-user" href="/users/38264/z" title="6,189 reputation">z  -</a></author></comment><comment><text><span class="comment-copy">however, if its for extra sensitive information, those kind of extra security measures could be understandable.  You definitely don't want to broadcast SSNs in the clear on any network.</span></text><author><a class="comment-user" href="/users/38264/z" title="6,189 reputation">z  -</a></author></comment><comment><text><span class="comment-copy">but then... there is a difference between obscurity and encryption so what you are really doing then is encryption?</span></text><author><a class="comment-user" href="/users/38264/z" title="6,189 reputation">z  -</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>One factor the ability to recover from a security breach.  If someone discovers your password, just reset it.  But if someone uncovers your obscure scheme, you're hosed.</p>
</div></text><author><a href="/users/25188/john-d-cook">John D. Cook</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Using obscurity as all these people agree is not security, its buying yourself time.  That said having a decent security system implemented then adding an extra layer of obscurity is still useful.  Lets say tomorrow someone finds an unbeatable crack/hole in the ssh service that can't be patched immediately.  </p>
<p>As a rule I've implemented in house... all public facing servers expose only the ports needed ( http/https ) and nothing more.  One public facing server then will have ssh exposed to the internet at some obscure high numbered port and a port scanning trigger setup to block any IP's that try to find it.</p>
<p>Obscurity has its place in the world of security, but not as the first and last line of defense.  In the example above, I don't get any script/bot attacks on ssh because they don't want to spend the time searching for a non-standard ssh service port and if they do, their unlikely to find it before another layer of security steps in and cuts them off.</p>
</div></text><author><a href="/users/9908/david">David</a></author><comments><comment><text><span class="comment-copy">A distributed scan could break through your obscurity. I could scan for your SSH port with only one computer if I scan through TOR.</span></text><author><a class="comment-user" href="/users/429201/lunatic-experimentalist" title="667 reputation">Lunatic Experimentalist</a></author></comment><comment><text><span class="comment-copy">And he can easily blacklist the TOR network. If you buy proxies, they're probably going to be on the same subnet, which he could throttle. These kinds of barriers are not pointless.</span></text><author><a class="comment-user" href="/users/119301/eric-muyser" title="1,998 reputation">Eric Muyser</a></author></comment><comment><text><span class="comment-copy">@EricMuyser For a client with a USA only market, I ended up whitelisting only ARIN.  That was a fairly effective strategy for everything but 0day robots.</span></text><author><a class="comment-user" href="/users/9908/david" title="7,885 reputation">David</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Security is about letting people in or keeping them out depending on what they know, who they are, or what they have.  Currently, biometrics aren't good at finding who you are, and there's always going to be problems with it (fingerprint readers for somebody who's been in a bad accident, forged fingerprints, etc.).  So, actually, much of security is about obfuscating something.</p>
<p>Good security is about keeping the stuff you have to keep secret to a minimum.  If you've got a properly encrypted AES channel, you can let the bad guys see everything about it except the password, and you're safe.  This means you have a much smaller area open to attack, and can concentrate on securing the passwords.  (Not that that's trivial.)</p>
<p>In order to do that, you have to have confidence in everything but the password.  This normally means using industry-standard crypto that numerous experts have looked at.  Anybody can create a cipher they can't break, but not everybody can make a cipher Bruce Schneier can't break.  Since there's a thorough lack of theoretical foundations for cipher security, the security of a cipher is determined by having a lot of very smart and knowledgeable people try to come up with attacks, even if they're not practical (attacks on ciphers always get better, never worse).  This means the crypto algorithm needs to be widely known.  I have very strong confidence in the Advanced Encryption Standard, and almost none in a proprietary algorithm Joe wrote and obfuscated.</p>
<p>However, there's been problems with implementations of crypto algorithms.  It's easy to inadvertantly leave holes whereby the key can be found, or other mischief done.  It happened with an alternate signature field for PGP, and weaknesses with SSL implemented on Debian Linux.  It's even happened to OpenBSD, which is probably the most secure operating system readily available (I think it's up to two exploits in ten years).  Therefore, these should be done by a reputable company, and I'd feel better if the implementations were open source.  (Closed source won't stop a determined attacker, but it'll make it harder for random good guys to find holes to be closed.)</p>
<p>Therefore, if I wanted security, I'd try to have my system as reliable as possible, which means as open as possible except for the password.</p>
<p>Layering security by obscurity on top of an already secure system might help some, but if the system's secure it won't be necessary, and if it's insecure the best thing is to make it secure.  Think of obscurity like the less reputable forms of "alternative medicine" - it is very unlikely to help much, and while it's unlikely to hurt much by itself it may make the patient less likely to see a competent doctor or computer security specialist, whichever.</p>
<p>Lastly, I'd like to make a completely unsolicited and disinterested plug for <a href="http://www.schneier.com/blog/" rel="nofollow noreferrer">Bruce Schneier's blog</a>, as nothing more than an interested reader.  I've learned a lot about security from it.</p>
</div></text><author><a href="/users/14148/david-thornley">David Thornley</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>One of the best ways of evaluating, testing or improving a security product is to have it banged on by a large, clever peer group.</p>
<p>Products that rely for their security on being a "black box" can't have the benefit of this kind of test. Of course, being a "black box" always invites the suspicion (often justified) that they wouldn't stand up to that kind of scrutiny anyway. </p>
</div></text><author><a href="/users/9634/brent-longborough">Brent.Longborough</a></author><comments><comment><text><span class="comment-copy">"One of the best ways of evaluating, testing or improving a security product is to have it banged on by a large, clever peer group."  - agreed.  So, clearly, you should post your DB details here, along with all relevant routines.  Let us "play" on your DB, and we'll tell you how secure it is. :)</span></text><author><a class="comment-user" href="/users/34824/abelenky" title="40,942 reputation">abelenky</a></author></comment><comment><text><span class="comment-copy">@abelenky: If I were the inventor/owner of a software that was a "Totally Secure DB System" I'd be happy for it to be banged on, and as a prospective user I'd expect it to be secure even if all my schemas were published.</span></text><author><a class="comment-user" href="/users/9634/brent-longborough" title="6,171 reputation">Brent.Longborough</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>All of the forms of security available are actually forms of security through obscurity.  Each method increases in complexity and provides better security but they all rely on some algorithm and one or more keys to restore the encrypted data.  "Security through obscurity" as most call it is when someone chooses one of the simplest and easiest to crack algorithms.  </p>
<p>Algorithms such as character shifting are easy to implement and easy to crack, that's why they are a bad idea.  It's probably better than nothing, but it will, at most, only stop a casual glance at the data from being easily read.</p>
<p>There are excellent resources on the Internet you can use to educate yourself about all of the available encryption methods and their strengths and weaknesses.</p>
</div></text><author><a href="/users/10887/dmking">DMKing</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Really guys? You honestly are going to sit here and tell me and the world that obscurity is a bad idea? It's not a bad idea and it SHOULD NOT BE your total plan for protection against unauthorized access. A great security plan should call for obscurity, strong password, encryption, and closing back doors as they are discovered.</p>
</div></text><author><a href="/users/1226599/jeff">Jeff</a></author><comments><comment><text><span class="comment-copy">While I agree that some security does, indeed, depend on obscurity, this really isn't an answer. This is a valid point, but it doesn't answer the question.</span></text><author><a class="comment-user" href="/users/60682/david" title="55,972 reputation">David</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>It is <a href="http://en.wikipedia.org/wiki/Security_through_obscurity" rel="nofollow noreferrer">almost never</a> a good idea. It is the same to say, is it a good idea to drive without seatbelt? Of course you can find some cases where it fits, but the anwser due to experience seems obvious.</p>
</div></text><author><a href="/users/34880/fernando-migu%c3%a9lez">Fernando Miguélez</a></author><comments><comment><text><span class="comment-copy">It's more like driving with a cardboard seatbelt.  It looks secure at a glance, but it doesn't offer any real protection.</span></text><author><a class="comment-user" href="/users/24181/greg" title="214,936 reputation">Greg</a></author></comment><comment><text><span class="comment-copy">Cardboard seatbelt covered with shards of glass. Even if there isn't an accident, you will still be in pain.</span></text><author><a class="comment-user" href="/users/1358/ebgreen" title="20,568 reputation">EBGreen</a></author></comment><comment><text><span class="comment-copy">@EBGreen exactly!</span></text><author><a class="comment-user owner" href="/users/6681/jrgns" title="10,882 reputation">Jrgns</a></author></comment><comment><text><span class="comment-copy">Not the right metaphor.  More like driving at insane speeds without a seatbelt down hard-to-find back roads hoping no one else discovered the back roads.</span></text><author><a class="comment-user" href="/users/10661/s-lott" title="276,451 reputation">S.Lott</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I argued in one case that password protection is really security through obscurity. The only security I can think of that wouldn't be STO is some sort of biometric security. </p>
<p>Besides that bit of semantics and nit picking, STO (Security through obscurity) is obviously bad in any case where you need real security.  However, there might be cases where it doesn't matter.  I'll often XOR pad a text file i don't want anyone reading.  But I don't really care if they do, i'd just prefer that it not be read.  In that case, it doesn't matter, and an XOR pad is a perfect example of an easy to find out STO.  </p>
</div></text><author><a href="/users/18893/stephenbayer">stephenbayer</a></author><comments><comment><text><span class="comment-copy">Yes, I have been wondering what the difference is myself.</span></text><author><a class="comment-user" href="/users/63810/rimian" title="15,934 reputation">Rimian</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Weak encryption will only deter the least motivated hackers, so it isn't valueless, it just isn't very valuable, especially when strong encryption, like AES, is available.</p>
<p>Security through obscurity is based on the assumption that you are smart and your users are stupid.  If that assumption is based on arrogance, and not empirical data, then your users- and hackers-- will determine how to invoke the hidden method, bring up the unlinked page, decompile and extract the plain text password from the .dll, etc.</p>
<p>That said, providing comprehensive meta-data to users is not a good idea, and obscuring is perfectly valid technique as long as you back it up with encryption, authorization, authentication and all those other principles of security.</p>
</div></text><author><a href="/users/33264/matthewmartin">MatthewMartin</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>If the OS is Windows, look at using the Data Protection API (DPAPI).  It is not security by obscurity, and is a good way to store login credentials for an unattended process.  As pretty much everyone is saying here, security through obscurity doesn't give you much protection.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/ms995355.aspx" rel="nofollow noreferrer">http://msdn.microsoft.com/en-us/library/ms995355.aspx</a></p>
<p><a href="http://msdn.microsoft.com/en-us/library/ms998280.aspx" rel="nofollow noreferrer">http://msdn.microsoft.com/en-us/library/ms998280.aspx</a></p>
</div></text><author><a href="/users/30000/russellh">RussellH</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>The one point I have to add which hasn't been touched on yet is the incredible ability of the internet to smash security through obscurity.</p>
<p>As has been shown time and time again, if your only defense is that "nobody knows the back door/bug/exploit is there", then all it takes is for one person to stumble across it and, within minutes, hundreds of people will know.  The next day, pretty much everyone who wants to know, will.  Ouch.</p>
</div></text><author><a href="/users/18914/dave-sherohman">Dave Sherohman</a></author><comments/></answer></answers></post>