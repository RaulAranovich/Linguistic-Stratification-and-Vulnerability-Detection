<?xml version="1.0" encoding="utf-8"?>
<post><title>javascript - What are "top level JSON arrays" and why are they a security risk? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>In the video below, at time marker 21:40, the Microsoft PDC presenter says it's important that all JSON be wrapped so it's not a top level array:</p>
<p><a href="https://channel9.msdn.com/Events/PDC/PDC09/FT12" rel="nofollow noreferrer">https://channel9.msdn.com/Events/PDC/PDC09/FT12</a></p>
<p>What is the risk of an unwrapped top level array?</p>
<p>How should I check and see if I'm vulnerable?  I purchase many components from 3rd parties and have external vendors who develop my code.  </p>
</div></text><author><a href="/users/328397/lamontecristo">LamonteCristo</a></author><comments/></question><answers><answer><text><div class="post-text" itemprop="text">
<p>This is because a few years ago Jeremiah Grossman found a very <a href="http://jeremiahgrossman.blogspot.com/2006/01/advanced-web-attack-techniques-using.html" rel="nofollow noreferrer">interesting vulnerability that affects gmail</a>.  Some people have addressed this vulnerabilty by using an <a href="http://stackoverflow.com/questions/3146798/why-do-people-put-code-like-throw-1-dont-be-evil-and-for-in-front-of">unparseable cruft</a> (Mr bobince's technical description on this page is fantastic.)</p>
<p>The reason why Microsoft is talking about this is because they haven't patched their browser (yet). (<strong>Edit:</strong> Recent versions of Edge and IE 10/11 have addressed this issue.)  Mozilla considers this to be a vulnerability in the json specification and therefore they patched it in <a href="http://ejohn.org/blog/re-securing-json/" rel="nofollow noreferrer">Firefox 3</a>.  For the record I completely agree with Mozilla, and its unfortunate but each web app developer is going to have to defend them selves against this very obscure vulnerability. </p>
</div></text><author><a href="/users/183528/rook">rook</a></author><comments><comment><text><span class="comment-copy">Is sending sensitive information in a JSON array still a security risk in 2017?</span></text><author><a class="comment-user" href="/users/2668666/jrahhali" title="1,389 reputation">jrahhali</a></author></comment><comment><text><span class="comment-copy">@jrahhali that question is worthy of its own post, maybe security.stackexchange.com would be a good place for it.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I think it's because the Array() constructor can be redefined. However, that problem isn't really unique to arrays.</p>
<p>I think the attack (or one possible way) is something like this:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">function</span><span class="pln"> </span><span class="typ">Array</span><span class="pun">(</span><span class="pln">n</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> </span><span class="kwd">self</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">;</span><span class="pln">
  setTimeout</span><span class="pun">(</span><span class="kwd">function</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    sendToEvilHackers</span><span class="pun">(</span><span class="kwd">self</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">},</span><span class="pln"> </span><span class="lit">10</span><span class="pun">);</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>The browser (or some browsers) use that constructor for <code>[n, n, n]</code> array notation. A CSRF attack can therefore exploit your open session with your bank, hit a known JSON URL with a <code>&lt;script&gt;</code> tag to fetch it, and then <em>poof</em> you are owned.</p>
</div></text><author><a href="/users/182668/pointy">Pointy</a></author><comments><comment><text><span class="comment-copy">I don't get this - moving the array in the JSON down into a property wouldn't stop this type of attack.  Returning <code>{"d":[1,2,3]}</code> would be just as susceptible as returning <code>[1,2,3]</code>.</span></text><author><a class="comment-user" href="/users/8815/peter-bailey" title="85,667 reputation">Peter Bailey</a></author></comment><comment><text><span class="comment-copy">I agree - that's what I meant when I said the problem isn't just about Arrays.</span></text><author><a class="comment-user" href="/users/182668/pointy" title="271,802 reputation">Pointy</a></author></comment><comment><text><span class="comment-copy">Not true. A <code>{</code> at the beginning of a line in JavaScript is interpreted as a code block, not an object literal. Thus, your <code>{"d":[1,2,3]}</code> is not a valid script and would not be executed by the browser. Just try it :)</span></text><author><a class="comment-user" href="/users/179805/fletom" title="1,359 reputation">fletom</a></author></comment><comment><text><span class="comment-copy">Yes I suppose you're right.</span></text><author><a class="comment-user" href="/users/182668/pointy" title="271,802 reputation">Pointy</a></author></comment><comment><text><span class="comment-copy">follow up: <a href="http://haacked.com/archive/2009/06/25/json-hijacking.aspx" rel="nofollow noreferrer">haacked.com/archive/2009/06/25/json-hijacking.aspx</a> To me it's a better explanation of the threat than the 2006 article from Grossman</span></text><author><a class="comment-user" href="/users/1291428/sebas" title="14,541 reputation">Sebas</a></author></comment></comments></answer></answers></post>