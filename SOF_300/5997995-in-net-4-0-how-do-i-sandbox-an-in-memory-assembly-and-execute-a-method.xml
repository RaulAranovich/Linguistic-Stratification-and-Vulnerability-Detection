<?xml version="1.0" encoding="utf-8"?>
<post><title>c# - In .NET 4.0, how do I 'sandbox' an in-memory assembly and execute a method? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>Here is the reason why this question was being asked: <a href="http://www.devplusplus.com/Tests/CSharp/Hello_World">www.devplusplus.com/Tests/CSharp/Hello_World</a>.</p>
<p>While similar questions were asked before, the many answers online have several issues:</p>
<ol>
<li>This must be done ".Net 4.0" style, not legacy mode.</li>
<li>The assembly is in-memory and will only be in memory, it <strong>cannot</strong> be written to the file system.</li>
<li>I would like to limit all access to the file-system, network, etc. </li>
</ol>
<p>Something like this:</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="pln">    </span><span class="kwd">var</span><span class="pln"> evidence </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Evidence</span><span class="pun">();</span><span class="pln">
    evidence</span><span class="pun">.</span><span class="typ">AddHostEvidence</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Zone</span><span class="pun">(</span><span class="typ">SecurityZone</span><span class="pun">.</span><span class="typ">Internet</span><span class="pun">));</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> permissionSet </span><span class="pun">=</span><span class="pln"> </span><span class="typ">SecurityManager</span><span class="pun">.</span><span class="typ">GetStandardSandbox</span><span class="pun">(</span><span class="pln">evidence</span><span class="pun">);</span></code></pre>
<p>So far, I cannot find a way to create an AppDomain and load an assembly <strong>THAT IS NOT ON THE FILE SYSTEM</strong>, but rather in RAM.</p>
<p>Again, the reasons why the other solutions didn't work are identified above: 1. Many were for pre-4.0, and 2. Many relied on the ".Load" method pointing to the file system.</p>
<p>Answer 2: I have an assembly reference due to it being generated by the <code>CSharpCodeProvider</code> class, so if you know a way to turn <em>that</em> into a byte array, that would be perfect!</p>
<h2>Sample Code to Show The Security Flaw</h2>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="kwd">var</span><span class="pln"> provider </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">CSharpCodeProvider</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Dictionary</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln">
    </span><span class="pun">{</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">"CompilerVersion"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"v4.0"</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="pun">});</span><span class="pln">

</span><span class="kwd">var</span><span class="pln"> compilerparams </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">CompilerParameters</span><span class="pln">
    </span><span class="pun">{</span><span class="pln"> </span><span class="typ">GenerateExecutable</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">,</span><span class="pln"> </span><span class="typ">GenerateInMemory</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">,</span><span class="pln"> </span><span class="pun">};</span><span class="pln">

</span><span class="kwd">var</span><span class="pln"> compilerResults </span><span class="pun">=</span><span class="pln"> provider</span><span class="pun">.</span><span class="typ">CompileAssemblyFromSource</span><span class="pun">(</span><span class="pln">compilerparams</span><span class="pun">,</span><span class="pln">
    string_Of_Code_From_A_User</span><span class="pun">);</span><span class="pln">

</span><span class="kwd">var</span><span class="pln"> instanceOfSomeClass </span><span class="pun">=</span><span class="pln"> compilerResults</span><span class="pun">.</span><span class="typ">CompiledAssembly</span><span class="pln">
    </span><span class="pun">.</span><span class="typ">CreateInstance</span><span class="pun">(</span><span class="pln">className</span><span class="pun">);</span><span class="pln">

</span><span class="com">// The 'DoSomething' method can write to the file system and I don't like that!</span><span class="pln">
instanceOfSomeClass</span><span class="pun">.</span><span class="typ">GetType</span><span class="pun">().</span><span class="typ">GetMethod</span><span class="pun">(</span><span class="str">"DoSomething"</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">.</span><span class="typ">Invoke</span><span class="pun">(</span><span class="pln">instanceOfSomeClass</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">);</span></code></pre>
<h2>So why can't I just save the assembly to a file first?</h2>
<p>For two reasons:</p>
<ol>
<li>This code is on a shared web server with limited permissions to the file-system itself.</li>
<li>This code may need to be run potentially thousands of times, and I don't want 1,000 dlls, even temporarily.</li>
</ol>
</div></text><author><a href="/users/815724/peter-o">Peter O.</a></author><comments><comment><text><span class="comment-copy">Can you marshal a byte array to that other appdomain and load the assembly from that? Also, note that if you say "other solutions don't work", please elaborate why they don't. It is sort of implied that other solutions require the assembly to be written to disk, are you sure <i>all</i> other solutions have that requirement?</span></text><author><a class="comment-user" href="/users/267/lasse-v-karlsen" title="238,252 reputation">Lasse V. Karlsen</a></author></comment><comment><text><span class="comment-copy">As in you want to use Load with a byte array? Or do you mean you are creating an in-memory one using the emit API?</span></text><author><a class="comment-user" href="/users/191953/tyranid" title="10,451 reputation">tyranid</a></author></comment><comment><text><span class="comment-copy">@tyranid That is a very good question, I guess I sort of assumed that the assembly was being loaded from something that could be translated to a byte array. If it is emitted dynamically, the code that emits the assembly might need to run in that other appdomain.</span></text><author><a class="comment-user" href="/users/267/lasse-v-karlsen" title="238,252 reputation">Lasse V. Karlsen</a></author></comment><comment><text><span class="comment-copy">@Lasse and @tyranid - The answers to your very good questions have been added to the original question.</span></text><author><a class="comment-user owner" href="/users/11917/timothy-khouri" title="19,379 reputation">Timothy Khouri</a></author></comment><comment><text><span class="comment-copy">I think you need to run the code involving the <code>CSharpCodeProvider</code> in that other appdomain. Would that solve your problem? (though it might introduce a whole slew of new ones)</span></text><author><a class="comment-user" href="/users/267/lasse-v-karlsen" title="238,252 reputation">Lasse V. Karlsen</a></author></comment><comment><text><span class="comment-copy">Can you post the snippet that is generating the assembly as well?</span></text><author><a class="comment-user" href="/users/531098/can-gencer" title="5,892 reputation">Can Gencer</a></author></comment><comment><text><span class="comment-copy">This sounds like a possible security issue to me (essentially executing data/writeable memory). Isn't there any other way to do it? What's your intention?</span></text><author><a class="comment-user" href="/users/409744/mario" title="24,314 reputation">Mario</a></author></comment><comment><text><span class="comment-copy">I worked on this problem previously and I could not find a way to get at the COFF byte[] without writing the assembly to disk.  If you have access issues, you might be able to use isolated storage.  Alternately, there might be some way to set up a virtual file path that writes to memory, though I'm not sure.</span></text><author><a class="comment-user" href="/users/206394/dan-bryant" title="22,809 reputation">Dan Bryant</a></author></comment><comment><text><span class="comment-copy">@Dan, The COFF byte[] is exactly what I'm looking for... perhaps I should reflect out the "Save" method and write my own?</span></text><author><a class="comment-user owner" href="/users/11917/timothy-khouri" title="19,379 reputation">Timothy Khouri</a></author></comment><comment><text><span class="comment-copy">Couldn't you save the assembly to disk, and then load it into its own appdomain with reduced permissions? Saving the assembly to disk doesn't introduce a security problem, loading it back in unchecked does.</span></text><author><a class="comment-user" href="/users/267/lasse-v-karlsen" title="238,252 reputation">Lasse V. Karlsen</a></author></comment><comment><text><span class="comment-copy">@Timothy, why don't you create the assembly in a temp location, and execute it in a sandbox? What is the reason you want it specifically to be in RAM?</span></text><author><a class="comment-user" href="/users/531098/can-gencer" title="5,892 reputation">Can Gencer</a></author></comment><comment><text><span class="comment-copy">@Lasse and @Can - answered in original question.</span></text><author><a class="comment-user owner" href="/users/11917/timothy-khouri" title="19,379 reputation">Timothy Khouri</a></author></comment><comment><text><span class="comment-copy">I think you'll have to wait for C# 5.0 to be able to compile in-memory. Right now it just executes <code>csc.exe</code> which means the source and binary both end up on the hard drive.</span></text><author><a class="comment-user" href="/users/310574/gabe" title="63,695 reputation">Gabe</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>OK, first things first: there's no actual way to use the CSharpCodeProvider to do dynamic compilation of C# source entirely in memory. There are methods that seem to support that functionality, but since the C# compiler is a native executable that cannot run in-process, the source string is saved to a temporary file, the compiler is invoked on that file, and then the resulting assembly is saved to disk and then loaded for you using Assembly.Load.</p>
<p>Secondly, as you've discovered, you should be able to use the Compile method from within the AppDomain to load the assembly and give it the desired permissions. I ran into this same unusual behavior, and after a lot of digging found that it was a bug in the framework. I filed an issue report for it on <a href="http://connect.microsoft.com/VisualStudio/feedback/details/535189/csharpcodeprovider-uses-obsolete-assembly-load-method-which-takes-permission-information-from-assembly-instead-of-appdomain" rel="noreferrer">MS Connect</a>.</p>
<p>Since the framework is already writing to the filesystem anyway, the workaround is to have the assembly written to a temporary file and then loaded as needed. When you load it however, you'll need to temporarily assert permissions in the AppDomain, since you've disallowed access to the file system. Here's an example snippet of that:</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="kwd">new</span><span class="pln"> </span><span class="typ">FileIOPermission</span><span class="pun">(</span><span class="typ">FileIOPermissionAccess</span><span class="pun">.</span><span class="typ">Read</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> </span><span class="typ">FileIOPermissionAccess</span><span class="pun">.</span><span class="typ">PathDiscovery</span><span class="pun">,</span><span class="pln"> assemblyPath</span><span class="pun">).</span><span class="typ">Assert</span><span class="pun">();</span><span class="pln">
</span><span class="kwd">var</span><span class="pln"> assembly </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Assembly</span><span class="pun">.</span><span class="typ">LoadFile</span><span class="pun">(</span><span class="pln">assemblyPath</span><span class="pun">);</span><span class="pln">
</span><span class="typ">CodeAccessPermission</span><span class="pun">.</span><span class="typ">RevertAssert</span><span class="pun">();</span></code></pre>
<p>From there you can use the assembly and reflection to invoke your method. Note that this method lets you hoist the compilation process outside of the sandboxed AppDomain, which is a plus in my opinion.</p>
<p>For reference, here is my Sandbox class created to facilitate the launching of script assemblies in a nice clean separate AppDomain that has limited permissions and can be easily unloaded when necessary:</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="kwd">class</span><span class="pln"> </span><span class="typ">Sandbox</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">MarshalByRefObject</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">const</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">BaseDirectory</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Untrusted"</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">const</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">DomainName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Sandbox"</span><span class="pun">;</span><span class="pln">

    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Sandbox</span><span class="pun">()</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">Sandbox</span><span class="pln"> </span><span class="typ">Create</span><span class="pun">()</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> setup </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">AppDomainSetup</span><span class="pun">()</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">ApplicationBase</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Path</span><span class="pun">.</span><span class="typ">Combine</span><span class="pun">(</span><span class="typ">AppDomain</span><span class="pun">.</span><span class="typ">CurrentDomain</span><span class="pun">.</span><span class="typ">BaseDirectory</span><span class="pun">,</span><span class="pln"> </span><span class="typ">BaseDirectory</span><span class="pun">),</span><span class="pln">
            </span><span class="typ">ApplicationName</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DomainName</span><span class="pun">,</span><span class="pln">
            </span><span class="typ">DisallowBindingRedirects</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">,</span><span class="pln">
            </span><span class="typ">DisallowCodeDownload</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">,</span><span class="pln">
            </span><span class="typ">DisallowPublisherPolicy</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pln">
        </span><span class="pun">};</span><span class="pln">

        </span><span class="kwd">var</span><span class="pln"> permissions </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">PermissionSet</span><span class="pun">(</span><span class="typ">PermissionState</span><span class="pun">.</span><span class="typ">None</span><span class="pun">);</span><span class="pln">
        permissions</span><span class="pun">.</span><span class="typ">AddPermission</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ReflectionPermission</span><span class="pun">(</span><span class="typ">ReflectionPermissionFlag</span><span class="pun">.</span><span class="typ">RestrictedMemberAccess</span><span class="pun">));</span><span class="pln">
        permissions</span><span class="pun">.</span><span class="typ">AddPermission</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SecurityPermission</span><span class="pun">(</span><span class="typ">SecurityPermissionFlag</span><span class="pun">.</span><span class="typ">Execution</span><span class="pun">));</span><span class="pln">

        </span><span class="kwd">var</span><span class="pln"> domain </span><span class="pun">=</span><span class="pln"> </span><span class="typ">AppDomain</span><span class="pun">.</span><span class="typ">CreateDomain</span><span class="pun">(</span><span class="typ">DomainName</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">,</span><span class="pln"> setup</span><span class="pun">,</span><span class="pln"> permissions</span><span class="pun">,</span><span class="pln">
            </span><span class="kwd">typeof</span><span class="pun">(</span><span class="typ">Sandbox</span><span class="pun">).</span><span class="typ">Assembly</span><span class="pun">.</span><span class="typ">Evidence</span><span class="pun">.</span><span class="typ">GetHostEvidence</span><span class="pun">&lt;</span><span class="typ">StrongName</span><span class="pun">&gt;());</span><span class="pln">

        </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Sandbox</span><span class="pun">)</span><span class="typ">Activator</span><span class="pun">.</span><span class="typ">CreateInstanceFrom</span><span class="pun">(</span><span class="pln">domain</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">typeof</span><span class="pun">(</span><span class="typ">Sandbox</span><span class="pun">).</span><span class="typ">Assembly</span><span class="pun">.</span><span class="typ">ManifestModule</span><span class="pun">.</span><span class="typ">FullyQualifiedName</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">typeof</span><span class="pun">(</span><span class="typ">Sandbox</span><span class="pun">).</span><span class="typ">FullName</span><span class="pun">).</span><span class="typ">Unwrap</span><span class="pun">();</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">Execute</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> assemblyPath</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> scriptType</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> method</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">params</span><span class="pln"> </span><span class="kwd">object</span><span class="pun">[]</span><span class="pln"> parameters</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">FileIOPermission</span><span class="pun">(</span><span class="typ">FileIOPermissionAccess</span><span class="pun">.</span><span class="typ">Read</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> </span><span class="typ">FileIOPermissionAccess</span><span class="pun">.</span><span class="typ">PathDiscovery</span><span class="pun">,</span><span class="pln"> assemblyPath</span><span class="pun">).</span><span class="typ">Assert</span><span class="pun">();</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> assembly </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Assembly</span><span class="pun">.</span><span class="typ">LoadFile</span><span class="pun">(</span><span class="pln">assemblyPath</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">CodeAccessPermission</span><span class="pun">.</span><span class="typ">RevertAssert</span><span class="pun">();</span><span class="pln">

        </span><span class="typ">Type</span><span class="pln"> type </span><span class="pun">=</span><span class="pln"> assembly</span><span class="pun">.</span><span class="typ">GetType</span><span class="pun">(</span><span class="pln">scriptType</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">type </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span><span class="pln">

        </span><span class="kwd">var</span><span class="pln"> instance </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Activator</span><span class="pun">.</span><span class="typ">CreateInstance</span><span class="pun">(</span><span class="pln">type</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">.</span><span class="typ">Format</span><span class="pun">(</span><span class="str">"{0}"</span><span class="pun">,</span><span class="pln"> type</span><span class="pun">.</span><span class="typ">GetMethod</span><span class="pun">(</span><span class="pln">method</span><span class="pun">).</span><span class="typ">Invoke</span><span class="pun">(</span><span class="pln">instance</span><span class="pun">,</span><span class="pln"> parameters</span><span class="pun">));</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>Quick note: if you use this method to supply security evidence for the new AppDomain, you need to sign your assembly to give it a strong name.</p>
<p>Note that this works fine when run in process, but if you really want a bullet-proof script environment, you need to go one step further and isolate the script in a separate process to ensure that scripts that do malicious (or just stupid) things like stack overflows, fork bombs, and out of memory situations don't bring down the whole application process. I can give you more information on doing that if you need it.</p>
</div></text><author><a href="/users/282336/mikep">MikeP</a></author><comments><comment><text><span class="comment-copy">OK, I'm still a little confused... if I have access to assert file system permissions, doesn't the instance class that I'm calling have the same rights?</span></text><author><a class="comment-user owner" href="/users/11917/timothy-khouri" title="19,379 reputation">Timothy Khouri</a></author></comment><comment><text><span class="comment-copy">No. You're calling Execute() from within your primary assembly, which obviously has permission to run whatever it wants. The script assembly that you loaded has the reduced permissions, so it won't be able to assert them itself. It's easy to try it for yourself and see.</span></text><author><a class="comment-user" href="/users/282336/mikep" title="6,190 reputation">MikeP</a></author></comment><comment><text><span class="comment-copy">I get error "A null StrongName was found in the full trust assembly list" on the line "var domain = AppDomain.CreateDomain..."</span></text><author><a class="comment-user owner" href="/users/11917/timothy-khouri" title="19,379 reputation">Timothy Khouri</a></author></comment><comment><text><span class="comment-copy">OK, I had to sign my assembly and make the constructor public... after that it worked :)</span></text><author><a class="comment-user owner" href="/users/11917/timothy-khouri" title="19,379 reputation">Timothy Khouri</a></author></comment><comment><text><span class="comment-copy">+1 Great answer.</span></text><author><a class="comment-user" href="/users/492405/vcsjones" title="85,811 reputation">vcsjones</a></author></comment><comment><text><span class="comment-copy">@Timothy Khouri - Yeah, I should have made it clear that you need to sign the assembly in order to get a strong name as evidence. I edited the constructor to be public; I pulled this out of a project so I had to edit some things on the fly.</span></text><author><a class="comment-user" href="/users/282336/mikep" title="6,190 reputation">MikeP</a></author></comment><comment><text><span class="comment-copy">@MikeP  - The sandbox in my case is a console application. How do I sign it? I am getting the error "A null strongname.."</span></text><author><a class="comment-user" href="/users/102533/nick" title="3,426 reputation">Nick</a></author></comment><comment><text><span class="comment-copy">+1, great answer!</span></text><author><a class="comment-user" href="/users/832323/afrieze" title="484 reputation">AFrieze</a></author></comment></comments></answer></answers></post>