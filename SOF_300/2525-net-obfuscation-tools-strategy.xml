<?xml version="1.0" encoding="utf-8"?>
<post><title>security - .NET obfuscation tools/strategy - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>My product has several components: ASP.NET, Windows Forms App and Windows Service. 95% or so of the code is written in VB.NET.</p>
<p>For Intellectual Property reasons, I need to obfuscate the code, and until now I have been using a version of dotfuscator which is now over 5 years old. I'm thinking it is time to move to a new generation tool. What I'm looking for is a list of requirements which I should consider when searching for a new obfuscator.</p>
<p>What I know I should look for so far:</p>
<ul>
<li><strong><em>Serialization/De-serialization</em></strong>. In my current solution, I simply tell the tool <strong>not</strong> to obfuscate any class data members because the pain of not being able to load data which was previously serialized is simply too big.</li>
<li><strong><em>Integration with Build Process</em></strong></li>
<li><strong><em>Working with ASP.NET</em></strong>. In the past, I have found this problematic due to changing .dll names (you often have one per page) - which not all tools handle well.</li>
</ul>
</div></text><author><a href="/users/350">csmba</a></author><comments><comment><text><span class="comment-copy">Several duplicates: <a href="http://www.google.com/#hl=en&amp;q=site%3Astackoverflow.com+.net+obfuscator&amp;aq=f&amp;oq=site%3Astackoverflow.com+.net+obfuscator&amp;aqi=&amp;aq=f&amp;oq=site%3Astackoverflow.com+.net+obfuscator&amp;aqi=&amp;fp=dK2iQR2kRmk" rel="nofollow noreferrer">google.com/…</a></span></text><author><a class="comment-user" href="/users/44765/john-rasch" title="40,821 reputation">John Rasch</a></author></comment><comment><text><span class="comment-copy">See: <a href="http://msdn.microsoft.com/en-us/vcsharp/aa336818.aspx#obfuscators" rel="nofollow noreferrer">msdn.microsoft.com/en-us/vcsharp/aa336818.aspx#obfuscators</a></span></text><author><a class="comment-user" href="/users/51591/micha%c5%82-ziober" title="10,525 reputation">Michał Ziober</a></author></comment><comment><text><span class="comment-copy">See <a href="http://www.secureteam.net" rel="nofollow noreferrer">Agile.net .NET Obfuscator</a> for an alternative solution for obfuscating your code. In particular check its code virtualization feature.</span></text><author><a class="comment-user" href="/users/2263185/sutton-bernard" title="63 reputation">sutton bernard</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Back with .Net 1.1 obfuscation was essential: decompiling code was easy, and you could go from assembly, to IL, to C# code and have it compiled again with very little effort.</p>
<p>Now with .Net 3.5 I'm not at all sure.  Try decompiling a 3.5 assembly; what you get is a long long way from compiling.</p>
<p>Add the optimisations from 3.5 (far better than 1.1) and the way anonymous types, delegates and so on are handled by reflection (they are a nightmare to recompile). Add lambda expressions, compiler 'magic' like Linq-syntax and <code>var</code>, and C#2 functions like <code>yield</code> (which results in new classes with unreadable names). Your decompiled code ends up a long long way from compilable. </p>
<p>A professional team with lots of time could still reverse engineer it back again, but then the same is true of any obfuscated code. What code they got out of that would be unmaintainable and highly likely to be very buggy.</p>
<p>I would recommend key-signing your assemblies (meaning if hackers can recompile one they have to recompile all) but I don't think obfuscation's worth it.</p>
</div></text><author><a href="/posts/8739/revisions" id="history-8739" title="show revision history for this post">
        Keith
        </a></author><comments><comment><text><span class="comment-copy">Totally disagree. Signing can't replace obfuscation. Signing is aimed againt hacking your code. But if you what to hide you idea, algorithms, etc obfuscation is the only way.</span></text><author><a class="comment-user" href="/users/27703/shrike" title="4,396 reputation">Shrike</a></author></comment><comment><text><span class="comment-copy">I don't think signing can replace obfuscation, it just makes it much harder to hack. Obfuscation fails to hide your idea - if they want to copy that they will anyway, and obfuscation won't even make it much more difficult. In particular as algorithms are all operators obfuscation doesn't have much effect on them - they're usually one of the easiest things to extract.</span></text><author><a class="comment-user" href="/users/905/keith" title="73,049 reputation">Keith</a></author></comment><comment><text><span class="comment-copy">Obfuscation may not be worth it if your talking about a team with lots of resources at it's disposable, but obfuscation is great to protect against the "average" developer who wants nothing more than to use Reflector to open up your assembly and save the source code as a project and making adjustments. Obfuscation has it's place and to rule it out completely is the wrong attitude to have. It's a layer of defense.</span></text><author><a class="comment-user" href="/users/17211/vince-panuccio" title="8,100 reputation">Vince Panuccio</a></author></comment><comment><text><span class="comment-copy">@VincePanuccio You're missing my point: the average developer is not going to be able to decompile any .Net project &gt;= version 2 and get something compilable thanks to all the compiler 'magic' in later versions. Obfuscation is a pain to maintain and adds massive overhead to investigating every bug/stacktrace, but it doesn't stop anyone determined and won't even slow down the casual copy-paster taking a method or two. It's an expensive and weak layer of defence that's just not worth it.</span></text><author><a class="comment-user" href="/users/905/keith" title="73,049 reputation">Keith</a></author></comment><comment><text><span class="comment-copy">When you decompile, the source is in a messy state but logically it still follows the same paths. There is no compiler 'magic' voodoo. I know because I had lost a repository recently and used reflector to recover the source code. Obfuscation is only a pain to "maintain", if it's is not part of your build process. It does add overhead, but are we all writing computationally intensive apps? No. It's a weak layer of defence for a weak attacker.</span></text><author><a class="comment-user" href="/users/17211/vince-panuccio" title="8,100 reputation">Vince Panuccio</a></author></comment><comment><text><span class="comment-copy">You're absolutely right, keeping the source map is such a HUGH overhead. I never thought storing a file somewhere was such a pain :P</span></text><author><a class="comment-user" href="/users/17211/vince-panuccio" title="8,100 reputation">Vince Panuccio</a></author></comment><comment><text><span class="comment-copy">Everybodys seems to have missed phoenix <a href="http://www.ntcore.com/phoenix.php" rel="nofollow noreferrer">ntcore.com/phoenix.php</a>  which is decent</span></text><author><a class="comment-user" href="/users/122182/joe" title="372 reputation">Joe</a></author></comment><comment><text><span class="comment-copy">I agree with Keith. If you use licensing protection simply write it in C++/CLI so it's more complex to understand how it works.</span></text><author><a class="comment-user" href="/users/184405/remi-thomas" title="81 reputation">Remi THOMAS</a></author></comment><comment><text><span class="comment-copy">What a horrible answer.  Have you actually tried decompiling lately?  Decompilers have gotten <i>better</i>, not worse.  Reflector gives near original-source quality, sans comments of course.</span></text><author><a class="comment-user" href="/users/238419/blueraja-danny-pflughoeft" title="48,164 reputation">BlueRaja - Danny Pflughoeft</a></author></comment><comment><text><span class="comment-copy">@BlueRaja-DannyPflughoeft this answer is from 2008, at which point Reflector was miles behind C# 3.5 - 8 years is a long time in this sort of tech. However, I still don't think obfuscation is worth it for 3 reasons: 1) you could take a competent team off a big project and they could write it from scratch with no access to the original code in half the time. 2) you stick a new team on an unfamiliar large code base (even with comments) and they'll take ages before they can usefully enhance it, and 3) reverse engineering is always possible, but always illegal.</span></text><author><a class="comment-user" href="/users/905/keith" title="73,049 reputation">Keith</a></author></comment><comment><text><span class="comment-copy">@Keith 1. Not every project is a corporate project with multiple teams of developers, what a strangely constricted world-view. Even if they were, rewriting most programs requires <i>some</i> amount of reverse engineering <i>(eg. server protocols, file formats, etc)</i>. 2. Reverse engineering is <b>not</b> illegal, at least not in the US.  A TOS is not a contract, and is not illegal to break. Many people make their living off of reverse engineering <i>(Antivirus devs, Mono devs, AMD engineers, etc. etc.)</i>. See <a href="https://en.wikipedia.org/wiki/Reverse_engineering" rel="nofollow noreferrer">here</a></span></text><author><a class="comment-user" href="/users/238419/blueraja-danny-pflughoeft" title="48,164 reputation">BlueRaja - Danny Pflughoeft</a></author></comment><comment><text><span class="comment-copy">@BlueRaja-DannyPflughoeft ah, not what I meant, but I was short of words. Reverse engineering your product to sell as a competitor, avoid paying for it or otherwise gain competitive advantage is illegal. Obfuscation really isn't going to do anything to protect/obscure server protocols or file formats - it's really poor at hiding algorithms or anything else computational. All it does is make your business logic code hard to read back. The question is: does obfuscation protect IP? My answer is not enough to make it worth the hassle.</span></text><author><a class="comment-user" href="/users/905/keith" title="73,049 reputation">Keith</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>We've tried a number of obfuscators. None of them work on a large client/server app that uses remoting. Problem is that client and server share some dlls, and we haven't found any obfuscator that can handle it.</p>
<p>We've tried DotFuscator Pro, SmartAssembly, XenoCode, Salamander, and several small time apps whose names escape me.</p>
<p><strong>Frankly, I'm convinced obfuscation is a big hack.</strong></p>
<p>Even the problems it addresses is not entirely a real problem. The only thing you really need to protect is connection strings, activation codes, security-sensitive things like that. This nonsense that another company is going to reverse-engineer your whole codebase and create a competing product from it is something from a paranoid manager's nightmare, not reality.</p>
</div></text><author><a href="/users/536">Judah Himango</a></author><comments><comment><text><span class="comment-copy">Most obfuscation tools have the ability to exclude classes or methods etc...actually Dotfuscator was introducing a feature that if it detected certain uses of the classes it would auto exclude it for you</span></text><author><a class="comment-user" href="/users/26160/joshberke" title="46,806 reputation">JoshBerke</a></author></comment><comment><text><span class="comment-copy">Dotfuscator itself is a client server application using web services (if you enable their SoS functionality), and Dotfuscator does use itself to obfuscate itself. So this should not be an issue</span></text><author><a class="comment-user" href="/users/26160/joshberke" title="46,806 reputation">JoshBerke</a></author></comment><comment><text><span class="comment-copy">Bravo Judah! The only way to stay ahead is to develop new, better code, not clinging to code you've already written. You end up investing time, effort and maybe even money into something which is irrelevant.  Obfuscation is not worth it.</span></text><author><a class="comment-user" href="/users/81947/david-rutten" title="2,859 reputation">David Rutten</a></author></comment><comment><text><span class="comment-copy">That's why I don't like this reputation system, you have 19 votes and you have not provided an aswer. The user is not asking for your opinion about obfuscation, he wants to know more about obfucation techniques.</span></text><author><a class="comment-user" href="/users/91857/backslash17" title="3,461 reputation">backslash17</a></author></comment><comment><text><span class="comment-copy">I provided information about my experiences using several existing obfuscators. And my opinion derived from that experience.</span></text><author><a class="comment-user" href="/users/536/judah-himango" title="37,271 reputation">Judah Himango</a></author></comment><comment><text><span class="comment-copy">+1 for "Frankly, I'm convinced obfuscation is a big hack." You couldn't have put it any better than this.</span></text><author><a class="comment-user" href="/users/1796/andrei-r%c3%aenea" title="10,855 reputation">Andrei Rînea</a></author></comment><comment><text><span class="comment-copy">A very valid need for protecting your code is selling expensive  specialized apps to companies that will use them internally with only a few users. The temptation is to reverse the code to allow internally hacking and modifications for their own purposes, avoid maintenance contracts, or to even hack trial versions to get the goodies out that they need.</span></text><author><a class="comment-user" href="/users/177242/boomhauer" title="3,733 reputation">boomhauer</a></author></comment><comment><text><span class="comment-copy"><i>Standing Ovation</i></span></text><author><a class="comment-user" href="/users/1905/jorge-l-fatta" title="492 reputation">Jorge L. Fatta</a></author></comment><comment><text><span class="comment-copy">While I get backslash17s point, as someone researching a topic, I always find it helpful for professionals discussion on whether a topic is necessary or not. Sometimes the most helpful points for me are these types of discussions.</span></text><author><a class="comment-user" href="/users/913487/sinisterrainbow" title="121 reputation">SinisterRainbow</a></author></comment><comment><text><span class="comment-copy">Even though this is an answer from 2009, I can't help but to leave a comment. This is the most naive answer I have ever seen on the internet getting so many upvotes. and if you are wondering why anyone would ever want to reverse engineer applications, you will never know because those people will not share their motives with you. But just go ahead and don't use obfuscation.... You're application will be a candy store for your competitors.</span></text><author><a class="comment-user" href="/users/1841243/user1841243" title="451 reputation">user1841243</a></author></comment><comment><text><span class="comment-copy">@user1841243 Except that doesn't happen. It's like a boogey man: oh noes, these unknown people somewhere out there might just look at the compiled IL and spit out machine-generated, commentless C#! But think about that - why would they? Create a competing product? That doesn't happen; it opens the company up to legal action. Security-sensitive things? That's when you use encryption.</span></text><author><a class="comment-user" href="/users/536/judah-himango" title="37,271 reputation">Judah Himango</a></author></comment><comment><text><span class="comment-copy">There's nothing paranoid about it. People can download a tool and see most of your exact source code. For me it has absolutely nothing to do with people de-compiling and then re-compiling as a new app, it has to do with taking chunks of my source code for use without my permission. Apparently every app should just be open source? If you don't protect your source code that's what it ends up being. I have plenty of experience with this and looking at my own code most of the decompiled code is exactly the same as how I wrote it. Even my comments are in there.</span></text><author><a class="comment-user" href="/users/448864/greginwi2" title="420 reputation">GregInWI2</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I am 'Knee Deep' in this now, trying to find a good solution.  Here are my impressions so far.</p>
<p><strong>Xenocode</strong> - I have an old licence for Xenocode2005 which I used to use for obfuscating my .net 2.0 assemblies.  It worked fine on XP and was a decent solution.  My current project is .net 3.5 and I am on Vista, support told me to give it a go but the 2005 version does not even work on Vista (crashes) so I and now I have to buy 'PostBuild2008' at a gobsmacking price point of $1900.  This might be a good tool but I'm not going to find out.  Too expensive.</p>
<p><strong>Reactor.Net</strong> - This is a much more attractive price point and it worked fine on my Standalone Executeable.  The Licencing module was also nice and would have saved me a bunch of effort.  Unfortunately, It is missing a key feature and that is the ability to Exclude stuff from the obfuscation.  This makes it impossible to achieve the result I needed (Merge multiple assemblies together, obfuscate some, not-Obfuscate others).</p>
<p><strong>SmartAssembly</strong> - I downloaded the Eval for this and it worked flawlessly.  I was able to achieve everything I wanted and the Interface was first class.  Price point is still a bit hefty.</p>
<p><strong>Dotfuscator Pro</strong> - Couldn't find price on website.  Currently in discussions to get a quotation.  Sounds ominous.</p>
<p><strong>Confuser</strong> - an open source project which works quite well (to confuse ppl, just as the name implies). <a href="https://confuser.codeplex.com/" rel="nofollow noreferrer">https://confuser.codeplex.com/</a> <br/>(added by jgauffin)</p>
<p>Note: ConfuserEx is reportedly "broken" according to <a href="https://github.com/yck1509/ConfuserEx/issues/498" rel="nofollow noreferrer">Issue #498</a> on their GitHub repo.</p>
</div></text><author><a href="/users/95242">Michael Dausmann</a></author><comments><comment><text><span class="comment-copy">can you post how much dotfuscator quoted?</span></text><author><a class="comment-user" href="/users/122232/anthony-johnston" title="5,979 reputation">Anthony Johnston</a></author></comment><comment><text><span class="comment-copy">@Anthony I recently bought a license in early 2011.  The quote was $2475 USD for the minimum 1 build machine + 1 developer license.  Includes 12 months of upgrades and support.</span></text><author><a class="comment-user" href="/users/450141/yoshi" title="2,170 reputation">Yoshi</a></author></comment><comment><text><span class="comment-copy">@Yoshi thanks for letting me know, much appreciated</span></text><author><a class="comment-user" href="/users/122232/anthony-johnston" title="5,979 reputation">Anthony Johnston</a></author></comment><comment><text><span class="comment-copy">I wasn't using .NET Reactor when this post was made, but now you can exclude portions of your code from obfuscation using the System.Reflection.Obfuscation attribute. There are also some settings which let you do things like exclude all methods or all serializable types.</span></text><author><a class="comment-user" href="/users/10637/benteight" title="345 reputation">benteight</a></author></comment><comment><text><span class="comment-copy">DotFuscator quoted me $4999, which was reduced to $4500 because of a 10% discount. This was for 1 dev licenses! In discussions it was reduced to $2500 but still way too expensive.</span></text><author><a class="comment-user" href="/users/101662/oliver" title="8,587 reputation">Oliver</a></author></comment><comment><text><span class="comment-copy">.NET Reactor now has an Exclusion Rules Editor allowing to exclude certain classes, methods or properties from obfuscation. Also, you can use checkbox "Merge Only" to exclude a specific dll from obfuscation</span></text><author><a class="comment-user" href="/users/618105/avitenberg" title="741 reputation">avitenberg</a></author></comment><comment><text><span class="comment-copy">I used .Net Reactor for years. It works fine, but there are some problems with this tool. Firstly, sometimes when you upgrade .Net Reactor to a newer version, the obfuscated code may stop working properly. It happened to me several times. In particular, you protect the same assembly with a newer version but it throws unexpected exceptions in runtime. Secondly, these guys have one of the worst supports in the world. I requested the support several times but they never answered. Very frustrating, especially taking into account the fact that the company license costs few hundred of dollars.</span></text><author><a class="comment-user" href="/users/998737/sergey" title="168 reputation">Sergey</a></author></comment><comment><text><span class="comment-copy">Confuserex is not broken. It still does a great job of renaming and stripping meta data</span></text><author><a class="comment-user" href="/users/434537/rolls" title="374 reputation">rolls</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>If your looking for a free one you could try DotObfuscator Community Edition that comes with Visual Studio or <a href="http://www.gapotchenko.com/eazfuscator.net" rel="nofollow noreferrer">Eazfuscator.NET</a>.</p>
<hr/>
<p><a href="http://blog.gapotchenko.com/eazfuscator.net/code-virtualization" rel="nofollow noreferrer">Since June 29, 2012</a>, Eazfuscator.NET is now commercial. The last free available version is 3.3.</p>
</div></text><author><a href="/users/228160">Israel Rodriguez</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I have been using smartassembly. Basically, you pick a dll and it returns it obfuscated. It seems to work fine and I've had no problems so far. Very, very easy to use.</p>
</div></text><author><a href="/posts/2528/revisions" id="history-2528" title="show revision history for this post">
        Shawn
        </a></author><comments><comment><text><span class="comment-copy">Smartassembly is quite useless. A cracker puts your application into DumbAssembly and all the "protection" is removed with mouse click:   <a href="http://www.woodmann.com/collaborative/tools/index.php/Dumbassembly" rel="nofollow noreferrer">woodmann.com/collaborative/tools/index.php/Dumbassembly</a></span></text><author><a class="comment-user" href="/users/1487529/elmue" title="2,283 reputation">Elmue</a></author></comment><comment><text><span class="comment-copy">As of now, Google safe browsing flags woodmann's site as being unsafe.  Also, woodmann's site has a whole article about him previously suffering a malware infection, so I don't really want to navigate his site when Google doesn't trust it.</span></text><author><a class="comment-user" href="/users/18192/brian" title="17,091 reputation">Brian</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I have tried almost every obfuscator on the market and SmartAssembly is the best in my opinion.</p>
</div></text><author><a href="/posts/4573/revisions" id="history-4573" title="show revision history for this post">
        Andrew Peters
        </a></author><comments><comment><text><span class="comment-copy">Smartassembly is quite useless. A cracker puts your application into DumbAssembly and all the "protection" is removed with mouse click: <a href="http://www.woodmann.com/collaborative/tools/index.php/Dumbassembly" rel="nofollow noreferrer">woodmann.com/collaborative/tools/index.php/Dumbassembly</a></span></text><author><a class="comment-user" href="/users/1487529/elmue" title="2,283 reputation">Elmue</a></author></comment><comment><text><span class="comment-copy">As of now, Google safe browsing flags woodmann's site as being unsafe.  Also, woodmann's site has a whole article about him previously suffering a malware infection, so I don't really want to navigate his site when Google doesn't trust it.</span></text><author><a class="comment-user" href="/users/18192/brian" title="17,091 reputation">Brian</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I've been also using SmartAssembly.
I found that Ezrinz .Net Reactor much better for me on .net applications.
It obfuscates, support Mono, merges assemblies and it also also has a very nice licensing module to create trial version or link the licence to a particular machine (very easy to implement).
Price is also very competitive and when I needed support they where fast.
<a href="http://www.eziriz.com/" rel="noreferrer">Eziriz</a></p>
<p>Just to be clear I'm just a custumer who likes the product and not in any way related with the company.</p>
</div></text><author><a href="/posts/22990/revisions" id="history-22990" title="show revision history for this post">
        Ronnie
        </a></author><comments><comment><text><span class="comment-copy">I have a number of friends who swear by .Net Reactor - though not on the products website there's a helpful google group for the product as well: <a href="http://groups.google.com/group/net-reactor-users?hl=en" rel="nofollow noreferrer">groups.google.com/group/net-reactor-users?hl=en</a></span></text><author><a class="comment-user" href="/users/4843/bittercoder" title="5,853 reputation">Bittercoder</a></author></comment><comment><text><span class="comment-copy">+1 for Eziriz. I've had excellent results with it. It's the best there is right now, IMO.</span></text><author><a class="comment-user" href="/users/162729/druid" title="5,311 reputation">Druid</a></author></comment><comment><text><span class="comment-copy">.NET Reactor Sucks. I changed my computer, sent email twice regarding the license file, and got no answer. You see the .NET Reactor license is hardware locked.</span></text><author><a class="comment-user" href="/users/59314/orelse" title="2,282 reputation">OrElse</a></author></comment><comment><text><span class="comment-copy">Thats normal. How do you expect that they believe you? How do they know that you really changed your computer and are not trying to run a licence of your friend on your computer? For that is a hardware lock! If it could be used on multiple computers a hardware lock would be useless.</span></text><author><a class="comment-user" href="/users/1487529/elmue" title="2,283 reputation">Elmue</a></author></comment><comment><text><span class="comment-copy">(PS. We chose Reactor largely on the basis of this SO response.)</span></text><author><a class="comment-user" href="/users/1308967/chris" title="838 reputation">Chris</a></author></comment><comment><text><span class="comment-copy">I wrote an application to parse C# projects and obfuscate on the source code level and then build the projects. I have a reason for that: I have to build it against WinForms, Web, Mono, Silverlight, and WPF. And they all run well</span></text><author><span class="comment-user">user3719030</span></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The short answer is that you can't.</p>
<p>There are various tools around that will make it harder for someone to read your code - some of which have been pointed out by other answers.</p>
<p>However, all these do is make it harder to read - they increase the amount of effort required, that is all. Often this is enough to deter casual readers, but someone who is determined to dig into your code will always be able to do so.</p>
</div></text><author><a href="/posts/1140503/revisions" id="history-1140503" title="show revision history for this post">
        Bevan
        </a></author><comments><comment><text><span class="comment-copy">if(efforts.Required &gt; codeFromScratch.Costs) DoNoReverseEngineer();</span></text><author><a class="comment-user" href="/users/19803/nicolas-dorier" title="5,105 reputation">Nicolas Dorier</a></author></comment><comment><text><span class="comment-copy">@NicolasDorier, <code>Operator '&gt;' cannot be applied to operands of type 'System.TimeSpan' and 'decimal'</code></span></text><author><a class="comment-user" href="/users/68080/saeb-amini" title="9,636 reputation">Saeb Amini</a></author></comment><comment><text><span class="comment-copy">@Saeb sure they can, casting from TimeSpan to money(decimal) is what most businesses are about.</span></text><author><a class="comment-user" href="/users/33236/hultqvist" title="4,475 reputation">hultqvist</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p><a href="http://www.ssware.com/cryptoobfuscator/obfuscator-net.htm" rel="noreferrer">Crypto Obfuscator</a> address all your concerns and scenarios. It :</p>
<ol>
<li>Automatically excludes types/members from obfuscation based on rules. Serialized types/fields are one of them.</li>
<li>It can be integrated into the build process using MSBUild.</li>
<li>Supports ASP.Net projects.</li>
</ol>
</div></text><author><a href="/posts/1542848/revisions" id="history-1542848" title="show revision history for this post">
        logicnp
        </a></author><comments><comment><text><span class="comment-copy">fyi @logicnp wrote Crypto.</span></text><author><a class="comment-user" href="/users/492/cad-bloke" title="4,117 reputation">CAD bloke</a></author></comment><comment><text><span class="comment-copy">Crypto appears to be no longer supported.</span></text><author><a class="comment-user" href="/users/951280/carl" title="3,742 reputation">Carl</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>We have a multi tier app with an asp.net and winform interface that also supports remoting.  I've had no problems with using any obfuscator with the exception of the encrypting type which generates a loader which can be problematic in all sorts of unexpected ways and just not worth it in my opinion.  Actually my advice would be more along the lines of "Avoid encrypting loader type obfuscators like the plague". :)</p>
<p>In my experience any obfuscator will work fine with any aspect of .net including asp.net and remoting, you just have to become intimate with the settings and learn how far you can push it in which areas of your code.  And take the time to attempt reverse engineering on what you get and see how it works with the various settings.</p>
<p>We used several over the years in our commercial apps and settled on Spices obfuscator from 9rays.net because the price is right, it does the job and they have good support though we really haven't needed the support in years anymore but to be honest I don't think it really matters which obfuscator you use, the issues and learning curve are all the same if you want to have it work properly with remoting and asp.net.</p>
<p>As others have mentioned all you're really doing is the equivalent of a padlock, keeping otherwise honest people out and or making it harder to simply recompile an app.</p>
<p>Licensing is usually the key area for most people and you should definitely be using some kind of digitally signed certificate system for licensing anyway.  Your biggest loss will come from casual sharing of licenses if you don't have a smart system in place, the people that break the licensing system were never going to buy in the first place.</p>
<p>It's really easy to take this too far and have a negative impact on your customers and your business, do what is simple and reasonable and then don't worry about it.</p>
</div></text><author><a href="/posts/294300/revisions" id="history-294300" title="show revision history for this post">
        JohnC
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>For the past two days I've been experimenting with Dotfuscator Community Edition advanced (a free download after registering the basic CE that comes bundled with Visual Studio). </p>
<p>I think the reason more people don't use obfuscation as a default option is that it's a serious hassle compared to the risk. On smaller test projects I could get the obfuscated code running with a lot of effort. Deploying a simple project via ClickOnce was troublesome, but achievable after manually signing the manifests with mage. The only problem was that on error the stack trace came back obfuscated and the CE doesn't have a deobfuscator or clarifier packaged.</p>
<p>I tried to obfuscate a real project which is VSTO based in Excel, with Virtual Earth integration, lots of webservice calls and an IOC container and lot's of reflection. It was impossible.</p>
<p>If obfuscation is really a critical requirement, you should design your application with that in mind from the start, testing the obfuscated builds as you progress. Otherwise, if it's a fairly complex project, you're going to end up with a serious amount of pain.   </p>
</div></text><author><a href="/posts/513722/revisions" id="history-513722" title="show revision history for this post">
        burnside
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>You should use whatever is cheapest and best known for your platform and call it a day. Obfuscation of high-level languages is a hard problem, because VM opcode streams don't suffer from the two biggest problems native opcode streams do: function/method identification and register aliasing. </p>
<p>What you should know about bytecode reversing is that it is already standard practice for security testers to review straight X86 code and find vulnerabilities in it. In raw X86, you cannot necessarily even find valid functions, let alone track a local variable throughout a function call. In almost no circumstances do native code reversers have access to function and variable names --- unless they're reviewing Microsoft code, for which MSFT helpfully provides that information to the public.</p>
<p>"Dotfuscation" works principally by scrambling function and variable names. It's probably better to do this than publish code with debug-level information, where the Reflector is literally giving up your source code. But anything you do beyond this is likely to get into diminishing returns.</p>
</div></text><author><a href="/posts/55374/revisions" id="history-55374" title="show revision history for this post">
        tqbf
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I've recently tried piping the output of one free obfuscator into the another free obfuscator - namely Dotfuscator CE and the new Babel obfuscator on CodePlex.  More details <a href="http://harriyott.com/2008/09/obfuscations-what-you-need-if-you-want.aspx" rel="nofollow noreferrer">on my blog</a>.</p>
<p>As for serialization, I've moved that code into a different DLL and included that in the project. I reasoned that there weren't any secrets in there that aren't in the XML anyway, so it didn't need obfuscation. If there is any serious code in those classes, using partial classes in the main assembly should cover it.</p>
</div></text><author><a href="/posts/56355/revisions" id="history-56355" title="show revision history for this post">
        harriyott
        </a></author><comments><comment><text><span class="comment-copy">-1, because "yo dawg, I heard you like obfuscators so I ran an obfuscator on the output of an obfuscator... want to know more? gimme page hits". But I find the second paragraph a very good suggestion.</span></text><author><a class="comment-user" href="/users/148412/aneves" title="4,069 reputation">ANeves</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I have had no problems with Smartassembly.</p>
</div></text><author><a href="/posts/71288/revisions" id="history-71288" title="show revision history for this post">
        Geoff Appleford
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>You could use "Dotfuscator Community Edition" - it comes by default in Visual Studio 2008 Professional. You can read about it at:</p>
<p><a href="http://msdn.microsoft.com/en-us/library/ms227240%28VS.80%29.aspx" rel="nofollow noreferrer">http://msdn.microsoft.com/en-us/library/ms227240%28VS.80%29.aspx</a><br/>
<a href="http://www.preemptive.com/dotfuscator.html" rel="nofollow noreferrer">http://www.preemptive.com/dotfuscator.html</a></p>
<p>The "Professional" version of the product costs money but is better.</p>
<p>Do you really need your code obfuscated? Usually there is very little wrong with your application being decompiled, unless it is used for security purposes. If you are worried about people "stealing" your code, don't be; the vast majority of people looking at your code will be for learning purposes. Anyway, there is no totally effective obfuscation strategy for .NET - someone with enough skill will always be able to decompile/change you application.</p>
</div></text><author><a href="/users/139766">Callum Rogers</a></author><comments><comment><text><span class="comment-copy">+1 for this. I've tried just about every free .NET obfuscator out there, and Dotfuscator was the only one that actually obfuscated a substantial proportion of the MSIL in my ASP.NET applications.</span></text><author><a class="comment-user" href="/users/30246/saille" title="5,459 reputation">saille</a></author></comment><comment><text><span class="comment-copy">@Saille, have you used the free Dotfuscator - Community Edition for that? I just had a sales chat and they say the pro edition costs 2000 EUR. :(</span></text><author><a class="comment-user" href="/users/92153/houman" title="20,790 reputation">Houman</a></author></comment><comment><text><span class="comment-copy">Dotfuscator is worthless.</span></text><author><a class="comment-user" href="/users/626528/user626528" title="5,263 reputation">user626528</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Avoid Reactor. It is completely useless (and yes I paid for a license). Xenocode was the best one I encountered and bought a license for too. The support was very good but I didn't need it much as it just worked. I tested every obfuscator I could find and my conclusion is that xenocode was far and away the most robust and did the best job (also possibility to post process your .NET exe to a native exe which I didn't see anywhere else.).</p>
<p>There are two main differences between reactor and xenocode.
The first one is that Xenocode actually works.
The second is that the execution speed of your assemblies is no different. With reactor it was about 6 million times slower. I also got the impression that reactor was a one man operation.</p>
</div></text><author><a href="/posts/5881486/revisions" id="history-5881486" title="show revision history for this post">
        Michael Finlan
        </a></author><comments><comment><text><span class="comment-copy">.NET Reactor has a lot of options. Some of them involve runtime protection and will slow down application a bit, but this is the price for additional security you get. However I seriously doubt if there will be any slow down if you'll just use .NET Reactor obfuscation, without any other options</span></text><author><a class="comment-user" href="/users/618105/avitenberg" title="741 reputation">avitenberg</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I found the Agile.Net provide pretty good protection for your .Net Assembly because it offer not only obfuscation but also encryption. Download a free trail.<br/>
<a href="http://secureteam.net/NET-Code-Protection.aspx" rel="nofollow">http://secureteam.net/NET-Code-Protection.aspx</a>
<a href="http://secureteam.net/downloads.aspx" rel="nofollow">http://secureteam.net/downloads.aspx</a></p>
</div></text><author><a href="/posts/18596015/revisions" id="history-18596015" title="show revision history for this post">
        user2743618
        </a></author><comments><comment><text><span class="comment-copy">Eazfuscator said why not MSIL encription: see <a href="http://www.gapotchenko.com/eazfuscator.net/kb/100028" rel="nofollow noreferrer">gapotchenko.com/eazfuscator.net/kb/100028</a></span></text><author><a class="comment-user" href="/users/1830909/qmaster" title="1,546 reputation">QMaster</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I've been obfuscating code in the same application since .Net 1, and it's been a major headache from a maintenance perspective. As you've mentioned, the serialization problem can be avoided, but it's really easy to make a mistake and obfuscate something you didn't want obfuscated. It's easy to break the build, or to change the obfuscation pattern and not be able to open old files. Plus it can be difficult to find out what went wrong and where.</p>
<p>Our choice was Xenocode, and were I to make the choice again today I would prefer to not obfuscate the code, or use Dotfuscator. </p>
</div></text><author><a href="/posts/21096/revisions" id="history-21096" title="show revision history for this post">
        Jon Dewees
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p><a href="http://msdn.microsoft.com/en-us/magazine/cc164058.aspx" rel="nofollow noreferrer">Here's a document from Microsoft themselves.</a> Hope that helps..., it's from 2003, but it might still be relevant.</p>
</div></text><author><a href="/posts/1140472/revisions" id="history-1140472" title="show revision history for this post">
        nullArray
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>We're using SmartAssembly on our windows client. Works just fine.</p>
<p>Does add some extra problems too. Printing out your class names in log files/exceptions have to be de-obfuscated. And of course can't create a class from its name. So it's a good idea to take a look at your client and see which problems you can get by obfuscating.</p>
</div></text><author><a href="/posts/716929/revisions" id="history-716929" title="show revision history for this post">
        Carra
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>It all depends on the programming language, which you use.
Read the article: <a href="http://en.wikipedia.org/wiki/Obfuscated_code" rel="nofollow noreferrer">Obfuscated code</a></p>
</div></text><author><a href="/posts/1140440/revisions" id="history-1140440" title="show revision history for this post">
        Michał Ziober
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>the free way would be to use dotfuscator from within visual studio, otherwise youd have to go out and buy an obfuscator like Postbuild (<a href="http://www.xenocode.com/Landing/Obfuscation.aspx" rel="nofollow noreferrer">http://www.xenocode.com/Landing/Obfuscation.aspx</a>)</p>
</div></text><author><a href="/posts/1140474/revisions" id="history-1140474" title="show revision history for this post">
        Russ Bradberry
        </a></author><comments><comment><text><span class="comment-copy">im not sure i understand the downvote here, why not give an explanation?</span></text><author><a class="comment-user" href="/users/48450/russ-bradberry" title="6,638 reputation">Russ Bradberry</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I had to use a obfuscation/resource protection in my latest rpoject and found <a href="http://www.ssware.com/cryptoobfuscator/obfuscator-net.htm" rel="nofollow">Crypto Obfuscator</a> as a nice and simple to use tool. The serialization issue is only a matter of settings in this tool.</p>
</div></text><author><a href="/users/51919">logicnp</a></author><comments><comment><text><span class="comment-copy">@logicnp, this is your second post in this thread endorsing this product. Please disclose if you have a relationship to the developer of this product.</span></text><author><a class="comment-user" href="/users/427155/h2onacl" title="3,217 reputation">H2ONaCl</a></author></comment><comment><text><span class="comment-copy">Sorry but <a href="http://de4dot.com/" rel="nofollow noreferrer">de4dot</a> can deobfuscate that. I would recommend using <a href="https://yck1509.github.io/ConfuserEx/" rel="nofollow noreferrer">ConfuserEx</a>.</span></text><author><a class="comment-user" href="/users/4477797/newbieguy" title="187 reputation">newbieguy</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>There's a good open source version called Obfuscar.  Seems to work fine.  Types, properties, fields, methods can be excluded.  The original  is here: <a href="https://code.google.com/p/obfuscar/" rel="nofollow">https://code.google.com/p/obfuscar/</a>, but since it seems to not be updated anymore, somebody forked it to here: <a href="https://obfuscar.codeplex.com/" rel="nofollow">https://obfuscar.codeplex.com/</a></p>
</div></text><author><a href="/posts/20673443/revisions" id="history-20673443" title="show revision history for this post">
        erict
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>You may also want to look at new code protection technologies such as <a href="http://www.metaforic.com/" rel="nofollow noreferrer">Metaforic</a> and <a href="http://www.vilabs.com/" rel="nofollow noreferrer">V.i.Labs</a> and new software copy protection technologies such as <a href="http://www.byteshield.net/" rel="nofollow noreferrer">ByteShield</a>. Disclosure: I work for ByteShield.</p>
</div></text><author><a href="/posts/409584/revisions" id="history-409584" title="show revision history for this post">
        Christian Olsson
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I also use smartassembly. However, I don't know how it works for a web application. However, I'd like to point out that if your app uses shareware type protection, make sure it don't check a license with a boolean return. it's too easy to byte crack.
<a href="http://blogs.compdj.com/post/Binary-hack-a-NET-executable.aspx" rel="nofollow noreferrer">http://blogs.compdj.com/post/Binary-hack-a-NET-executable.aspx</a></p>
</div></text><author><a href="/posts/716893/revisions" id="history-716893" title="show revision history for this post">
        Rick Ratayczak
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I tried Eziriz demo version....I liked it. But never brought the software.</p>
</div></text><author><a href="/posts/1377053/revisions" id="history-1377053" title="show revision history for this post">
        Kalpak
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>SmartAssembly is great,I was used in most of my projects</p>
</div></text><author><a href="/posts/4321292/revisions" id="history-4321292" title="show revision history for this post">
        guaike
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Obfuscating is not a real protection. </p>
<p>If you have a .NET Exe file there is a <strong>FAR better</strong> solution. </p>
<p>I use <strong>Themida</strong>  and can tell that it works very well.</p>
<p>The only drawback of Themida is that it cannot protect .NET Dlls.
(It also protects C++ code in Exe and DLLs)</p>
<p>Themida is by far cheaper than the here mentioned obfuscators and is the best in <strong>anti</strong> <strong>piracy</strong> <strong>protection</strong> on the market. It creates a virtual machine were critical parts of your code are run and runs several threads that detect manipulation or breakpoints set by a cracker. It converts the .NET Exe into something that Reflector does not even recognize as a .NET assembly anymore. </p>
<p>Please read the detailed description on their website: 
<a href="http://www.oreans.com/themida_features.php" rel="nofollow">http://www.oreans.com/themida_features.php</a></p>
</div></text><author><a href="/users/1487529">Elmue</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I have tried a product called Rummage and it does a good job in giving you some control ... Although it lacks many things that Eziriz offers but price for Rummage is too good... </p>
</div></text><author><a href="/posts/18663339/revisions" id="history-18663339" title="show revision history for this post">
        DotOftheDotNet
        </a></author><comments/></answer></answers></post>