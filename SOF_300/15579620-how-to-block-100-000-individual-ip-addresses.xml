<?xml version="1.0" encoding="utf-8"?>
<post><title>php - How to Block 100,000+ Individual IP addresses - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p><strong>Introduction</strong></p>
<p>How do you Block large number of <code>IP address</code> from your web application/server. Obviously that can easily be done in <code>PHP</code> or any programming language </p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">$ipList </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[];</span><span class="pln"> </span><span class="com">// array list or from database</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">in_array</span><span class="pun">(</span><span class="pln">getIP</span><span class="pun">(),</span><span class="pln"> $ipList</span><span class="pun">))</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="com">// Log IP &amp; Access information</span><span class="pln">
    header</span><span class="pun">(</span><span class="str">"https://www.google.com.ng/search?q=fool"</span><span class="pun">);</span><span class="pln"> </span><span class="com">// redirect</span><span class="pln">
    </span><span class="kwd">exit</span><span class="pun">();</span><span class="pln"> </span><span class="com">// exit</span><span class="pln">
</span><span class="pun">}</span><span class="pln"> </span></code></pre>
<p>Or Using <code>htaccess</code></p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">order allow</span><span class="pun">,</span><span class="pln">deny
deny </span><span class="kwd">from</span><span class="pln"> </span><span class="lit">123.45</span><span class="pun">.</span><span class="lit">6.7</span><span class="pln">
deny </span><span class="kwd">from</span><span class="pln"> </span><span class="lit">012.34</span><span class="pun">.</span><span class="lit">5.</span><span class="pln">
</span><span class="com"># .... the list continues</span><span class="pln">
allow </span><span class="kwd">from</span><span class="pln"> all</span></code></pre>
<p><strong>The issues</strong> </p>
<ul>
<li>Am trying to block a whole <code>100k plus individual IPs</code> not <code>subnets</code> </li>
<li>Am trying to avoid user getting to PHP before blocking such IP</li>
<li>100000+ is over 1.5MB and that is a lot if information to be loading in <code>htaccess</code> all the time</li>
<li>Database of IP still growing ... and they would be nee to dynamically add more values</li>
<li>To set bans in <code>iptables</code> for 100000+ is just ridiculous (Might Be wrong)</li>
</ul>
<p><strong>Stupid Idea</strong> </p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">order allow</span><span class="pun">,</span><span class="pln">deny
deny </span><span class="kwd">from</span><span class="pln"> database    </span><span class="pun">&lt;--------</span><span class="pln"> </span><span class="typ">Not</span><span class="pln"> sure </span><span class="kwd">if</span><span class="pln"> </span><span class="kwd">this</span><span class="pln"> </span><span class="kwd">is</span><span class="pln"> possible
allow </span><span class="kwd">from</span><span class="pln"> all</span></code></pre>
<p><strong>Question</strong> </p>
<ul>
<li>Is it possible for <code>htaccess</code> to get the list from database (Redis,Crunchbase,Mongo, MySQL or even Sqlite) ... any</li>
<li>Is there a visible solution to manage such kind of issue in production </li>
<li>I know the best solution is <code>Block the IPs at the firewall level</code> is there any way to pragmatically add/remove IP to the firewall</li>
</ul>
<p><strong>Finally</strong> </p>
<p>My approach might be totally wrong ... all I want is a visible solution since spammers and botnets are on the rise ...  </p>
<p>Please this has nothing to do with <code>DOS</code> attack its a simple ... <strong><code>get lost response</code></strong></p>
<p><strong>Update</strong></p>
<ul>
<li>Firewall : <strong>Cisco PIX 515UR</strong></li>
</ul>
</div></text><author><a href="/users/81785/moak">Moak</a></author><comments><comment><text><span class="comment-copy">What if you ban a dynamic IP and block an innocent visitor?</span></text><author><a class="comment-user" href="/users/679449/kermit" title="28,860 reputation">Kermit</a></author></comment><comment><text><span class="comment-copy">if you're blocking IPs, you should be doing it at the firewall, preventing the packets from reaching the innards of your server in the first place.</span></text><author><a class="comment-user" href="/users/118068/marc-b" title="284,723 reputation">Marc B</a></author></comment><comment><text><span class="comment-copy">yes, I agree with Marc. This should be done at the firewall level, where it's sole job is to block unwanted traffic &lt;_&lt; you use PHP to call whatever system command that you have to add and remove IPs from the firewalls blacklist.</span></text><author><a class="comment-user" href="/users/520857/populus" title="4,593 reputation">Populus</a></author></comment><comment><text><span class="comment-copy">Or possibly  blocking ip's with an inline IDS - for example snort.</span></text><author><a class="comment-user" href="/users/348312/jim-mcnamara" title="12,400 reputation">jim mcnamara</a></author></comment><comment><text><span class="comment-copy">I guess the question is: why can you NOT use the firewall, i.e., tools meant to do this?</span></text><author><a class="comment-user" href="/users/348312/jim-mcnamara" title="12,400 reputation">jim mcnamara</a></author></comment><comment><text><span class="comment-copy">That's a decent Firewall... PIX firewalls can use Cisco Intrusion Detection Systems for shunning connections of known malicious IP addresses! Although I don't know the limit... Worth investigating.</span></text><author><a class="comment-user" href="/users/1714488/nickhar" title="10,829 reputation">nickhar</a></author></comment><comment><text><span class="comment-copy">@nickhar is there anyway to dynamically add IP via API ?</span></text><author><a class="comment-user owner" href="/users/1226894/baba" title="69,009 reputation">Baba</a></author></comment><comment><text><span class="comment-copy">Looks like you might be interested in <a href="http://www.fail2ban.org" rel="nofollow noreferrer">fail2ban</a>?</span></text><author><a class="comment-user" href="/users/505649/ulrich-schwarz" title="6,042 reputation">Ulrich Schwarz</a></author></comment><comment><text><span class="comment-copy">@Baba Don't know. Used the same firewall a few years back and knew about IDS, but never needed to look at it. I'll ping someone I know.</span></text><author><a class="comment-user" href="/users/1714488/nickhar" title="10,829 reputation">nickhar</a></author></comment><comment><text><span class="comment-copy">@UlrichSchwarz where does it store the IP ?</span></text><author><a class="comment-user owner" href="/users/1226894/baba" title="69,009 reputation">Baba</a></author></comment><comment><text><span class="comment-copy">Wouldn't this be possible to store ips a four unsigned int(1) fields? I think even for 1.5 mln records searching (especially when all of them are indexed) if the four match should not take long. But do not store ips as strings.</span></text><author><a class="comment-user" href="/users/2088851/voitcus" title="3,268 reputation">Voitcus</a></author></comment><comment><text><span class="comment-copy">With IPv6, blocking individual IPs will not work anymore. And everyone will be forced to offer IPv6 in the next year or two. Otherwise, plenty of IPv6-only clients will show up as one single IPv4 address - they cannot be blocked. And the IPv6 address space is so huge, you cannot simply block a /64 because providers might assign a /56 to their users, or even a /48. Apply different measures to fight spam.</span></text><author><a class="comment-user" href="/users/1627406/sven" title="33,248 reputation">Sven</a></author></comment><comment><text><span class="comment-copy">What better way are you sugesting @Sven</span></text><author><a class="comment-user owner" href="/users/1226894/baba" title="69,009 reputation">Baba</a></author></comment><comment><text><span class="comment-copy">ipset is definitely the answer, my list of 300k entries works just fine, no performance issues.</span></text><author><a class="comment-user" href="/users/5434510/cybernard" title="108 reputation">cybernard</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Something that you can try is keeping a list of the IP addresses you want to block in a <a href="http://httpd.apache.org/docs/current/rewrite/rewritemap.html#txt">text file</a> or convert it to a <a href="http://httpd.apache.org/docs/current/rewrite/rewritemap.html#dbm">dbm hash file</a>, then use mod_rewrite's <code>RewriteMap</code>. You'd have to set this up in your server/vhost config. <strong>You cannot initialize a map in an htaccess file</strong>.</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="typ">RewriteEngine</span><span class="pln"> </span><span class="typ">On</span><span class="pln">
</span><span class="typ">RewriteMap</span><span class="pln"> deny_ips txt</span><span class="pun">:</span><span class="str">/path/</span><span class="pln">to</span><span class="pun">/</span><span class="pln">deny_ips</span><span class="pun">.</span><span class="pln">txt

</span><span class="typ">RewriteCond</span><span class="pln"> $</span><span class="pun">{</span><span class="pln">deny_ips</span><span class="pun">:%{</span><span class="pln">REMOTE_ADDR</span><span class="pun">}|</span><span class="lit">0</span><span class="pun">}</span><span class="pln"> </span><span class="pun">!=</span><span class="lit">0</span><span class="pln">
</span><span class="typ">RewriteRule</span><span class="pln"> </span><span class="pun">^</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="pun">[</span><span class="pln">L</span><span class="pun">,</span><span class="pln">F</span><span class="pun">]</span></code></pre>
<p>The <strong>/path/to/deny_ips.txt</strong> file would look something like this:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="lit">12.34</span><span class="pun">.</span><span class="lit">56.78</span><span class="pln"> </span><span class="lit">1</span><span class="pln">
</span><span class="lit">11.22</span><span class="pun">.</span><span class="lit">33.44</span><span class="pln"> </span><span class="lit">1</span><span class="pln">
etc</span><span class="pun">.</span></code></pre>
<p>Essentially, an IP that you want to deny and a space then a "1". Any IP in this text file will cause the server to return a <em>403 Forbidden</em>. To speed things up a bit you can use the <code>httxt2dbm</code> to generate a dbm hash and then you'd define the mapping as so:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="typ">RewriteMap</span><span class="pln"> deny_ips dbm</span><span class="pun">:</span><span class="str">/path/</span><span class="pln">to</span><span class="pun">/</span><span class="pln">deny_ips</span><span class="pun">.</span><span class="pln">dbm</span></code></pre>
<p>I'm not sure what the performance hit is for using mod_rewrite like this with a lot of IPs, but a quick benchmark test on apache 2.2 running on a 3Ghz i686 under linux, the difference between 5 IPs in the list versus 102418 is negligible. According to <strong>ab</strong>'s output, they're nearly identical.</p>
<hr/>
<p>Addressing specific questions:</p>
<blockquote>
<p>Is it possible for htaccess to get the list from database (Redis,Crunchbase,Mongo, MySQL or even Sqlite) ... any</p>
</blockquote>
<p>Using a rewrite map, you can use the "<a href="http://httpd.apache.org/docs/current/rewrite/rewritemap.html#prg">prg</a>" map type to run an external program for a mapping type. You can then write a perl, php, etc. script to talk to a database in order to look up an IP address. Also note that caveats listed under "Caution". You'd then use this map like you would any other map (<code>RewriteCond ${deny_ips:%{REMOTE_ADDR}|0} !=0</code>). This would essentially create a bottleneck for all requests. Not the best solution for talking to a database.</p>
<p>In apache 2.4 though, there is a <a href="http://httpd.apache.org/docs/current/rewrite/rewritemap.html#dbd">dbd/fastdbd</a> map type, which allows you to create queries through <a href="http://httpd.apache.org/docs/current/mod/mod_dbd.html">mod_dbd</a>. This is a much better option and the mod_dbd module manages connections to the database, pools connections, etc. So the map definition would look something like:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="typ">RewriteMap</span><span class="pln"> deny_ips </span><span class="str">"fastdbd:SELECT active FROM deny_ips WHERE source = %s"</span></code></pre>
<p>Assuming you have a table "<strong>deny_ips</strong>" with 2 columns "<strong>source</strong>" (the IP address) and "<strong>active</strong>" (1 for active, 0 for inactive). </p>
<blockquote>
<p>Is there a visible solution to manage such kind of issue in production</p>
</blockquote>
<p>If you are storing all of the blocked IPs in the database, it's a matter of managing the contents of your database table. If you are using the dbm map type, I know at least <a href="http://docstore.mik.ua/orelly/perl/perlnut/ch12_01.htm">perl has a DBI</a> for managing dbm files, so you can use that to add/remove IP entries from the deny list. I've never used it before so I can't really say much about it. Managing a flat text file is going to be a lot trickier, especially if you plan on removing entries, and not just append to it. Outside of using a database and apache 2.4's mod_dbd, I don't think any of these solutions are out of the box or production ready. It's going to require custom work.</p>
<blockquote>
<p>I know the best solution is Block the IPs at the firewall level is there any way to pragmatically add/remove IP to the firewall</p>
</blockquote>
<p>For IPtables, there is a <a href="http://sourceforge.net/projects/iptperl/">perl interface</a> that's marked as Beta, but I've never used it before. There's <a href="http://libiptc.sourceforge.net/">libiptc</a> but according to <a href="http://www.netfilter.org/documentation/FAQ/netfilter-faq-4.html#ss4.5">netfilter's faq</a>:</p>
<blockquote>
<p><strong>Is there an C/C++ API for adding/removing rules?</strong></p>
<p>The answer unfortunately is: No.</p>
<p>Now you might think 'but what about libiptc?'. As has been pointed out numerous times on the mailinglist(s), libiptc was <em>NEVER</em> meant to be used as a public interface. We don't guarantee a stable interface, and it is planned to remove it in the next incarnation of linux packet filtering. libiptc is way too low-layer to be used reasonably anyway.</p>
<p>We are well aware that there is a fundamental lack for such an API, and we are working on improving that situation. Until then, it is recommended to either use system() or open a pipe into stdin of iptables-restore. The latter will give you a way better performance.</p>
</blockquote>
<p>So I don't know how viable a libiptc solution is if there's no API stability.</p>
</div></text><author><a href="/users/851273/jon-lin">Jon Lin</a></author><comments><comment><text><span class="comment-copy">+nice one ... never used <code>htaccess</code> with file .. .. any performance issues ?</span></text><author><a class="comment-user owner" href="/users/1226894/baba" title="69,009 reputation">Baba</a></author></comment><comment><text><span class="comment-copy">@Baba The map needs to be defined in the vhost/server config, will cause error in htaccess. The rule itself can be placed in an htaccess file though, and obviously, it's a bit slower than in vhost/server config, but the file is short (doesn't contain the 100K IPs), so there shouldn't be any additional performance issues.</span></text><author><a class="comment-user" href="/users/851273/jon-lin" title="109,903 reputation">Jon Lin</a></author></comment><comment><text><span class="comment-copy">@JonLin, yup the rule could be moved to a <code>.htaccess</code> file, but as you point out the map  needs to be defined in the vhost/server config, so what's the point of the performance hit of moving the rule into an <code>.htaccess</code> file?</span></text><author><a class="comment-user" href="/users/1142045/terrye" title="7,444 reputation">TerryE</a></author></comment><comment><text><span class="comment-copy">@TerryE There's no point taking the hit, except maybe for lazy convenience. I only brought it up because Baba did in his comment.</span></text><author><a class="comment-user" href="/users/851273/jon-lin" title="109,903 reputation">Jon Lin</a></author></comment><comment><text><span class="comment-copy">@JonLin, and how to handle updates? I am failing to see a convenient method to update the file without leading to locking/concurrency/etcetera issues</span></text><author><a class="comment-user" href="/users/417685/alexander" title="17,947 reputation">Alexander</a></author></comment><comment><text><span class="comment-copy">@Alexander A thread safe solution to append to a file will depend on the OS. On linux, since the IP + space + "1" is smaller than <code>{PIPE_BUF}</code>, a single <code>echo "$IP 1" &gt;&gt; /path/to/deny_ips.txt</code> should be thread safe (See: <a href="http://linux.die.net/man/3/write" rel="nofollow noreferrer">linux.die.net/man/3/write</a>). For windows, I don't know.</span></text><author><a class="comment-user" href="/users/851273/jon-lin" title="109,903 reputation">Jon Lin</a></author></comment><comment><text><span class="comment-copy">the <code>perl interface</code> is just too old ... any idea on a PHP interface ?</span></text><author><a class="comment-user owner" href="/users/1226894/baba" title="69,009 reputation">Baba</a></author></comment><comment><text><span class="comment-copy">@Baba You mean for iptables? There isn't one. The best you can do with that without writing something custom is to directly call the <code>iptables</code> command to add/remove rules, and maybe setup the sudoers so that the user running php can sudo iptables without a password.</span></text><author><a class="comment-user" href="/users/851273/jon-lin" title="109,903 reputation">Jon Lin</a></author></comment><comment><text><span class="comment-copy">Would they be any locking issue writing to <code>/path/to/deny_ips.txt</code> from php ? I hope no restart would be required for each added IP address at real time</span></text><author><a class="comment-user owner" href="/users/1226894/baba" title="69,009 reputation">Baba</a></author></comment><comment><text><span class="comment-copy">@Baba According to the <a href="http://httpd.apache.org/docs/current/rewrite/rewritemap.html#txt" rel="nofollow noreferrer">RewriteMap docs</a>: <i>The looked-up keys are cached by httpd until the mtime (modified time) of the mapfile changes, or the httpd server is restarted. This ensures better performance on maps that are called by many requests.</i> Youwon't need to restart.</span></text><author><a class="comment-user" href="/users/851273/jon-lin" title="109,903 reputation">Jon Lin</a></author></comment><comment><text><span class="comment-copy">Using Apache to block IP's is totally bollocks. Why you want to unwrap the packet to HTTP level when you only need IP information for blocking? Now blocked users can stress your CPU and network stack. Good work! Note: Blocking IPs is done at IP level, not on HTTP level</span></text><author><a class="comment-user" href="/users/171318/hek2mgl" title="83,770 reputation">hek2mgl</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p><strong>ANOTHER PERSPECTIVE</strong></p>
<p>Hello. You can check if an address is blocked or not, via accessing two bytes in two data chunks each 8KB long. Yes, I am serious... Please be patient because it takes a little bit long to explain it.</p>
<p><strong>THE THEORY</strong></p>
<p>An IP address is an address, actually a 4 byte number. </p>
<p>The question is, what if we make it to address bit positions?.</p>
<p>The answer: Well ok, we will have </p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">  </span><span class="lit">2</span><span class="pun">^</span><span class="lit">32</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">4</span><span class="pln"> </span><span class="typ">Giga</span><span class="pln"> </span><span class="typ">Bits</span><span class="pln"> </span></code></pre>
<p>of addressing space and that will take </p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln"> </span><span class="lit">4Gb</span><span class="pun">/</span><span class="lit">8</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">512</span><span class="pln"> </span><span class="typ">Mega</span><span class="pln"> </span><span class="typ">Bytes</span></code></pre>
<p>of allocation. <strong>Ouch!</strong> But do not worry, we are not going to block everything in the ipverse and 512MB is an exaggeration. </p>
<p>This can open us a path to the solution. </p>
<p><strong>The Lilliputian Case</strong></p>
<p>Think of a Lilliputian world which there exists only ip addresses from 0 to 65535. So addresses are like 0.1 or 42.42 up to 255.255.</p>
<p>Now King of this world wants to block several L-IP (lilliput ip) addresses.</p>
<p>First he builds a virtual 2D bit map which is 256 * 256 bits long that takes up :</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln"> </span><span class="lit">64</span><span class="pln"> K </span><span class="typ">Bits</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">8</span><span class="pln"> K </span><span class="typ">Bytes</span><span class="pun">.</span></code></pre>
<p>He decides to block that nasty "revolution" site which he hates because he is the king, the address is 56.28 for instance.</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="typ">Address</span><span class="pln">     </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="lit">56</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">256</span><span class="pun">)</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="lit">28</span><span class="pln">  </span><span class="pun">=</span><span class="pln"> </span><span class="lit">14364.</span><span class="pun">(</span><span class="pln">bit position </span><span class="kwd">in</span><span class="pln"> whole map</span><span class="pun">)</span><span class="pln">
</span><span class="typ">Byte</span><span class="pln"> </span><span class="kwd">in</span><span class="pln"> map </span><span class="pun">=</span><span class="pln"> floor</span><span class="pun">(</span><span class="lit">14364</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> </span><span class="lit">8</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=</span><span class="pln">  </span><span class="lit">1795.</span><span class="pln">
</span><span class="typ">Bit</span><span class="pln"> position</span><span class="pun">=</span><span class="pln"> </span><span class="lit">14364</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> </span><span class="lit">8</span><span class="pln">        </span><span class="pun">=</span><span class="pln">     </span><span class="lit">4.</span><span class="pun">(</span><span class="pln">modulus</span><span class="pun">)</span></code></pre>
<p>He opens the map file, accesses 1795th byte and sets the bit 4 (by an | 16), then writes it back to mark the site as blocked.</p>
<p>When his script sees the 56.28, it does the same calculation and looks at the bit, and if it is set, blocks the address.</p>
<p>Now what is the moral of the story? Well we can use this lilliputian structure.</p>
<p><strong>THE PRACTICE</strong></p>
<p><strong>The Real World Case</strong></p>
<p>We can apply the Lilliputian case to real world with a "use it when you need" approach since allocating a 512MB file is not a good choice.</p>
<p>Think of a database table named BLOCKS with entries like that:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="typ">IpHead</span><span class="pun">(</span><span class="pln">key</span><span class="pun">):</span><span class="pln"> </span><span class="kwd">unsigned</span><span class="pln"> </span><span class="lit">16</span><span class="pln"> bit integer</span><span class="pun">,</span><span class="pln">
</span><span class="typ">Map</span><span class="pln">        </span><span class="pun">:</span><span class="pln"> </span><span class="lit">8KB</span><span class="pln"> BLOB</span><span class="pun">(</span><span class="kwd">fixed</span><span class="pln"> size</span><span class="pun">),</span><span class="pln">
</span><span class="typ">EntryCount</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="kwd">unsigned</span><span class="pln"> </span><span class="lit">16</span><span class="pln"> bit integer</span><span class="pun">.</span></code></pre>
<p>And another table with just one entry with the structure below named BASE</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="typ">Map</span><span class="pln">        </span><span class="pun">:</span><span class="pln"> </span><span class="lit">8KB</span><span class="pln"> BLOB</span><span class="pun">(</span><span class="kwd">fixed</span><span class="pln"> size</span><span class="pun">).</span></code></pre>
<p>Now lets say you have an incoming address 56.28.10.2</p>
<p>Script accesses BASE table and gets the Map. </p>
<p>It looks up the <strong>higher order</strong> IP numbers 56.28:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="typ">Address</span><span class="pln">     </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="lit">56</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">256</span><span class="pun">)</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="lit">28</span><span class="pln">  </span><span class="pun">=</span><span class="pln"> </span><span class="lit">14364.</span><span class="pun">(</span><span class="pln">bit position </span><span class="kwd">in</span><span class="pln"> whole map</span><span class="pun">)</span><span class="pln">
</span><span class="typ">Byte</span><span class="pln"> </span><span class="kwd">in</span><span class="pln"> map </span><span class="pun">=</span><span class="pln"> floor</span><span class="pun">(</span><span class="lit">14364</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> </span><span class="lit">8</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=</span><span class="pln">  </span><span class="lit">1795.</span><span class="pln">
</span><span class="typ">Bit</span><span class="pln"> position</span><span class="pun">=</span><span class="pln"> </span><span class="lit">14364</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> </span><span class="lit">8</span><span class="pln">        </span><span class="pun">=</span><span class="pln">     </span><span class="lit">4.</span><span class="pun">(</span><span class="pln">modulus</span><span class="pun">)</span></code></pre>
<p>Looks at byte 1795 bit 4 in the Map.</p>
<p>If bit is not set no further operation is needed meaning there is no blocked ip address in range 56.28.0.0 - 56.28.255.255 .</p>
<p>If bit is set then the script accesses the BLOCKS table. </p>
<p>The higher order IP numbers were 56.28 which gives 14364 so the script queries the BLOCKS table with index IpHead = 14364. Fetches the record. The record should exist since it is marked at BASE. </p>
<p>Script does the calculation for <strong>lower order</strong> IP address</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="typ">Address</span><span class="pln">     </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="lit">10</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">256</span><span class="pun">)</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="lit">2</span><span class="pln">   </span><span class="pun">=</span><span class="pln"> </span><span class="lit">2562.</span><span class="pun">(</span><span class="pln">bit position </span><span class="kwd">in</span><span class="pln"> whole map</span><span class="pun">)</span><span class="pln">
</span><span class="typ">Byte</span><span class="pln"> </span><span class="kwd">in</span><span class="pln"> map </span><span class="pun">=</span><span class="pln"> floor</span><span class="pun">(</span><span class="lit">2562</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> </span><span class="lit">8</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=</span><span class="pln">   </span><span class="lit">320.</span><span class="pln">
</span><span class="typ">Bit</span><span class="pln"> position</span><span class="pun">=</span><span class="pln"> </span><span class="lit">2562</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> </span><span class="lit">8</span><span class="pln">        </span><span class="pun">=</span><span class="pln">     </span><span class="lit">2.</span><span class="pun">(</span><span class="pln">modulus</span><span class="pun">)</span></code></pre>
<p>Then it checks if address is blocked by looking at bit 2 of byte 320 of field Map.</p>
<p>Job done!</p>
<p><strong>Q1:</strong> Why do we use BASE at all, we could directly query BLOCKS with 14364.</p>
<p><strong>A1:</strong> Yes we could but BASE map lookup will be faster then BTREE search of any database server.</p>
<p><strong>Q2:</strong> What is the EntryCount field in BLOCKS table for?</p>
<p><strong>A2:</strong> It is the count of ip addresses blocked in the map field at the same record.
        So if we unblock ip's and EntryCount reaches 0 that BLOCKS record becomes
        unnecessary. It can be erased and the corresponding bit on BASE map will be unset.</p>
<p>IMHO this approach will be lightning fast. Also for the blob allocation is 8K per record. Since db servers keep blobs in seperate files, file systems with 4K, 8K or multiples of 4K paging will react fast.</p>
<p><strong>In case blocked addresses are too dispersed</strong></p>
<p>Well that is a concern, which will make the database BLOCKS table to grow unnecessarily.</p>
<p>But for such cases the alternative is to use a 256*256*256 bit cube which is 16777216 bits long, equaling to 2097152 bytes = 2MB. </p>
<p>For our previous example Higher Ip resolving is :</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pun">(</span><span class="lit">56</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">65536</span><span class="pun">)+(</span><span class="lit">28</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">256</span><span class="pun">)+</span><span class="lit">10</span><span class="pln">      </span></code></pre>
<p>So BASE will become a 2MB file instead of a db table record, which will be opened (fopen etc.) and bit will be addressed via seeking (like fseek, <strong>never</strong> read whole file contents, unnecessary) then access the BLOCKS table with structure below:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="typ">IpHead</span><span class="pun">(</span><span class="pln">key</span><span class="pun">):</span><span class="pln"> </span><span class="kwd">unsigned</span><span class="pln"> </span><span class="lit">32</span><span class="pln"> bit integer</span><span class="pun">,</span><span class="pln"> </span><span class="pun">(</span><span class="pln">only </span><span class="lit">24</span><span class="pln"> bit </span><span class="kwd">is</span><span class="pln"> used</span><span class="pun">)</span><span class="pln">
</span><span class="typ">Map</span><span class="pln">        </span><span class="pun">:</span><span class="pln"> </span><span class="lit">32</span><span class="pln"> </span><span class="kwd">unsigned</span><span class="pln"> </span><span class="lit">8</span><span class="pln"> bit integers</span><span class="pun">(</span><span class="kwd">char</span><span class="pln"> maybe</span><span class="pun">),(</span><span class="lit">256</span><span class="pln"> bit </span><span class="kwd">fixed</span><span class="pun">)</span><span class="pln">
</span><span class="typ">EntryCount</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="kwd">unsigned</span><span class="pln"> </span><span class="lit">8</span><span class="pln"> bit integer</span><span class="pun">.</span><span class="pln"> </span></code></pre>
<p>Here is the php example code for block checking of bitplane-bitplane (8K 8K) version:</p>
<p>Side Note: This script can be optimized further via elimination of several calls etc..
           But written like this for keeping it easy to understand.</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pun">&lt;?</span><span class="pln">
define</span><span class="pun">(</span><span class="str">'BLOCK_ON_ERROR'</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">);</span><span class="pln"> </span><span class="com">// WARNING if true errors block everyone</span><span class="pln">

$shost </span><span class="pun">=</span><span class="pln"> </span><span class="str">'hosturl'</span><span class="pun">;</span><span class="pln">
$suser </span><span class="pun">=</span><span class="pln"> </span><span class="str">'username'</span><span class="pun">;</span><span class="pln">
$spass </span><span class="pun">=</span><span class="pln"> </span><span class="str">'password'</span><span class="pun">;</span><span class="pln">
$sdbip </span><span class="pun">=</span><span class="pln"> </span><span class="str">'database'</span><span class="pun">;</span><span class="pln">
$slink </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span><span class="pln">

$slink </span><span class="pun">=</span><span class="pln"> mysqli_connect</span><span class="pun">(</span><span class="pln">$shost</span><span class="pun">,</span><span class="pln"> $suser</span><span class="pun">,</span><span class="pln"> $spass</span><span class="pun">,</span><span class="pln"> $sdbip</span><span class="pun">);</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln"> $slink</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    $blocked </span><span class="pun">=</span><span class="pln"> BLOCK_ON_ERROR</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    $blocked </span><span class="pun">=</span><span class="pln"> isBlocked</span><span class="pun">();</span><span class="pln">
    mysqli_close</span><span class="pun">(</span><span class="pln">$slink</span><span class="pun">);</span><span class="pln"> </span><span class="com">// clean, tidy...</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$blocked</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="com">// do what ever you want when blocked</span><span class="pln">
</span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="com">// do what ever you want when not blocked</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
</span><span class="kwd">exit</span><span class="pun">(</span><span class="lit">0</span><span class="pun">);</span><span class="pln">

</span><span class="kwd">function</span><span class="pln"> getUserIp</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    $st </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">(</span><span class="pln">
            </span><span class="str">'HTTP_CLIENT_IP'</span><span class="pun">,</span><span class="pln">
            </span><span class="str">'REMOTE_ADDR'</span><span class="pun">,</span><span class="pln">
            </span><span class="str">'HTTP_X_FORWARDED_FOR'</span><span class="pln">
    </span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">foreach</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> $st </span><span class="kwd">as</span><span class="pln"> $v </span><span class="pun">)</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln"> empty</span><span class="pun">(</span><span class="pln">$_SERVER</span><span class="pun">[</span><span class="pln">$v</span><span class="pun">]))</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$_SERVER</span><span class="pun">[</span><span class="pln">$v</span><span class="pun">]);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="str">""</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">function</span><span class="pln"> ipToArray</span><span class="pun">(</span><span class="pln">$ip</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    $ip </span><span class="pun">=</span><span class="pln"> explode</span><span class="pun">(</span><span class="str">'.'</span><span class="pun">,</span><span class="pln"> $ip</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">foreach</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> $ip </span><span class="kwd">as</span><span class="pln"> $k </span><span class="pun">=&gt;</span><span class="pln"> $v </span><span class="pun">)</span><span class="pln">
        $ip</span><span class="pun">[</span><span class="pln">$k</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> intval</span><span class="pun">(</span><span class="pln">$v</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$ip</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">function</span><span class="pln"> calculateBitPos</span><span class="pun">(</span><span class="pln">$IpH</span><span class="pun">,</span><span class="pln"> $IpL</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    $BitAdr </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$IpH </span><span class="pun">*</span><span class="pln"> </span><span class="lit">256</span><span class="pun">)</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> $IpL</span><span class="pun">;</span><span class="pln">
    $BytAdr </span><span class="pun">=</span><span class="pln"> floor</span><span class="pun">(</span><span class="pln">$BitAdr </span><span class="pun">/</span><span class="pln"> </span><span class="lit">8</span><span class="pun">);</span><span class="pln">
    $BitOfs </span><span class="pun">=</span><span class="pln"> $BitAdr </span><span class="pun">%</span><span class="pln"> </span><span class="lit">8</span><span class="pun">;</span><span class="pln">
    $BitMask </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">
    $BitMask </span><span class="pun">=</span><span class="pln"> $BitMask </span><span class="pun">&lt;&lt;</span><span class="pln"> $BitOfs</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln">array</span><span class="pun">(</span><span class="pln">
            </span><span class="str">'bytePos'</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> $BytAdr</span><span class="pun">,</span><span class="pln">
            </span><span class="str">'bitMask'</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> $BitMask
    </span><span class="pun">));</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">function</span><span class="pln"> getBaseMap</span><span class="pun">(</span><span class="pln">$link</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    $q </span><span class="pun">=</span><span class="pln"> </span><span class="str">'SELECT * FROM BASE WHERE id = 0'</span><span class="pun">;</span><span class="pln">
    $r </span><span class="pun">=</span><span class="pln"> mysqli_query</span><span class="pun">(</span><span class="pln">$link</span><span class="pun">,</span><span class="pln"> $q</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln"> $r</span><span class="pun">)</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">null</span><span class="pun">);</span><span class="pln">
    $m </span><span class="pun">=</span><span class="pln"> mysqli_fetch_assoc</span><span class="pun">(</span><span class="pln">$r</span><span class="pun">);</span><span class="pln">
    mysqli_free_result</span><span class="pun">(</span><span class="pln">$r</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$m</span><span class="pun">[</span><span class="str">'map'</span><span class="pun">]);</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">function</span><span class="pln"> getBlocksMap</span><span class="pun">(</span><span class="pln">$link</span><span class="pun">,</span><span class="pln"> $IpHead</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    $q </span><span class="pun">=</span><span class="pln"> </span><span class="str">"SELECT * FROM BLOCKS WHERE IpHead = $IpHead"</span><span class="pun">;</span><span class="pln">
    $r </span><span class="pun">=</span><span class="pln"> mysqli_query</span><span class="pun">(</span><span class="pln">$link</span><span class="pun">,</span><span class="pln"> $q</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln"> $r</span><span class="pun">)</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">null</span><span class="pun">);</span><span class="pln">
    $m </span><span class="pun">=</span><span class="pln"> mysqli_fetch_assoc</span><span class="pun">(</span><span class="pln">$r</span><span class="pun">);</span><span class="pln">
    mysqli_free_result</span><span class="pun">(</span><span class="pln">$r</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$m</span><span class="pun">[</span><span class="str">'map'</span><span class="pun">]);</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">function</span><span class="pln"> isBlocked</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">global</span><span class="pln"> $slink</span><span class="pun">;</span><span class="pln">
    $ip </span><span class="pun">=</span><span class="pln"> getUserIp</span><span class="pun">();</span><span class="pln">
    </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">$ip </span><span class="pun">==</span><span class="pln"> </span><span class="str">""</span><span class="pun">)</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln">BLOCK_ON_ERROR</span><span class="pun">);</span><span class="pln">
    $ip </span><span class="pun">=</span><span class="pln"> ipToArray</span><span class="pun">(</span><span class="pln">$ip</span><span class="pun">);</span><span class="pln">

    </span><span class="com">// here you can embed preliminary checks like ip[0] = 10 exit(0)</span><span class="pln">
    </span><span class="com">// for unblocking or blocking address range 10 or 192 or 127 etc....</span><span class="pln">

    </span><span class="com">// Look at base table base record.</span><span class="pln">
    </span><span class="com">// map is a php string, which in fact is a good byte array</span><span class="pln">
    $map </span><span class="pun">=</span><span class="pln"> getBaseMap</span><span class="pun">(</span><span class="pln">$slink</span><span class="pun">);</span><span class="pln"> 
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln"> $map</span><span class="pun">)</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln">BLOCK_ON_ERROR</span><span class="pun">);</span><span class="pln">
    $p </span><span class="pun">=</span><span class="pln"> calculateBitPos</span><span class="pun">(</span><span class="pln">$ip</span><span class="pun">[</span><span class="lit">0</span><span class="pun">],</span><span class="pln"> $ip</span><span class="pun">[</span><span class="lit">1</span><span class="pun">]);</span><span class="pln">
    $c </span><span class="pun">=</span><span class="pln"> ord</span><span class="pun">(</span><span class="pln">$map</span><span class="pun">[</span><span class="pln">$p</span><span class="pun">[</span><span class="str">'bytePos'</span><span class="pun">]]);</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">((</span><span class="pln">$c </span><span class="pun">&amp;</span><span class="pln"> $p</span><span class="pun">[</span><span class="str">'bitMask'</span><span class="pun">])</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">false</span><span class="pun">);</span><span class="pln"> </span><span class="com">// No address blocked</span><span class="pln">

    </span><span class="com">// Look at blocks table related record</span><span class="pln">
    $map </span><span class="pun">=</span><span class="pln"> getBlocksMap</span><span class="pun">(</span><span class="pln">$slink</span><span class="pun">,</span><span class="pln"> $p</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]);</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln"> $map</span><span class="pun">)</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln">BLOCK_ON_ERROR</span><span class="pun">);</span><span class="pln">
    $p </span><span class="pun">=</span><span class="pln"> calculateBitPos</span><span class="pun">(</span><span class="pln">$ip</span><span class="pun">[</span><span class="lit">2</span><span class="pun">],</span><span class="pln"> $ip</span><span class="pun">[</span><span class="lit">3</span><span class="pun">]);</span><span class="pln">
    $c </span><span class="pun">=</span><span class="pln"> ord</span><span class="pun">(</span><span class="pln">$map</span><span class="pun">[</span><span class="pln">$p</span><span class="pun">[</span><span class="str">'bytePos'</span><span class="pun">]]);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">((</span><span class="pln">$c </span><span class="pun">&amp;</span><span class="pln"> $p</span><span class="pun">[</span><span class="str">'bitMask'</span><span class="pun">])</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="pun">?&gt;</span><span class="pln"> </span></code></pre>
<p>I hope this helps.</p>
<p>If you have questions on the details, I will be happy to answer.</p>
</div></text><author><a href="/users/2044316/ihsan">Ihsan</a></author><comments><comment><text><span class="comment-copy">Anyway to manage this pragmatically ?</span></text><author><a class="comment-user owner" href="/users/1226894/baba" title="69,009 reputation">Baba</a></author></comment><comment><text><span class="comment-copy">For Management: Adding/Removing IP's =&gt;A backend PHP script will suffice. To check incoming ip's a:php script, b: .htaccess invoking some magic thing (again maybe php) that I am not familiar. Generally speaking, implementing this is a childs play, Integrating it to a firewall or htaccess is a mystery for me. I can add php examples to my answer if you want.</span></text><author><a class="comment-user" href="/users/2044316/ihsan" title="2,114 reputation">Ihsan</a></author></comment><comment><text><span class="comment-copy">I added a blocking script for 8K 8K bitplane mode.</span></text><author><a class="comment-user" href="/users/2044316/ihsan" title="2,114 reputation">Ihsan</a></author></comment><comment><text><span class="comment-copy">@Ihsan Where the heck you are? No more PHP room? ping me so I will delete this comment</span></text><author><a class="comment-user" href="/users/1542290/mr-alien" title="97,806 reputation">Mr. Alien</a></author></comment><comment><text><span class="comment-copy">This is a cute solution, but we're reaching the point where somewhere out there some people may use IPv6.</span></text><author><a class="comment-user" href="/users/124119/camilo-martin" title="14,620 reputation">Camilo Martin</a></author></comment><comment><text><span class="comment-copy">This is fing genius</span></text><author><a class="comment-user" href="/users/2415293/php-nub-qq" title="6,116 reputation">php_nub_qq</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>You need to do this with an external firewall, not in PHP.  I recommend <a href="http://www.pfsense.org/" rel="noreferrer">pfSense</a> or <a href="http://www.thedeepsky.com/howto/newbie_pf_guide.php" rel="noreferrer">PF</a>.  I have used it before and it is very easy to use, very intuitive, and extremely powerful.  It is the choice of the best sys-admins.  I run it on FreeBSD, but it works great on OpenBSD as well.  I am a Linux guy so it pains me to say this, but <em>don't</em> try to run it on Linux.  BSD is easy, and you can figure it out quickly.</p>
<p>An awesome feature for pfSense is the ability to configure using scripts and restricting the configuration access to a single network interface (so that only things on the LAN can configure it).  It also has a couple of ID10T level features to keep you from cutting off your own access accidentally.</p>
<p>You should also be aware that many spammers can switch IPs quickly using things like <a href="http://www.torproject.org" rel="noreferrer">Tor</a>.  To fix this you should include in your block list the addresses that are known tor exit nodes (this list is available from various places).</p>
</div></text><author><a href="/users/2062384/freedom-ben">Freedom_Ben</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>If you want a way to add / remove via code take a look at <a href="http://denyhosts.sourceforge.net/">denyhosts</a>. You could either maintain the IP list via code or patch the source to read from whatever location you want.</p>
</div></text><author><a href="/users/491682/ethrbunny">ethrbunny</a></author><comments><comment><text><span class="comment-copy">Unfortunately, this targets specifically SSH</span></text><author><a class="comment-user" href="/users/417685/alexander" title="17,947 reputation">Alexander</a></author></comment><comment><text><span class="comment-copy">denyhosts can work with / against any protocol.</span></text><author><a class="comment-user" href="/users/491682/ethrbunny" title="7,039 reputation">ethrbunny</a></author></comment><comment><text><span class="comment-copy">@ethrbunny : to be precise, any protocol wrapper by tcp_wrappers.</span></text><author><a class="comment-user" href="/users/1121249/rkosegi" title="6,484 reputation">rkosegi</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Block the traffic before it reaches the www server using iptables and ipset.</p>
<p>Catch the blacklisted IP traffic in the filter table of the INPUT chain assuming your web server is on the same machine. If you are blocking IPs on a router you will want the FORWARD chain.</p>
<p>First create the ipset:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">ipset create ip_blacklist hash</span><span class="pun">:</span><span class="pln">ip</span></code></pre>
<p>IPs can be added via:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">ipset add ip_blacklist xxx</span><span class="pun">.</span><span class="pln">xxx</span><span class="pun">.</span><span class="pln">xxx</span><span class="pun">.</span><span class="pln">xxx</span></code></pre>
<p>Add the ipset match rule to your iptables (DROP all packets match to ipset):</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">iptables </span><span class="pun">--</span><span class="pln">table filter </span><span class="pun">--</span><span class="pln">insert INPUT </span><span class="pun">--</span><span class="pln">match </span><span class="kwd">set</span><span class="pln"> </span><span class="pun">--</span><span class="pln">match</span><span class="pun">-</span><span class="kwd">set</span><span class="pln"> ip_blacklist src </span><span class="pun">-</span><span class="pln">j DROP</span></code></pre>
<p>This will stop the blacklisted traffic before the www server.</p>
<p>Edit: I had a chance to look up the default maximum size and it is 65536 so you will need to adjust this to support 100000+ entries:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">ipset create ip_blacklist hash</span><span class="pun">:</span><span class="pln">ip maxelem </span><span class="lit">120000</span></code></pre>
<p>You can also tweak the hash size:</p>
<p><code>ipset create ip_blacklist hash:ip maxelem 120000 hashsize 16384</code> (Must be a power of 2)</p>
<p>My experience is ipset lookup has negligible effect on my system (~45000 entries).  There are a number of test cases on the net.  Memory for the set is a limiting factor.</p>
</div></text><author><a href="/users/1958282/donald-chisholm">Donald Chisholm</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>There is a project with netfilter for that called ipset so you can add or remove ip to a list and you just have to create a rule against this list</p>
<p><a href="http://ipset.netfilter.org/" rel="nofollow">http://ipset.netfilter.org/</a></p>
</div></text><author><a href="/users/1517028/atrepp">atrepp</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>If you're blocking IPs, you really should be doing this at the firewall level (you don't want users from unwelcome IP addresses getting very far into your system). Thus, I suggest writing a bash script that queries the database and modifies your firewall configuration file accordingly (this assumes that you want a solution which utilizes IP addresses stored in your web database -- there very well might be a better place to store such information).</p>
<p>EDIT: If you wanted to add IP addresses to the blacklist at the PHP level, as @Populus suggested, here is the manual on how to use system calls in PHP: <a href="http://php.net/manual/en/function.system.php" rel="nofollow">http://php.net/manual/en/function.system.php</a></p>
<p>And here are the commands you would need to use to add an ip address to your blacklist if you're using iptables: <a href="http://www.cyberciti.biz/faq/linux-iptables-drop/" rel="nofollow">http://www.cyberciti.biz/faq/linux-iptables-drop/</a></p>
</div></text><author><a href="/users/2103349/2to1mux">2to1mux</a></author><comments><comment><text><span class="comment-copy">I already said <code>I know the best solution is Block the IPs at the firewall level is there any way to pragmatically add/remove IP to the firewall</code> .....</span></text><author><a class="comment-user owner" href="/users/1226894/baba" title="69,009 reputation">Baba</a></author></comment><comment><text><span class="comment-copy">Well, I just gave you a suggestion for doing so. Write a simple bash script that queries your mysql database and adds IP addresses to the firewall blacklist. You could also, as @Populus suggested, utilize system calls via PHP to do this if you would rather handle the logic of adding IP addresses in PHP.</span></text><author><a class="comment-user" href="/users/2103349/2to1mux" title="577 reputation">2to1mux</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I know a way<br/>
its by php.
as you mentioned in the very beginig of this question.</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">$ipList </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[];</span><span class="pln"> </span><span class="com">// array list or from database</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">in_array</span><span class="pun">(</span><span class="pln">getIP</span><span class="pun">(),</span><span class="pln"> $ipList</span><span class="pun">))</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="com">// Log IP &amp; Access information</span><span class="pln">
    header</span><span class="pun">(</span><span class="str">"https://www.google.com.ng/search?q=fool"</span><span class="pun">);</span><span class="pln"> </span><span class="com">// redirect</span><span class="pln">
    </span><span class="kwd">exit</span><span class="pun">();</span><span class="pln"> </span><span class="com">// exit</span><span class="pln">
</span><span class="pun">}</span><span class="pln"> </span></code></pre>
<p>I read thing you have wrote. but just wait a minute.<br/>
why you want to do this.is not important.but why with this situation.<br/>
I mean why would you want to avoid accessing php because of its speed or just because of preventing and because its so hard to call the function in all pages?
if the only reason of avoiding some ip from accessing php is.avoiding theme to see contents.<br/>
so I got an idea and I.suggest you this way.
<br/>
using one entry point.<br/></p>
<p>I have worked with this solution.</p>
<p>first with a simple htaccess you send all requests to one page called entry point.(like index.php)<br/>
with a simple rewriting rule i'll give it to you.
so when the user requests</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">mysite</span><span class="pun">.</span><span class="pln">com</span><span class="pun">/</span><span class="pln">some</span><span class="pun">/</span><span class="pln">path</span><span class="pun">/</span><span class="pln">page</span><span class="pun">.</span><span class="pln">php </span><span class="kwd">or</span><span class="pln"> anything</span></code></pre>
<p>htaccess will execute something like the following without changing the url. so the user would not feel anything.</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">mysite</span><span class="pun">.</span><span class="pln">com</span><span class="pun">/</span><span class="pln">index</span><span class="pun">.</span><span class="pln">php</span><span class="pun">?</span><span class="pln">r</span><span class="pun">=</span><span class="pln">some</span><span class="pun">/</span><span class="pln">path</span><span class="pun">/</span><span class="pln">page</span><span class="pun">.</span><span class="pln">php</span></code></pre>
<p>so every request became one request with different $_GET['r'] params. so for evey request we will have index.php executed. and now we can do somthing like this in index.php</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">$ipList </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[];</span><span class="pln"> </span><span class="com">// array list or from database</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">in_array</span><span class="pun">(</span><span class="pln">getIP</span><span class="pun">(),</span><span class="pln"> $ipList</span><span class="pun">))</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="com">// Log IP &amp; Access information</span><span class="pln">
    header</span><span class="pun">(</span><span class="str">"https://www.google.com.ng/search?q=fool"</span><span class="pun">);</span><span class="pln"> </span><span class="com">// redirect</span><span class="pln">
    </span><span class="kwd">exit</span><span class="pun">();</span><span class="pln"> </span><span class="com">// exit</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
</span><span class="com">//if after this execute means the IP is not banned</span><span class="pln">
</span><span class="com">//now we can include file that $_GET['r'] points to</span><span class="pln">
include $_GET</span><span class="pun">[</span><span class="str">'r'</span><span class="pun">];</span></code></pre>
<p>its so simple.and its real one is so complicated.but the main idea is the same.
what do you think?</p>
</div></text><author><a href="/users/2226796/ncm">ncm</a></author><comments><comment><text><span class="comment-copy">Or you could automatically prepend the file <a href="http://php.net/manual/en/ini.core.php#ini.auto-prepend-file" rel="nofollow noreferrer">php.net/manual/en/ini.core.php#ini.auto-prepend-file</a></span></text><author><a class="comment-user" href="/users/81785/moak" title="5,742 reputation">Moak</a></author></comment><comment><text><span class="comment-copy"><code>include $_GET['r'];</code> without is a bad idea ? So many security issues with that ...</span></text><author><a class="comment-user owner" href="/users/1226894/baba" title="69,009 reputation">Baba</a></author></comment><comment><text><span class="comment-copy">thanks @Moak. yes you can but with this solution you can more than appending or prepending.I mean for example you can filter the file before run or you can include another file or redirect user to another page and you can do what you can do with php.(-:</span></text><author><a class="comment-user" href="/users/2226796/ncm" title="1,508 reputation">ncm</a></author></comment><comment><text><span class="comment-copy">thanks @Baba sure tou are right.but if you have mentioned to what I had said after that."its so simple.and its real one is so complicated.but the main idea is the same. what do you think?". and As I said in previous comment you can do so many things As maybe all frameworks do that (especially MVCframeworks) like routing IP filtering and ... .(-:</span></text><author><a class="comment-user" href="/users/2226796/ncm" title="1,508 reputation">ncm</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>It seems that most of us agree to <strong>block at the firewall level</strong>.</p>
<p>You could have a program that listens to your website for ips to block and generates a script:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">ip </span><span class="pun">=</span><span class="pln"> getNextIpToBlock</span><span class="pun">()</span><span class="pln">
an </span><span class="pun">=</span><span class="pln"> increment_unique_alphanum_generator</span><span class="pun">()</span><span class="pln">
script </span><span class="pun">=</span><span class="pln"> generate_script</span><span class="pun">(</span><span class="pln">ip</span><span class="pun">,</span><span class="pln"> an</span><span class="pun">)</span></code></pre>
<p>script would look something like this (where [an] is an alphanumeric value and [ip] is the ip you block):</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">en </span><span class="pun">[</span><span class="pln">enter</span><span class="pun">]</span><span class="pln">
</span><span class="pun">*</span><span class="pln">password</span><span class="pun">*</span><span class="pln"> </span><span class="pun">[</span><span class="pln">enter</span><span class="pun">]</span><span class="pln">
conf t </span><span class="pun">[</span><span class="pln">enter</span><span class="pun">]</span><span class="pln">
access</span><span class="pun">-</span><span class="pln">list </span><span class="pun">[</span><span class="pln">an</span><span class="pun">]</span><span class="pln"> deny ip </span><span class="pun">[</span><span class="pln">ip</span><span class="pun">]</span><span class="pln"> </span><span class="lit">0.0</span><span class="pun">.</span><span class="lit">0.0</span><span class="pln"> any </span><span class="pun">[</span><span class="pln">enter</span><span class="pun">]</span><span class="pln">
access</span><span class="pun">-</span><span class="kwd">group</span><span class="pln"> </span><span class="pun">[</span><span class="pln">an</span><span class="pun">]</span><span class="pln"> </span><span class="kwd">in</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> outside </span><span class="pun">[</span><span class="pln">enter</span><span class="pun">]</span></code></pre>
<p>Then you load this script to another program that executes remote telnet or ssh calls to your FW CLI.</p>
<p>Don't forget to logout and maybe every 100 ips you copy the running config to start config. </p>
<p>I don't know but you may want to know now what are the limitations for your firewall.</p>
<p>Best,</p>
</div></text><author><a href="/users/2229918/yannis">Yannis</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Do a geo-lookup on the IPs in your list.  My own experience has shown most malicious (i.e. spam) connections have originated from China.  If you find the same to be the case for you, and you have no specific need to serve China, see if you can efficiently block the entire country at the firewall level.</p>
</div></text><author><a href="/users/545332/jason">Jason</a></author><comments><comment><text><span class="comment-copy">Are you sure you really want to block all <code>Kung Fu</code> fans ?</span></text><author><a class="comment-user owner" href="/users/1226894/baba" title="69,009 reputation">Baba</a></author></comment><comment><text><span class="comment-copy">I took a different approach personally that yielded success for (looks at watch) about 4 months, but it's breaking down and they're getting past it now.  I'm tempted to nuke access from orbit; it's the only way to be sure.</span></text><author><a class="comment-user" href="/users/545332/jason" title="9,960 reputation">Jason</a></author></comment><comment><text><span class="comment-copy">-1, the Chinese have a hard time accessing a neutral web, as it is. Don't make it harder on them by blocking based on where their requests come from instead on their merits.</span></text><author><a class="comment-user" href="/users/383793/chris-wesseling" title="3,671 reputation">Chris Wesseling</a></author></comment><comment><text><span class="comment-copy">When the site in question is a store that isn't likely to ship to them anyway, their access concerns are secondary to our ability to functionally use our own site's communication features.</span></text><author><a class="comment-user" href="/users/545332/jason" title="9,960 reputation">Jason</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>IMHO, there are several angles from which this question can be considered</p>
<ol>
<li>You have a very large set of unique IP addresses to block. The
earlier you block them on your server, the less processing power you
will waste on them. You can add/remove IPs in your firewall through appropriate system calls from PHP.</li>
</ol>
<p>Considering the above option, the only relevant questions are:</p>
<ul>
<li><em>Do they visit often?</em> 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	=&gt;	 If so, then solution (1) is your best bet.</li>
<li>Can your firewall handle it efficiently?	 	=&gt; 	 If not, you may want to consider an other solution.</li>
</ul>
<p>The <code>.htaccess</code> would be my second choice.</p>
</div></text><author><a href="/users/1697109/jean">Jean</a></author><comments/></answer></answers></post>