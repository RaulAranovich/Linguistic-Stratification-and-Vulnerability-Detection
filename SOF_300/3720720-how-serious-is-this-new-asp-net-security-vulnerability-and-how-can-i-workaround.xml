<?xml version="1.0" encoding="utf-8"?>
<post><title>.net - How serious is this new ASP.NET security vulnerability and how can I workaround it? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I've just read on the net about a newly discovered security vulnerability in ASP.NET. <a href="http://threatpost.com/en_us/blogs/new-crypto-attack-affects-millions-aspnet-apps-091310" rel="noreferrer">You can read the details here.</a></p>
<blockquote>
<p>The problem lies in the way that
  ASP.NET implements the AES encryption
  algorithm to protect the integrity of
  the cookies these applications
  generate to store information during
  user sessions.</p>
</blockquote>
<p>This is a bit vague, but here is a more frightening part:</p>
<blockquote>
<p>The first stage of the attack takes a
  few thousand requests, but once it
  succeeds and the attacker gets the
  secret keys, it's totally stealthy.The
  cryptographic knowledge required is
  very basic.</p>
</blockquote>
<p>All in all, I'm not familiar enough with the security/cryptograpy subject to know if this is really that serious.</p>
<p>So, should all ASP.NET developers fear this technique that <em>can own any ASP.NET website in seconds</em> or what?</p>
<p>How does this issue affect the average ASP.NET developer? Does it affect us at all?
In real life, what are the consequences of this vulnerability? And, finally: is there some workaround that prevents this vulnerability?</p>
<p>Thanks for your answers!</p>
<hr/>
<h2>EDIT: Let me summarize the responses I got</h2>
<p>So, this is basically a "padding oracle" type of attack. <a href="http://stackoverflow.com/questions/3720720/how-serious-is-this-new-asp-net-security-vulnerability-and-how-can-i-workaround-i/3721473#3721473">@Sri</a> provided a great explanation about what does this type of attack mean. <a href="http://www.youtube.com/watch?v=yghiC_U2RaM" rel="noreferrer">Here is a shocking video about the issue!</a></p>
<p>About the seriousness of this vulnerability: Yes, it is indeed serious. <em>It lets the attacker to get to know the machine key of an application.</em> Thus, he can do some <strong>very</strong> unwanted things.</p>
<ul>
<li>In posession of the app's machine key, the attacker can decrypt authentication cookies.</li>
<li>Even worse than that, he can <strong>generate authentication cookies</strong> with the name of any user. Thus, he can appear as anyone on the site. The application is unable to differentiate between you or the hacker who generated an authentication cookie with your name for himself.</li>
<li>It also lets him to decrypt (and also generate) <strong>session cookies</strong>, although this is not as dangerous as the previous one.</li>
<li>Not so serious: He can decrypt the encrypted ViewState of pages. (If you use ViewState to store confidental data, you shouldn't do this anyways!)</li>
<li><strong>Quite unexpected</strong>: With the knowledge of the machine key, the attacker <strong>can download</strong> any arbitrary file from your web application, even those that normally can't be downloaded! (Including <strong>Web.Config</strong>, etc.)</li>
</ul>
<p>Here is a bunch of good practices I got that <strong>don't</strong> solve the issue but help improve the general security of a web application.</p>
<ul>
<li><a href="http://msdn.microsoft.com/en-us/library/zhhddkxy%28VS.80%29.aspx" rel="noreferrer">You can encrypt sensitive data with Protected Configuration</a></li>
<li><a href="http://www.codinghorror.com/blog/2008/08/protecting-your-cookies-httponly.html" rel="noreferrer">Use HTTP Only cookies</a></li>
<li>Prevent DoS attacks</li>
</ul>
<p>Now, let's focus on this issue.</p>
<ul>
<li><a href="http://weblogs.asp.net/scottgu/archive/2010/09/18/important-asp-net-security-vulnerability.aspx" rel="noreferrer">Scott Guthrie published an entry about it on his blog</a></li>
<li><a href="http://weblogs.asp.net/scottgu/archive/2010/09/20/frequently-asked-questions-about-the-asp-net-security-vulnerability.aspx" rel="noreferrer">ScottGu's FAQ blog post about the vulnerability</a></li>
<li><a href="http://weblogs.asp.net/scottgu/archive/2010/09/24/update-on-asp-net-vulnerability.aspx" rel="noreferrer">ScottGu's update on the vulnerability</a></li>
<li><a href="http://www.microsoft.com/technet/security/advisory/2416728.mspx" rel="noreferrer">Microsoft has a security advisory about it</a></li>
<li><a href="http://blogs.technet.com/b/srd/archive/2010/09/17/understanding-the-asp-net-vulnerability.aspx" rel="noreferrer">Understanding the vulnerability</a></li>
<li><a href="http://blogs.technet.com/b/srd/archive/2010/09/20/additional-information-about-the-asp-net-vulnerability.aspx" rel="noreferrer">Additional information about the vulnerability</a></li>
</ul>
<p>The solution</p>
<ul>
<li>Enable customErrors and make a single error page to which <strong>all errors</strong> are redirected. Yes, <strong>even 404s</strong>. (ScottGu said that differentiating between 404s and 500s are essential for this attack.) Also, into your <code>Application_Error</code> or <code>Error.aspx</code> put some code that makes a random delay. (Generate a random number, and use Thread.Sleep to sleep for that long.) This will make it impossible for the attacker to decide what exactly happened on your server.</li>
<li>Some people recommended switching back to 3DES. In theory, if you don't use AES, you don't encounter the security weakness in the AES implementation. As it turns out, this is <strong>not recommended at all</strong>.</li>
</ul>
<p>Some other thoughts</p>
<ul>
<li>Seems that <a href="http://www.onpreinit.com/2010/09/aspnet-vulnerability-workaround-flawed.html" rel="noreferrer">not</a> <a href="http://blogs.microsoft.co.il/blogs/linqed/archive/2010/09/19/padding-oracle-asp-net-vulnerability-explanation.aspx" rel="noreferrer">everyone</a> thinks the workaround is good enough.</li>
</ul>
<p>Thanks to everyone who answered my question. I learned a lot about not only this issue, but web security in general. I marked @Mikael's answer as accepted, but the other answers are also very useful.</p>
</div></text><author><a href="/users/1816580/artjom-b">Artjom B.</a></author><comments><comment><text><span class="comment-copy">@TimS - Thanks. :) To be honest, I'm really worried about this issue, thus the question.</span></text><author><a class="comment-user owner" href="/users/202919/venemo" title="10,493 reputation">Venemo</a></author></comment><comment><text><span class="comment-copy">Venemo, can I just say that I do not think this is a good place for this request (judging by the answers). Voting is not a good way to resolve this question, it needs to be answered by an expert (and you don't need to be an expert to vote). I recommend: <a href="http://www.mail-archive.com/cryptography@metzdowd.com/maillist.html" rel="nofollow noreferrer">mail-archive.com/cryptography@metzdowd.com/maillist.html</a> or, as someone below mentioned, the <i>official</i> comment from Microsoft, which is to not send any error messages to the client. This is the correct approach. Do not downgrade to 3DES. It is shocking advice.</span></text><author><a class="comment-user" href="/users/154152/noon-silk" title="41,472 reputation">Noon Silk</a></author></comment><comment><text><span class="comment-copy">More from MS: <a href="http://blogs.technet.com/b/srd/archive/2010/09/17/understanding-the-asp-net-vulnerability.aspx" rel="nofollow noreferrer">blogs.technet.com/b/srd/archive/2010/09/17/â€¦</a></span></text><author><a class="comment-user" href="/users/18936/bobince" title="387,698 reputation">bobince</a></author></comment><comment><text><span class="comment-copy">What nobody seems to have explained so far is whether implementing <code>Application_Error</code> in global.asax is just as good as the proposed customErrors workaround for this issue.</span></text><author><a class="comment-user" href="/users/224370/ian-mercer" title="26,495 reputation">Ian Mercer</a></author></comment><comment><text><span class="comment-copy">@Noon - Good point. But I won't choose the answer according to votes. :) Rather by the reasoning in them. I'm also curious about the answers of anyone, and (as you can see) real experts arrived eventually.</span></text><author><a class="comment-user owner" href="/users/202919/venemo" title="10,493 reputation">Venemo</a></author></comment><comment><text><span class="comment-copy">@Hightechrider Yes, I would also like to know the answer to this - I have some apps which count on this instead of a redirect specified in web.config. Anyone know if they have the same effect?</span></text><author><a class="comment-user" href="/users/361460/andy" title="538 reputation">Andy</a></author></comment><comment><text><span class="comment-copy">@Andy, read ScottGu's blog post about the issue, that explains many things. :)</span></text><author><a class="comment-user owner" href="/users/202919/venemo" title="10,493 reputation">Venemo</a></author></comment><comment><text><span class="comment-copy">Wow, 300+ rep points for posting a question to which no-one here can really have the "correct answer". Not a bad days rep-whoring. =)</span></text><author><a class="comment-user" href="/users/321946/rpm1984" title="50,675 reputation">RPM1984</a></author></comment><comment><text><span class="comment-copy">@RPM1984 - I do not agree. There are lots of usable responses here. @Dan, why?</span></text><author><a class="comment-user owner" href="/users/202919/venemo" title="10,493 reputation">Venemo</a></author></comment><comment><text><span class="comment-copy">Okay, we have different interpretations of a question on SO. To me, if it can be correctly answered, then fine. The answers are interesting/helpful, dont get me wrong, but this to me is an issue where the only "answer" is a workaround - until MS release a fix. To me, this should be a wiki.</span></text><author><a class="comment-user" href="/users/321946/rpm1984" title="50,675 reputation">RPM1984</a></author></comment><comment><text><span class="comment-copy">@RPM1984 - Since the question itself asks for a workaround, I don't think it is a problem that the answer is a workaround. :)</span></text><author><a class="comment-user owner" href="/users/202919/venemo" title="10,493 reputation">Venemo</a></author></comment><comment><text><span class="comment-copy">Can you also block this by throttling your site so it restricts aspx requests to 1 per 10 seconds? Over 8 hours of brute forcing</span></text><author><a class="comment-user" href="/users/21574/chris-s" title="44,824 reputation">Chris S</a></author></comment><comment><text><span class="comment-copy">@Venemo, you're missing the point. It's valid we should discuss this issue, but it should be a community wiki, so people can share their thoughts/workarounds, without "reputation" being the driver for the contribution. Anyway, rant over. =)</span></text><author><a class="comment-user" href="/users/321946/rpm1984" title="50,675 reputation">RPM1984</a></author></comment><comment><text><span class="comment-copy">@Chris - I don't think that would be applicable to any real world application... And if the data on your site is worth 8 hours of bruteforcing, someone will do 8 hours of brute forcing against it.</span></text><author><a class="comment-user owner" href="/users/202919/venemo" title="10,493 reputation">Venemo</a></author></comment><comment><text><span class="comment-copy">I wasn't thinking dell.com would use that technique, but for the lonely blog site with 100 visits per day, it would be a good deterent along with the web.config change</span></text><author><a class="comment-user" href="/users/21574/chris-s" title="44,824 reputation">Chris S</a></author></comment><comment><text><span class="comment-copy">As I understand it, this workaround requires that you send the same HTTP response code (likely 200) to the client as well as send the client to the same page for all errors. Is this true? Will the attack still be viable if your server returns several different error codes (302, 403, 404, 200, etc.) for various errors?</span></text><author><a class="comment-user" href="/users/363815/ryan-kinal" title="11,749 reputation">Ryan Kinal</a></author></comment><comment><text><span class="comment-copy">In case anyone came back to this thread looking for the security fix, they're located at <a href="http://www.microsoft.com/technet/security/bulletin/MS10-070.mspx" rel="nofollow noreferrer">microsoft.com/technet/security/bulletin/MS10-070.mspx</a> (choose your OS and .NET version).</span></text><author><a class="comment-user" href="/users/361460/andy" title="538 reputation">Andy</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<h3>What should I do to protect myself?</h3>
<p><strong>[Update 2010-09-29]</strong></p>
<p><a href="http://www.microsoft.com/technet/security/bulletin/MS10-070.mspx" rel="noreferrer">Microsoft security bulletin</a></p>
<p><a href="http://support.microsoft.com/kb/2416468" rel="noreferrer">KB Article with reference to the fix</a></p>
<p><a href="http://weblogs.asp.net/scottgu/archive/2010/09/28/asp-net-security-update-now-available.aspx" rel="noreferrer">ScottGu</a> has links for the downloads</p>
<p><strong>[Update 2010-09-25]</strong></p>
<p>While we are waiting for the fix, yesterday ScottGu <a href="http://weblogs.asp.net/scottgu/archive/2010/09/24/update-on-asp-net-vulnerability.aspx" rel="noreferrer">postet an update</a> on how to add an extra step to protect your sites with a custom URLScan rule.</p>
<p></p><hr/>
Basically make sure you provide a custom error page so that an attacker is not exposed to internal .Net errors, which you always should anyways in release/production mode.<p></p>
<p>Additionally add a random time sleep in the error page to prevent the attacker from <a href="http://en.wikipedia.org/wiki/Timing_attack" rel="noreferrer">timing the responses</a> for added attack information.</p>
<p>In web.config</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="tag">&lt;configuration&gt;</span><span class="pln">
 </span><span class="tag">&lt;location</span><span class="pln"> </span><span class="atn">allowOverride</span><span class="pun">=</span><span class="atv">"false"</span><span class="tag">&gt;</span><span class="pln">
   </span><span class="tag">&lt;system.web&gt;</span><span class="pln">
     </span><span class="tag">&lt;customErrors</span><span class="pln"> </span><span class="atn">mode</span><span class="pun">=</span><span class="atv">"On"</span><span class="pln"> </span><span class="atn">defaultRedirect</span><span class="pun">=</span><span class="atv">"~/error.html"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
   </span><span class="tag">&lt;/system.web&gt;</span><span class="pln">
 </span><span class="tag">&lt;/location&gt;</span><span class="pln">
</span><span class="tag">&lt;/configuration&gt;</span></code></pre>
<p>This will redirect any error to a custom page returned with a 200 status code. This way an attacker cannot look at the error code or error information for information needed for further attacks.</p>
<p>It is also safe to set <code>customErrors mode="RemoteOnly"</code>, as this will redirect "real" clients. Only browsing from localhost will show internal .Net errors.</p>
<p>The important part is to make sure that all errors are configured to return the same error page.  This requires you to explicitly set the <code>defaultRedirect</code> attribute on the <code>&lt;customErrors&gt;</code> section and ensure that no per-status codes are set.</p>
<h3>What's at stake?</h3>
<p>If an attacker manage to use the mentioned exploit, he/she can download internal files from within your web application. Typically web.config is a target and may contain sensitive information like login information in a database connection string, or even link to an automouted sql-express database which you don't want someone to get hold of. But if you are following best practice you use <a href="http://msdn.microsoft.com/en-us/library/53tyfkaw.aspx" rel="noreferrer">Protected Configuration</a> to encrypt all sensitive data in your web.config.</p>
<h3>Links to references</h3>
<p>Read Microsoft's official comment about the vulnerability at <a href="http://www.microsoft.com/technet/security/advisory/2416728.mspx" rel="noreferrer">http://www.microsoft.com/technet/security/advisory/2416728.mspx</a>. Specifically the "Workaround" part for implementation details on this issue.</p>
<p>Also some information on <a href="http://weblogs.asp.net/scottgu/archive/2010/09/18/important-asp-net-security-vulnerability.aspx" rel="noreferrer">ScottGu's</a> blog, including a <a href="http://www.asp.net/media/782788/detectcustomerrorsdisabledv30.zip" rel="noreferrer">script</a> to find vulnerable ASP.Net apps on your web server.</p>
<p>For an explanation on "Understanding Padding Oracle Attacks", read <a href="http://stackoverflow.com/questions/3720720/how-serious-is-this-new-asp-net-security-vulnerability-and-how-can-i-workaround-i/3721473#3721473">@sri's answer</a>.</p>
<hr/>
<p>Comments to the article:</p>
<blockquote>
<p>The attack that Rizzo and Duong have implemented against ASP.NET apps requires that the crypto
  implementation on the Web site have an oracle that, when sent ciphertext, will not only decrypt the text
  but <strong>give the sender a message about whether the padding in the ciphertext is valid</strong>. </p>
<p>If the padding is invalid, the error message that the sender gets will give him some information about the way that the site's decryption process works.</p>
</blockquote>
<p>In order for the attack to work the following must be true:</p>
<ul>
<li>Your application must give an error message about the padding being invalid.</li>
<li>Someone must tamper with your encrypted cookies or viewstate</li>
</ul>
<p>So, if you return human readable error messages in your app like <em>"Something went wrong, please try again"</em> then you should be pretty safe. Reading a bit on the comments on the article also gives valuable information.</p>
<ul>
<li>Store a session id in the crypted cookie</li>
<li>Store the real data in session state (persisted in a db)</li>
<li>Add a random wait when user information is wrong before returning the error, so you can't time it</li>
</ul>
<p>That way a hijacked cookie can only be used to retrieve a session which most likely is no longer present or invalidated.</p>
<p>It will be interesting to see what is actually presented at the Ekoparty conference, but right now I'm not too worried about this vulnerability.</p>
</div></text><author><a href="/users/153390">Mikael Svenson</a></author><comments><comment><text><span class="comment-copy">@Mikael, great answer, but could you please post actual examples of the solutions you recommend? Eg. "Store a session id in the crypted cookie" how do I do that? AFAIK session state management and the authentication cookie are two distinct things in ASP.NET. The "Store the real data in session state" part is okay. But... "Add a random wait when user information is wrong before returning the error"... basically my question is, what error? Will this stuff throw an exception that I can catch somewhere? Is it covered by Custom Error Messages or Application_Error?</span></text><author><a class="comment-user owner" href="/users/202919/venemo" title="10,493 reputation">Venemo</a></author></comment><comment><text><span class="comment-copy">@Venemo. Istead of Response.Cookies.Add( new HttpCookie("role", "admin")); you would do: string sessionId = Guid.NewGuid().ToString(); Session[sessionId] = "role=admin"; Response.Cookies.Add( new HttpCookie("s", sessionId));   and the attack is susceptible to measure the timing of responses to figure out the crypto. So add a Thread.Sleep(...) at the end of a response would prevent such timings. As for the error I assume (and is almost certaint) it's an app error, but need to test this some myself. So having custom error pages would not show the padding error.</span></text><author><a class="comment-user" href="/users/153390/mikael-svenson" title="26,988 reputation">Mikael Svenson</a></author></comment><comment><text><span class="comment-copy">@Mikael, thank you! Anyways, what sense would it make to store roles in a cookie? Am I secure if I use <code>Roles.AddUserToRole("Joe", "Admin")</code> but I never actually store that in a cookie?</span></text><author><a class="comment-user owner" href="/users/202919/venemo" title="10,493 reputation">Venemo</a></author></comment><comment><text><span class="comment-copy">@Venemo: Read my edit and the link to the blog post. Typically Form login sites store the role in a cookie, but as @Aristos mention in his response, this can be turned off, and should be turned off.</span></text><author><a class="comment-user" href="/users/153390/mikael-svenson" title="26,988 reputation">Mikael Svenson</a></author></comment><comment><text><span class="comment-copy">@Mikael, I've read it. I also put this element into my Web.config. Thanks! My worries have lessened now. :)</span></text><author><a class="comment-user owner" href="/users/202919/venemo" title="10,493 reputation">Venemo</a></author></comment><comment><text><span class="comment-copy">What on earth ...; do NOT downgrade to 3DES, this won't help at all, and is really bad advice.</span></text><author><a class="comment-user" href="/users/154152/noon-silk" title="41,472 reputation">Noon Silk</a></author></comment><comment><text><span class="comment-copy">@Noon: True, true, and thanks for the edit @Marc.</span></text><author><a class="comment-user" href="/users/153390/mikael-svenson" title="26,988 reputation">Mikael Svenson</a></author></comment><comment><text><span class="comment-copy">@Mikael: Please, for the benefit of applications everywhere, <i>delete</i> that component of your answer, and link to Microsofts specific advice (I don't want to edit your answer and speak for you, but I believe it is only responsible that your advice be removed).</span></text><author><a class="comment-user" href="/users/154152/noon-silk" title="41,472 reputation">Noon Silk</a></author></comment><comment><text><span class="comment-copy">@Noon. Edited my answer and linked in the official response.</span></text><author><a class="comment-user" href="/users/153390/mikael-svenson" title="26,988 reputation">Mikael Svenson</a></author></comment><comment><text><span class="comment-copy">@Mikael you can also add a link to ScottGu's blog, which has some additional info: <a href="http://weblogs.asp.net/scottgu/archive/2010/09/18/important-asp-net-security-vulnerability.aspx" rel="nofollow noreferrer">weblogs.asp.net/scottgu/archive/2010/09/18/â€¦</a></span></text><author><a class="comment-user" href="/users/31668/eilon" title="22,317 reputation">Eilon</a></author></comment><comment><text><span class="comment-copy">@Eilon: Thanks. Also linked in the script which you can use to check if you haven't turned on custom errors on your apps.</span></text><author><a class="comment-user" href="/users/153390/mikael-svenson" title="26,988 reputation">Mikael Svenson</a></author></comment><comment><text><span class="comment-copy">@Mikael Can you explain (using small words :) ) what difference the timing part makes?</span></text><author><a class="comment-user" href="/users/1738/philpursglove" title="11,162 reputation">PhilPursglove</a></author></comment><comment><text><span class="comment-copy">By timing the error response you gain more information about which underlying system was used. By adding a random sleep, and packing 404 and 500 errors in a custom page which is returned with a 200 status code, you hide this. <a href="http://en.wikipedia.org/wiki/Timing_attack" rel="nofollow noreferrer">en.wikipedia.org/wiki/Timing_attack</a></span></text><author><a class="comment-user" href="/users/153390/mikael-svenson" title="26,988 reputation">Mikael Svenson</a></author></comment><comment><text><span class="comment-copy">@PhilPursglove - First, read my answer for context. The attacker needs to figure out between outcome 2 and 3. To figure out if its a valid account number, your code may take 1 second, whereas to flag a cryptographic error, it probably just takes 10 ms. So, an attacker with a stop-watch can easily figure out between the two outcomes <i>even if</i> they both show the exact same error page. Adding a random delay makes the stop-watch idea infeasible.</span></text><author><a class="comment-user" href="/users/242940/sripathi-krishnan" title="22,613 reputation">Sripathi Krishnan</a></author></comment><comment><text><span class="comment-copy">@Mikael @sri Thanks both!</span></text><author><a class="comment-user" href="/users/1738/philpursglove" title="11,162 reputation">PhilPursglove</a></author></comment><comment><text><span class="comment-copy">I have some apps that have custom errors mode "RemoteOnly". Do you all think it's necessary to go through and change them all to "On"?</span></text><author><a class="comment-user" href="/users/361460/andy" title="538 reputation">Andy</a></author></comment><comment><text><span class="comment-copy">@Andy: Good comment. You can safely keep it at RemoteOnly. The important part is to set defaultRedirect and have all errors go to the same page. RemoteOnly will let you get .Net errors when accessing the page from localhost, while clients coming in from the outside gets the custom error page. This allows you to debug from the local server if necessary, to see what error was generated. How important this is depends much on what other logging you have implemented.</span></text><author><a class="comment-user" href="/users/153390/mikael-svenson" title="26,988 reputation">Mikael Svenson</a></author></comment><comment><text><span class="comment-copy">@Mikael - Thanks!</span></text><author><a class="comment-user" href="/users/361460/andy" title="538 reputation">Andy</a></author></comment><comment><text><span class="comment-copy">Your answer seems to imply that cookies are the primary target and that "someone must sniff data" in order to target you.  This isn't true.  For some applications (those using .NET 3.5 SP1 or later, I believe) might also give up the web.config (or other aribtrary files) using this attack... far more serious.</span></text><author><a class="comment-user" href="/users/177367/intoorbit" title="644 reputation">intoOrbit</a></author></comment><comment><text><span class="comment-copy">@user177367. Cookies and ViewState are the attack vectors. If you manage to use them to break the crypto, then a skilled attacker can forge a key and use a feature of ASP.Net to download your web.config. The feature is normally used for accessing css and js files.</span></text><author><a class="comment-user" href="/users/153390/mikael-svenson" title="26,988 reputation">Mikael Svenson</a></author></comment><comment><text><span class="comment-copy">@user177367: Edited my answer to say what's at risk with the exploit, and mention that you should encrypt sensitive information in your web.config.</span></text><author><a class="comment-user" href="/users/153390/mikael-svenson" title="26,988 reputation">Mikael Svenson</a></author></comment><comment><text><span class="comment-copy">@Mikael You say "In order for the attack to work the following must be true: Someone must sniff data [and] Your application must give an error message about the padding being invalid."  From what I read, that's not true-- the attack doesn't require sniffing nor does it require specific error messages (rather it can analyze the timing of the error messages it receives, also known as side-channel information).</span></text><author><a class="comment-user" href="/users/177367/intoorbit" title="644 reputation">intoOrbit</a></author></comment><comment><text><span class="comment-copy">'@Mikael - user177367 is right. The word 'sniff' is confusing. The attacker doesn't have to listen to someone else's communication. He just needs to get any encrypted viewstate value, and that doesn't need sniffing.</span></text><author><a class="comment-user" href="/users/242940/sripathi-krishnan" title="22,613 reputation">Sripathi Krishnan</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p><strong>Understanding Padding Oracle Attacks</strong></p>
<p>Lets assume your application accepts an encrypted string as a parameter - whether the parameter is a cookie, a url parameter or something else is immaterial. When the application tries to decode it, there are 3 possible outcomes - </p>
<ol>
<li><p><strong>Outcome 1</strong> : The encrypted string decrypted properly, and the application was able to make sense of it. Meaning, if the encrypted string was an 10 digit account number, after decryption the application found something like "1234567890" and not "abcd1213ef"</p></li>
<li><p><strong>Outcome 2</strong> : The padding was correct, but after decryption the string obtained was gibberish that the app couldn't understand. For example, the string decrypted to "abcd1213ef", but the app was expecting only numbers. Most apps will show a message like "Invalid account number".</p></li>
<li><p><strong>Outcome 3</strong> : The padding was incorrect, and the application threw some kind of error message. Most apps will show a generic message like "Some error occurred".</p></li>
</ol>
<p>In order for a Padding Oracle attack to be successful, the attacker must be able to make several thousands of requests, <strong>and</strong> must be able to classify the response into one of the above 3 buckets without error.</p>
<p>If these two conditions are met, the attacker can eventually decrypt the message, and then re-encrypt it with whatever he wishes. Its just a question of time. </p>
<p><strong>What can be done to prevent it?</strong></p>
<ol>
<li><p>Simplest thing - anything sensitive should never be sent to the client, encrypted or no encrypted. Keep it on the server. </p></li>
<li><p>Make sure that outcome 2 and outcome 3 in the above list <em>appear exactly the same</em> to the attacker. There should be no way to figure out one from the other. This is not all that easy, though - an attacker can discriminate using some kind of timing attack. </p></li>
<li><p>As a last line of defence, have a Web Application Firewall. The padding oracle attack needs to make several requests that look almost similar (changing one bit at a time), so it should be possible for a WAF to catch and block such requests.</p></li>
</ol>
<p>P.S. A good explanation of Padding Oracle Attacks can be found in <a href="http://www.gdssecurity.com/l/b/2010/09/14/automated-padding-oracle-attacks-with-padbuster" rel="noreferrer">this blog post</a>. Disclaimer: Its NOT my blog.</p>
</div></text><author><a href="/users/242940/sripathi-krishnan">Sripathi Krishnan</a></author><comments><comment><text><span class="comment-copy">+1 Great explanation, thanks! One question: "Make sure that outcome 2 and outcome 3 in the above list appear exactly the same to the attacker." -&gt; How can I achieve this in ASP.NET?</span></text><author><a class="comment-user owner" href="/users/202919/venemo" title="10,493 reputation">Venemo</a></author></comment><comment><text><span class="comment-copy">In order for them to appear the same, you should output the same error message for outcome 2 and 3, meaning a more generic error. That way they can't be differentiated upon. A good error could be: "An error occurred, please try again". The drawback could be that you give less informational messages to the user.</span></text><author><a class="comment-user" href="/users/153390/mikael-svenson" title="26,988 reputation">Mikael Svenson</a></author></comment><comment><text><span class="comment-copy">So how does this let people download the web.config??</span></text><author><a class="comment-user" href="/users/200442/daniel-little" title="9,696 reputation">Daniel Little</a></author></comment><comment><text><span class="comment-copy">@Lavinski - No clear information yet, but it is believed that WebResource.axd allows you to download web.config (and other resources) if you give it the right key. And to generate the key, one needs the padding oracle.</span></text><author><a class="comment-user" href="/users/242940/sripathi-krishnan" title="22,613 reputation">Sripathi Krishnan</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>From what I read until now...</p>
<blockquote>
<p>The attack allows someone to decrypt
  sniffed cookies, which could contain
  valuable data such as bank balances</p>
</blockquote>
<p>They need the encrypted cookie of a user that have been already logged in, on any account. They also need to find data in cookies - I hope that developers do not store critical data in cookies :). And there is a way that I have below to not let asp.net store data in the login cookie.</p>
<p>How can someone get the cookie of a user that is online if he doesn't get his hands on the browser data? Or sniff the IP packet ?</p>
<p>One way to prevent that is to not allow cookies to transport without ssl encryption.</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="tag">&lt;httpCookies</span><span class="pln"> </span><span class="atn">httpOnlyCookies</span><span class="pun">=</span><span class="atv">"true"</span><span class="pln"> </span><span class="atn">requireSSL</span><span class="pun">=</span><span class="atv">"true"</span><span class="pln"> </span><span class="tag">/&gt;</span></code></pre>
<p>Also one more measure is to prevent storing Roles in cookies.</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="tag">&lt;roleManager</span><span class="pln"> </span><span class="atn">enabled</span><span class="pun">=</span><span class="atv">"true"</span><span class="pln"> </span><span class="atn">cacheRolesInCookie</span><span class="pun">=</span><span class="atv">"false"</span><span class="tag">&gt;</span></code></pre>
<p>Now about the cookies that are not secure for the regular pages, this needs some more thinking what you left your user do and what not, how you trust him, what extra check you can do (for example if you see a change on the ip, maybe stop trust him until relogin from security page).</p>
<p>Reference:<br/>
<a href="http://stackoverflow.com/questions/2498599/can-some-hacker-steal-the-cookie-from-a-user-and-login-with-that-name-on-the-web">Can some hacker steal the cookie from a user and login with that name on a web site?</a></p>
<p><strong>How to check from where attacks</strong> come and not give back informations. I wrote here a simple way to prevent the padding is invalid and logging at the same time to track down attackers: <a href="http://stackoverflow.com/questions/1821243/cryptographicexception-padding-is-invalid-and-cannot-be-removed-and-validation-o/2551810#2551810">CryptographicException: Padding is invalid and cannot be removed and Validation of viewstate MAC failed</a></p>
<p><strong>The way to track the attacker is to check the padding is invalid. With a simple procedure you can track them down and block them - they need some thousands of call on your page to find the key !</strong></p>
<h2>Update 1.</h2>
<p>I have download the tool that suppose that's find the KEY and decrypt the data, and as I say its trap on the <a href="http://stackoverflow.com/questions/1821243/cryptographicexception-padding-is-invalid-and-cannot-be-removed-and-validation-o/2551810#2551810">above code that's check the viewstate</a>. From my tests this tool have many more to fix, for example can not scan compressed view state as it is and its crash on my tests.</p>
<p>If some one try to use this tool or this method the above code can track them down and you can block them out of your page with simple code like this one <a href="http://omaralzabir.com/prevent_denial_of_service__dos__attacks_in_your_web_application/" rel="noreferrer"> "Prevent Denial Of Service (DOS)"</a>, or <a href="http://www.beyondweblogs.com/post/Code-for-Preventing-Denial-of-Service-%28DOS%29-Attacks-in-ASPNET.aspx" rel="noreferrer">like this code for preventing Denial of service</a>.</p>
<h2>Update 2</h2>
<p>Its seems from what I read until now that <strong>the only think that is really need it to not give information back about the error</strong>, and just <a href="http://www.microsoft.com/technet/security/advisory/2416728.mspx" rel="noreferrer">place a custom error page and if you like you can just create and a random delay to this page.</a></p>
<p><a href="http://www.youtube.com/watch?v=yghiC_U2RaM" rel="noreferrer">a very interesting video</a> on this issue.</p>
<p>So all the above its more measure for more protections but not 100% necessaries for this particular issue. For example to use ssl cookie is solve the snif issue, the not cache the Roles in cookies it good to not send and get back big cookies, and to avoid some one that have all ready crack the code, to just place the admin role on the cookie of him.</p>
<p>The viewstate track its just one more measure to find attack.</p>
</div></text><author><a href="/users/159270/aristos">Aristos</a></author><comments><comment><text><span class="comment-copy">Aristos, so, after all, this pretty much looks like any other generic cookie-stealing-based method, right? So why do they say that it is sooo serious?</span></text><author><a class="comment-user owner" href="/users/202919/venemo" title="10,493 reputation">Venemo</a></author></comment><comment><text><span class="comment-copy">@Venemo because if they really can get that key maybe can make some more damage on the post on the data on any page because they break that security... it is serious but its also hard to impossible to move to the next step and real break on the system. For example this site <a href="http://www.mypetfriend.gr" rel="nofollow noreferrer">mypetfriend.gr</a> allow sql injection. But can you break it ? even if the security is so low ?</span></text><author><a class="comment-user" href="/users/159270/aristos" title="53,129 reputation">Aristos</a></author></comment><comment><text><span class="comment-copy">@Venemo I think the final wraparound that you ask especial on this attack is to track down and lock the Ips that product invalid padding more than the normal ! (and this is what I am going to fix in the next days) :)</span></text><author><a class="comment-user" href="/users/159270/aristos" title="53,129 reputation">Aristos</a></author></comment><comment><text><span class="comment-copy">@Aristos - I read your answer to the other question you linked. It deals with Viewstate though. Since I use ASP.NET MVC, I don't use ViewState. And I couldn't figure it out, how does that description translate to this security issue?</span></text><author><a class="comment-user owner" href="/users/202919/venemo" title="10,493 reputation">Venemo</a></author></comment><comment><text><span class="comment-copy">@Venemo for MVC I can not say because I do not know. The ViewState is the part that attacks to find the key. How MVC track the integrity of the page I do not know.</span></text><author><a class="comment-user" href="/users/159270/aristos" title="53,129 reputation">Aristos</a></author></comment><comment><text><span class="comment-copy">@Aristos - It doesn't do anything like ViewState by default. (One needs to explicitly take care of it.) See my answer here about it: <a href="http://stackoverflow.com/questions/2798368/asp-net-mvc-how-to-create-a-basic-pseudo-viewstate-or-better-solution/2798391#2798391" title="asp net mvc how to create a basic pseudo viewstate or better solution">stackoverflow.com/questions/2798368/â€¦</a></span></text><author><a class="comment-user owner" href="/users/202919/venemo" title="10,493 reputation">Venemo</a></author></comment><comment><text><span class="comment-copy">@Aristos I think the seriousness here is that it allows the attacker to get to the key used for session cookies and view state. By default this is created anew each time the app is started. But if you want to have sessions that out-live process lifetimes or a web farm set up you need to fix the key. This means the attacker will be able in inject arbitrary data values into the view state or change session until you modify the key in the configuration.</span></text><author><a class="comment-user" href="/users/67392/richard" title="76,735 reputation">Richard</a></author></comment><comment><text><span class="comment-copy">@Richard - So if I don't have ViewState (as I use MVC) then only my session/authentication cookies are in danger. Right?</span></text><author><a class="comment-user owner" href="/users/202919/venemo" title="10,493 reputation">Venemo</a></author></comment><comment><text><span class="comment-copy">@Venemo: And any files that are not normally served, including web.config.</span></text><author><a class="comment-user" href="/users/67392/richard" title="76,735 reputation">Richard</a></author></comment><comment><text><span class="comment-copy">@Richard - OMG!</span></text><author><a class="comment-user owner" href="/users/202919/venemo" title="10,493 reputation">Venemo</a></author></comment><comment><text><span class="comment-copy">@Aristos do you know if Session &amp; Auth tickets suffer from exposing info on padding oracle? As @Venemo said, MVC doesn't have ViewState, so the attack must be done from elsewhere (I know WebResources and ScriptResources suffer from it, but say those are disabled).</span></text><author><a class="comment-user" href="/users/66372/eglasius" title="31,080 reputation">eglasius</a></author></comment><comment><text><span class="comment-copy">@Aristos of course I meant the session id in the cookie and the auth ticket ;) ... see the answer I added / mentioned that in there.</span></text><author><a class="comment-user" href="/users/66372/eglasius" title="31,080 reputation">eglasius</a></author></comment><comment><text><span class="comment-copy">@eglasius sorry miss that... The session id - I do not think how can some one get it with our sniff it, and its only a random string. The auth ticket ether is a random string, ether the name of the user encoded. From the video I have see I think that is the name of the user encoded. So this is the infos on this 2.</span></text><author><a class="comment-user" href="/users/159270/aristos" title="53,129 reputation">Aristos</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p><a href="http://blogs.technet.com/b/srd/archive/2010/09/17/understanding-the-asp-net-vulnerability.aspx" rel="nofollow noreferrer">Here</a> is the MS response.  It all boils down to "use a custom error page" and you won't be giving away any clues.</p>
<p><strong>EDIT</strong><br/>
<a href="http://weblogs.asp.net/scottgu/archive/2010/09/18/important-asp-net-security-vulnerability.aspx" rel="nofollow noreferrer">Here</a> is some more detailed info from scottgu.</p>
</div></text><author><a href="/users/51851/scotts">ScottS</a></author><comments><comment><text><span class="comment-copy">Thanks, this is what I have been asking all along. So basically a simple custom error page can save me from all the implications of this vulnerability?</span></text><author><a class="comment-user owner" href="/users/202919/venemo" title="10,493 reputation">Venemo</a></author></comment><comment><text><span class="comment-copy">@Venemo: Yes, and the people recommending 3DES really should be silenced; it's unbelievably irresponsible and doesn't even address the main issue! It's quite shocking. Please, I hope no-one follows their advice and does what Microsoft official advises.</span></text><author><a class="comment-user" href="/users/154152/noon-silk" title="41,472 reputation">Noon Silk</a></author></comment><comment><text><span class="comment-copy">@Noon - Well, this sort of custom error page is a must have for any production site, so as it turns out, this issuse is not <b>so</b> serious after all. :)</span></text><author><a class="comment-user owner" href="/users/202919/venemo" title="10,493 reputation">Venemo</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p><em>Adding ScottGu's responses taken from discussion at <a href="http://weblogs.asp.net/scottgu/archive/2010/09/18/important-asp-net-security-vulnerability.aspx" rel="nofollow noreferrer">http://weblogs.asp.net/scottgu/archive/2010/09/18/important-asp-net-security-vulnerability.aspx</a></em></p>
<p><strong>Is custom IHttpModule instead of customErrors affected?</strong></p>
<p>Q: I don't have a  element declared in my web.config, I have instead an IHttpModule inside the  section. This module logs the error and redirects to either a search page (for 404's) or to an error page (for 500's). Am I vulnerable?</p>
<p>A: I would recommend temporarily updating the module to always redirect to the search page.  One of the ways this attack works is that looks for differentiation between 404s and 500 errors.  Always returning the same HTTP code and sending them to the same place is one way to help block it.</p>
<p>Note that when the patch comes out to fix this, you won't need to do this (and can revert back to the old behavior).  But for right now I'd recommend not differentiating between 404s and 500s to clients.</p>
<p><strong>Can I continue using different errors for 404 and 500 errors?</strong></p>
<p>Q: I take it we can still have a custom 404 page defined in addition to the default redirect on error, without violating the principles described above?</p>
<p>A: No - until we release a patch for the real fix, we recommend the above workaround which homogenizes all errors.  One of the ways this attack works is that looks for differentiation between 404s and 500 errors.  Always returning the same HTTP code and sending them to the same place is one way to help block it.</p>
<p>Note that when the patch comes out to fix this, you won't need to do this (and can revert back to the old behavior).  But for right now you should not differentiate between 404s and 500s to clients.</p>
<p><strong>How does this allow exposure of web.config?</strong></p>
<p>Q:  How does this allow exposure of web.config?  This seems to enable decrypting of ViewState only, is there another related vulnerability that also allows the information disclosure?  Is there a whitepaper that details the attack for a better explanation of what's going on?</p>
<p>A: The attack that was shown in the public relies on a feature in ASP.NET that allows files (typically javascript and css) to be downloaded, and which is secured with a key that is sent as part of the request. Unfortunately if you are able to forge a key you can use this feature to download the web.config file of an application (but not files outside of the application).  We will obviously release a patch for this - until then the above workaround closes the attack vector.</p>
<p>EDIT: additional FAQ available in the second blogpost at <a href="http://weblogs.asp.net/scottgu/archive/2010/09/20/frequently-asked-questions-about-the-asp-net-security-vulnerability.aspx" rel="nofollow noreferrer">http://weblogs.asp.net/scottgu/archive/2010/09/20/frequently-asked-questions-about-the-asp-net-security-vulnerability.aspx</a></p>
</div></text><author><a href="/users/16132/martin-vobr">Martin Vobr</a></author><comments><comment><text><span class="comment-copy">The Answer to the second question ends with two asterisks. Is there suppose to be some footnote or qualifier text added somewhere?</span></text><author><a class="comment-user" href="/users/160830/scott-mitchell" title="6,459 reputation">Scott Mitchell</a></author></comment><comment><text><span class="comment-copy">@Scott Mitchell: No, it's only my typo. (the part of text was bold in the first version of the post and I've forgot to remove all the formatting code when the text was edited). Fixed. Sorry for misguiding you.</span></text><author><a class="comment-user" href="/users/16132/martin-vobr" title="4,314 reputation">Martin Vobr</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>IMO, there is no across-the-board prevention for this, it needs to be handled on a case-by-case basis:</p>
<p><a href="http://www.onpreinit.com/2010/09/aspnet-vulnerability-workaround-flawed.html" rel="nofollow noreferrer">http://www.onpreinit.com/2010/09/aspnet-vulnerability-workaround-flawed.html</a></p>
</div></text><author><a href="/users/175611/nariman">Nariman</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>A few significant links:</p>
<ul>
<li><a href="http://www.microsoft.com/technet/security/advisory/2416728.mspx" rel="nofollow noreferrer">MS' Security Advisory 2416728</a> (this is the official information)</li>
<li>Additional information from MS' Security Research &amp; Defence team

<ul>
<li><a href="http://blogs.technet.com/b/srd/archive/2010/09/17/understanding-the-asp-net-vulnerability.aspx" rel="nofollow noreferrer">"Understanding the ASP.NET Vulnerability" (2010-09-17)</a></li>
<li><a href="http://blogs.technet.com/b/srd/archive/2010/09/20/additional-information-about-the-asp-net-vulnerability.aspx" rel="nofollow noreferrer">"Additional Information about the ASP.NET Vulnerability" (2010-09-20)</a></li>
</ul></li>
<li><a href="http://weblogs.asp.net/scottgu/archive/2010/09/18/important-asp-net-security-vulnerability.aspx" rel="nofollow noreferrer">Scott Gu: "Important: ASP.NET Security Vulnerability" (2010-09-18)</a></li>
</ul>
<p>[To answer the seriousness aspect of this (what has been published and workarounds are covered by other answers).]</p>
<p>The key being attacked is used to protect both view state and session cookies. Normally this key is generated internally by ASP.NET with each new instance of the web app. This will limit the scope of damage to the lifetime of the worker process, of course for a busy application this could be days (i.e. not much of a limit). During this time the attacker can change (or inject) values into the ViewState and change their session.</p>
<p>Even more seriously if you want sessions to be able to span worker process lifetimes, or allow web farms (i.e. all instances in the farm can handle any user session) the key needs to be hard coded, this is done in <code>web.config</code>:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pun">[...]</span><span class="pln">
  </span><span class="pun">&lt;</span><span class="pln">system</span><span class="pun">.</span><span class="pln">web</span><span class="pun">&gt;</span><span class="pln">
    </span><span class="pun">&lt;</span><span class="pln">machineKey
        decryption</span><span class="pun">=</span><span class="str">"AES"</span><span class="pln">
        validation</span><span class="pun">=</span><span class="str">"SHA1"</span><span class="pln">
        decryptionKey</span><span class="pun">=</span><span class="str">"57726C59BA73E8A4E95E47F4BC9FB2DD"</span><span class="pln">
        validationKey</span><span class="pun">=</span><span class="str">"158B6D89EE90A814874F1B3129ED00FB8FD34DD3"</span><span class="pln">
      </span><span class="pun">/&gt;</span></code></pre>
<p>Those are, of course, newly created keys, I use the following PowerShell to access Windows cryptographic random number generator:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">$rng </span><span class="pun">=</span><span class="pln"> </span><span class="typ">New</span><span class="pun">-</span><span class="typ">Object</span><span class="pln"> </span><span class="str">"System.Security.Cryptography.RNGCryptoServiceProvider"</span><span class="pln">
$bytes </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="typ">Array</span><span class="pun">]::</span><span class="typ">CreateInstance</span><span class="pun">([</span><span class="kwd">byte</span><span class="pun">],</span><span class="pln"> </span><span class="lit">20</span><span class="pun">)</span><span class="pln">
$rng</span><span class="pun">.</span><span class="typ">GetBytes</span><span class="pun">(</span><span class="pln">$bytes</span><span class="pun">)</span><span class="pln">
$bytes </span><span class="pun">|</span><span class="pln"> </span><span class="typ">ForEach</span><span class="pun">-</span><span class="typ">Object</span><span class="pln"> </span><span class="pun">-</span><span class="kwd">begin</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> $s </span><span class="pun">=</span><span class="pln"> </span><span class="str">""</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="pun">-</span><span class="pln">process </span><span class="pun">{</span><span class="pln"> $s </span><span class="pun">=</span><span class="pln"> $s </span><span class="pun">+</span><span class="pln"> </span><span class="pun">(</span><span class="str">"{0:X2}"</span><span class="pln"> </span><span class="pun">-</span><span class="pln">f $_</span><span class="pun">)</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="pun">-</span><span class="kwd">end</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> $s</span><span class="pun">}</span></code></pre>
<p>(Using an array length of 20 for the validation and 16 for the decryption keys.)</p>
<p>As well as modifying the public error pages to not leak the specific error, it would seem a good time to change the above keys (or cycle worker processes if they have been running for a while).</p>
<p>[Edit 2010-09-21: Added links to top]</p>
</div></text><author><a href="/users/67392/richard">Richard</a></author><comments><comment><text><span class="comment-copy">By default worker processes are recycled after 27-29 hours (depending on your IIS version) if they last that long, so you shouldn't have one around for days, even on a heavily trafficked site.</span></text><author><a class="comment-user" href="/users/32254/squig" title="587 reputation">squig</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I just posted my full take on this <a href="http://eglasius.blogspot.com/2010/09/aspnet-padding-oracle-how-it-relates-to.html" rel="nofollow noreferrer">in my blog</a>, after extra research on the issue. I think its important clearing out why they are getting as far as forging an auth cookie.</p>
<hr/>
<p>Just want to get some facts straight:</p>
<ol>
<li>attack doesn't let you get the machine key directly. That said, its pretty much like it had, as it allows to decrypt the messages, and modify re/encrypt new ones. </li>
<li>the way the get the actual keys is by using their ability to modify re/encrypt as in 1 and get the web.config. Unfortunately there are reasons why some put these keys in the web.config at the site level (different discussion), and in the sample video they benefit from that being the default of DotnetNuke.</li>
<li>to get the web.config all out there points to that they are using webresources.axd and/or scriptresources.axd. I thought these worked only with embedded resources, but it seems that's just not the case.</li>
<li>if the app is asp.net MVC we don't really need webresources.axd and/or scriptresources.axd, so those can be turned off. We also don't use viewstate. That said, its unclear to me if any of the other asp.net features gives different info with the workaround in place i.e. I don't know if padding gives invalid results in error while padding valid results in ignored authentication ticket (don't know if its or not the case) ... the same analysis should apply to the session cookie.</li>
<li>asp.net membership provider 'caches' roles in cookies, turn that off.</li>
</ol>
<p>About 1, afaik the encrypted messages can't be 100% arbitrary need to tolerate a tiny piece of garbage somewhere in the message, as there is 1 block in the message which decrypt value that can't be controlled.</p>
<p>Finally I would like to say that this issue is the result of ms not following its own guidance in this case: a feature relies on something sent to the client being tamper proof.</p>
<hr/>
<p>More on:</p>
<blockquote>
<p>I don't know if padding gives invalid results in error while padding valid results in ignored authentication ticket (don't know if its or not the case) ... the same analysis should apply to the session cookie.</p>
</blockquote>
<p>The auth cookie is signed, and from the info in the paper they shouldn't be able to generate a signed cookie if they don't get to the actual keys (as they did in the video before forging the auth cookie).</p>
<p>As Aristos mentioned, for the session id in the cookie, that's random for the user session, so it'd have to be sniffed from an user with the target security level and cracked while that session is active. Even then if you are relying in authentication to assign/authorize the user operations, then the impact would be minimal / it'd depends a lot in what Session is used for in that app.</p>
</div></text><author><a href="/users/66372/eglasius">eglasius</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>A patch for this bug has been released on Windows Update:
<a href="http://weblogs.asp.net/scottgu/archive/2010/09/30/asp-net-security-fix-now-on-windows-update.aspx" rel="nofollow">http://weblogs.asp.net/scottgu/archive/2010/09/30/asp-net-security-fix-now-on-windows-update.aspx</a></p>
</div></text><author><a href="/users/52080/josh-yeager">Josh Yeager</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Asp.Net MVC is also affected by this problem (as is Sharepoint, ...)</p>
<p>I've covered the fix for MVC here: <a href="http://stackoverflow.com/questions/3753886/is-asp-net-mvc-vulnerable-to-the-oracle-padding-attack">Is ASP.NET MVC vulnerable to the oracle padding attack?</a></p>
</div></text><author><a href="/users/275990/stefanvds">Stefanvds</a></author><comments/></answer></answers></post>