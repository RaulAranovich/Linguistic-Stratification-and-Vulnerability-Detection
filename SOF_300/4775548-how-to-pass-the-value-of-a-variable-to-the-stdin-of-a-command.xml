<?xml version="1.0" encoding="utf-8"?>
<post><title>security - How to pass the value of a variable to the stdin of a command? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I'm writing a shell script that should be somewhat secure i.e. does not pass secure data through parameters of commands and preferably does not use temporary files. How can I pass a variable to the stdin of a command? Or, if it's not possible, how to correctly use temporary files for such task?</p>
</div></text><author><a href="/users/15168/jonathan-leffler">Jonathan Leffler</a></author><comments/></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Something as simple as:</p>
<pre class="lang-sh prettyprint prettyprinted" style=""><code><span class="pln">echo </span><span class="str">"$blah"</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> my_cmd</span></code></pre>
</div></text><author><a href="/users/129570/oliver-charlesworth">Oliver Charlesworth</a></author><comments><comment><text><span class="comment-copy">Beware spaces in your variable: <code>echo "$blah"</code> is better.</span></text><author><a class="comment-user" href="/users/15168/jonathan-leffler" title="472,035 reputation">Jonathan Leffler</a></author></comment><comment><text><span class="comment-copy">@Jonathan: That's a good point.  Answer updated accordingly...</span></text><author><a class="comment-user" href="/users/129570/oliver-charlesworth" title="194,339 reputation">Oliver Charlesworth</a></author></comment><comment><text><span class="comment-copy">Will this work even when there is a <code>"</code> in <code>$blah</code>?</span></text><author><a class="comment-user" href="/users/101152/karel-b%c3%adlek" title="10,835 reputation">Karel Bílek</a></author></comment><comment><text><span class="comment-copy">The <code>(cat &lt;&lt;END ... )</code> answer also works if the variable contains newlines.</span></text><author><a class="comment-user" href="/users/1143274/evgeni-sergeev" title="6,898 reputation">Evgeni Sergeev</a></author></comment><comment><text><span class="comment-copy">Let's see how you handle <code>blah=-n</code>, <code>blah=-e</code>... use <code>printf</code> instead. <a href="http://unix.stackexchange.com/questions/65803/why-is-printf-better-than-echo" title="why is printf better than echo">unix.stackexchange.com/questions/65803/…</a></span></text><author><a class="comment-user" href="/users/124119/camilo-martin" title="14,620 reputation">Camilo Martin</a></author></comment><comment><text><span class="comment-copy">Doesn't work if there is a null byte in the string</span></text><author><a class="comment-user" href="/users/1546844/chiel-ten-brinke" title="4,709 reputation">Chiel ten Brinke</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Passing a value on stdin is as simple as:</p>
<pre class="lang-sh prettyprint prettyprinted" style=""><code><span class="pln">your</span><span class="pun">-</span><span class="pln">command </span><span class="pun">&lt;&lt;&lt;</span><span class="pln"> </span><span class="str">"$your_variable"</span></code></pre>
<p>Always make sure you put quotes around variable expressions!</p>
</div></text><author><a href="/users/119159/martin">Martin</a></author><comments><comment><text><span class="comment-copy">Herestrings <code>&lt;&lt;&lt;</code> are not guaranteed to be available, they are not in POSIX base, as far as I know.  They will work as expected, as long as your only running them in <code>bash</code>.  I only mention it, because they OP said 'shell' not specifically 'bash'.  Although he did tag the question with <code>bash</code>... so this still is obviously an acceptable answer.</span></text><author><a class="comment-user" href="/users/645957/techzilla" title="1,697 reputation">TechZilla</a></author></comment><comment><text><span class="comment-copy">While this may be the case, sensitive information is likely to be more easily leaked if using the <code>echo</code> method due to the creation of a pipe. The herestring command will be processed entirely by <code>bash</code>, although in this situation (as as noted) you had better know that it will work on your bash, otherwise any error message produced as a result of not supporting herestrings would also leak said information.</span></text><author><a class="comment-user" href="/users/340947/steven-lu" title="15,088 reputation">Steven Lu</a></author></comment><comment><text><span class="comment-copy">@StevenLu Wait, <code>echo</code> is a built-in. No pipe there, right? It's Unix, but it can't be <i>that much Unix</i>.</span></text><author><a class="comment-user" href="/users/124119/camilo-martin" title="14,620 reputation">Camilo Martin</a></author></comment><comment><text><span class="comment-copy">@CamiloMartin I don't know if bash will take e.g. <code>printf "abc" | cmd</code> and treat it the same as <code>cmd &lt;&lt;&lt; "abc"</code>...</span></text><author><a class="comment-user" href="/users/340947/steven-lu" title="15,088 reputation">Steven Lu</a></author></comment><comment><text><span class="comment-copy">@StevenLu <code>printf '%s\n' "$var"</code> produces the same results as <code>echo "$var"</code> but won't break if, e.g., <code>var=-en</code>, and doesn't even require bash.</span></text><author><a class="comment-user" href="/users/124119/camilo-martin" title="14,620 reputation">Camilo Martin</a></author></comment><comment><text><span class="comment-copy">@CamiloMartin Yeah I caught myself and edited my comment</span></text><author><a class="comment-user" href="/users/340947/steven-lu" title="15,088 reputation">Steven Lu</a></author></comment><comment><text><span class="comment-copy">I tried this with the characters " and ! in the string. It failed. I tried again using """$your_variable""" instead and it worked.</span></text><author><a class="comment-user" href="/users/2066459/robert-jacobs" title="2,130 reputation">Robert Jacobs</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Note that the '<code>echo "$var" | command</code> operations mean that standard input is limited to the line(s) echoed.  If you also want the terminal to be connected, then you'll need to be fancier:</p>
<pre class="lang-sh prettyprint prettyprinted" style=""><code><span class="pun">{</span><span class="pln"> echo </span><span class="str">"$var"</span><span class="pun">;</span><span class="pln"> cat </span><span class="pun">-</span><span class="pln"> </span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> command

</span><span class="pun">(</span><span class="pln"> echo </span><span class="str">"$var"</span><span class="pun">;</span><span class="pln"> cat </span><span class="pun">-</span><span class="pln">   </span><span class="pun">)</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> command</span></code></pre>
<p>This means that the first line(s) will be the contents of <code>$var</code> but the rest will come from <code>cat</code> reading its standard input.  If the command does not do anything too fancy (try to turn on command line editing, or run like <code>vim</code> does) then it will be fine.  Otherwise, you need to get really fancy - I think <code>expect</code> or one of its derivatives is likely to be appropriate.</p>
<p>The command line notations are practically identical - but the second semi-colon is necessary with the braces whereas it is not with parentheses.</p>
</div></text><author><a href="/users/15168/jonathan-leffler">Jonathan Leffler</a></author><comments><comment><text><span class="comment-copy"><code>( echo "$LIST"; cat - ) | sed 1q</code> this works for me but I need to press ctrl d when I run this script?</span></text><author><a class="comment-user" href="/users/172754/gert-cuykens" title="1,937 reputation">Gert Cuykens</a></author></comment><comment><text><span class="comment-copy">Yes; the <code>cat -</code> continues to read from the keyboard until EOF or interrupt, so you need to tell it EOF by typing control-D.</span></text><author><a class="comment-user" href="/users/15168/jonathan-leffler" title="472,035 reputation">Jonathan Leffler</a></author></comment><comment><text><span class="comment-copy">is there a way around EOF? sed needs cat</span></text><author><a class="comment-user" href="/users/172754/gert-cuykens" title="1,937 reputation">Gert Cuykens</a></author></comment><comment><text><span class="comment-copy">You don't have to use <code>cat</code> at all if you don't want terminal input, as in the first line.  Or you can use <code>cat</code> to list a file.  Or ... If you want the command to read terminal input, you have to tell it when it has reached the end of the input.  Or you could use <code>( echo "$var"; sed /quit/q - ) | command</code>; this continues until you type a line containing 'quit'.  You can be endlessly inventive with how you handle it.  Beware the old urban legend of a program that stopped working when the users began working with Ecuador.  They'd type in the name of the capital, Quito, and the program exited.</span></text><author><a class="comment-user" href="/users/15168/jonathan-leffler" title="472,035 reputation">Jonathan Leffler</a></author></comment><comment><text><span class="comment-copy"><code>( echo "$LIST"; cat &lt;&lt; EOF ) | sed 1q</code> this works for me</span></text><author><a class="comment-user" href="/users/172754/gert-cuykens" title="1,937 reputation">Gert Cuykens</a></author></comment><comment><text><span class="comment-copy">OK if you say so.  But why not just <code>echo "$LIST" | sed 1q | ...</code>?  It all depends on what you're about.  The <code>&lt;&lt;EOF</code> notation should require an EOF at the start of a line on its own somewhere down the file.  I'd not use it, I think — but I'm still not sure what you're trying to achieve.  A simple <code>echo "$LIST" | command</code> or <code>echo $LIST | command</code> will probably suffice in practice (and it is important that you know the significance of the difference between the two).</span></text><author><a class="comment-user" href="/users/15168/jonathan-leffler" title="472,035 reputation">Jonathan Leffler</a></author></comment><comment><text><span class="comment-copy"><code>echo "$LIST" | head -n1</code> works but <code>echo "$LIST" | sed 1q</code> did not?</span></text><author><a class="comment-user" href="/users/172754/gert-cuykens" title="1,937 reputation">Gert Cuykens</a></author></comment><comment><text><span class="comment-copy">Don't know; they should be equivalent.</span></text><author><a class="comment-user" href="/users/15168/jonathan-leffler" title="472,035 reputation">Jonathan Leffler</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I liked Martin's answer, but it has some problems depending on what is in the variable. This</p>
<pre class="lang-sh prettyprint prettyprinted" style=""><code><span class="pln">your</span><span class="pun">-</span><span class="pln">command </span><span class="pun">&lt;&lt;&lt;</span><span class="pln"> </span><span class="str">"""$your_variable"""</span></code></pre>
<p>is better if you variable contains " or !</p>
</div></text><author><a href="/users/2066459/robert-jacobs">Robert Jacobs</a></author><comments><comment><text><span class="comment-copy">But why? Also, I can't reproduce any problems: <code>foo1=-; foo2='"'; foo3=\!; cat&lt;&lt;&lt;"$foo1"; cat&lt;&lt;&lt;"$foo2"; cat&lt;&lt;&lt;"$foo3"</code> works fine for me. What exactly do the three <code>"</code> do? AFAIK you are just prepending and appending an empty string.</span></text><author><a class="comment-user" href="/users/2261442/phk" title="244 reputation">phk</a></author></comment><comment><text><span class="comment-copy">Try something real. Like your command is ssh somehost. and your variable is a shell script.</span></text><author><a class="comment-user" href="/users/2066459/robert-jacobs" title="2,130 reputation">Robert Jacobs</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Try this:</p>
<pre class="lang-sh prettyprint prettyprinted" style=""><code><span class="pln">echo </span><span class="str">"$variable"</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> command</span></code></pre>
</div></text><author><a href="/users/349909/unbeli">unbeli</a></author><comments><comment><text><span class="comment-copy">but wouldn't the contents $variable show up in e.g. the output of <code>ps -u</code> when echo is running?</span></text><author><span class="comment-user">user283145</span></author></comment><comment><text><span class="comment-copy">no it won't. <code>echo</code> is a built-in, so there is no process to show in ps</span></text><author><a class="comment-user" href="/users/349909/unbeli" title="15,249 reputation">unbeli</a></author></comment><comment><text><span class="comment-copy">Beware spaces in your variable: <code>echo "$variable"</code> is better.</span></text><author><a class="comment-user" href="/users/15168/jonathan-leffler" title="472,035 reputation">Jonathan Leffler</a></author></comment><comment><text><span class="comment-copy">that's right, bash will eat double spaces, smarter shells won't</span></text><author><a class="comment-user" href="/users/349909/unbeli" title="15,249 reputation">unbeli</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<pre class="lang-sh prettyprint prettyprinted" style=""><code><span class="pun">(</span><span class="pln">cat </span><span class="pun">&lt;&lt;</span><span class="pln">END
$passwd
END
</span><span class="pun">)</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> command</span></code></pre>
<p>The <code>cat</code> is not really needed, but it helps to structure the code better and allows you to use more commands in parentheses as input to your command.</p>
</div></text><author><a href="/users/363297/poltos">PoltoS</a></author><comments><comment><text><span class="comment-copy">But this method allows you to pass multiple lines to your command and also allows spaces in the <code>$passwd</code></span></text><author><a class="comment-user" href="/users/363297/poltos" title="720 reputation">PoltoS</a></author></comment><comment><text><span class="comment-copy">This is the best answer so far that does not leak variable contents to pipe or  process snooping.</span></text><author><a class="comment-user" href="/users/2688272/user2688272" title="81 reputation">user2688272</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>As per Martin's answer, there is a bash feature called <em>Here Strings</em> (which itself is a variant of the more widely supported <em>Here Documents</em> feature).</p>
<p><a href="http://www.gnu.org/software/bash/manual/bashref.html#Here-Strings" rel="nofollow">http://www.gnu.org/software/bash/manual/bashref.html#Here-Strings</a></p>
<blockquote>
<p>3.6.7 Here Strings</p>
<p>A variant of here documents, the format is:</p>
<pre class="lang-sh prettyprint prettyprinted" style=""><code><span class="pun">&lt;&lt;&lt;</span><span class="pln"> word</span></code></pre>
<p>The word is expanded and supplied to the command on its standard
  input.</p>
</blockquote>
<p>Note that Here Strings would appear to be bash-only, so, for improved portability, you'd probably be better off with the original Here Documents feature, as per PoltoS's answer:</p>
<pre class="lang-sh prettyprint prettyprinted" style=""><code><span class="pun">(</span><span class="pln"> cat </span><span class="pun">&lt;&lt;</span><span class="pln">EOF
$variable
EOF
</span><span class="pun">)</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> cmd</span></code></pre>
<p>Or, a simpler variant of the above:</p>
<pre class="lang-sh prettyprint prettyprinted" style=""><code><span class="pun">(</span><span class="pln">cmd </span><span class="pun">&lt;&lt;</span><span class="pln">EOF
$variable
EOF
</span><span class="pun">)</span></code></pre>
<p>You can omit <code>(</code> and <code>)</code>, unless you want to have this redirected further into other commands.</p>
</div></text><author><a href="/users/1122270/cnst">cnst</a></author><comments/></answer></answers></post>