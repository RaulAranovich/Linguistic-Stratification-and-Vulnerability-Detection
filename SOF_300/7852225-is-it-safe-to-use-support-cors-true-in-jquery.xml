<?xml version="1.0" encoding="utf-8"?>
<post><title>xss - Is it safe to use $.support.cors = true; in jQuery? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I was trying to hit a web service on a different domain using jQuery's ajax method.  After doing some research it looks like it does not allow this is by design to prevent cross site scripting.  </p>
<p>I came across a work around which was to include this line:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">$</span><span class="pun">.</span><span class="pln">support</span><span class="pun">.</span><span class="pln">cors </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span></code></pre>
<p>at the top of my javascript code.  From what I understand this enables cross site scripting in jQuery.</p>
<p>Does having this line of code make my site more vulnerable to attack?  I've always heard XSS discussed as a security issue, are there legitimate uses for XSS?</p>
</div></text><author><a href="/users/226897/abe-miessler">Abe Miessler</a></author><comments><comment><text><span class="comment-copy">Background: <a href="http://api.jquery.com/jQuery.support/" rel="nofollow noreferrer">api.jquery.com/jQuery.support</a> I don't think that setting <i>enables</i> anything though. It just tells jQuery what is supported</span></text><author><a class="comment-user" href="/users/187606/pekka-%ec%9b%83" title="317,852 reputation">Pekka 웃</a></author></comment><comment><text><span class="comment-copy">@Pekka - The very document you link says exactly the opposite.</span></text><author><a class="comment-user" href="/users/13508/%c3%81lvaro-gonz%c3%a1lez" title="88,106 reputation">Álvaro González</a></author></comment><comment><text><span class="comment-copy">@Alvaro you don't <i>enable</i> CORS by setting that variable. You just tell jQuery that you're in an environment where Cross-Domain XHR requests are possible. (So, granted, you enable their use in jQuery, fair enough.)</span></text><author><a class="comment-user" href="/users/187606/pekka-%ec%9b%83" title="317,852 reputation">Pekka 웃</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>XSS is not a feature that can be enabled in jQuery.  It would be very <strong>very</strong> unusual if the jQuery core had an XSS vulnerability, but it is possible and its called <a href="https://www.owasp.org/index.php/DOM_Based_XSS">DOM-based XSS</a>.  </p>
<p>"Cross-Origin Resource Sharing" or CORS isn't the same as XSS, <strong>BUT</strong>,  but if a web application had an XSS vulnerability, then an attacker would have CORS-like access to all resources on that domain.   In short, CORS gives you control over how you break the <a href="http://code.google.com/p/browsersec/wiki/Part2">same origin policy</a> such that you don't need to introduce a full on XSS vulnerability.  </p>
<p>The <code>$.support.cors</code> query feature relies upon the <code>Access-Control-Allow-Origin</code> HTTP response header.  This <em>could be</em> a vulnerability. For example, if a web application had <code>Access-Control-Allow-Origin: *</code> on every page, then an attacker would have the same level of access as an XSS vulenrablity.   Be careful what pages you introduce CORS headers,  and try and avoid <code>*</code> as much as possible. </p>
<p>So to answer your question:  <strong>NO</strong> a web application never needs to introduce an XSS vulnerability because there are way around the SOP such as CORS/jsonp/cross domain proxies/<a href="http://www.w3.org/TR/2008/WD-access-control-20080912/#access-control-allow-origin">access-control-origin</a>.  </p>
</div></text><author><a href="/users/183528/rook">rook</a></author><comments><comment><text><span class="comment-copy">If you have a simple GET that you want to enable only and you have subdomains across a website, then how do you have the default :visited style behavior work in a link. You don't given your philosophy.</span></text><author><a class="comment-user" href="/users/775516/jason-sebring" title="9,278 reputation">Jason Sebring</a></author></comment><comment><text><span class="comment-copy">@kitgui.com  i have no idea what you are asking or what it has to do with security.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">there is no ? at the end.</span></text><author><a class="comment-user" href="/users/775516/jason-sebring" title="9,278 reputation">Jason Sebring</a></author></comment><comment><text><span class="comment-copy">in phonegap for android, access control origin is normally set to "*", but on a mobile that's expected. you mean that this is a issue?</span></text><author><a class="comment-user" href="/users/2079428/netalex" title="135 reputation">netalex</a></author></comment><comment><text><span class="comment-copy">CORS is always server-side. Android has its own ways of violating the SOP for it's browser apps. This is really a different question,  but the rational here is that by installing the app, the user has granted permission to a browser app to run independently from the SOP,  which would be true for an app written in Java.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>It can help only if you have CORS enabled in your browser but it isn't supported by jQuery yet:</p>
<blockquote>
<p>To enable cross-domain requests in environments that do not support
  cors yet but do allow cross-domain XHR requests (windows gadget, etc),
  set $.support.cors = true;. CORS WD</p>
</blockquote>
<p>Just setting this property to true can't cause security vulnerability.</p>
</div></text><author><a href="/users/367960/bjornd">bjornd</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>When a hacker is able to inject script code to change the requests to another domain, he is also able to set this javascript flag in the script.</p>
<p>So wether this flag is set doesn't change much at this point of the intrusion.</p>
</div></text><author><a href="/users/1061654/tim">Tim</a></author><comments><comment><text><span class="comment-copy">This really doesn't answer the question. At the point of intrusion, all bets are off; but the idea is to prevent that from happening.</span></text><author><a class="comment-user" href="/users/712526/jpaugh" title="2,782 reputation">jpaugh</a></author></comment></comments></answer></answers></post>