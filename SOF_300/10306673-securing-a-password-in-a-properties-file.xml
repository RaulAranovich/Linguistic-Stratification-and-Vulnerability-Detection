<?xml version="1.0" encoding="utf-8"?>
<post><title>java - Securing a password in a properties file - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I have a java application that connects to a database.<br/>
The user name and password for the database are stored in a properties file.<br/>
What is the common practice to avoid storing the password in cleartext in the properties file while still retaining the option to let the user change it?<br/>
The main motivation here is to prevent someone looking over the admin's shoulder and seeing the password while the admin is editing the properties file.<br/>
I read <a href="http://stackoverflow.com/q/4155187/162056">here</a> that there's a built in way to do it in C#.<br/>
Knowing java, I don't expect to find a built in solution but I'd like to hear what other people are doing.<br/>
If I don't find any good choice then I am probably going to encrypt it with a constant password that will be kept in the code. But I'd hate to do it this way because it feels wrong.</p>
<p><strong>Edit Dec 12th 2012</strong>
Looks like there is no magic and I must store the password in the code or something similar.
At the end we implemented something very similar to what Jasypt that was mentioned in one of the answers does.
So I'm accepting the Jasypt answer because it is the closest thing to a definite answer.</p>
</div></text><author><a href="/users/162056/daramasala">daramasala</a></author><comments><comment><text><span class="comment-copy">The best you can hope for is obfustication, if the program can read it, anyone with access to the files can too. That's not to say you cant make it damn hard to access.</span></text><author><a class="comment-user" href="/users/980520/lynks" title="3,909 reputation">lynks</a></author></comment><comment><text><span class="comment-copy">Encrypting it with a constant password that is kept in the code seems like a legit way of doing it if people looking over the admin's shoulder are the main threat.</span></text><author><a class="comment-user" href="/users/1333157/zeroone" title="1,322 reputation">ZeroOne</a></author></comment><comment><text><span class="comment-copy">How many people access the database? Don't they need a password for the core database access? Why should you store a second one/ this one?</span></text><author><a class="comment-user" href="/users/312172/user-unknown" title="22,085 reputation">user unknown</a></author></comment><comment><text><span class="comment-copy">@userunknown, obviously the Java application needs its own username and password for accessing the database. These are kept in the properties file, like the original poster explained.</span></text><author><a class="comment-user" href="/users/1333157/zeroone" title="1,322 reputation">ZeroOne</a></author></comment><comment><text><span class="comment-copy">@ZeroOne: For databases I use, I have an account, and the application just forwards my login information to the database, which grants me privileges or not. Manipulation of a front end program seems to me very risky.</span></text><author><a class="comment-user" href="/users/312172/user-unknown" title="22,085 reputation">user unknown</a></author></comment><comment><text><span class="comment-copy">@userunknown Think of a web application like Stack Overflow. The application needs to access a database, but your login credentials to the web site certainly won't let you in into that database that powers the site. The application has its own database credentials.</span></text><author><a class="comment-user" href="/users/1333157/zeroone" title="1,322 reputation">ZeroOne</a></author></comment><comment><text><span class="comment-copy">@ZeroOne: <code>Java application</code> isn't a web-application, is it? Maybe it is, but then it is poorly specified.</span></text><author><a class="comment-user" href="/users/312172/user-unknown" title="22,085 reputation">user unknown</a></author></comment><comment><text><span class="comment-copy">@userunknown Yeah, I just noticed that I just assumed it was. That's because that's the only reason I could think of why anyone would want to save a database password into a properties file. Otherwise it should be done just like you already said.</span></text><author><a class="comment-user" href="/users/1333157/zeroone" title="1,322 reputation">ZeroOne</a></author></comment><comment><text><span class="comment-copy">Thanks for all the comments. So, I wonder, if all I can do is obfuscate then I can just encode it in Base64, no? This way it is hard to tell what is the password by looking at it and yet I don't need to use encryption/decryption which seem an overkill given the fact the password is not really secured.</span></text><author><a class="comment-user owner" href="/users/162056/daramasala" title="1,375 reputation">daramasala</a></author></comment><comment><text><span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/1132567/encrypt-password-in-configuration-files">Encrypt Password in Configuration Files?</a></span></text><author><a class="comment-user" href="/users/1549977/ben" title="394 reputation">Ben</a></author></comment><comment><text><span class="comment-copy">I created an opensource-library: <a href="http://secured-properties.brabenetz.net/" rel="nofollow noreferrer">secured-properties.brabenetz.net</a>   Please let me know what you think about it.</span></text><author><a class="comment-user" href="/users/702345/brabenetz" title="158 reputation">brabenetz</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<h1><a href="http://www.jasypt.org" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/oEt2m.png"/></a></h1>
<p><strong>Jasypt provides the <a href="http://www.jasypt.org/api/jasypt/1.8/org/jasypt/properties/EncryptableProperties.html" rel="noreferrer">org.jasypt.properties.EncryptableProperties</a> class for loading, managing and transparently decrypting encrypted values in .properties files, allowing the mix of both encrypted and not-encrypted values in the same file.</strong></p>
<p><a href="http://www.jasypt.org/encrypting-configuration.html" rel="noreferrer">http://www.jasypt.org/encrypting-configuration.html</a></p>
<blockquote>
<p>By using an org.jasypt.properties.EncryptableProperties object, an
  application would be able to correctly read and use a .properties file
  like this:</p>
</blockquote>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="pln">datasource</span><span class="pun">.</span><span class="pln">driver</span><span class="pun">=</span><span class="pln">com</span><span class="pun">.</span><span class="pln">mysql</span><span class="pun">.</span><span class="pln">jdbc</span><span class="pun">.</span><span class="typ">Driver</span><span class="pln"> 
datasource</span><span class="pun">.</span><span class="pln">url</span><span class="pun">=</span><span class="pln">jdbc</span><span class="pun">:</span><span class="pln">mysql</span><span class="pun">:</span><span class="com">//localhost/reportsdb </span><span class="pln">
datasource</span><span class="pun">.</span><span class="pln">username</span><span class="pun">=</span><span class="pln">reportsUser 
datasource</span><span class="pun">.</span><span class="pln">password</span><span class="pun">=</span><span class="pln">ENC</span><span class="pun">(</span><span class="pln">G6N718UuyPE5bHyWKyuLQSm02auQPUtm</span><span class="pun">)</span><span class="pln"> </span></code></pre>
<blockquote>
<p>Note that
  the database password is encrypted (in fact, any other property could
  also be encrypted, be it related with database configuration or not).</p>
<p>How do we read this value? like this:</p>
</blockquote>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="com">/*
* First, create (or ask some other component for) the adequate encryptor for   
* decrypting the values in our .properties file.   
*/</span><span class="pln">  
</span><span class="typ">StandardPBEStringEncryptor</span><span class="pln"> encryptor </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">StandardPBEStringEncryptor</span><span class="pun">();</span><span class="pln">     
encryptor</span><span class="pun">.</span><span class="pln">setPassword</span><span class="pun">(</span><span class="str">"jasypt"</span><span class="pun">);</span><span class="pln"> </span><span class="com">// could be got from web, env variable...    </span><span class="pln">
</span><span class="com">/*   
* Create our EncryptableProperties object and load it the usual way.   
*/</span><span class="pln">  
</span><span class="typ">Properties</span><span class="pln"> props </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">EncryptableProperties</span><span class="pun">(</span><span class="pln">encryptor</span><span class="pun">);</span><span class="pln">  
props</span><span class="pun">.</span><span class="pln">load</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">FileInputStream</span><span class="pun">(</span><span class="str">"/path/to/my/configuration.properties"</span><span class="pun">));</span><span class="pln">

</span><span class="com">/*   
* To get a non-encrypted value, we just get it with getProperty...   
*/</span><span class="pln">  
</span><span class="typ">String</span><span class="pln"> datasourceUsername </span><span class="pun">=</span><span class="pln"> props</span><span class="pun">.</span><span class="pln">getProperty</span><span class="pun">(</span><span class="str">"datasource.username"</span><span class="pun">);</span><span class="pln">

</span><span class="com">/*   
* ...and to get an encrypted value, we do exactly the same. Decryption will   
* be transparently performed behind the scenes.   
*/</span><span class="pln"> 
</span><span class="typ">String</span><span class="pln"> datasourcePassword </span><span class="pun">=</span><span class="pln"> props</span><span class="pun">.</span><span class="pln">getProperty</span><span class="pun">(</span><span class="str">"datasource.password"</span><span class="pun">);</span><span class="pln">

 </span><span class="com">// From now on, datasourcePassword equals "reports_passwd"...</span></code></pre>
</div></text><author><a href="/users/14419/mads-hansen">Mads Hansen</a></author><comments><comment><text><span class="comment-copy">So, basically, now password is hard-coded in the program?</span></text><author><a class="comment-user" href="/users/638764/mazaneicha" title="2,216 reputation">mazaneicha</a></author></comment><comment><text><span class="comment-copy">The "password" that you see in the example is used to perform the encryption/decryption of the values. In this example it is hard-coded, but it could be retrieved from anywhere(e.g. environment variable). However, the property value(s) that you don't want to be stored plain-text are <b>encrypted</b> and then decrypted when read through the <code>getProperty()</code> method. It is basically a layer of obvuscation, but does address the issue of shoulder surfing and casual access to sensitive data at rest.</span></text><author><a class="comment-user" href="/users/14419/mads-hansen" title="35,348 reputation">Mads Hansen</a></author></comment><comment><text><span class="comment-copy">@MadsHansen Thanks for the info. I don't think I'll use it for this project (already too far into code freeze...) but I will certainly remember it for next version/project.</span></text><author><a class="comment-user owner" href="/users/162056/daramasala" title="1,375 reputation">daramasala</a></author></comment><comment><text><span class="comment-copy">@MadsHansen How should I encrypt the password into encrypted code like ENC(G6N718UuyPE5bHyWKyuLQSm02auQPUtm) ?</span></text><author><a class="comment-user" href="/users/1078571/kedron" title="113 reputation">Kedron</a></author></comment><comment><text><span class="comment-copy">@Kedron u can do this like StandardPBEStringEncryptor encryptor = new StandardPBEStringEncryptor();          encryptor.setPassword("abhinav");         String encryptedPassword = encryptor.encrypt("abc@123");         System.out.println(encryptedPassword);         if ("abc@123".equals(encryptor.decrypt(encryptedPassword))) {           System.out.println("Success");         } else {           System.out.println("Failure");         }</span></text><author><a class="comment-user" href="/users/1072826/gladiator" title="356 reputation">gladiator</a></author></comment><comment><text><span class="comment-copy">For just a couple of properties this is overkill. Just read the sensitive parts  from System.getProperties() and provide them with -D on the command line when you start your Java process.  The problem with shell history and over the shoulder peeking is just as serious if you provide the Encryptors password on the command line.</span></text><author><a class="comment-user" href="/users/428400/glenn-bech" title="3,536 reputation">Glenn Bech</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The poor mans compromise solution is to use a simplistic multi signature approach.</p>
<p>For Example the DBA sets the applications database password to a 50 character random string. 
<strong>TAKqWskc4ncvKaJTyDcgAHq82X7tX6GfK2fc386bmNw3muknjU</strong></p>
<p>He or she give half the password to the application developer who then hard codes it into the java binary.</p>
<p><strong>private String pass1 = "TAKqWskc4ncvKaJTyDcgAHq82"</strong></p>
<p>The other half of the password is passed as a command line argument. the DBA gives pass2 to the system support or admin person who either enters it a application start time or puts it into the automated application start up script.</p>
<p>java -jar /myapplication.jar  -pass2 X7tX6GfK2fc386bmNw3muknjU</p>
<p>When the application starts it uses pass1 + pass2 and connects to the database. </p>
<p>This solution has many advantages with out the downfalls mentioned.</p>
<p>You can safely put half the password in a command line arguments as reading it wont help you much unless you are the developer who has the other half of the password.</p>
<p>The DBA can also still change the second half of the password and the developer need not have to re-deploy the application. </p>
<p>The source code can also be semi public as reading it and the password will not give you application access.  </p>
<p>You can further improve the situation by adding restrictions on the IP address ranges the database will accept connections from. </p>
</div></text><author><a href="/users/4137960/abelgo-japan">Abelgo Japan</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>What about providing a custom N-Factor authentication mechanism?</p>
<p>Before combining available methods, let's assume we can perform the following:</p>
<p>1) Hard-code inside the Java program</p>
<p>2) Store in a .properties file</p>
<p>3) Ask user to type password from command line</p>
<p>4) Ask user to type password from a form</p>
<p>5) Ask user to load a password-file from command line or a form</p>
<p>6) Provide the password through network</p>
<p>7) many alternatives (eg Draw A Secret, Fingerprint, IP-specific, bla bla bla)</p>
<p><strong>1st option:</strong> We could make things more complicated for an attacker by using obfuscation, but this is not considered a good countermeasure. A good coder can easily understand how it works if he/she can access the file. We could even export a per-user binary (or just the obfuscation part or key-part), so an attacker must have access to this user-specific file, not another distro.
Again, we should find a way to change passwords, eg by recompiling or using reflection to on-the-fly change class behavior.</p>
<p><strong>2nd option:</strong> We can store the password in the .properties file in an encrypted format, so it's not directly visible from an attacker (just like <a href="http://www.jasypt.org/" rel="nofollow noreferrer">jasypt</a> does). If we need a password manager we'll need a master password too which again should be stored somewhere - inside a .class file, the keystore, kernel, another file or even in memory - all have their pros and cons.<br/>
But, now users will just edit the .properties file for password change.</p>
<p><strong>3rd option:</strong> type the password when running from command line e.g. <code>java -jar /myprogram.jar -p sdflhjkiweHIUHIU8976hyd</code>.</p>
<p>This doesn't require the password to be stored and will stay in memory. However, <code>history</code> commands and OS logs, may be your worst enemy here.
To change passwords on-the-fly, you will need to implement some methods (eg listen for console inputs, RMI, sockets, REST bla bla bla), but the password will always stay in memory.</p>
<p>One can even temporarily decrypt it only when required -&gt; then delete the decrypted, but always keep the encrypted password in memory. Unfortunately, the aforementioned method does not increase security against unauthorized in-memory access, because the person who achieves that, will probably have access to the algorithm, salt and any other secrets being used.</p>
<p><strong>4th option:</strong> provide the password from a custom form, rather than the command line. This will circumvent the problem of logging exposure.</p>
<p><strong>5th option:</strong> provide a file as a password stored previously on a another medium -&gt; then hard delete file. This will again circumvent the problem of logging exposure, plus no typing is required that could be shoulder-surfing stolen. When a change is required, provide another file, then delete again. </p>
<p><strong>6th option:</strong> again to avoid shoulder-surfing, one can implement an RMI method call, to provide the password (through an encrypted channel) from another device, eg via a mobile phone. However, you now need to protect your network channel and access to the other device.</p>
<p>I would choose a combination of the above methods to achieve maximum security so one would have to access the .class files, the property file, logs, network channel, shoulder surfing, man in the middle, other files bla bla bla. This can be easily implemented using a XOR operation between all sub_passwords to produce the actual password.</p>
<p>We can't be protected from unauthorized in-memory access though, this can only be achieved by using some access-restricted hardware (eg smartcards, HSMs, SGX), where everything is computed into them, without anyone, even the legitimate owner being able to access decryption keys or algorithms. Again, one can steal this hardware too, there are reported <a href="https://www.theregister.co.uk/2017/03/07/eggheads_slip_a_note_under_intels_door_sgx_can_leak_crypto_keys/" rel="nofollow noreferrer">side-channel attacks</a> that may help attackers in key extraction and in some cases you need to trust another party (eg with SGX you trust Intel). Of course, situation may worsen when secure-enclave cloning (de-assembling) will be possible, but I guess this will take some years to be practical.</p>
<p>Also, one may consider a key sharing solution where the full key is split between different servers. However, upon reconstruction, the full key can be stolen. The only way to mitigate the aforementioned issue is by <a href="https://crypto.stackexchange.com/questions/41470/how-to-securely-compute-aes-where-the-key-is-splitted-across-different-servers">secure multiparty computation</a>.</p>
<p>We should always keep in mind that whatever the input method, we need to ensure we are not vulnerable from network sniffing (MITM attacks) and/or key-loggers.</p>
</div></text><author><a href="/users/3294902/konstantinos-chalkias">Konstantinos Chalkias</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>The application should have a menu to login to the database, where the password should be typed the first time, and the program has an option to remember or forget the password.</p>
<p>The java application can store the password in an encrypted form somewhere on the hard disk.</p>
</div></text><author><a href="/users/1031312/ozzy">Ozzy</a></author><comments><comment><text><span class="comment-copy">What is the point of the code snippet you posted? Why are you taking an MD5 sum of the password?</span></text><author><a class="comment-user" href="/users/166339/asaph" title="103,182 reputation">Asaph</a></author></comment><comment><text><span class="comment-copy">It's just a quick way to encrypt a password... oops you're right, there is no point of it here since its required to log into a database, so I shouldve put a reversable method.</span></text><author><a class="comment-user" href="/users/1031312/ozzy" title="5,861 reputation">Ozzy</a></author></comment><comment><text><span class="comment-copy">jasypt lets you set this up <a href="http://www.jasypt.org/webconfiguration.html" rel="nofollow noreferrer">link</a></span></text><author><a class="comment-user" href="/users/1385174/adam" title="1,300 reputation">Adam</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Based on the comments here I've written a <a href="http://makina-corpus.com/blog/metier/2015/chiffrer-les-mots-de-passe-dans-les-fichiers-de-configuration-avec-talend" rel="nofollow">tutorial on how to cipher/crypt and uncrypt passwords in .properties configuration files using Talend Data Integration</a>.</p>
<p>It is in french, but 2 ways are proposed using Jasypt or JavaXCrypto. The code may interest you.</p>
</div></text><author><a href="/users/2739782/mordicusetcubitus">MordicusEtCubitus</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Actually, this is a duplicate of <a href="http://stackoverflow.com/questions/1132567/encrypt-password-in-configuration-files">Encrypt Password in Configuration Files?</a>.</p>
<p>The best solution I found so far is in this answert: <a href="http://stackoverflow.com/a/1133815/1549977">http://stackoverflow.com/a/1133815/1549977</a></p>
<p>Pros: Password is saved a a char array, not as a string. It's still not good, but better than anything else.</p>
</div></text><author><a href="/users/1549977/ben">Ben</a></author><comments/></answer></answers></post>