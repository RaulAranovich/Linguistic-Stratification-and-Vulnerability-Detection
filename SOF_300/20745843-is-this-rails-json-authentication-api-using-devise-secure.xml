<?xml version="1.0" encoding="utf-8"?>
<post><title>Is this Rails JSON authentication API (using Devise) secure? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>My Rails app uses Devise for authentication. It has a sister iOS app, and users can log in to the iOS app using the same credentials that they use for the web app. So I need some kind of API for authentication.</p>
<p>Lots of similar questions on here point to <a href="http://jessewolgamott.com/blog/2012/01/19/the-one-with-a-json-api-login-using-devise/">this tutorial</a>, but it seems to be out-of-date, as the <code>token_authenticatable</code> module has since been removed from Devise and some of the lines throw errors. (I'm using Devise 3.2.2.) I've attempted to roll my own based on that tutorial (and <a href="http://danrodriguez.me/post/54352441822/">this one</a>), but I'm not 100% confident in it - I feel like there may be something I've misunderstood or missed.</p>
<p>Firstly, following the advice of <a href="https://gist.github.com/josevalim/fb706b1e933ef01e4fb6">this gist</a>, I added an <code>authentication_token</code> text attribute to my <code>users</code> table, and the following to <code>user.rb</code>:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">before_save </span><span class="pun">:</span><span class="pln">ensure_authentication_token

</span><span class="kwd">def</span><span class="pln"> ensure_authentication_token
  </span><span class="kwd">if</span><span class="pln"> authentication_token</span><span class="pun">.</span><span class="pln">blank</span><span class="pun">?</span><span class="pln">
    </span><span class="kwd">self</span><span class="pun">.</span><span class="pln">authentication_token </span><span class="pun">=</span><span class="pln"> generate_authentication_token
  </span><span class="kwd">end</span><span class="pln">
</span><span class="kwd">end</span><span class="pln">

</span><span class="kwd">private</span><span class="pln">

  </span><span class="kwd">def</span><span class="pln"> generate_authentication_token
    loop </span><span class="kwd">do</span><span class="pln">
      token </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Devise</span><span class="pun">.</span><span class="pln">friendly_token
      </span><span class="kwd">break</span><span class="pln"> token </span><span class="kwd">unless</span><span class="pln"> </span><span class="typ">User</span><span class="pun">.</span><span class="pln">find_by</span><span class="pun">(</span><span class="pln">authentication_token</span><span class="pun">:</span><span class="pln"> token</span><span class="pun">)</span><span class="pln">
    </span><span class="kwd">end</span><span class="pln">
  </span><span class="kwd">end</span></code></pre>
<p>Then I have the following controllers:</p>
<p><strong>api_controller.rb</strong></p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">class</span><span class="pln"> </span><span class="typ">ApiController</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln"> </span><span class="typ">ApplicationController</span><span class="pln">
  respond_to </span><span class="pun">:</span><span class="pln">json
  skip_before_filter </span><span class="pun">:</span><span class="pln">authenticate_user</span><span class="pun">!</span><span class="pln">

  </span><span class="kwd">protected</span><span class="pln">

  </span><span class="kwd">def</span><span class="pln"> user_params
    </span><span class="kwd">params</span><span class="pun">[:</span><span class="pln">user</span><span class="pun">].</span><span class="pln">permit</span><span class="pun">(:</span><span class="pln">email</span><span class="pun">,</span><span class="pln"> </span><span class="pun">:</span><span class="pln">password</span><span class="pun">,</span><span class="pln"> </span><span class="pun">:</span><span class="pln">password_confirmation</span><span class="pun">)</span><span class="pln">
  </span><span class="kwd">end</span><span class="pln">
</span><span class="kwd">end</span></code></pre>
<p>(Note that my <code>application_controller</code> has the line <code>before_filter :authenticate_user!</code>.)</p>
<p><strong>api/sessions_controller.rb</strong></p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">class</span><span class="pln"> </span><span class="typ">Api</span><span class="pun">::</span><span class="typ">SessionsController</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln"> </span><span class="typ">Devise</span><span class="pun">::</span><span class="typ">RegistrationsController</span><span class="pln">
  prepend_before_filter </span><span class="pun">:</span><span class="pln">require_no_authentication</span><span class="pun">,</span><span class="pln"> </span><span class="pun">:</span><span class="pln">only </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">[:</span><span class="pln">create </span><span class="pun">]</span><span class="pln">

  before_filter </span><span class="pun">:</span><span class="pln">ensure_params_exist

  respond_to </span><span class="pun">:</span><span class="pln">json

  skip_before_filter </span><span class="pun">:</span><span class="pln">verify_authenticity_token

  </span><span class="kwd">def</span><span class="pln"> create
    build_resource
    resource </span><span class="pun">=</span><span class="pln"> </span><span class="typ">User</span><span class="pun">.</span><span class="pln">find_for_database_authentication</span><span class="pun">(</span><span class="pln">
      email</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">params</span><span class="pun">[:</span><span class="pln">user</span><span class="pun">][:</span><span class="pln">email</span><span class="pun">]</span><span class="pln">
    </span><span class="pun">)</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> invalid_login_attempt </span><span class="kwd">unless</span><span class="pln"> resource

    </span><span class="kwd">if</span><span class="pln"> resource</span><span class="pun">.</span><span class="pln">valid_password</span><span class="pun">?(</span><span class="kwd">params</span><span class="pun">[:</span><span class="pln">user</span><span class="pun">][:</span><span class="pln">password</span><span class="pun">])</span><span class="pln">
      sign_in</span><span class="pun">(</span><span class="str">"user"</span><span class="pun">,</span><span class="pln"> resource</span><span class="pun">)</span><span class="pln">
      render json</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        success</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">,</span><span class="pln">
        auth_token</span><span class="pun">:</span><span class="pln"> resource</span><span class="pun">.</span><span class="pln">authentication_token</span><span class="pun">,</span><span class="pln">
        email</span><span class="pun">:</span><span class="pln"> resource</span><span class="pun">.</span><span class="pln">email
      </span><span class="pun">}</span><span class="pln">
      </span><span class="kwd">return</span><span class="pln">
    </span><span class="kwd">end</span><span class="pln">
    invalid_login_attempt
  </span><span class="kwd">end</span><span class="pln">

  </span><span class="kwd">def</span><span class="pln"> destroy
    sign_out</span><span class="pun">(</span><span class="pln">resource_name</span><span class="pun">)</span><span class="pln">
  </span><span class="kwd">end</span><span class="pln">

  </span><span class="kwd">protected</span><span class="pln">

    </span><span class="kwd">def</span><span class="pln"> ensure_params_exist
      </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">unless</span><span class="pln"> </span><span class="kwd">params</span><span class="pun">[:</span><span class="pln">user</span><span class="pun">].</span><span class="pln">blank</span><span class="pun">?</span><span class="pln">
      render json</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        success</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">,</span><span class="pln">
        message</span><span class="pun">:</span><span class="pln"> </span><span class="str">"missing user parameter"</span><span class="pln">
      </span><span class="pun">},</span><span class="pln"> status</span><span class="pun">:</span><span class="pln"> </span><span class="lit">422</span><span class="pln">
    </span><span class="kwd">end</span><span class="pln">

    </span><span class="kwd">def</span><span class="pln"> invalid_login_attempt
      warden</span><span class="pun">.</span><span class="pln">custom_failure</span><span class="pun">!</span><span class="pln">
      render json</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        success</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">,</span><span class="pln">
        message</span><span class="pun">:</span><span class="pln"> </span><span class="str">"Error with your login or password"</span><span class="pln">
      </span><span class="pun">},</span><span class="pln"> status</span><span class="pun">:</span><span class="pln"> </span><span class="lit">401</span><span class="pln">
    </span><span class="kwd">end</span><span class="pln">
</span><span class="kwd">end</span></code></pre>
<p><strong>api/registrations_controller.rb</strong></p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">class</span><span class="pln"> </span><span class="typ">Api</span><span class="pun">::</span><span class="typ">RegistrationsController</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln"> </span><span class="typ">ApiController</span><span class="pln">
  skip_before_filter </span><span class="pun">:</span><span class="pln">verify_authenticity_token

  </span><span class="kwd">def</span><span class="pln"> create
    user </span><span class="pun">=</span><span class="pln"> </span><span class="typ">User</span><span class="pun">.</span><span class="kwd">new</span><span class="pun">(</span><span class="pln">user_params</span><span class="pun">)</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> user</span><span class="pun">.</span><span class="pln">save
      render</span><span class="pun">(</span><span class="pln">
        json</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Jbuilder</span><span class="pun">.</span><span class="pln">encode </span><span class="kwd">do</span><span class="pln"> </span><span class="pun">|</span><span class="pln">j</span><span class="pun">|</span><span class="pln">
          j</span><span class="pun">.</span><span class="pln">success </span><span class="kwd">true</span><span class="pln">
          j</span><span class="pun">.</span><span class="pln">email user</span><span class="pun">.</span><span class="pln">email
          j</span><span class="pun">.</span><span class="pln">auth_token user</span><span class="pun">.</span><span class="pln">authentication_token
        </span><span class="kwd">end</span><span class="pun">,</span><span class="pln">
        status</span><span class="pun">:</span><span class="pln"> </span><span class="lit">201</span><span class="pln">
      </span><span class="pun">)</span><span class="pln">
      </span><span class="kwd">return</span><span class="pln">
    </span><span class="kwd">else</span><span class="pln">
      warden</span><span class="pun">.</span><span class="pln">custom_failure</span><span class="pun">!</span><span class="pln">
      render json</span><span class="pun">:</span><span class="pln"> user</span><span class="pun">.</span><span class="pln">errors</span><span class="pun">,</span><span class="pln"> status</span><span class="pun">:</span><span class="pln"> </span><span class="lit">422</span><span class="pln">
    </span><span class="kwd">end</span><span class="pln">
  </span><span class="kwd">end</span><span class="pln">
</span><span class="kwd">end</span></code></pre>
<p>And in <strong>config/routes.rb</strong>:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">  </span><span class="kwd">namespace</span><span class="pln"> </span><span class="pun">:</span><span class="pln">api</span><span class="pun">,</span><span class="pln"> defaults</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> format</span><span class="pun">:</span><span class="pln"> </span><span class="str">"json"</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">do</span><span class="pln">
    devise_for </span><span class="pun">:</span><span class="pln">users
  </span><span class="kwd">end</span></code></pre>
<p>I'm out of my depth a bit and I'm sure there's something here that my future self will look back on and cringe (there usually is). Some iffy parts:</p>
<p><strong>Firstly</strong>, you'll notice that <code>Api::SessionsController</code> inherits from <code>Devise::RegistrationsController</code> whereas <code>Api::RegistrationsController</code> inherits from <code>ApiController</code> (I also have some other controllers such as <code>Api::EventsController &lt; ApiController</code> which deal with more standard REST stuff for my other models and don't have much contact with Devise.) This is a pretty ugly arrangement, but I couldn't figure out another way of getting access the methods I need in <code>Api::RegistrationsController</code>. The tutorial I linked to above has the line <code>include Devise::Controllers::InternalHelpers</code>, but this module seems to have been removed in more recent versions of Devise.</p>
<p><strong>Secondly</strong>, I've disabled CSRF protection with the line <code>skip_before_filter :verify_authentication_token</code>. I have my doubts about whether this is a good idea - I see a lot of <a href="http://stackoverflow.com/questions/7600347/rails-api-design-without-disabling-csrf-protection">conflicting</a> or <a href="http://stackoverflow.com/questions/11008469/are-json-web-services-vulnerable-to-csrf-attacks">hard to understand</a> advice about whether JSON APIs are vulnerable to CSRF attacks - but adding that line was the only way I could get the damn thing to work.</p>
<p><strong>Thirdly</strong>, I want to make sure I understand how authentication works once a user has signed in. Say I have an API call <code>GET /api/friends</code> which returns a list of the current user's friends. As I understand it, the iOS app would have to get the user's <code>authentication_token</code> from the database (which is a fixed value for each user that never changes??), then submit it as a param along with every request, e.g. <code>GET /api/friends?authentication_token=abcdefgh1234</code>, then my <code>Api::FriendsController</code> could do something like <code>User.find_by(authentication_token: params[:authentication_token])</code> to get the current_user. Is it really this simple, or am I missing something?</p>
<p>So for anyone who's managed to read all the way to the end of this mammoth question, thanks for your time! To summarise:</p>
<ol>
<li><strong>Is this login system secure?</strong> Or is there something I've overlooked or misunderstood, e.g. when it comes to CSRF attacks?</li>
<li><strong>Is my understanding of how to authenticate requests once users are signed in correct?</strong> (See "thirdly..." above.)</li>
<li><strong>Is there any way this code can be cleaned up or made nicer?</strong> Particularly the ugly design of having one controller inherit from <code>Devise::RegistrationsController</code> and the others from <code>ApiController</code>.</li>
</ol>
<p>Thanks!</p>
</div></text><author><a href="/users/1603071/georgemillo">GeorgeMillo</a></author><comments><comment><text><span class="comment-copy">Your <code>Api::SessionsController</code> is extending from <code>Devise::RegistrationsController</code>..</span></text><author><a class="comment-user" href="/users/189431/koen" title="10,212 reputation">Koen.</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>You don't want to disable CSRF, I have read that people think it doesn't apply to JSON APIs for some reason, but this is a misunderstanding. To keep it enabled, you want to make a few changes:</p>
<ul>
<li><p>on there server side add a after_filter to your sessions controller:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">after_filter </span><span class="pun">:</span><span class="pln">set_csrf_header</span><span class="pun">,</span><span class="pln"> only</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[:</span><span class="kwd">new</span><span class="pun">,</span><span class="pln"> </span><span class="pun">:</span><span class="pln">create</span><span class="pun">]</span><span class="pln">

</span><span class="kwd">protected</span><span class="pln">

</span><span class="kwd">def</span><span class="pln"> set_csrf_header
   response</span><span class="pun">.</span><span class="pln">headers</span><span class="pun">[</span><span class="str">'X-CSRF-Token'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> form_authenticity_token
</span><span class="kwd">end</span></code></pre>
<p>This will generate a token, put it in your session and copy it in the response header for selected actions. </p></li>
<li><p>client side (iOS) you need to make sure two things are in place.</p>
<ul>
<li><p>your client needs to scan all server responses for this header and retain it when it is passed along.</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pun">...</span><span class="pln"> </span><span class="kwd">get</span><span class="pln"> ahold of response </span><span class="kwd">object</span><span class="pln">
</span><span class="com">// response may be a NSURLResponse object, so convert:</span><span class="pln">
</span><span class="typ">NSHTTPURLResponse</span><span class="pln"> </span><span class="pun">*</span><span class="pln">httpResponse </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">NSHTTPURLResponse</span><span class="pun">*)</span><span class="pln">response</span><span class="pun">;</span><span class="pln">
</span><span class="com">// grab token if present, make sure you have a config object to store it in</span><span class="pln">
</span><span class="typ">NSString</span><span class="pln"> </span><span class="pun">*</span><span class="pln">token </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[[</span><span class="pln">httpResponse allHeaderFields</span><span class="pun">]</span><span class="pln"> objectForKey</span><span class="pun">:@</span><span class="str">"X-CSRF-Token"</span><span class="pun">];</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">token</span><span class="pun">)</span><span class="pln">
   </span><span class="pun">[</span><span class="pln">yourConfig setCsrfToken</span><span class="pun">:</span><span class="pln">token</span><span class="pun">];</span></code></pre></li>
<li><p>finally, your client needs to add this token to all 'non GET' requests it sends out:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pun">...</span><span class="pln"> </span><span class="kwd">get</span><span class="pln"> ahold of your request </span><span class="kwd">object</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">yourConfig</span><span class="pun">.</span><span class="pln">csrfToken </span><span class="pun">&amp;&amp;</span><span class="pln"> </span><span class="pun">![</span><span class="pln">request</span><span class="pun">.</span><span class="pln">httpMethod isEqualToString</span><span class="pun">:@</span><span class="str">"GET"</span><span class="pun">])</span><span class="pln">
  </span><span class="pun">[</span><span class="pln">request setValue</span><span class="pun">:</span><span class="pln">yourConfig</span><span class="pun">.</span><span class="pln">csrfToken forHTTPHeaderField</span><span class="pun">:@</span><span class="str">"X-CSRF-Token"</span><span class="pun">];</span></code></pre></li>
</ul></li>
</ul>
<p>Final piece of the puzzle is to understand that when logging in to devise, two subsequent sessions/csrf tokens are being used. A login flow would look like this:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">GET </span><span class="pun">/</span><span class="pln">users</span><span class="pun">/</span><span class="pln">sign_in </span><span class="pun">-&gt;</span><span class="pln">
  </span><span class="com">// new action is called, initial token is set</span><span class="pln">
  </span><span class="com">// now send login form on callback:</span><span class="pln">
  POST </span><span class="pun">/</span><span class="pln">users</span><span class="pun">/</span><span class="pln">sign_in </span><span class="pun">&lt;</span><span class="pln">username</span><span class="pun">,</span><span class="pln"> password</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">-&gt;</span><span class="pln">
    </span><span class="com">// create action called, token is reset</span><span class="pln">
    </span><span class="com">// when login is successful, session and token are replaced </span><span class="pln">
    </span><span class="com">// and you can send authenticated requests</span></code></pre>
</div></text><author><a href="/users/295565/beno1604">beno1604</a></author><comments><comment><text><span class="comment-copy">Thanks, this is really helpful. So am I right in thinking that, once I'm signed in, I need to get the <code>auth_token</code> from the response, then pass that along with subsequent requests to authenticate as that user?</span></text><author><a class="comment-user owner" href="/users/1603071/georgemillo" title="2,568 reputation">GeorgeMillo</a></author></comment><comment><text><span class="comment-copy">This is done automatically if you modify the way your client sends out it's (non-GET) requests like I showed. BTW, this is all assuming you use devise's default, session based authentication. If you authenticate with tokens you need a different login flow, not sure about the details there.</span></text><author><a class="comment-user" href="/users/295565/beno1604" title="711 reputation">beno1604</a></author></comment><comment><text><span class="comment-copy">So to clarify, this is what happens? 1) The iOS app calls <code>GET /users/sign_in</code> and gets the CSRF token. 2) It submits to <code>POST /users/sign_in</code> using the CSRF token it just received, and gets a new CSRF token. This also saves a cookie on the iOS app and creates a new session. 3) For all future requests, the iOS app authenticate using the cookie, plus it includes the CSRF token for protection on non-GET requests. Am I right?</span></text><author><a class="comment-user owner" href="/users/1603071/georgemillo" title="2,568 reputation">GeorgeMillo</a></author></comment><comment><text><span class="comment-copy">Yes, that is basically it. To clarify, cookies/sessions are being used in both the anonymous as well as the logged in states.</span></text><author><a class="comment-user" href="/users/295565/beno1604" title="711 reputation">beno1604</a></author></comment><comment><text><span class="comment-copy">What if you don't use cookies/sessions at all? Why would you care about CSRF than? Only need to care about XSS than.</span></text><author><a class="comment-user" href="/users/1331978/if-name-is-none" title="2,697 reputation">if __name__ is None</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Your example seems to mimic the code from the Devise blog - <a href="https://gist.github.com/josevalim/fb706b1e933ef01e4fb6" rel="nofollow">https://gist.github.com/josevalim/fb706b1e933ef01e4fb6</a></p>
<p>As mentioned in that post, you are doing it similar to option 1, which they say is the insecure option.  I think the key is that you don't want to simply reset the authentication token every time the user is saved.  I think the token should be created explicitly (by some kind of TokenController in the API) and should expire periodically.</p>
<p>You'll notice I say 'I think' since (as far as I can tell) nobody has any more information on this.</p>
</div></text><author><a href="/users/121531/jaco-pretorius">Jaco Pretorius</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>The top 10 most common vulnerablites in web applications are documented in the <a href="https://www.owasp.org/index.php/Top_10_2013" rel="nofollow">OWASP Top 10</a>.   This question mentioned that Cross-Site Request Forgery(CSRF) protection was disabled, and <a href="https://www.owasp.org/index.php/Top_10_2013-A8-Cross-Site_Request_Forgery_%28CSRF%29" rel="nofollow">CSRF is on the OWASDP Top 10</a>.  In short, CSRF is used by attackers to perform actions as an authenticated user.  Disabling CSRF protection will lead to high risk vulnerabilities in an application, and undermines the purpose of having a secure authentication system. Its likely that the CSRF protection was failing,  because the client is failing to pass the CSRF synchronization token.</p>
<p>Read the entire OWASP top 10, failing to do so is <strong>extremely hazardous</strong>.  Pay close attention to <a href="https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management" rel="nofollow">Broken Authentication and Session Management</a>,  also check out the <a href="https://www.owasp.org/index.php/Session_Management_Cheat_Sheet" rel="nofollow">Session Management Cheat Sheet</a>.</p>
</div></text><author><a href="/users/183528/rook">rook</a></author><comments><comment><text><span class="comment-copy">How does any of this apply to a RESTful API?  A RESTful API doesn't use sessions!  A hacker would have to use javascript call against the API, which would have to access the HTTP Local Storage or site cookies -- which would essentially require getting the malicious script on your site, at which point it seems like there are plenty of easier ways to attack the system.</span></text><author><a class="comment-user" href="/users/439778/ronlugge" title="2,585 reputation">RonLugge</a></author></comment></comments></answer></answers></post>