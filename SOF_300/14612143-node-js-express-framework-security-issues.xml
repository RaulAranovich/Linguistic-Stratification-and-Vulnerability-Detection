<?xml version="1.0" encoding="utf-8"?>
<post><title>Node.js Express Framework Security Issues - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I'm looking for modules that should be added to a Node/Express app that address the general security concerns listed below:</p>
<ul>
<li>Injection Vulnerabilities (JavaScript, SQL, Mongo, HTML)</li>
<li>Session fixation and hijacking</li>
<li>Cross-Site Vulnerabilities (Scripting, Request Forgery)</li>
<li>Mass Assignment</li>
<li><em>insert relevant concern here</em></li>
</ul>
<p>Thanks for your help!</p>
<h2>----------</h2>
<p>Some resources I've found:</p>
<blockquote>
<p>Excellent talk (11/2012): <a href="http://lanyrd.com/2012/asfws/sxzbm/" rel="nofollow noreferrer">http://lanyrd.com/2012/asfws/sxzbm/</a> (see slides)</p>
<p>ServerFault question (2011-2012): <a href="https://serverfault.com/questions/285123/is-node-js-mature-for-enterprise-security">https://serverfault.com/questions/285123/is-node-js-mature-for-enterprise-security</a></p>
<p>Blog post on topic (9/2012): <a href="http://codefol.io/posts/29-Why-Rails-and-not-Sinatra-or-Node-js-" rel="nofollow noreferrer">http://codefol.io/posts/29-Why-Rails-and-not-Sinatra-or-Node-js-</a> </p>
<p>Exploit tester: <a href="https://code.google.com/p/skipfish/" rel="nofollow noreferrer">https://code.google.com/p/skipfish/</a></p>
<p>Passport Module: <a href="https://github.com/jaredhanson/passport" rel="nofollow noreferrer">https://github.com/jaredhanson/passport</a></p>
<p>EveryAuth Module: <a href="https://github.com/bnoguchi/everyauth" rel="nofollow noreferrer">https://github.com/bnoguchi/everyauth</a></p>
</blockquote>
</div></text><author><a href="/users/-1/community">Community</a></author><comments/></question><answers><answer><text><div class="post-text" itemprop="text">
<p>I wrote a blog post that gives a great starting point on <a href="https://blog.liftsecurity.io/2012/12/07/writing-secure-express-js-apps">Writing Secure Express.js Apps</a>. It covers a few other things beyond csrf and helmet as was mentioned by zeMirco.</p>
<p>The other thing is you can't compare express.js to rails. They are apples and oranges. For example, there is no ORM that is bundled with Express, that implementation or use of a third party module is up to you. </p>
<p>I'll try and give a breakdown of each of your concerns.</p>
<pre class="lang-js prettyprint prettyprinted" style=""><code><span class="pun">-</span><span class="typ">Injection</span><span class="pln"> </span><span class="typ">Vulnerabilities</span><span class="pln"> </span><span class="pun">(</span><span class="typ">JavaScript</span><span class="pun">,</span><span class="pln"> SQL</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Mongo</span><span class="pun">,</span><span class="pln"> HTML</span><span class="pun">)</span></code></pre>
<p>Again, these are things not built into express. The closest thing would be XSS worries over injection in templates. Jade or EJS templates that are commonly used with express output encode &lt; &gt; " ' and &amp; by default, but remember there are other contexts like user input into JavaScript or CSS that you would need to worry about.</p>
<pre class="lang-js prettyprint prettyprinted" style=""><code><span class="pun">-</span><span class="typ">Session</span><span class="pln"> fixation and hijacking</span></code></pre>
<p>Again see the blog post above, but Express is based on and uses most of the <a href="http://www.senchalabs.org/connect/">connect</a> middleware one of these is the session middleware. Biggest thing here is to properly set your cookie flags.</p>
<pre class="lang-js prettyprint prettyprinted" style=""><code><span class="pun">-</span><span class="typ">Cross</span><span class="pun">-</span><span class="typ">Site</span><span class="pln"> </span><span class="typ">Vulnerabilities</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Scripting</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Request</span><span class="pln"> </span><span class="typ">Forgery</span><span class="pun">)</span></code></pre>
<p>See above. It also comes with express.csrf() middleware. The blog post mentioned shows how to implement it.</p>
<pre class="lang-js prettyprint prettyprinted" style=""><code><span class="pun">-</span><span class="typ">Mass</span><span class="pln"> </span><span class="typ">Assignment</span></code></pre>
<p>Not an issue with express.js as it has no concepts in which this type of vulnerable would be applicable, however the custom logic you write may be in fact vulnerable to this problem, so again it's a problem of verifying if your code is vulnerable or if the third party module you used is...</p>
</div></text><author><a href="/users/1450341/adam-baldwin">Adam Baldwin</a></author><comments><comment><text><span class="comment-copy">Wow, thanks for this detailed response and the excellent blog post! I'll try to get these up and running!</span></text><author><a class="comment-user owner" href="/users/1438550/d-deriso" title="1,869 reputation">D.Deriso</a></author></comment><comment><text><span class="comment-copy">Blog post link seems to be dead. Here is another resource for some common Express.js security concerns: <a href="https://gist.github.com/cerebrl/6487587" rel="nofollow noreferrer">gist.github.com/cerebrl/6487587</a></span></text><author><a class="comment-user" href="/users/525737/jesse-clark" title="704 reputation">Jesse Clark</a></author></comment><comment><text><span class="comment-copy">@AdamBaldiwn: could you post a new link to your blog post ?</span></text><author><a class="comment-user" href="/users/172769/luc-morin" title="4,469 reputation">Luc Morin</a></author></comment><comment><text><span class="comment-copy">Fixed the blog post link.</span></text><author><a class="comment-user" href="/users/1928926/emre" title="563 reputation">Emre</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Two modules I can immediately think of:</p>
<ol>
<li><a href="http://www.senchalabs.org/connect/csrf.html">csrf</a>: CRSF protection middleware.</li>
<li><a href="https://github.com/evilpacket/helmet">helmet</a>: Middleware that implement various security headers</li>
</ol>
</div></text><author><a href="/users/1256496/zemirco">zemirco</a></author><comments><comment><text><span class="comment-copy">Thanks for sharing, I'll check these out!</span></text><author><a class="comment-user owner" href="/users/1438550/d-deriso" title="1,869 reputation">D.Deriso</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>One thing to be wary of is bodyParser. See <a href="http://andrewkelley.me/post/do-not-use-bodyparser-with-express-js.html" rel="noreferrer">http://andrewkelley.me/post/do-not-use-bodyparser-with-express-js.html</a></p>
</div></text><author><a href="/users/432/andrewrk">andrewrk</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>You should be aware that if you specify a catch-all error handler, you should NOT restart the server or do anything blocking in that handler in response to USER errors (the <code>4xx</code> range) because it could lead to a DOS vulnerability. This vulnerability is addressed automatically in <code>express-error-handler</code>, and the service will shut down as soon as it can (when active connections are drained or a timeout occurs) so restarts shouldn't be a big deal. Implementing this behavior made a really big difference in my exploit tests.</p>
<p>BTW, it's NOT safe to simply ignore all unhandled errors. That would leave your application in an undefined state, which just presents another type of DOS vulnerability.</p>
</div></text><author><a href="/users/1043390/eric-elliott">Eric Elliott</a></author><comments/></answer></answers></post>