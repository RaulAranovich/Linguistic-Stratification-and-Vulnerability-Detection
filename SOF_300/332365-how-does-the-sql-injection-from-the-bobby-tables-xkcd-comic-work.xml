<?xml version="1.0" encoding="utf-8"?>
<post><title>security - How does the SQL injection from the "Bobby Tables" XKCD comic work? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>Just looking at:</p>
<p><img alt="XKCD Strip" src="https://i.stack.imgur.com/G0ifh.png" title="Her daughter is named Help I'm trapped in a driver's license factory."/>
<em>(Source: <a href="https://xkcd.com/327/" rel="noreferrer">https://xkcd.com/327/</a>)</em></p>
<p>What does this SQL do:</p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="pln">Robert</span><span class="str">'</span><span class="pun">);</span><span class="pln"> </span><span class="kwd">DROP</span><span class="pln"> </span><span class="kwd">TABLE</span><span class="pln"> STUDENTS</span><span class="pun">;</span><span class="pln"> </span><span class="com">--</span></code></pre>
<p>I know both <code>'</code> and <code>--</code> are for comments, but doesn't the word <code>DROP</code> get commented as well since it is part of the same line?</p>
</div></text><author><a href="/users/559745/floern">Floern</a></author><comments><comment><text><span class="comment-copy">If you listen to <a href="http://blog.stackoverflow.com/2008/11/podcast-31/">Stack Overflow Podcast #31</a> (November 27, 2008), they actually discuss this.</span></text><author><a class="comment-user" href="/users/1358/ebgreen" title="20,568 reputation">EBGreen</a></author></comment><comment><text><span class="comment-copy">In MySQL, <code>'</code> is not for <a href="http://dev.mysql.com/doc/refman/5.0/en/comments.html" rel="nofollow noreferrer">comments</a>. Even if it were, there is no space before it so it can only end the string that precedes it.</span></text><author><a class="comment-user" href="/users/560648/boundaryimposition" title="236,443 reputation">BoundaryImposition</a></author></comment><comment><text><span class="comment-copy">As far as XKCD goes, if there is any question about some of the comics you can always go to <a href="http://www.explainxkcd.com/" rel="nofollow noreferrer">Explain XKCD</a> and have your answer figured out. There is even a <a href="http://wiki.xkcd.com/" rel="nofollow noreferrer">XKCD wiki</a>, which is very helpful for some tricky comics like <a href="http://wiki.xkcd.com/geohashing/Main_Page" rel="nofollow noreferrer">XKCD geohashing</a></span></text><author><a class="comment-user" href="/users/357935/anatoli" title="507 reputation">Anatoli</a></author></comment><comment><text><span class="comment-copy">One way to prevent this would be to escape any special chars before using it in the query. Another way would be to use prepared statements or make sure that you are executing one, and only one, query at a time.</span></text><author><a class="comment-user" href="/users/1313696/antonio-vildes-barbosa" title="85 reputation">Antonio Vildes Barbosa</a></author></comment><comment><text><span class="comment-copy">+1 for the fun question that we all need on StackOverflow once in a while. :)</span></text><author><a class="comment-user" href="/users/487554/codingincircles" title="614 reputation">CodingInCircles</a></author></comment><comment><text><span class="comment-copy">I believe this link must be recorded here: <a href="http://bobby-tables.com/" rel="nofollow noreferrer">bobby-tables.com</a></span></text><author><a class="comment-user" href="/users/976391/arioch-the" title="10,984 reputation">Arioch 'The</a></author></comment><comment><text><span class="comment-copy">Recent edit is quite wrong one, as it removed the key word XKCD from the title.</span></text><author><a class="comment-user" href="/users/285587/your-common-sense" title="119,078 reputation">Your Common Sense</a></author></comment><comment><text><span class="comment-copy">Its an SQL Injection. They finish the first statement then run a second one which deletes the table.</span></text><author><a class="comment-user" href="/users/1190934/james-oravec" title="6,721 reputation">James Oravec</a></author></comment><comment><text><span class="comment-copy"><a href="https://beta.companieshouse.gov.uk/company/10542519" rel="nofollow noreferrer">beta.companieshouse.gov.uk/company/10542519</a> is the registration for a consultancy named ; DROP TABLE "COMPANIES";-- LTD</span></text><author><a class="comment-user" href="/users/18829/alex-dupuy" title="3,895 reputation">Alex Dupuy</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p><strong>It drops the students table.</strong></p>
<p>The original code in the school's program probably looks something like</p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="pln">q </span><span class="pun">=</span><span class="pln"> </span><span class="str">"INSERT INTO Students VALUES ('"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> FNMName</span><span class="pun">.</span><span class="pln">Text </span><span class="pun">+</span><span class="pln"> </span><span class="str">"', '"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> LName</span><span class="pun">.</span><span class="pln">Text </span><span class="pun">+</span><span class="pln"> </span><span class="str">"')"</span><span class="pun">;</span></code></pre>
<p>This is the naive way to add text input into a query, and is <em>very bad</em>, as you will see.</p>
<p>After the values from the first name, middle name textbox <em>FNMName.Text</em> (which is <code>Robert'); DROP TABLE STUDENTS; --</code>) and the last name textbox <em>LName.Text</em> (let's call it <code>Derper</code>) are concatenated with the rest of the query, the result is now actually <em>two queries</em> separated by the <a href="http://en.wikipedia.org/wiki/SQL#Language_elements" rel="noreferrer">statement terminator</a> (semicolon).  The second query has been <strong>injected</strong> into the first.  When the code executes this query against the database, it will look like this</p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="kwd">INSERT</span><span class="pln"> </span><span class="kwd">INTO</span><span class="pln"> Students </span><span class="kwd">VALUES</span><span class="pln"> </span><span class="pun">(</span><span class="str">'Robert'</span><span class="pun">);</span><span class="pln"> </span><span class="kwd">DROP</span><span class="pln"> </span><span class="kwd">TABLE</span><span class="pln"> Students</span><span class="pun">;</span><span class="pln"> </span><span class="com">--', 'Derper')</span></code></pre>
<p>which, in plain English, roughly translates to the two queries:</p>
<blockquote>
<p>Add a new record to the Students table with a Name value of 'Robert'</p>
</blockquote>
<p>and</p>
<blockquote>
<p>Delete the Students table</p>
</blockquote>
<p>Everything past the second query is <a href="http://msdn.microsoft.com/en-us/library/ms181627.aspx" rel="noreferrer">marked as a comment</a>:  <code>--', 'Derper')</code></p>
<p>The <code>'</code> in the student's name is not a comment, it's the closing <a href="http://msdn.microsoft.com/en-us/library/ms179899.aspx" rel="noreferrer">string delimiter</a>.  Since the student's name is a string, it's needed syntactically to complete the hypothetical query.  Injection attacks only work <em>when the SQL query they inject results in valid SQL</em>.</p>
<p><sup><sup>Edited <strong><em>again</em></strong> as per <a href="http://stackoverflow.com/users/287586/dan04">dan04</a>'s astute comment</sup></sup></p>
</div></text><author><a href="/users/1228">Will</a></author><comments><comment><text><span class="comment-copy">Mmm, the WHERE with parentheses around the arguments is rather unusual, but at least it avoids a syntax error... :-)</span></text><author><a class="comment-user" href="/users/15459/philho" title="31,440 reputation">PhiLho</a></author></comment><comment><text><span class="comment-copy">@PhiLho: If the original statement were an <code>INSERT</code>, then the parenthesis would make more sense.  It would also explain why the database connection isn't in read-only mode.</span></text><author><a class="comment-user" href="/users/287586/dan04" title="51,439 reputation">dan04</a></author></comment><comment><text><span class="comment-copy">As @dan04 explains, the parenthesis makes more sense with an <code>INSERT</code>. Thinking backwards, the <code>SELECT</code> would not run anyway as the Insert of the Little Bobby Tables in the table would have already dropped the table.</span></text><author><a class="comment-user" href="/users/344949/ypercube%e1%b5%80%e1%b4%b9" title="82,168 reputation">ypercubeᵀᴹ</a></author></comment><comment><text><span class="comment-copy">Actually, in this example the first query ("add a new record...") will fail because <code>Students</code> expects more than just the one column (the original/correct statement provided two columns).  That said, the presence of the second column is helpful to show why commenting is required; and since one cannot change Bobby's name, it's probably best leaving as-is with little more than this observation as a footnote.</span></text><author><a class="comment-user" href="/users/623041/eggyal" title="85,444 reputation">eggyal</a></author></comment><comment><text><span class="comment-copy">It would be syntactically correct if the FirstName were the <i>last</i> column in the table, though.</span></text><author><a class="comment-user" href="/users/287586/dan04" title="51,439 reputation">dan04</a></author></comment><comment><text><span class="comment-copy">@dan04 I am kinda old, but I guess they like student's last names now (in the day, students only had first names, teachers only last names).  Fixed, yet again.</span></text><author><a class="comment-user" href="/users/1228/will" title="100,617 reputation">Will</a></author></comment><comment><text><span class="comment-copy">Shouldn't it be <code>Robert''</code>?</span></text><author><a class="comment-user" href="/users/3886922/yasharyan" title="2,045 reputation">Yasharyan</a></author></comment><comment><text><span class="comment-copy">Can you pass two queries in one statement. The comment <a href="http://stackoverflow.com/questions/60174/how-can-i-prevent-sql-injection-in-php?rq=1#comment16051205_60174" title="how can i prevent sql injection in php">stackoverflow.com/questions/60174/…</a> says you cannot.</span></text><author><a class="comment-user" href="/users/3601252/tejas-ramdas" title="110 reputation">Tejas Ramdas</a></author></comment><comment><text><span class="comment-copy">@TejasRamdas you can in mssql</span></text><author><a class="comment-user" href="/users/1228/will" title="100,617 reputation">Will</a></author></comment><comment><text><span class="comment-copy">Bobby's last name - or at least his mother's, is <b>Roberts</b>, per <a href="https://www.explainxkcd.com/wiki/index.php/327:_Exploits_of_a_Mom" rel="nofollow noreferrer">Explain XKCD</a>.  I'm not sure that correcting that would improve the answer clarity, though.</span></text><author><a class="comment-user" href="/users/798371/wbt" title="666 reputation">WBT</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Let's say the name was used in a variable, <code>$Name</code>.  You then run this query:</p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="kwd">INSERT</span><span class="pln"> </span><span class="kwd">INTO</span><span class="pln"> Students </span><span class="kwd">VALUES</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> </span><span class="str">'$Name'</span><span class="pln"> </span><span class="pun">)</span></code></pre>
<p>What you get is:</p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="kwd">INSERT</span><span class="pln"> </span><span class="kwd">INTO</span><span class="pln"> Students </span><span class="kwd">VALUES</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> </span><span class="str">'Robert'</span><span class="pln"> </span><span class="pun">);</span><span class="pln">  </span><span class="kwd">DROP</span><span class="pln"> </span><span class="kwd">TABLE</span><span class="pln"> STUDENTS</span><span class="pun">;</span><span class="pln"> </span><span class="com">--' )</span></code></pre>
<p>The <code>--</code> only comments the remainder of the line.</p>
</div></text><author><a href="/users/42224/sinoth">sinoth</a></author><comments><comment><text><span class="comment-copy">This is much better then the highest voted, because it explains the closing parenthesis.</span></text><author><a class="comment-user" href="/users/60518/tim-b%c3%bcthe" title="38,430 reputation">Tim Büthe</a></author></comment><comment><text><span class="comment-copy">Exactly. It's the most succinct explanation of SQL injection I've seen.</span></text><author><a class="comment-user" href="/users/555785/recluze" title="663 reputation">recluze</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>As everyone else has pointed out already, the <code>');</code> closes the original statement and then a second statement follows. Most frameworks, including languages like PHP, have default security settings by now that don't allow multiple statements in one SQL string. In PHP, for example, you can only run multiple statements in one SQL string by using the <code>mysqli_multi_query</code> function.</p>
<p>You can, however, manipulate an existing SQL statement via SQL injection without having to add a second statement. Let's say you have a login system which checks a username and a password with this simple select:</p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="pun">$</span><span class="pln">query</span><span class="pun">=</span><span class="str">"SELECT * FROM users WHERE username='"</span><span class="pln"> </span><span class="pun">.</span><span class="pln"> </span><span class="pun">$</span><span class="pln">_REQUEST</span><span class="pun">[</span><span class="str">'user'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">.</span><span class="pln"> </span><span class="str">"' and (password='"</span><span class="pun">.$</span><span class="pln">_REQUEST</span><span class="pun">[</span><span class="str">'pass'</span><span class="pun">].</span><span class="str">"')"</span><span class="pun">;</span><span class="pln">
</span><span class="pun">$</span><span class="pln">result</span><span class="pun">=</span><span class="pln">mysql_query</span><span class="pun">($</span><span class="pln">query</span><span class="pun">);</span></code></pre>
<p>If you provide <code>peter</code> as the username and <code>secret</code> as the password, the resulting SQL string would look like this:</p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="kwd">SELECT</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="kwd">FROM</span><span class="pln"> users </span><span class="kwd">WHERE</span><span class="pln"> username</span><span class="pun">=</span><span class="str">'peter'</span><span class="pln"> </span><span class="kwd">and</span><span class="pln"> </span><span class="pun">(</span><span class="pln">password</span><span class="pun">=</span><span class="str">'secret'</span><span class="pun">)</span></code></pre>
<p>Everything's fine. Now imagine you provide this string as the password:</p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="str">' OR '</span><span class="lit">1</span><span class="str">'='</span><span class="lit">1</span></code></pre>
<p>Then the resulting SQL string would be this:</p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="kwd">SELECT</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="kwd">FROM</span><span class="pln"> users </span><span class="kwd">WHERE</span><span class="pln"> username</span><span class="pun">=</span><span class="str">'peter'</span><span class="pln"> </span><span class="kwd">and</span><span class="pln"> </span><span class="pun">(</span><span class="pln">password</span><span class="pun">=</span><span class="str">''</span><span class="pln"> </span><span class="kwd">OR</span><span class="pln"> </span><span class="str">'1'</span><span class="pun">=</span><span class="str">'1'</span><span class="pun">)</span></code></pre>
<p>That would enable you to log in to any account without knowing the password. So you don't need to be able to use two statements in order to use SQL injection, although you can do more destructive things if you are able to supply multiple statements.</p>
</div></text><author><a href="/users/171933/johannes-fahrenkrug">Johannes Fahrenkrug</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>No, <code>'</code> isn't a comment in SQL, but a delimiter.</p>
<p>Mom supposed the database programmer made a request looking like:</p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="kwd">INSERT</span><span class="pln"> </span><span class="kwd">INTO</span><span class="pln"> </span><span class="str">'students'</span><span class="pln"> </span><span class="pun">(</span><span class="str">'first_name'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'last_name'</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">VALUES</span><span class="pln"> </span><span class="pun">(</span><span class="str">'$firstName'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'$lastName'</span><span class="pun">);</span></code></pre>
<p>(for example) to add the new student, where the <code>$xxx</code> variable contents was taken directly out of an HTML form, without checking format nor escaping special characters.</p>
<p>So if <code>$firstName</code> contains <code>Robert'); DROP TABLE students; --</code> the database program will execute the following request directly on the DB: </p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="kwd">INSERT</span><span class="pln"> </span><span class="kwd">INTO</span><span class="pln"> </span><span class="str">'students'</span><span class="pln"> </span><span class="pun">(</span><span class="str">'first_name'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'last_name'</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">VALUES</span><span class="pln"> </span><span class="pun">(</span><span class="str">'Robert'</span><span class="pun">);</span><span class="pln"> </span><span class="kwd">DROP</span><span class="pln"> </span><span class="kwd">TABLE</span><span class="pln"> students</span><span class="pun">;</span><span class="pln"> </span><span class="com">--', 'XKCD');</span></code></pre>
<p>ie. it will terminate early the insert statement, execute whatever malicious code the cracker wants, then comment out whatever remainder of code there might be.</p>
<p>Mmm, I am too slow, I see already 8 answers before mine in the orange band... :-) A popular topic, it seems.</p>
</div></text><author><a href="/users/15459/philho">PhiLho</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<h2>TL;DR</h2>
<pre class="lang-sql prettyprint-override prettyprinted" style=""><span class="com">-- The application accepts input, in this case 'Nancy', without attempting to</span><span class="pln">
</span><span class="com">-- sanitize the input, such as by escaping special characters</span><span class="pln">
school</span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">INSERT</span><span class="pln"> </span><span class="kwd">INTO</span><span class="pln"> students </span><span class="kwd">VALUES</span><span class="pln"> </span><span class="pun">(</span><span class="str">'Nancy'</span><span class="pun">);</span><span class="pln">
</span><span class="kwd">INSERT</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="lit">1</span><span class="pln">

</span><span class="com">-- SQL injection occurs when input into a database command is manipulated to</span><span class="pln">
</span><span class="com">-- cause the database server to execute arbitrary SQL</span><span class="pln">
school</span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">INSERT</span><span class="pln"> </span><span class="kwd">INTO</span><span class="pln"> students </span><span class="kwd">VALUES</span><span class="pln"> </span><span class="pun">(</span><span class="str">'Robert'</span><span class="pun">);</span><span class="pln"> </span><span class="kwd">DROP</span><span class="pln"> </span><span class="kwd">TABLE</span><span class="pln"> students</span><span class="pun">;</span><span class="pln"> </span><span class="com">--');</span><span class="pln">
</span><span class="kwd">INSERT</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="lit">1</span><span class="pln">
</span><span class="kwd">DROP</span><span class="pln"> </span><span class="kwd">TABLE</span><span class="pln">

</span><span class="com">-- The student records are now gone - it could have been even worse!</span><span class="pln">
school</span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">SELECT</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="kwd">FROM</span><span class="pln"> students</span><span class="pun">;</span><span class="pln">
ERROR</span><span class="pun">:</span><span class="pln">  relation </span><span class="str">"students"</span><span class="pln"> does </span><span class="kwd">not</span><span class="pln"> exist
LINE </span><span class="lit">1</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">SELECT</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="kwd">FROM</span><span class="pln"> students</span><span class="pun">;</span><span class="pln">
                      </span><span class="pun">^</span></pre>
<hr/>
<p>This drops the student table.  To make it clear what's happening, let's try this with a simple table containing only the name field and add a single row (tested with PostgreSQL 9.1.2):</p>
<pre class="lang-sql prettyprint-override prettyprinted" style=""><span class="pln">school</span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">CREATE</span><span class="pln"> </span><span class="kwd">TABLE</span><span class="pln"> students </span><span class="pun">(</span><span class="pln">name TEXT </span><span class="kwd">PRIMARY</span><span class="pln"> </span><span class="kwd">KEY</span><span class="pun">);</span><span class="pln">
NOTICE</span><span class="pun">:</span><span class="pln">  </span><span class="kwd">CREATE</span><span class="pln"> </span><span class="kwd">TABLE</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> </span><span class="kwd">PRIMARY</span><span class="pln"> </span><span class="kwd">KEY</span><span class="pln"> will </span><span class="kwd">create</span><span class="pln"> implicit </span><span class="kwd">index</span><span class="pln"> </span><span class="str">"students_pkey"</span><span class="pln"> </span><span class="kwd">for</span><span class="pln"> </span><span class="kwd">table</span><span class="pln"> </span><span class="str">"students"</span><span class="pln">
</span><span class="kwd">CREATE</span><span class="pln"> </span><span class="kwd">TABLE</span><span class="pln">
school</span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">INSERT</span><span class="pln"> </span><span class="kwd">INTO</span><span class="pln"> students </span><span class="kwd">VALUES</span><span class="pln"> </span><span class="pun">(</span><span class="str">'John'</span><span class="pun">);</span><span class="pln">
</span><span class="kwd">INSERT</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="lit">1</span></pre>
<p>Let's assume the application uses the following SQL to insert data into the table:</p>
<pre class="lang-sql prettyprint-override prettyprinted" style=""><span class="kwd">INSERT</span><span class="pln"> </span><span class="kwd">INTO</span><span class="pln"> students </span><span class="kwd">VALUES</span><span class="pln"> </span><span class="pun">(</span><span class="str">'foobar'</span><span class="pun">);</span></pre>
<p>Replace <code>foobar</code> with the actual name of the student.  A normal insert operation would look like this:</p>
<pre class="lang-sql prettyprint-override prettyprinted" style=""><span class="com">--                            Input:   Nancy</span><span class="pln">
school</span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">INSERT</span><span class="pln"> </span><span class="kwd">INTO</span><span class="pln"> students </span><span class="kwd">VALUES</span><span class="pln"> </span><span class="pun">(</span><span class="str">'Nancy'</span><span class="pun">);</span><span class="pln">
</span><span class="kwd">INSERT</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="lit">1</span></pre>
<p>When we query the table, we get this:</p>
<pre class="lang-sql prettyprint-override prettyprinted" style=""><span class="pln">school</span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">SELECT</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="kwd">FROM</span><span class="pln"> students</span><span class="pun">;</span><span class="pln">
 name
</span><span class="com">-------</span><span class="pln">
 John
 Nancy
</span><span class="pun">(</span><span class="lit">2</span><span class="pln"> </span><span class="kwd">rows</span><span class="pun">)</span></pre>
<p>What happens when we insert Little Bobby Tables's name into the table?</p>
<pre class="lang-sql prettyprint-override prettyprinted" style=""><span class="com">--                            Input:   Robert'); DROP TABLE students; --</span><span class="pln">
school</span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">INSERT</span><span class="pln"> </span><span class="kwd">INTO</span><span class="pln"> students </span><span class="kwd">VALUES</span><span class="pln"> </span><span class="pun">(</span><span class="str">'Robert'</span><span class="pun">);</span><span class="pln"> </span><span class="kwd">DROP</span><span class="pln"> </span><span class="kwd">TABLE</span><span class="pln"> students</span><span class="pun">;</span><span class="pln"> </span><span class="com">--');</span><span class="pln">
</span><span class="kwd">INSERT</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="lit">1</span><span class="pln">
</span><span class="kwd">DROP</span><span class="pln"> </span><span class="kwd">TABLE</span></pre>
<p>The SQL injection here is the result of the name of the student terminating the statement and including a separate <code>DROP TABLE</code> command; the two dashes at the end of the input are intended to comment out any leftover code that would otherwise cause an error.  The last line of the output confirms that the database server has dropped the table.</p>
<p>It's important to notice that during the <code>INSERT</code> operation the application isn't checking the input for any special characters, and is therefore allowing arbitrary input to be entered into the SQL command.  This means that a malicious user can insert, into a field normally intended for user input, special symbols such as quotes along with arbitrary SQL code to cause the database system to execute it, hence <a href="http://en.wikipedia.org/wiki/SQL_injection" rel="noreferrer">SQL "injection"</a>.</p>
<p>The result?</p>
<pre class="lang-sql prettyprint-override prettyprinted" style=""><span class="pln">school</span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">SELECT</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="kwd">FROM</span><span class="pln"> students</span><span class="pun">;</span><span class="pln">
ERROR</span><span class="pun">:</span><span class="pln">  relation </span><span class="str">"students"</span><span class="pln"> does </span><span class="kwd">not</span><span class="pln"> exist
LINE </span><span class="lit">1</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">SELECT</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="kwd">FROM</span><span class="pln"> students</span><span class="pun">;</span><span class="pln">
                      </span><span class="pun">^</span></pre>
<p>SQL injection is the database equivalent of a remote <a href="http://en.wikipedia.org/wiki/Arbitrary_code_execution" rel="noreferrer">arbitrary code execution</a> vulnerability in an operating system or application.  The potential impact of a successful SQL injection attack cannot be underestimated--depending on the database system and application configuration, it can be used by an attacker to cause data loss (as in this case), gain unauthorized access to data, or even execute arbitrary code on the host machine itself.</p>
<p>As noted by the XKCD comic, one way of protecting against SQL injection attacks is to sanitize database inputs, such as by escaping special characters, so that they cannot modify the underlying SQL command and therefore cannot cause execution of arbitrary SQL code.  If you use parameterized queries, such as by using <a href="http://msdn.microsoft.com/en-us/library/yy6y35y8.aspx" rel="noreferrer"><code>SqlParameter</code></a> in ADO.NET, the input will automatically be sanitized for you.</p>
</div></text><author><a href="/users/681231/bwdraco">bwDraco</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Say you naively wrote a student creation method like this:</p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="pln">void createStudent</span><span class="pun">(</span><span class="pln">String name</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">database</span><span class="pun">.</span><span class="kwd">execute</span><span class="pun">(</span><span class="str">"INSERT INTO students (name) VALUES ('"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> name </span><span class="pun">+</span><span class="pln"> </span><span class="str">"')"</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>And someone enters the name <code>Robert'); DROP TABLE STUDENTS; --</code></p>
<p>What gets run on the database is this query:</p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="kwd">INSERT</span><span class="pln"> </span><span class="kwd">INTO</span><span class="pln"> students </span><span class="pun">(</span><span class="pln">name</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">VALUES</span><span class="pln"> </span><span class="pun">(</span><span class="str">'Robert'</span><span class="pun">);</span><span class="pln"> </span><span class="kwd">DROP</span><span class="pln"> </span><span class="kwd">TABLE</span><span class="pln"> STUDENTS </span><span class="com">--')</span></code></pre>
<p>The semicolon ends the insert command and starts another; the -- comments out the rest of the line. The DROP TABLE command is executed...</p>
<p>This is why bind parameters are a good thing.</p>
</div></text><author><a href="/users/21849/dan-vinton">Dan Vinton</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>A single quote is the start and end of a string. A semicolon is the end of a statement. So if they were doing a select like this:</p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="kwd">Select</span><span class="pln"> </span><span class="pun">*</span><span class="pln">
</span><span class="kwd">From</span><span class="pln"> Students
</span><span class="kwd">Where</span><span class="pln"> </span><span class="pun">(</span><span class="pln">Name </span><span class="pun">=</span><span class="pln"> </span><span class="str">'&lt;NameGetsInsertedHere&gt;'</span><span class="pun">)</span></code></pre>
<p>The SQL would become:</p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="kwd">Select</span><span class="pln"> </span><span class="pun">*</span><span class="pln">
</span><span class="kwd">From</span><span class="pln"> Students
</span><span class="kwd">Where</span><span class="pln"> </span><span class="pun">(</span><span class="pln">Name </span><span class="pun">=</span><span class="pln"> </span><span class="str">'Robert'</span><span class="pun">);</span><span class="pln"> </span><span class="kwd">DROP</span><span class="pln"> </span><span class="kwd">TABLE</span><span class="pln"> STUDENTS</span><span class="pun">;</span><span class="pln"> </span><span class="com">--')</span><span class="pln">
</span><span class="com">--             ^-------------------------------^</span></code></pre>
<p>On some systems, the <code>select</code> would get ran first followed by the <code>drop</code> statement! The message is: DONT EMBED VALUES INTO YOUR SQL. Instead use parameters!</p>
</div></text><author><a href="/users/26335/codeandcats">CodeAndCats</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>The <code>');</code> ends the query, it doesn't start a comment. Then it drops the students table and comments the rest of the query that was supposed to be executed.</p>
</div></text><author><a href="/users/8681/jorn">Jorn</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>The writer of the database probably did a </p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="pln">sql </span><span class="pun">=</span><span class="pln"> </span><span class="str">"SELECT * FROM STUDENTS WHERE (STUDENT_NAME = '"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> student_name </span><span class="pun">+</span><span class="pln"> </span><span class="str">"') AND other stuff"</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">execute</span><span class="pun">(</span><span class="pln">sql</span><span class="pun">);</span></code></pre>
<p>If student_name is the one given, that does the selection with the name "Robert" and then drops the table.  The "-- " part changes the rest of the given query into a comment.</p>
</div></text><author><a href="/users/3333/paul-tomblin">Paul Tomblin</a></author><comments><comment><text><span class="comment-copy">It was my first thought, but you get a syntax error with the trailing closing parenthesis, no?</span></text><author><a class="comment-user" href="/users/15459/philho" title="31,440 reputation">PhiLho</a></author></comment><comment><text><span class="comment-copy">That's why there is a -- at the end, indicating the remaining text is a comment and should be ignored.</span></text><author><a class="comment-user" href="/users/1228/will" title="100,617 reputation">Will</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>In this case, ' is not a comment character.  It's used to delimit string literals.  The comic artist is banking on the idea that the school in question has dynamic sql somewhere that looks something like this:</p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="pun">$</span><span class="pln">sql </span><span class="pun">=</span><span class="pln"> </span><span class="str">"INSERT INTO `Students` (FirstName, LastName) VALUES ('"</span><span class="pln"> </span><span class="pun">.</span><span class="pln"> </span><span class="pun">$</span><span class="pln">fname </span><span class="pun">.</span><span class="pln"> </span><span class="str">"', '"</span><span class="pln"> </span><span class="pun">.</span><span class="pln"> </span><span class="pun">$</span><span class="pln">lname </span><span class="pun">.</span><span class="pln"> </span><span class="str">"')"</span><span class="pun">;</span></code></pre>
<p>So now the ' character ends the string literal before the programmer was expecting it.  Combined with the ; character to end the statement, an attacker can now add whatever sql they want.  The -- comment at the end is to make sure any remaining sql in the original statement does not prevent the query from compiling on the server.</p>
<p>FWIW, I also think the comic in question has an important detail wrong: if you're thinking about <em>sanitizing</em> your database inputs, as the comic suggests, you're still doing it wrong. Instead, you should think in terms of <em>quarantining</em> your database inputs, and the correct way to do this is via parameterized queries.</p>
</div></text><author><a href="/users/3043/joel-coehoorn">Joel Coehoorn</a></author><comments><comment><text><span class="comment-copy">what language is this?</span></text><author><a class="comment-user" href="/users/764846/genesis" title="39,692 reputation">genesis</a></author></comment><comment><text><span class="comment-copy">pseudocode, based on php and mysql</span></text><author><a class="comment-user" href="/users/3043/joel-coehoorn" title="262,375 reputation">Joel Coehoorn</a></author></comment><comment><text><span class="comment-copy">+ + isn't working in PHP like in javascript.</span></text><author><a class="comment-user" href="/users/764846/genesis" title="39,692 reputation">genesis</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The <code>'</code> character in SQL is used  for string constants. In this case it is used for ending the string constant and not for comment.</p>
</div></text><author><a href="/users/5290/rockcoder">Rockcoder</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>This is how it works:
Lets suppose the administrator is looking for records of student  </p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="pln">Robert</span><span class="str">'</span><span class="pun">);</span><span class="pln"> </span><span class="kwd">DROP</span><span class="pln"> </span><span class="kwd">TABLE</span><span class="pln"> STUDENTS</span><span class="pun">;</span><span class="pln"> </span><span class="com">--</span></code></pre>
<p>Since the admin account has high privileges deleting the table from this account is possible.</p>
<p>The code to retrieve user name from request is</p>
<p>Now the query would be something like this (to search the student table)</p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="pln">String query</span><span class="pun">=</span><span class="str">"Select * from student where username='"</span><span class="pun">+</span><span class="pln">student_name</span><span class="pun">+</span><span class="str">"'"</span><span class="pun">;</span><span class="pln">

statement</span><span class="pun">.</span><span class="pln">executeQuery</span><span class="pun">(</span><span class="pln">query</span><span class="pun">);</span><span class="pln"> </span><span class="pun">//</span><span class="pln">Rest </span><span class="kwd">of</span><span class="pln"> the code follows</span></code></pre>
<p>The resultant query becomes</p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="kwd">Select</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> student </span><span class="kwd">where</span><span class="pln"> username</span><span class="pun">=</span><span class="str">'Robert'</span><span class="pun">);</span><span class="pln"> </span><span class="kwd">DROP</span><span class="pln"> </span><span class="kwd">TABLE</span><span class="pln"> STUDENTS</span><span class="pun">;</span><span class="pln"> </span><span class="com">--</span></code></pre>
<p>Since the user input is not sanitized, The above query has is manipulated into 2 parts</p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="kwd">Select</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> student </span><span class="kwd">where</span><span class="pln"> username</span><span class="pun">=</span><span class="str">'Robert'</span><span class="pun">);</span><span class="pln"> 

</span><span class="kwd">DROP</span><span class="pln"> </span><span class="kwd">TABLE</span><span class="pln"> STUDENTS</span><span class="pun">;</span><span class="pln"> </span><span class="com">--</span></code></pre>
<p>The double dash (--) will just comment out remaining part of the query. </p>
<p>This is dangerous as it can nullify password authentication, if present</p>
<p>The first one will do the normal search. </p>
<p>The second one will drop the table student if the account has sufficient privileges (Generally the school admin account will run such query and will have the privileges talked about above).</p>
</div></text><author><a href="/users/2427249/vivek">vivek</a></author><comments/></answer></answers></post>