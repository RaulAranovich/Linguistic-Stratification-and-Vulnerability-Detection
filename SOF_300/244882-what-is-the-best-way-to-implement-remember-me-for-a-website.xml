<?xml version="1.0" encoding="utf-8"?>
<post><title>security - What is the best way to implement "remember me" for a website? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I want my website to have a checkbox that users can click so that they will not have to log in each time they visit my website. I know I will need to store a cookie on their computer to implement this, but what should be contained in that cookie?  </p>
<p>Also, are there common mistakes to watch out for to keep this cookie from presenting a security vulnerability, which could be avoided while still giving the 'remember me' functionality?</p>
</div></text><author><a href="/users/638304">Vort3x</a></author><comments><comment><text><span class="comment-copy">Check <a href="http://stackoverflow.com/questions/549/the-definitive-guide-to-forms-based-website-authentication" title="the definitive guide to forms based website authentication">stackoverflow.com/questions/549/…</a> (part II of top answer)</span></text><author><a class="comment-user" href="/users/488666/frosty-z" title="12,397 reputation">Frosty Z</a></author></comment><comment><text><span class="comment-copy">if you are using ASP.NET, check out <a href="http://www.codeproject.com/Articles/779844/Remember-Me" rel="nofollow noreferrer">codeproject.com/Articles/779844/Remember-Me</a></span></text><author><a class="comment-user" href="/users/3481183/believe2014" title="1,771 reputation">Believe2014</a></author></comment><comment><text><span class="comment-copy">There is some very useful info over in Security SE ~ <a href="http://security.stackexchange.com/questions/19676/token-based-authentication-securing-the-token" title="token based authentication securing the token">security.stackexchange.com/questions/19676/…</a></span></text><author><a class="comment-user" href="/users/726315/b1nary-atr0phy" title="1,533 reputation">b1nary.atr0phy</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<h2>Improved Persistent Login Cookie Best Practice</h2>
<p>You could use this strategy described <a href="http://jaspan.com/improved_persistent_login_cookie_best_practice" rel="noreferrer">here as best practice</a> (2006) or <a href="https://paragonie.com/blog/2015/04/secure-authentication-php-with-long-term-persistence#title.2" rel="noreferrer">an updated strategy described here</a> (2015):</p>
<ol>
<li>When the user successfully logs in with Remember Me checked, a <strong>login cookie is issued</strong> in addition to the standard session management cookie.</li>
<li>The login cookie contains <strong>a series identifier and a token</strong>. The series and token are <strong>unguessable random numbers</strong> from a suitably large space. Both are stored together in a database table, <strong>the token is hashed</strong> (sha256 is fine).</li>
<li>When a non-logged-in user visits the site and presents a login cookie, the series identifier is <strong>looked up in the database</strong>.

<ol>
<li>If the <strong>series identifier</strong> is present and the hash of the <strong>token</strong> matches the hash for that series identifier, the user is considered <strong>authenticated</strong>. A <strong>new token</strong> is generated, a new hash for the token is stored over the old record, and a new login cookie is issued to the user (it's okay to re-use the <strong>series identifier</strong>).</li>
<li>If the series is present but the token does not match, a <strong>theft</strong> is assumed. The user receives a strongly worded warning and all of the user's remembered sessions are deleted.</li>
<li>If the username and series are not present, the login cookie is <strong>ignored</strong>.</li>
</ol></li>
</ol>
<p>This approach provides defense-in-depth. If someone manages to leak the database table, it does not give an attacker an open door for impersonating users.</p>
</div></text><author><a href="/users/6461">splattne</a></author><comments><comment><text><span class="comment-copy">see also: <a href="http://stackoverflow.com/questions/549/the-definitive-guide-to-website-authentication-beta#477579" title="the definitive guide to website authentication beta%23477579">stackoverflow.com/questions/549/…</a> you should NOT read the 'improved' version</span></text><author><a class="comment-user" href="/users/22674/jacco" title="15,768 reputation">Jacco</a></author></comment><comment><text><span class="comment-copy">The problem with this is that you expose the username in the cookie, though this is what Gmail does. Why do you need both a series ID and a token? Wouldn't a bigger token be fine?</span></text><author><a class="comment-user" href="/users/8047/dan-rosenstark" title="36,425 reputation">Dan Rosenstark</a></author></comment><comment><text><span class="comment-copy">@yar: no it wouldn't be fine and the article describes why</span></text><author><a class="comment-user" href="/users/72478/cherouvim" title="23,908 reputation">cherouvim</a></author></comment><comment><text><span class="comment-copy">@cherouvim, thanks for that. Why?</span></text><author><a class="comment-user" href="/users/8047/dan-rosenstark" title="36,425 reputation">Dan Rosenstark</a></author></comment><comment><text><span class="comment-copy">@yar: the article describes in detail. the series is being used to mitigate the results of a cookie theft.</span></text><author><a class="comment-user" href="/users/72478/cherouvim" title="23,908 reputation">cherouvim</a></author></comment><comment><text><span class="comment-copy">Also make sure that changing the user's password or password recovery information requires the original password. If the cookie is compromised, the attacker cannot prevent the original owner from accessing the account.</span></text><author><a class="comment-user" href="/users/331103/siqi-lin" title="659 reputation">Siqi Lin</a></author></comment><comment><text><span class="comment-copy">can anyone explain when will the series identifier change? if never, then storing the username encrypted and the token will suffice?</span></text><author><a class="comment-user" href="/users/183760/altvali" title="713 reputation">altvali</a></author></comment><comment><text><span class="comment-copy">the whole concept of the series identifier does not make sense as it is described here.</span></text><author><span class="comment-user">user656925</span></author></comment><comment><text><span class="comment-copy">@altvali A new series identifier is issued when a valid username/password combination is presented to authenticate the user (instead of a token).  This starts a new series of random tokens used to identify this particular (long) login session.</span></text><author><a class="comment-user" href="/users/12950/tvanfosson" title="371,941 reputation">tvanfosson</a></author></comment><comment><text><span class="comment-copy">@tvanfosson...why would you need this?  Just generate a new UNIQUE token...there is no reason a single user could not have mutliple tokens...one for each login....Token A, Token B, Token C...there is no need for a series identifier.</span></text><author><span class="comment-user">user656925</span></author></comment><comment><text><span class="comment-copy">Also, regarding this model, what it to prevent an attacker from stealing and than placing the cookie on his computer and deleting the cookie from the hacked computer.  His computer would than be authenticated and updated as needed with out the hacked computer ever knowing?  The only change would be that the hacked computers user would have to login again and set remember me.  Whether or not the hacked user recognizes this would be uncertain.</span></text><author><span class="comment-user">user656925</span></author></comment><comment><text><span class="comment-copy">You would need to add in computer characteristics..for uniqueness either a MAC address or a set of other characteristics like user agent, screen resolution, etc.</span></text><author><span class="comment-user">user656925</span></author></comment><comment><text><span class="comment-copy">Isn't is more stable to use a ID instead of a username so you don't have to worry about any case sensitive and all the other problems that come with strings?</span></text><author><a class="comment-user" href="/users/1325167/dani%c3%abl-voogsgerd" title="531 reputation">Daniël Voogsgerd</a></author></comment><comment><text><span class="comment-copy">I've posted a question about this answer: <a href="http://stackoverflow.com/questions/10957584/stay-logged-in-best-practices-how-does-a-username-in-the-cookie-make-it-more-se" title="stay logged in best practices how does a username in the cookie make it more se">stackoverflow.com/questions/10957584/…</a></span></text><author><a class="comment-user" href="/users/176877/chris-moschini" title="19,816 reputation">Chris Moschini</a></author></comment><comment><text><span class="comment-copy">@HiroProtagonist The Series Identifier is to prevent a DoS attack. Without it, I could quickly write a script hitting your site with every username and an invalid token, logging everyone on your site out.</span></text><author><a class="comment-user" href="/users/176877/chris-moschini" title="19,816 reputation">Chris Moschini</a></author></comment><comment><text><span class="comment-copy">Why not add a hash of the username instead?</span></text><author><a class="comment-user" href="/users/239168/eran-medan" title="20,221 reputation">Eran Medan</a></author></comment><comment><text><span class="comment-copy">If a new token is only generated in step 3.1, which only happens for a non-logged in user, wouldn't the new token be sent with every request of a logged in user? This leaves a lot of chances for a packet to be intercepted. Could this cookie be configured to only send when not logged in?</span></text><author><a class="comment-user" href="/users/1459009/kingcoyote" title="882 reputation">kingcoyote</a></author></comment><comment><text><span class="comment-copy">@kingcoyote set the path of the cookie to the path of the auto login page</span></text><author><a class="comment-user" href="/users/255061/jesse" title="2,824 reputation">Jesse</a></author></comment><comment><text><span class="comment-copy">I implemented this solution yesterday and I think it works well, something that isn't mentioned is how to deal with 'orphaned' authentication informationin the DB. When the user manually clears his cookie cache, the authentication info in the database is orphaned. Perhaps implementing an auto update timestamp in the table and manually removing all authentication data over a certain age would be a good idea.</span></text><author><a class="comment-user" href="/users/655146/paj" title="716 reputation">paj</a></author></comment><comment><text><span class="comment-copy">@ChrisMoschini Been awhile but I hope it's okay. Could you explain why a series identifier helps prevent Dos attack? Like HiroProtagonist, I don't see much difference between using a longer token and series identifier + token.</span></text><author><a class="comment-user" href="/users/1675074/roverred" title="526 reputation">roverred</a></author></comment><comment><text><span class="comment-copy">@roverred If you just use a long token, and destroy all sessions for a user when any invalid token arrives, I can write a script that hits your site with every username and all 0's for the token to log all users out. Run it in a loop, no one can ever meaningfully login. If a valid Series token is required however before the server acts against sessions, the DoS attack is prevented.</span></text><author><a class="comment-user" href="/users/176877/chris-moschini" title="19,816 reputation">Chris Moschini</a></author></comment><comment><text><span class="comment-copy">@Yar the email id is included to maintain the uniqueness, since it can happen that the same token is generated for two different accounts</span></text><author><a class="comment-user" href="/users/1127787/lakshay" title="916 reputation">Lakshay</a></author></comment><comment><text><span class="comment-copy">@ChrisMoschini: Why would they be logged out? I only see that "remembered sessions are deleted", meaning that you could effectively DoS the rememberme feature but not the whole authentication, right?</span></text><author><a class="comment-user" href="/users/1743729/levente-p%c3%a1ncz%c3%a9l" title="1,254 reputation">Levente Pánczél</a></author></comment><comment><text><span class="comment-copy">Improved version actually does not provide an extra level of security, only an illusion of it.As @Jens Roland claims, pretty much any attack vector that allows the user to steal the cookie also allows it to be deleted from the hacked computer.</span></text><author><a class="comment-user" href="/users/776658/onur" title="731 reputation">Onur</a></author></comment><comment><text><span class="comment-copy">Could you provide a simpler version with only <b>username + token</b> just in order to understand the basics ? (Then I'll be able to add the <i>series</i>)</span></text><author><a class="comment-user" href="/users/1422096/basj" title="2,942 reputation">Basj</a></author></comment><comment><text><span class="comment-copy">If the user has a poor internet connection could this be an issue when receiving the new token? Example, user requests login with token, internet connection drops out, new token generated at server, new token not received by user, user tries again with old token, this is seen as a hack attempt and all tokens are removed from db, user now has to login again</span></text><author><a class="comment-user" href="/users/1642541/joel-davis" title="334 reputation">Joel Davis</a></author></comment><comment><text><span class="comment-copy">Chrome sends a loading request when you type the URL in the address bar.  This can cause the remember me code to execute prematurely which will invalidate the token by the time the real request is executed when the user presses enter in the address bar.  I didn't see an easy way around this problem except to use a static cookie that doesn't change during subsequent logins.  Anyone else encounter this problem?</span></text><author><a class="comment-user" href="/users/1339436/craigrs84" title="1,643 reputation">craigrs84</a></author></comment><comment><text><span class="comment-copy">This solution is WRONG, it does not handle cuncurrency: If two remember-me authentication request arrives at the same time, with the same remember-me cookie, the first one succeeds and changes the token, the second one causes an unsucceesfull authentication, and a false alarm (because the token has been already changed by the first request). (This situation can happen when the browser starts up, and the site is restored in two browser tabs.)</span></text><author><a class="comment-user" href="/users/692108/slobo" title="456 reputation">slobo</a></author></comment><comment><text><span class="comment-copy">In this case, race conditions are less important than preventing replay attacks. Race condition: Have to manually log back in. Replay attack: Tokens become more desirable to steal, since they are not a nonce.</span></text><author><a class="comment-user" href="/users/2224584/scott-arciszewski" title="15,046 reputation">Scott Arciszewski</a></author></comment><comment><text><span class="comment-copy">Presenting a false alarm to the user is very undesirable. Whether it is because of reasons mentioned by slobo, craigrs84, or Frogga, this solution generates these false alarms routinely.</span></text><author><a class="comment-user" href="/users/474192/mike-c" title="1,238 reputation">Mike C</a></author></comment><comment><text><span class="comment-copy">This question and answer are very weird. It's not mentioned if user id should be stored on a client and sent together with series and token for validation. So reader has to guess that series is probably a replacement for user. Second problem, question is closed, so only source of info are comments. Third problem: concurrency. And it's not small because opening same site in 2 tabs at once is very frequent. And you would not want it to fail even 1% of the time.</span></text><author><a class="comment-user" href="/users/67774/clorz" title="593 reputation">clorz</a></author></comment><comment><text><span class="comment-copy">@Frogga one potential fix would be to store 2 tokens (previous and current) with each session in the db. If previous is received, that means current was not received and a new current is generated and returned. If current is received, current becomes previous and a new current is generated and returned. This however does not fix the above mentioned concurrency issues.</span></text><author><a class="comment-user" href="/users/469154/emanuel-hategan" title="167 reputation">Emanuel Hategan</a></author></comment><comment><text><span class="comment-copy"><i>"A new token is generated"</i> ..! Why? Why every time should I create a new cookie?</span></text><author><a class="comment-user" href="/users/5259594/stack" title="2,475 reputation">stack</a></author></comment><comment><text><span class="comment-copy">Here's a golang implementation: <a href="https://github.com/janekolszak/rememberme" rel="nofollow noreferrer">github.com/janekolszak/rememberme</a></span></text><author><a class="comment-user" href="/users/492647/janek-olszak" title="1,373 reputation">Janek Olszak</a></author></comment><comment><text><span class="comment-copy">The answer says "If the series identifier is present and the hash of the token matches the hash for that series identifier, the user is considered authenticated. " The series identifier isn't hashed so this makes no sense. I think what he's trying to say is "If the series identifier is present in the cookie, and the hash of the token in the cookie matches the hash of the token stored in the table alongside that series identifier, the user is considered authenticated. "</span></text><author><a class="comment-user" href="/users/1308993/jim-collins" title="160 reputation">jim collins</a></author></comment><comment><text><span class="comment-copy">As understand need to create hash for cookie name and value. Both write in mysql. At login page check if cookie with particular name (hash) exists. If yes, then select mysql where cookie name and value is the same as in mysql. If yes, then from mysql get user id and set sessions that user is logged in and id is mysql id. Am i correct? As understand cookie identifier is cookie name?</span></text><author><a class="comment-user" href="/users/2118559/user2118559" title="739 reputation">user2118559</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Store their UserId and a RememberMeToken.  When they login with remember me checked generate a new RememberMeToken (which invalidate any other machines which are marked are remember me).</p>
<p>When they return look them up by the remember me token and make sure the UserId matches.</p>
</div></text><author><a href="/posts/244895/revisions" id="history-244895" title="show revision history for this post">
        jonnii
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I would store a user ID and a token. When the user comes back to the site, compare those two pieces of information against something persistent like a database entry.</p>
<p>As for security, just don't put anything in there that will allow someone to modify the cookie to gain extra benefits. For example, don't store their user groups or their password. Anything that can be modified that would circumvent your security should not be stored in the cookie.</p>
</div></text><author><a href="/users/204">dragonmantank</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Investigating persistent sessions myself I have found that it's simply not worth the security risk. Use it if you absolutely have to, but you should consider such a session only weakly authenticated and force a new login for anything that could be of value to an attacker.</p>
<p>The reason being of course is that your cookies containing your persistent session are so easily stolen.</p>
<p>4 ways to steal your cookies (from <a href="http://jaspan.com/improved_persistent_login_cookie_best_practice#comment-4828" rel="nofollow noreferrer">a comment by Jens Roland</a> on the page <code>@splattne</code> based his answer on):</p>
<ol>
<li>By intercepting it over an unsecure line (packet sniffing / session hijacking)</li>
<li>By directly accessing the user's browser (via either malware or physical access to the box)</li>
<li>By reading it from the server database (probably SQL Injection, but could be anything)</li>
<li>By an XSS hack (or similar client-side exploit)</li>
</ol>
</div></text><author><a href="/posts/572740/revisions" id="history-572740" title="show revision history for this post">
        2 revs, 2 users 91%<br/>Jarl
        </a></author><comments><comment><text><span class="comment-copy">1. HTTPS is designed to prevent this. 2. Stay Logged In isn't the security problem here, you have bigger problems. 3. Same as 2. 4. This can be prevented by access-control policy and good input sanitation; if you don't take these steps, you again have bigger problems than Stay Logged In.</span></text><author><a class="comment-user" href="/users/176877/chris-moschini" title="19,816 reputation">Chris Moschini</a></author></comment></comments></answer></answers></post>