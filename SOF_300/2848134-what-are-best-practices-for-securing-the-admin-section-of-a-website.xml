<?xml version="1.0" encoding="utf-8"?>
<post><title>security - What are best practices for securing the admin section of a website? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I'd like to know what people consider best practice for securing the Admin sections of websites, specifically from an authentication/access point of view.</p>
<p>Of course there are obvious things, such as using SSL and logging all access, but I'm wondering just where above these basic steps people consider the bar to be set.</p>
<p>For example:</p>
<ul>
<li>Are you just relying on the same authentication mechanism that you use for normal users?  If not, what?</li>
<li>Are you running the Admin section in the same 'application domain'?</li>
<li>What steps do you take to make the admin section undiscovered? (or do you reject the whole 'obscurity' thing)</li>
</ul>
<hr/>
<p><strong>So far, suggestions from answerers include:</strong></p>
<ul>
<li>Introduce an artificial server-side pause into each admin password check to prevent brute force attacks <em>[Developer Art]</em></li>
<li>Use separate login pages for users and admin using the same DB table (to stop XSRF and session-stealing granting access to admin areas) <em>[Thief Master]</em></li>
<li>Consider also adding webserver native authentication to the admin area (e.g. via .htaccess)  <em>[Thief Master]</em></li>
<li>Consider blocking users IP after a number of failed admin login attempts <em>[Thief Master]</em></li>
<li>Add captcha after failed admin login attempts <em>[Thief Master]</em></li>
<li>Provide equally strong mechanisms (using the above techniques) for users as well as admins (e.g. don't treat admins specially) <em>[Lo'oris]</em></li>
<li>Consider Second level authentication (e.g. client certificates, smart cards, cardspace, etc.) <em>[JoeGeeky]</em></li>
<li>Only allow access from trusted IPs/Domains, add check to basic HTTP pipeline (via e.g. HttpModules) if possible. <em>[JoeGeeky]</em></li>
<li>[ASP.NET] Lock down IPrincipal &amp; Principal (make them immutable and non-enumerable) <em>[JoeGeeky]</em></li>
<li>Federate Rights Elevation - e.g. email other admins when any admin's rights are upgraded.
<em>[JoeGeeky]</em></li>
<li>Consider fine-grained rights for admins - e.g. rather than roles based rights, define rights for indicidual actions per admin <em>[JoeGeeky]</em></li>
<li>Restrict creation of admins - e.g. Admins cannot change or create other admin accounts.  Use a locked-down 'superadmin' client for this. <em>[JoeGeeky]</em></li>
<li>Consider Client Side SSL Certificates, or RSA type keyfobs (electronic tokens) <em>[Daniel Papasian]</em></li>
<li>If using cookies for Authentication, use separate cookies for admin and normal pages, by e.g. putting the admin section on a different domain. <em>[Daniel Papasian]</em></li>
<li>If practical, consider keeping the admin site on a private subnet, off the public internet. <em>[John Hartsock]</em></li>
<li>Reissue auth/session tickets when moving between admin/normal usage contexts of the website <em>[Richard JP Le Guen]</em></li>
</ul>
</div></text><author><a href="/users/324381">UpTheCreek</a></author><comments><comment><text><span class="comment-copy">Just a thought but. Probably the best way to secure the admin section is dont have it on the public internet.  You could choose to keep the admin site only on a private subnet.</span></text><author><a class="comment-user" href="/users/254528/john-hartsock" title="54,372 reputation">John Hartsock</a></author></comment><comment><text><span class="comment-copy">Which of these ideas that you specified would it not be a good idea to apply to all users, not just admins?</span></text><author><a class="comment-user" href="/users/238260/daniel-allen-langdon" title="12,533 reputation">Daniel Allen Langdon</a></author></comment><comment><text><span class="comment-copy">You may want to check WebLoginProject at <a href="http://www.webloginproject.com/" rel="nofollow noreferrer">webloginproject.com</a> it is a collaborative login system that is designed ground up to be secure against XSS, SQL Injection, Session fixation and CSRF vulnerabilities. It has source code in ASP and PHP, it's multilanguage and it looks cool. A lot of developers are working on it fixing holes so this is probably as close to secure as it can get.</span></text><author><a class="comment-user" href="/users/175416/stagas" title="1,844 reputation">stagas</a></author></comment><comment><text><span class="comment-copy">-1 for including the terribly wrong "strong password" (which actually is a <b>very</b> weak password instead) suggestion</span></text><author><a class="comment-user" href="/users/207655/o0" title="6,978 reputation">o0'.</a></author></comment><comment><text><span class="comment-copy">@Lohoris - I really don't understand why you downvoted this question.  Are you downvoting becuase I sumarised someones suggestion that you don't agree with?  Perhaps downvoting the related answer would be more constructive. :/ Can you clarify exactly what you have a problem with?</span></text><author><a class="comment-user owner" href="/users/324381/upthecreek" title="12,976 reputation">UpTheCreek</a></author></comment><comment><text><span class="comment-copy">@UpTheCreek I did downvote that on the specific answer, of course, and explained it there. Since I think that that "suggestion" is extremely bad, I feel it right to downvote this whole set of advices solely on the fact that that advice is present here.</span></text><author><a class="comment-user" href="/users/207655/o0" title="6,978 reputation">o0'.</a></author></comment><comment><text><span class="comment-copy">@UpTheCreek I was talking about this horror --&gt; <a href="http://stackoverflow.com/a/2848151/207655">stackoverflow.com/a/2848151/207655</a></span></text><author><a class="comment-user" href="/users/207655/o0" title="6,978 reputation">o0'.</a></author></comment><comment><text><span class="comment-copy">@Lohoris - Well ok.</span></text><author><a class="comment-user owner" href="/users/324381/upthecreek" title="12,976 reputation">UpTheCreek</a></author></comment><comment><text><span class="comment-copy">I take the liberty of removing that suggestion, it's community wiki after all.</span></text><author><a class="comment-user" href="/users/207655/o0" title="6,978 reputation">o0'.</a></author></comment><comment><text><span class="comment-copy">NARQ...........</span></text><author><a class="comment-user" href="/users/497567/dbobrowski" title="488 reputation">dbobrowski</a></author></comment><comment><text><span class="comment-copy">Get a room you two! :)</span></text><author><a class="comment-user owner" href="/users/324381/upthecreek" title="12,976 reputation">UpTheCreek</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>These are all good answers... I generally like to add a couple additional layers for my administrative sections. Although I've used a few variations on a theme, they generally include one of the following:</p>
<ul>
<li><strong>Second level authentication</strong>: This could include client certificates (Ex. x509 certs), smart cards, cardspace, etc...</li>
<li><strong>Domain/IP restrictions</strong>: In this case, only clients coming from trusted/verifiable domains; such as internal subnets; are allowed into the admin area. Remote admins often go through trusted VPN entrypoints so their session would be verifiable and is often protected with RSA keys as well. If you're using ASP.NET you can easily perform these checks in the HTTP Pipeline via HTTP Modules which will prevent your application from ever receiving any requests if security checks are not satisfied.</li>
<li><strong>Locked down IPrincipal &amp; Principal-based Authorization</strong>: Creating custom Principles is a common practice, although a common mistake is making them modifiable and/or rights enumerable. Although its not just an admin issue, it's more important since here is where users are likely to have elevated rights. Be sure they're immutable and not enumerable. Additionally, make sure all assessments for Authorization are made based on the Principal.</li>
<li><strong>Federate Rights Elevation</strong>: When any account receives a select number of rights, all the admins and the security officer are immediately notified via email. This makes sure that if an attacker elevates rights we know right away. These rights generally revolve around priviledged rights, rights to see privacy protected information, and/or financial information (e.g. credit cards). </li>
<li><strong>Issue rights sparingly, even to Admins</strong>: Finally, and this can be a bit more advanced for some shops. Authorization rights should be as discreet as possible and should surround real functional behaviours. Typical Role-Based Security (RBS) approaches tend to have a <strong>Group</strong> mentality. From a security perspective this is not the best pattern. Instead of '<em>Groups</em>' like '<em>User Manager</em>', try breaking it down further (<em>Ex. Create User, Authorize User, Elevate/Revoke access rights, etc...</em>). This can have a little more overhead in terms of administration, but this gives you the flexibility to only assign rights that are actually needed by the larger admin group. If access is compromised at least they may not get all rights. I like to wrap this in Code Access Security (CAS) permissions supported by .NET and Java, but that is beyond the scope of this answer. One more thing... in one app, admins cannot manage change other admin accounts, or make a users an admin. That can only be done via a locked down client which only a couple people can access.</li>
</ul>
</div></text><author><a href="/users/308665/joegeeky">JoeGeeky</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>If the website requires a login for both regular activities and admins, e.g. a forum, I'd use separate logins which use the same user database. This ensures that XSRF and session-stealing won't allow the attacker to access administrative areas.</p>
<p>Additionally, if the admin section is in a separate subdirectory, securing that one with the webserver's authentication (.htaccess in Apache for example) might be a good idea - then someone needs both that password and the user password.</p>
<p>Obscuring the admin path yields almost no security gain - if someone knows valid login data he's most likely also able to find out the path of the admin tool since he either phished it or keylogged you or got it via social engineering (which would probably reveal the path, too).</p>
<p>A brute-force protection like blocking the user's IP after 3 failed logins or requiring a CAPTCHA after a failed login (not for the first login as that's just extremely annoying for legit users) might also be useful.</p>
</div></text><author><a href="/users/298479/thiefmaster">ThiefMaster</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<ul>
<li>I reject obscurity</li>
<li>Using two authentication systems instead of one is overkill</li>
<li>The artificial pause between attempts should be done for users too</li>
<li>Blocking IPs of failed attempts should be done for users too</li>
<li>Strong passwords should be used by users too</li>
<li>If you consider captchas ok, guess what, you could use them for users too</li>
</ul>
<p>Yes, after writing it, I realize that this answer could be summarized as a "nothing special for the admin login, they are all security features that should be used for any login".</p>
</div></text><author><a href="/users/207655/o0">o0'.</a></author><comments><comment><text><span class="comment-copy">Thanks for the answer.  Personally I tend to disagree, e.g.: Would a user be happy with passwords like 'ksd83,'|4d#rrpp0%27&amp;lq(go43$sd{3&gt;'?  And, Isn't resetting IP blocks that valid users have triggered by being forgetful going to generate unneccessary admin/customer service work?  Personally I think the different levels of risk justify different approaches</span></text><author><a class="comment-user owner" href="/users/324381/upthecreek" title="12,976 reputation">UpTheCreek</a></author></comment><comment><text><span class="comment-copy">Admin password should be complex but not overly complex, otherwise even the admin won't remember it and will write it down somewhere (you would be forcing him to defy every security rule). Temporarily blocking IPs with failed attempt is pretty standard, vbulletin does it, phpbb does it IIRC, users are used to it.</span></text><author><a class="comment-user" href="/users/207655/o0" title="6,978 reputation">o0'.</a></author></comment><comment><text><span class="comment-copy">I don't really want to look to phpbb or vbulletin for security best practices ;)</span></text><author><a class="comment-user owner" href="/users/324381/upthecreek" title="12,976 reputation">UpTheCreek</a></author></comment><comment><text><span class="comment-copy">@UpTheCreek of course, I agree! I was just questioning this <i>"Isn't resetting IP blocks that valid users have triggered by being forgetful going to generate unneccessary admin/customer service work"</i> &lt;-- I don't think it would be a problem, because the users are already used to such a feature.</span></text><author><a class="comment-user" href="/users/207655/o0" title="6,978 reputation">o0'.</a></author></comment><comment><text><span class="comment-copy">Ah I see, right</span></text><author><a class="comment-user owner" href="/users/324381/upthecreek" title="12,976 reputation">UpTheCreek</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>If you do use only a single login for users who have both normal-user privileges and admin privileges, regenerate their session identifier (be it in a cookie or a GET parameter or whatever...) when there is a change in the level of priviledge... at the very least.</p>
<p>So if I log in, do a bunch of normal user stuff and then visit an admin page, regenerate my session ID. If I then navigate away from an admin page(s) to a normal user page, regenerate my ID again.</p>
</div></text><author><a href="/posts/2940531/revisions" id="history-2940531" title="show revision history for this post">
        Richard JP Le Guen
        </a></author><comments><comment><text><span class="comment-copy">Could you please explain what this achieves?</span></text><author><a class="comment-user" href="/users/220086/denis-pshenov" title="5,927 reputation">Denis Pshenov</a></author></comment><comment><text><span class="comment-copy"><a href="http://security.stackexchange.com/questions/1246/session-hijacking-regenerate-session-id" title="session hijacking regenerate session id">security.stackexchange.com/questions/1246/…</a></span></text><author><a class="comment-user" href="/users/248129/richard-jp-le-guen" title="19,691 reputation">Richard JP Le Guen</a></author></comment><comment><text><span class="comment-copy">I believe this won't help as much as you think. Because if attacker is able to get your current session id in normal user page he could use it to then access admin page and generate himself a new session id. Correct me if I'm wrong.</span></text><author><a class="comment-user" href="/users/220086/denis-pshenov" title="5,927 reputation">Denis Pshenov</a></author></comment><comment><text><span class="comment-copy">But the attacker can't access the admin page without a password. There isn't a change in privilege level until after authentication. Failure to regenerate the session ID means they can re-use a session created insecurely to get around authentication.</span></text><author><a class="comment-user" href="/users/248129/richard-jp-le-guen" title="19,691 reputation">Richard JP Le Guen</a></author></comment><comment><text><span class="comment-copy">Got it now. I was thinking you described a scenario where user does not have to re-login when they switch between normal/admin context.</span></text><author><a class="comment-user" href="/users/220086/denis-pshenov" title="5,927 reputation">Denis Pshenov</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Have a good admin password.</p>
<p>Not <code>"123456"</code> but a sequence of letters, digits and special characters long enough, say, 15-20 characters. Like <code>"ksd83,'|4d#rrpp0%27&amp;lq(go43$sd{3&gt;"</code>.</p>
<p>Add a pause for each password check to prevent brute force attack.</p>
</div></text><author><a>NONE</a></author><comments><comment><text><span class="comment-copy">could you explain a bit on what a 'pause' would be? Are you referring to doing something like Thread.Sleep(5000) to just kill some time?</span></text><author><a class="comment-user" href="/users/75836/earthling" title="2,751 reputation">earthling</a></author></comment><comment><text><span class="comment-copy">@senloe: Yes, just add an artificial response delay to limit attempts per time interval.</span></text><author><span class="comment-user">user151323</span></author></comment><comment><text><span class="comment-copy">That serves nothing. You can request another password while the other request sleeps..</span></text><author><a class="comment-user" href="/users/95135/andreas-bonini" title="25,080 reputation">Andreas Bonini</a></author></comment><comment><text><span class="comment-copy">@Andreas Bonini: Unless you limit requests by IP and have a shared limit for checks per minute.</span></text><author><span class="comment-user">user151323</span></author></comment><comment><text><span class="comment-copy">this is stupid: a password too complex to be remembered will be written down somewhere (or saved), hence making matters much worse than if you allowed a REALLY good password (i.e. a password that will be typed because you remember it instead of copy pasted).</span></text><author><a class="comment-user" href="/users/207655/o0" title="6,978 reputation">o0'.</a></author></comment><comment><text><span class="comment-copy">Oh, I wish I could downvote this crap down to the stone age, it is <i>so</i> stupid, <i>so</i> wrong... I hate people spreading misinformation such as this one.</span></text><author><a class="comment-user" href="/users/207655/o0" title="6,978 reputation">o0'.</a></author></comment><comment><text><span class="comment-copy">@Lo'oris: What is it exactly that you disagree with?</span></text><author><span class="comment-user">user151323</span></author></comment><comment><text><span class="comment-copy">I've written it in... like... the comment just above?</span></text><author><a class="comment-user" href="/users/207655/o0" title="6,978 reputation">o0'.</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Here are some other things to consider:</p>
<ol>
<li>One option to consider, especially if you manage the admin's computers or they are technically competent, is to use something based on SSL certificates for client authentication.  RSA keyfobs and whatnot can also be used for added security.</li>
<li>If you're using cookies at all - perhaps for an authentication/session token - you probably want to ensure that the cookies are only sent to the admin pages.  This helps mitigate the risks posed to your site by stealing cookies, by either layer 1/2 compromise or XSS.  This can be done easily by having the admin portion being on a different hostname or domain as well as setting the secure flag with the cookie.</li>
<li>Restricting by IP can be smart as well, and if you have users throughout the internet you can still do this, if there is a trusted VPN that they can join.</li>
</ol>
</div></text><author><a href="/users/7548/daniel-papasian">Daniel Papasian</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>We use <code>Windows Authentication</code> for admin access. This is most practical way of protecting admin areas while keeping the authentication seperate from what applies to general end-users. The system admin manages the Admin user access credentials and enforces password policies on the domain user account.</p>
</div></text><author><a href="/posts/2949772/revisions" id="history-2949772" title="show revision history for this post">
        this. __curious_geek
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I didn't notice anyone mention storage/validation of the admin password. Please please please do not store the PW in plain text, and preferably not even something that can be reversed - use something like a <a href="http://en.wikipedia.org/wiki/Salt_%28cryptography%29" rel="nofollow noreferrer">salted</a> MD5 hash so that at the very least if someone happens to retrieve the stored "password" they don't have anything terribly useful, unless they also have your salt scheme.</p>
</div></text><author><a href="/posts/2949860/revisions" id="history-2949860" title="show revision history for this post">
        Wayne Werner
        </a></author><comments><comment><text><span class="comment-copy">-1 for md5.  You don't want a fast hash for passwords, even beyond the other issues with md5ing. bcrypt would be a better option.</span></text><author><a class="comment-user" href="/users/69993/kzqai" title="12,386 reputation">Kzqai</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The strict way is to have two complete different "farms" including databases, servers and all and move the data from one farm to the other. Most modern, large scale, systems use this approach (Vignette, SharePoint, etc.). It's normally refered to as having different stages "editing stage" -&gt; "preview stage" -&gt; "delivery stage". This method lets you treat content/config the same way you treat code (dev-&gt;qa-&gt;prod).</p>
<p>If you are less paranoid you can have a single database but only have your admin section available on the "editing" servers. I mean, only have the editing scripts/files placed on the editing server.</p>
<p>Naturally the editing stage should only be available on a local intranet and/or using a VPN.</p>
<p>This may seem a bit of an overkill and may not be the easiest solution for all usage cases, but it is definetly the most robust way of doing things. </p>
<p>Note that things like "have strong admin passwords" are nice, but still leave your admin open to smart attacts of all sorts.</p>
</div></text><author><a href="/posts/2945581/revisions" id="history-2945581" title="show revision history for this post">
        Nir Levy
        </a></author><comments><comment><text><span class="comment-copy">I think this would really only be useful/practical in purely CMS/publishing situations where you are pushing content rather than processing data.</span></text><author><a class="comment-user owner" href="/users/324381/upthecreek" title="12,976 reputation">UpTheCreek</a></author></comment><comment><text><span class="comment-copy">Maybe, but I have known (and seen) situations where this is done for processing and user input as well. For a single farm with seperate editing server it is a no brainer. For multiple farms what you do is have input from the site go into a queue (DB or otherwise) and, by using an external procedure, is being processed and copied into the "editing" server/DB. This gives you more control over what gets into your system. It is, however, complicated to implement.</span></text><author><a class="comment-user" href="/users/130304/nir-levy" title="3,163 reputation">Nir Levy</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>It very much depends on what kind of data you want to protect (legal requirements and such). </p>
<ul>
<li><p>Alot of suggestions is about authentication.. I think you just should consider using OpenId / Facebook authentication as login. (They will most likely spend more resources on authentication security then you)</p></li>
<li><p>Save changes as well as updating values in the database. That way you can rollback changes from user X or between date X and Y.</p></li>
</ul>
</div></text><author><a href="/posts/2927782/revisions" id="history-2927782" title="show revision history for this post">
        Carl Bergquist
        </a></author><comments><comment><text><span class="comment-copy">Facebook authentication for the admin section of a web site... you really think that's a good idea? For general users, yes... but for the <i>admin section</i>? Feels a little dangeresque to me...</span></text><author><a class="comment-user" href="/users/248129/richard-jp-le-guen" title="19,691 reputation">Richard JP Le Guen</a></author></comment><comment><text><span class="comment-copy">I'm not sure. but I think this sites runs openid authentication only. And I don't think there is any big (in theory) difference between facebook authentication and openid. But I haven't read any license agreements or such.</span></text><author><a class="comment-user" href="/users/79941/carl-bergquist" title="2,782 reputation">Carl Bergquist</a></author></comment><comment><text><span class="comment-copy">Very bad idea the openid for admin authentication, also the rollback most of the times is impossible, and the bad guy is all ready inside your system... what rollback ?</span></text><author><a class="comment-user" href="/users/159270/aristos" title="53,139 reputation">Aristos</a></author></comment><comment><text><span class="comment-copy">Feel free to explain why you think its bad. Well if logging on as admin gives you full access to the db and backup it sure is hard to rollback, but in that case you all ready lost. My suggestions was aimed for cmsisch site.</span></text><author><a class="comment-user" href="/users/79941/carl-bergquist" title="2,782 reputation">Carl Bergquist</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Add a password field and a security question that the Administrator will know, e.g. what was your first girlfriend name, or randomize the questions everytime viewing the admin panel.</p>
<p>Perhaps you could always put the administration section in a big directory, e.g. </p>
<blockquote>
<p><a href="http://domain.com/sub/sub/sub/sub/sub/index.php" rel="nofollow noreferrer">http://domain.com/sub/sub/sub/sub/sub/index.php</a></p>
</blockquote>
<p>But that's not really good hah.</p>
<p>Perhaps you could include a query string in the home page, like:</p>
<blockquote>
<p><a href="http://domain.com/index.php?display=true" rel="nofollow noreferrer">http://domain.com/index.php?display=true</a></p>
</blockquote>
<p>When it does, the username and password field will appear.</p>
</div></text><author><a href="/posts/2949775/revisions" id="history-2949775" title="show revision history for this post">
        MacMac
        </a></author><comments/></answer></answers></post>