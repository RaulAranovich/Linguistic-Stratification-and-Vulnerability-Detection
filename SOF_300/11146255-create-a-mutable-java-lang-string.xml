<?xml version="1.0" encoding="utf-8"?>
<post><title>Create a mutable java.lang.String - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>It's common knowledge that Java <code>String</code>s are immutable. Immutable Strings are great addition to java since its inception. Immutability allows fast access and a lot of optimizations, significantly less error-prone compared to C-style strings, and helps enforce the security model.</p>
<p>It's possible to create a mutable one without using hacks, namely</p>
<ul>
<li><code>java.lang.refect</code></li>
<li><code>sun.misc.Unsafe</code></li>
<li>Classes in bootstrap classloader</li>
<li>JNI (or JNA as it requires JNI)</li>
</ul>
<p>But is it possible in just plain Java, so that the string can be modified at any time? The question is <em>How</em>?</p>
</div></text><author><a href="/users/319931/mechanical-snail">Mechanical snail</a></author><comments><comment><text><span class="comment-copy">java has no resizable arrays. all arrays <code>length</code> is final and immutable once instantiated. (<code>length</code> is not a field, though)</span></text><author><a class="comment-user owner" href="/users/554431/bestsss" title="8,229 reputation">bestsss</a></author></comment><comment><text><span class="comment-copy">You mean something different from <code>StringBuilder</code>, which is the recommended way of simulating mutability?</span></text><author><a class="comment-user" href="/users/1161878/gene" title="32,400 reputation">Gene</a></author></comment><comment><text><span class="comment-copy">You have asserted that there exists a method to do this. Do you know that for a fact? Is this some kind of puzzle?</span></text><author><a class="comment-user" href="/users/893/greg-hewgill" title="549,681 reputation">Greg Hewgill</a></author></comment><comment><text><span class="comment-copy">@GregHewgill, sure it is</span></text><author><a class="comment-user owner" href="/users/554431/bestsss" title="8,229 reputation">bestsss</a></author></comment><comment><text><span class="comment-copy">What do you mean by "mutable string"? Any object of class java.lang.String will be immutable. So that can't be it. Writing a class that behaves mostly like String but is mutable is trivial. However, addition and literals in the source files won't work. So where are you going with this?</span></text><author><a class="comment-user" href="/users/1088846/jochen" title="2,063 reputation">Jochen</a></author></comment><comment><text><span class="comment-copy">@Jochen, the question clearly states, <code>java.lang.String</code> and mutable. I don't know how it can be stated differently.</span></text><author><a class="comment-user owner" href="/users/554431/bestsss" title="8,229 reputation">bestsss</a></author></comment><comment><text><span class="comment-copy">@bestsss Looking forward to your solution ;-)</span></text><author><a class="comment-user" href="/users/1088846/jochen" title="2,063 reputation">Jochen</a></author></comment><comment><text><span class="comment-copy">Do you allow byte code manipulation and/or serialization tricks ?</span></text><author><a class="comment-user" href="/users/525725/emmanuel-bourg" title="6,861 reputation">Emmanuel Bourg</a></author></comment><comment><text><span class="comment-copy">Could I put an un-bounty on this question?  Anything that can do this is evil.</span></text><author><a class="comment-user" href="/users/869736/louis-wasserman" title="123,211 reputation">Louis Wasserman</a></author></comment><comment><text><span class="comment-copy">@EmmanuelBourg, absolutely as long as you do not put classes in java.lang via the bootstap classloader. And you can modify the instance of the string not the serialized one (this is useless) - the idea is just to be able to print differently <code>final String s=createModifiableString(); System.out.println(s); modify(s); System.out.println(s)</code> The second line has to differ.</span></text><author><a class="comment-user owner" href="/users/554431/bestsss" title="8,229 reputation">bestsss</a></author></comment><comment><text><span class="comment-copy">@LouisWasserman, the question is about raising alertness I'd say</span></text><author><a class="comment-user owner" href="/users/554431/bestsss" title="8,229 reputation">bestsss</a></author></comment><comment><text><span class="comment-copy">@Jochen, I'd wait for the answers first; I'd put my solution at the end w/ even more twists...</span></text><author><a class="comment-user owner" href="/users/554431/bestsss" title="8,229 reputation">bestsss</a></author></comment><comment><text><span class="comment-copy">This might have been a fit for <a href="http://codegolf.stackexchange.com/faq">codegolf.stackexchange.com/faq</a> but I feel it's off topic here. Too bad one <a href="http://meta.stackexchange.com/questions/121448/allow-users-to-vote-to-close-bountied-questions">cannot close while the bounty is active</a>.</span></text><author><a class="comment-user" href="/users/84237/arjan" title="12,438 reputation">Arjan</a></author></comment><comment><text><span class="comment-copy">@Arjan, you can always flag the question or edit. Close is rarely a good option</span></text><author><a class="comment-user owner" href="/users/554431/bestsss" title="8,229 reputation">bestsss</a></author></comment><comment><text><span class="comment-copy">Why can't use something like this? myString = myString.replaceAll("", "");</span></text><author><a class="comment-user" href="/users/1026805/sri-harsha-chilakapati" title="7,056 reputation">Sri Harsha Chilakapati</a></author></comment><comment><text><span class="comment-copy">@SriHarshaChilakapati. that results of a new instance - you mistake references with the real object the point to.</span></text><author><a class="comment-user owner" href="/users/554431/bestsss" title="8,229 reputation">bestsss</a></author></comment><comment><text><span class="comment-copy">@bestsss I am creating a new instance of the String class and changing the reference of old instance to point new one. Hence there will be no references for the old string and it is garbage collected. No memory problems arise in this case.</span></text><author><a class="comment-user" href="/users/1026805/sri-harsha-chilakapati" title="7,056 reputation">Sri Harsha Chilakapati</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Creating a <code>java.lang.String</code> with the Charset constructor, one can inject your own Charset, which brings your own <code>CharsetDecoder</code>. The <code>CharsetDecoder</code> gets a reference to a <code>CharBuffer</code> object in the decodeLoop method. The CharBuffer wraps the char[] of the original String object. Since the CharsetDecoder has a reference to it, you can change the underlying char[] using the CharBuffer, thus you have a mutable String.</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">MutableStringTest</span><span class="pln"> </span><span class="pun">{</span><span class="pln">


    </span><span class="com">// http://stackoverflow.com/questions/11146255/how-to-create-mutable-java-lang-string#11146288</span><span class="pln">
    </span><span class="lit">@Test</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> testMutableString</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">final</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> s </span><span class="pun">=</span><span class="pln"> createModifiableString</span><span class="pun">();</span><span class="pln">
        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">s</span><span class="pun">);</span><span class="pln">
        modify</span><span class="pun">(</span><span class="pln">s</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">s</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="typ">AtomicReference</span><span class="pun">&lt;</span><span class="typ">CharBuffer</span><span class="pun">&gt;</span><span class="pln"> cbRef </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">AtomicReference</span><span class="pun">&lt;</span><span class="typ">CharBuffer</span><span class="pun">&gt;();</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> createModifiableString</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">Charset</span><span class="pln"> charset </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Charset</span><span class="pun">(</span><span class="str">"foo"</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="lit">@Override</span><span class="pln">
            </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> contains</span><span class="pun">(</span><span class="typ">Charset</span><span class="pln"> cs</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">

            </span><span class="lit">@Override</span><span class="pln">
            </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">CharsetDecoder</span><span class="pln"> newDecoder</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                </span><span class="typ">CharsetDecoder</span><span class="pln"> cd </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">CharsetDecoder</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1.0f</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1.0f</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                    </span><span class="lit">@Override</span><span class="pln">
                    </span><span class="kwd">protected</span><span class="pln"> </span><span class="typ">CoderResult</span><span class="pln"> decodeLoop</span><span class="pun">(</span><span class="typ">ByteBuffer</span><span class="pln"> in</span><span class="pun">,</span><span class="pln"> </span><span class="typ">CharBuffer</span><span class="pln"> out</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                        cbRef</span><span class="pun">.</span><span class="pln">set</span><span class="pun">(</span><span class="pln">out</span><span class="pun">);</span><span class="pln">
                        </span><span class="kwd">while</span><span class="pun">(</span><span class="pln">in</span><span class="pun">.</span><span class="pln">remaining</span><span class="pun">()&gt;</span><span class="lit">0</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                            out</span><span class="pun">.</span><span class="pln">append</span><span class="pun">((</span><span class="kwd">char</span><span class="pun">)</span><span class="pln">in</span><span class="pun">.</span><span class="pln">get</span><span class="pun">());</span><span class="pln">
                        </span><span class="pun">}</span><span class="pln">
                        </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">CoderResult</span><span class="pun">.</span><span class="pln">UNDERFLOW</span><span class="pun">;</span><span class="pln">
                    </span><span class="pun">}</span><span class="pln">
                </span><span class="pun">};</span><span class="pln">
                </span><span class="kwd">return</span><span class="pln"> cd</span><span class="pun">;</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">

            </span><span class="lit">@Override</span><span class="pln">
            </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">CharsetEncoder</span><span class="pln"> newEncoder</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">};</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">String</span><span class="pun">(</span><span class="str">"abc"</span><span class="pun">.</span><span class="pln">getBytes</span><span class="pun">(),</span><span class="pln"> charset</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> modify</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> s</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">CharBuffer</span><span class="pln"> charBuffer </span><span class="pun">=</span><span class="pln"> cbRef</span><span class="pun">.</span><span class="pln">get</span><span class="pun">();</span><span class="pln">
        charBuffer</span><span class="pun">.</span><span class="pln">position</span><span class="pun">(</span><span class="lit">0</span><span class="pun">);</span><span class="pln">
        charBuffer</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"xyz"</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

</span><span class="pun">}</span></code></pre>
<p>Running the code prints</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="pln">abc
zzz</span></code></pre>
<p>I don't know how to correctly implement decodeLoop(), but i don't care right now :)</p>
</div></text><author><a href="/users/75126/mhaller">mhaller</a></author><comments><comment><text><span class="comment-copy">Nice one, confirmed to work with Java 6u31.</span></text><author><a class="comment-user" href="/users/525725/emmanuel-bourg" title="6,861 reputation">Emmanuel Bourg</a></author></comment><comment><text><span class="comment-copy">lovely, this is the correct answer! Due to this 'feature' using new String(byte[], offset, len, Charset) totally blows also b/c the byte[] is copied entirely - i.e. using 1MB buffer and creating small string kills any performance.</span></text><author><a class="comment-user owner" href="/users/554431/bestsss" title="8,229 reputation">bestsss</a></author></comment><comment><text><span class="comment-copy">The good news it's not security vulnerability if <code>System.getSecurityManager()</code> is present as the returned <code>char[]</code> is copied.</span></text><author><a class="comment-user owner" href="/users/554431/bestsss" title="8,229 reputation">bestsss</a></author></comment><comment><text><span class="comment-copy">Nice to know that there is a workaround.</span></text><author><a class="comment-user" href="/users/651601/keiki" title="1,238 reputation">keiki</a></author></comment><comment><text><span class="comment-copy">@Spaeth, it is very very mutable, the object itself DOES change its state</span></text><author><a class="comment-user owner" href="/users/554431/bestsss" title="8,229 reputation">bestsss</a></author></comment><comment><text><span class="comment-copy">Maybe there is a way to use outer list of char instead of inner char array?</span></text><author><a class="comment-user" href="/users/1192702/alaster" title="1,171 reputation">alaster</a></author></comment><comment><text><span class="comment-copy">Why has this answer a downvote? Did someone not like the idea of a mutable String? ;-)</span></text><author><a class="comment-user" href="/users/197574/dermike" title="6,794 reputation">DerMike</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The question received a good answer by @mhaller. I'd say the so-called-puzzle was pretty easy and by just looking at the available c-tors of String one should be able to find out <em>the how</em> part, a </p>
<p><strong>Walkthrough</strong></p>
<p>C-tor of interest is below, if you are to break-in/crack/look for security vulnerability always look for non-final arbitrary classes. The case here is <code>java.nio.charset.Charset</code></p>
<p></p><pre class="lang-java prettyprint prettyprinted" style=""><code><span class="pln">
</span><span class="com">//String</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pun">(</span><span class="kwd">byte</span><span class="pln"> bytes</span><span class="pun">[],</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> offset</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> length</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Charset</span><span class="pln"> charset</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">charset </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
        </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">NullPointerException</span><span class="pun">(</span><span class="str">"charset"</span><span class="pun">);</span><span class="pln">
    checkBounds</span><span class="pun">(</span><span class="pln">bytes</span><span class="pun">,</span><span class="pln"> offset</span><span class="pun">,</span><span class="pln"> length</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">char</span><span class="pun">[]</span><span class="pln"> v </span><span class="pun">=</span><span class="pln"> </span><span class="typ">StringCoding</span><span class="pun">.</span><span class="pln">decode</span><span class="pun">(</span><span class="pln">charset</span><span class="pun">,</span><span class="pln"> bytes</span><span class="pun">,</span><span class="pln"> offset</span><span class="pun">,</span><span class="pln"> length</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">offset </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">count </span><span class="pun">=</span><span class="pln"> v</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">value </span><span class="pun">=</span><span class="pln"> v</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
The c-tor offers supposedly-fast way to convert <code>byte[]</code> to String by passing the Charset not the chartset name to avoid the lookup chartsetName-&gt;charset. 
It also allows passing an arbitrary Charset object to create String. Charset main routing converts the content of <code>java.nio.ByteBuffer</code> to <code>CharBuffer</code>. The CharBuffer may hold a reference to char[] and it's available via <code>array()</code>, also the CharBuffer is fully modifiable.<p></p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="pln">
    </span><span class="com">//StringCoding</span><span class="pln">
    </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">[]</span><span class="pln"> decode</span><span class="pun">(</span><span class="typ">Charset</span><span class="pln"> cs</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> ba</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> off</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> len</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">StringDecoder</span><span class="pln"> sd </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">StringDecoder</span><span class="pun">(</span><span class="pln">cs</span><span class="pun">,</span><span class="pln"> cs</span><span class="pun">.</span><span class="pln">name</span><span class="pun">());</span><span class="pln">
        </span><b><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> b </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Arrays</span><span class="pun">.</span><span class="pln">copyOf</span><span class="pun">(</span><span class="pln">ba</span><span class="pun">,</span><span class="pln"> ba</span><span class="pun">.</span><span class="pln">length</span><span class="pun">);</span></b><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> sd</span><span class="pun">.</span><span class="pln">decode</span><span class="pun">(</span><span class="pln">b</span><span class="pun">,</span><span class="pln"> off</span><span class="pun">,</span><span class="pln"> len</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="com">//StringDecoder</span><span class="pln">
    </span><span class="kwd">char</span><span class="pun">[]</span><span class="pln"> decode</span><span class="pun">(</span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> ba</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> off</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> len</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">int</span><span class="pln"> en </span><span class="pun">=</span><span class="pln"> scale</span><span class="pun">(</span><span class="pln">len</span><span class="pun">,</span><span class="pln"> cd</span><span class="pun">.</span><span class="pln">maxCharsPerByte</span><span class="pun">());</span><span class="pln">
        </span><span class="kwd">char</span><span class="pun">[]</span><span class="pln"> ca </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">[</span><span class="pln">en</span><span class="pun">];</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">len </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> ca</span><span class="pun">;</span><span class="pln">
        cd</span><span class="pun">.</span><span class="pln">reset</span><span class="pun">();</span><span class="pln">
        </span><b><span class="typ">ByteBuffer</span><span class="pln"> bb </span><span class="pun">=</span><span class="pln"> </span><span class="typ">ByteBuffer</span><span class="pun">.</span><span class="pln">wrap</span><span class="pun">(</span><span class="pln">ba</span><span class="pun">,</span><span class="pln"> off</span><span class="pun">,</span><span class="pln"> len</span><span class="pun">);</span></b><span class="pln">
        </span><span class="typ">CharBuffer</span><span class="pln"> cb </span><span class="pun">=</span><span class="pln"> </span><span class="typ">CharBuffer</span><span class="pun">.</span><span class="pln">wrap</span><span class="pun">(</span><span class="pln">ca</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">try</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">CoderResult</span><span class="pln"> cr </span><span class="pun">=</span><span class="pln"> cd</span><span class="pun">.</span><span class="pln">decode</span><span class="pun">(</span><span class="pln">bb</span><span class="pun">,</span><span class="pln"> cb</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">);</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">cr</span><span class="pun">.</span><span class="pln">isUnderflow</span><span class="pun">())</span><span class="pln">
                cr</span><span class="pun">.</span><span class="pln">throwException</span><span class="pun">();</span><span class="pln">
            cr </span><span class="pun">=</span><span class="pln"> cd</span><span class="pun">.</span><span class="pln">flush</span><span class="pun">(</span><span class="pln">cb</span><span class="pun">);</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">cr</span><span class="pun">.</span><span class="pln">isUnderflow</span><span class="pun">())</span><span class="pln">
                cr</span><span class="pun">.</span><span class="pln">throwException</span><span class="pun">();</span><span class="pln">
        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">CharacterCodingException</span><span class="pln"> x</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="com">// Substitution is always enabled,</span><span class="pln">
            </span><span class="com">// so this shouldn't happen</span><span class="pln">
            </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Error</span><span class="pun">(</span><span class="pln">x</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> safeTrim</span><span class="pun">(</span><span class="pln">ca</span><span class="pun">,</span><span class="pln"> cb</span><span class="pun">.</span><span class="pln">position</span><span class="pun">(),</span><span class="pln"> cs</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span></code></pre>
<p>In order to prevent altering the <code>char[]</code> the java developers copy the array much like any other String construction (for instance <code>public String(char value[])</code>). However there is an exception - if no SecurityManager is installed, the char[] is not copied.</p>
<p><code></code></p><pre class="lang-java prettyprint prettyprinted" style=""><code><span class="pln">    </span><span class="com">//Trim the given char array to the given length</span><span class="pln">
    </span><span class="com">//</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">[]</span><span class="pln"> safeTrim</span><span class="pun">(</span><span class="kwd">char</span><span class="pun">[]</span><span class="pln"> ca</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> len</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Charset</span><span class="pln"> cs</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">len </span><span class="pun">==</span><span class="pln"> ca</span><span class="pun">.</span><span class="pln">length 
                </span><span class="pun">&amp;&amp;</span><span class="pln"> </span><span class="pun">(</span><span class="typ">System</span><span class="pun">.</span><span class="pln">getSecurityManager</span><span class="pun">()</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pln">
                </span><span class="pun">||</span><span class="pln"> cs</span><span class="pun">.</span><span class="pln">getClass</span><span class="pun">().</span><span class="pln">getClassLoader0</span><span class="pun">()</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">))</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> ca</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">else</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Arrays</span><span class="pun">.</span><span class="pln">copyOf</span><span class="pun">(</span><span class="pln">ca</span><span class="pun">,</span><span class="pln"> len</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span></code></pre><p></p>
<p>So if there is no SecurityManager it's absolutely possible to have a modifiable CharBuffer/char[] that's being referenced by a String. </p>
<p>Everything looks fine by now - except the <code>byte[]</code> is also copied (the bold above). This is 
where java developers went lazy and massively wrong.</p>
<p>The copy is necessary to prevent the rogue Charset (example above) to be able alter the source byte[]. However, imagine the case of having around 512KB <code>byte[]</code> buffer that contains few String. Attempting to create a single small, few charts - <code>new String(buf, position, position+32,charset)</code>  resulting in massive 512KB byte[] copy. If the buffer were 1KB or so, the impact will never be truly noticed. With large buffers, the performance hit is really huge, though. The simple fix would be to copy the relevant part.</p>
<p>...or well the designers of <code>java.nio</code> thought about by introducing read-only Buffers. Simply calling <code>ByteBuffer.asReadOnlyBuffer()</code> would have been enough (if the Charset.getClassLoader()!=null)*
Sometimes even the guys working on <code>java.lang</code> can get it totally wrong.</p>
<p><sub>*Class.getClassLoader() returns null for bootstrap classes, i.e. the ones coming with the JVM itself.</sub></p>
</div></text><author><a href="/posts/12542206/revisions" id="history-12542206" title="show revision history for this post">
        Mechanical snail
        </a></author><comments><comment><text><span class="comment-copy">This text was added by Bestsss by editing the question. Moved since it's really an answer.</span></text><author><a class="comment-user" href="/users/319931/mechanical-snail" title="14,783 reputation">Mechanical snail</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I would say StringBuilder (or StringBuffer for multithreaded use). Yes at the end you get a immutable String. But that's the way to go.</p>
<p>For example the best way to append Strings in a loop is to use StringBuilder. Java itself uses StringBuilder when you use "fu " + variable + " ba".</p>
<p><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/StringBuilder.html" rel="nofollow">http://docs.oracle.com/javase/6/docs/api/java/lang/StringBuilder.html</a></p>
<p>append(blub).append(5).appen("dfgdfg").toString();</p>
</div></text><author><a href="/users/651601/keiki">keiki</a></author><comments><comment><text><span class="comment-copy">that's not String at any rate, CharSequence at best.</span></text><author><a class="comment-user owner" href="/users/554431/bestsss" title="8,229 reputation">bestsss</a></author></comment><comment><text><span class="comment-copy">a String is a CharSequence (thats why String implements Charsequence^^).</span></text><author><a class="comment-user" href="/users/651601/keiki" title="1,238 reputation">keiki</a></author></comment><comment><text><span class="comment-copy">No string is a <b>final</b> class. CharSequence is an <b>interface</b>. On simalar grounds both extend (indirectly for StringBiuilder/Buffer) java.lang.Object. The question is about <code>java.lang.String</code> precisely.</span></text><author><a class="comment-user owner" href="/users/554431/bestsss" title="8,229 reputation">bestsss</a></author></comment><comment><text><span class="comment-copy">This still generates a String, however StringBuilder implements CharSequence.  So you can often use the StringBuilder in place of a string, giving you a Mutable CharSequence that can avoid GC and such (I like to print a lot of strings very quickly sometimes and don't want GC to be a performance issue)</span></text><author><a class="comment-user" href="/users/460156/hammered" title="1,912 reputation">HaMMeReD</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="com">// How to achieve String Mutability</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">lang</span><span class="pun">.</span><span class="pln">reflect</span><span class="pun">.</span><span class="typ">Field</span><span class="pun">;</span><span class="pln"> 

</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">MutableString</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
        </span><span class="typ">String</span><span class="pln"> s </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Hello"</span><span class="pun">;</span><span class="pln"> 

        mutate</span><span class="pun">(</span><span class="pln">s</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">s</span><span class="pun">);</span><span class="pln"> 

    </span><span class="pun">}</span><span class="pln"> 

    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> mutate</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> s</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">try</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

            </span><span class="typ">String</span><span class="pln"> t </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Hello world"</span><span class="pun">;</span><span class="pln">
            </span><span class="typ">Field</span><span class="pln"> val </span><span class="pun">=</span><span class="pln"> </span><span class="typ">String</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">.</span><span class="pln">getDeclaredField</span><span class="pun">(</span><span class="str">"value"</span><span class="pun">);</span><span class="pln"> 
            </span><span class="typ">Field</span><span class="pln"> count </span><span class="pun">=</span><span class="pln"> </span><span class="typ">String</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">.</span><span class="pln">getDeclaredField</span><span class="pun">(</span><span class="str">"count"</span><span class="pun">);</span><span class="pln"> 
            val</span><span class="pun">.</span><span class="pln">setAccessible</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln"> 
            count</span><span class="pun">.</span><span class="pln">setAccessible</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln"> 

            count</span><span class="pun">.</span><span class="pln">setInt </span><span class="pun">(</span><span class="pln">s</span><span class="pun">,</span><span class="pln"> t</span><span class="pun">.</span><span class="pln">length </span><span class="pun">());</span><span class="pln">
            val</span><span class="pun">.</span><span class="pln">set </span><span class="pun">(</span><span class="pln">s</span><span class="pun">,</span><span class="pln"> val</span><span class="pun">.</span><span class="pln">get</span><span class="pun">(</span><span class="pln">t</span><span class="pun">));</span><span class="pln">
        </span><span class="pun">}</span><span class="pln"> 
        </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Exception</span><span class="pln"> e</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> e</span><span class="pun">.</span><span class="pln">printStackTrace</span><span class="pun">();</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln"> 

</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/4473640/jitendrak">jitendrak</a></author><comments><comment><text><span class="comment-copy">I guess the part about java.lang.reflect in the question has escaped you. The code will fail on JDK 7+ also</span></text><author><a class="comment-user owner" href="/users/554431/bestsss" title="8,229 reputation">bestsss</a></author></comment></comments></answer></answers></post>