<?xml version="1.0" encoding="utf-8"?>
<post><title>algorithm - How are ssl certificates verified? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>What is the series of steps needed to securely verify a ssl certificate?  My (very limited) understanding is that when you visit an https site, the server sends a certificate to the client (the browser) and the browser gets the certificate's issuer information from that certificate, then uses that to contact the issuerer, and somehow compares certificates for validity.  </p>
<ul>
<li>How exactly is this done? </li>
<li>What about the process makes it immune to man-in-the-middle attacks?</li>
<li>What prevents some random person from setting up their own verification service to use in man-in-the-middle attacks, so everything "looks" secure?</li>
</ul>
</div></text><author><a href="/users/4249/matt-b">matt b</a></author><comments/></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Here is a very simplified explanation:</p>
<ol>
<li><p>Your web browser downloads the web server's certificate, which contains the public key of the web server.  This certificate is signed with the private key of a trusted certificate authority.</p></li>
<li><p>Your web browser comes installed with the public keys of all of the major certificate authorities.  It uses this public key to verify that the web server's certificate was indeed signed by the trusted certificate authority.</p></li>
<li><p>The certificate contains the domain name and/or ip address of the web server.  Your web browser confirms with the certificate authority that the address listed in the certificate is the one to which it has an open connection.</p></li>
<li><p>Your web browser generates a shared symmetric key which will be used to encrypt the HTTP traffic on this connection; this is much more efficient than using public/private key encryption for everything.  Your browser encrypts the symmetric key with the public key of the web server then sends it back, thus ensuring that only the web server can decrypt it, since only the web server has its private key.</p></li>
</ol>
<p>Note that the certificate authority (CA) is essential to preventing man-in-the-middle attacks.  However, even an unsigned certificate will prevent someone from passively listening in on your encrypted traffic, since they have no way to gain access to your shared symmetric key.</p>
</div></text><author><a href="/users/1694/eli-courtwright">Eli Courtwright</a></author><comments><comment><text><span class="comment-copy">Around step 1.5 the server also "signs" something with the private key associated with its certificate.  This combines with the name/IP check to assure that only the owning site of the certificate presents it.</span></text><author><a class="comment-user" href="/users/22704/darron" title="16,927 reputation">Darron</a></author></comment><comment><text><span class="comment-copy">To see a complete worked example of this process using Firefox connecting to <a href="https://www.amazon.com" rel="nofollow noreferrer">amazon.com</a>, see <a href="http://www.moserware.com/2009/06/first-few-milliseconds-of-https.html" rel="nofollow noreferrer">moserware.com/2009/06/first-few-milliseconds-of-https.html</a></span></text><author><a class="comment-user" href="/users/1869/jeff-moser" title="15,136 reputation">Jeff Moser</a></author></comment><comment><text><span class="comment-copy">"Your web browser comes installed with the public keys of all of the major certificate authorities."  Who gets to decide what's considered a "major certificate authority"?  If the public key of the certificate authority I'm using isn't preinstalled on my browser, wouldn't it be impossible for my browser to obtain the public key without opening itself up to a man-in-the-middle attack?</span></text><author><a class="comment-user" href="/users/1157054/ajedi32" title="17,742 reputation">Ajedi32</a></author></comment><comment><text><span class="comment-copy">@Ajedi32: Each browser decides separately; in general there's broad agreement about the major valid registrars, but you do occasionally have some registrars which get excluded from Firefox but not IE, etc.  And in that case, you are correct that downloading their public keys would open you to a MITM attack, though in practice it's unlikely (if you live in the US) that this would happen to you.</span></text><author><a class="comment-user" href="/users/1694/eli-courtwright" title="92,524 reputation">Eli Courtwright</a></author></comment><comment><text><span class="comment-copy">I did not know that my browser comes installed with the public keys of all major certificate authorities. Now I know how my SSL certificates are getting verified without risk of MITM :). Thanks!</span></text><author><a class="comment-user" href="/users/1387670/onechilldude" title="4,477 reputation">OneChillDude</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>It's worth noting that in addition to purchasing a certificate (as mentioned above), you can also create your own for free; this is referred to as a "self-signed certificate". The difference between a self-signed certificate and one that's purchased is simple: the purchased one has been signed by a Certificate Authority that your browser already knows about. In other words, your browser can easily validate the authenticity of a purchased certificate.</p>
<p>Unfortunately this has led to a common misconception that self-signed certificates are inherently less secure than those sold by commercial CA's like GoDaddy and Verisign, and that you have to live with browser warnings/exceptions if you use them; <strong>this is incorrect</strong>.</p>
<p><em>If you securely distribute a self-signed certificate (or CA cert, as bobince suggested) and install it in the browsers that will use your site</em>, it's just as secure as one that's purchased and is not vulnerable to man-in-the-middle attacks and cert forgery. Obviously this means that it's only feasible if only a few people need secure access to your site (e.g., internal apps, personal blogs, etc.).</p>
<p>In the interest of increasing awareness and encouraging fellow small-time bloggers like myself to protect themselves, I've written up a entry-level tutorial that explains in more detail the concepts behind certificates and how to safely create and use a self-signed cert (complete with code samples and screenshots). Here's a link in case it's helpful to anyone else in the future: <a href="http://www.clintharris.net/2009/self-signed-certificates/" rel="noreferrer">http://www.clintharris.net/2009/self-signed-certificates/</a>.</p>
</div></text><author><a href="/users/62694/clint-harris">Clint Harris</a></author><comments><comment><text><span class="comment-copy">Indeed, securely distributing your own certificate is one way to skin the cat, but a much easier one is to go to any one of a number of so-called "open" CAs. CACert.org is my favorite. So long as you trust the steps they take to safeguard their cert issuance, then importing their root cert is safe.</span></text><author><a class="comment-user" href="/users/13757/nsayer" title="9,724 reputation">nsayer</a></author></comment><comment><text><span class="comment-copy">I love this comment - unfortunately it highlights a very important weakness with CAs. Let's say you import a CA cert from Bob Smith - well Bob Smith can sign a certificate for any domain (including google.com and chase.com). This is actually why GoDaddy/Verisign pay big money to be included in the OS - they are vetted by a security outfit to ensure that they have checks in place to make sure they don't sign a cert for a malicious person. I think that you should be able to say "this CA can only sign certs for mysite.com".</span></text><author><a class="comment-user" href="/users/195722/nathan-adams" title="769 reputation">Nathan Adams</a></author></comment><comment><text><span class="comment-copy">Isn't self signed certificate more secure, since the CAs out there could be paid to sign something they shouldn't have. If you can safely distribute the CA certs to the end-points, always go with self-signed certs.</span></text><author><a class="comment-user" href="/users/1667227/javaphobic" title="171 reputation">javaPhobic</a></author></comment><comment><text><span class="comment-copy">Are there any CA that are free and verified in most major browsers? I'm looking for a basic cert merely for verifying I own an email and domain name.  The ones I've found aren't in most major browsers though.</span></text><author><a class="comment-user" href="/users/1179573/alex-kwitny" title="5,916 reputation">Alex Kwitny</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The client has a pre-seeded store of SSL certificate authorities' public keys. There must be a chain of trust from the certificate for the server up through intermediate authorities up to one of the so-called "root" certificates in order for the server to be trusted.</p>
<p>You can examine and/or alter the list of trusted authorities. Often you do this to add a certificate for a local authority that you know you trust - like the company you work for or the school you attend or what not.</p>
<p>The pre-seeded list can vary depending on which client you use. The big SSL certificate vendors insure that their root certs are in all the major browsers ($$$).</p>
<p>Monkey-in-the-middle attacks are "impossible" unless the attacker has the private key of a trusted root certificate. Since the corresponding certificates are widely deployed, the exposure of such a private key would have serious implications for the security of eCommerce generally. Because of that, those private keys are very, very closely guarded.</p>
</div></text><author><a href="/users/13757/nsayer">nsayer</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>You said that </p>
<blockquote>
<p>the browser gets the certificate's issuer information from that
  certificate, then uses that to contact the issuerer, and somehow
  compares certificates for validity.</p>
</blockquote>
<p>The client doesn't have to check with the issuer because two things : </p>
<ol>
<li>all browsers have a pre-installed list of all major CAs public keys</li>
<li>the certificate is signed, and that signature itself is enough proof that the certificate is valid because the client can make sure, by his own, and without contacting the issuer's server, that that certificate is authentic. That's the beauty of asymmetric encryption.</li>
</ol>
<p>Notice that 2. can't be done without 1. </p>
<p>This is better explained in this <a href="https://i.imgur.com/5T2fJsG.png" rel="nofollow noreferrer">big diagram</a> I made some time ago </p>
<p>(skip to "what's a signature ?" at the bottom)</p>
<p><img alt="blob" src="https://i.imgur.com/F4Zzecf.png"/></p>
</div></text><author><a href="/users/212044/ychaouche">ychaouche</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>if you're more technically minded, this site is probably what you want: <a href="http://www.zytrax.com/tech/survival/ssl.html" rel="nofollow">http://www.zytrax.com/tech/survival/ssl.html</a></p>
<p>warning: the rabbit hole goes deep :).</p>
</div></text><author><a href="/users/1116096/mike-frysinger">Mike Frysinger</a></author><comments/></answer></answers></post>