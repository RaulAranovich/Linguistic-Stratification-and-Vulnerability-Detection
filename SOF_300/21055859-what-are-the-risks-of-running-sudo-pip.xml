<?xml version="1.0" encoding="utf-8"?>
<post><title>python - What are the risks of running 'sudo pip'? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>Occasionally I run into <a href="http://stackoverflow.com/a/21047830/656912">comments or responses</a> that state emphatically that running <code>pip</code> under <code>sudo</code> is "wrong" or "bad", but there are cases (including the way I have a bunch of tools set up) where it is either much simpler, or even necessary to run it that way.</p>
<p>What are the risks associated with running <code>pip</code> under <code>sudo</code>?</p>
<hr/>
<p>Note that this in not the same question as <a href="http://stackoverflow.com/q/15028648/656912">this one</a>, which, despite the title, provides no information about risks. This also isn't a question about how to avoid using <code>sudo</code>, but about specifically why one would want to.</p>
</div></text><author><a href="/users/445131/eric-leschinski">Eric Leschinski</a></author><comments><comment><text><span class="comment-copy">this should probably be on superuser</span></text><author><a class="comment-user" href="/users/1426065/mattdmo" title="59,522 reputation">MattDMo</a></author></comment><comment><text><span class="comment-copy">@MattDMo: Let's see if it collects some useful answers here first. Then a move is fine.</span></text><author><a class="comment-user owner" href="/users/656912/raxacoricofallapatorius" title="9,665 reputation">raxacoricofallapatorius</a></author></comment><comment><text><span class="comment-copy">I'm curious about the reason for the "close" vote.</span></text><author><a class="comment-user owner" href="/users/656912/raxacoricofallapatorius" title="9,665 reputation">raxacoricofallapatorius</a></author></comment><comment><text><span class="comment-copy">It's saying this is OT and belongs on SU. BTW, I didn't vote to close. Yet.</span></text><author><a class="comment-user" href="/users/1426065/mattdmo" title="59,522 reputation">MattDMo</a></author></comment><comment><text><span class="comment-copy">@MattDMo: Makes sense. My worry is that if it moves there I'll get answers that I won't understand (too much security-ese).</span></text><author><a class="comment-user owner" href="/users/656912/raxacoricofallapatorius" title="9,665 reputation">raxacoricofallapatorius</a></author></comment><comment><text><span class="comment-copy">well, this <b>is</b> a question about security...</span></text><author><a class="comment-user" href="/users/1426065/mattdmo" title="59,522 reputation">MattDMo</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>When you run <code>pip</code> with <code>sudo</code>, you run <code>setup.py</code> with <code>sudo</code>. In other words, you run arbitrary Python  code from the Internet as root. If someone puts up a malicious project on PyPI and you install it, you give an attacker root access to your machine. Prior to some recent fixes to <code>pip</code> and PyPI, an attacker could also run a man in the middle attack to inject their code when you download a trustworthy project.</p>
</div></text><author><a href="/users/395760/delnan">delnan</a></author><comments><comment><text><span class="comment-copy">Does the threat apply only during <code>pip</code> or for any subsequent run of what it installed?</span></text><author><a class="comment-user owner" href="/users/656912/raxacoricofallapatorius" title="9,665 reputation">raxacoricofallapatorius</a></author></comment><comment><text><span class="comment-copy">@raxacoricofallapatorius The installed code will only have root privileges when run as root, not always. But it's still code from the Internet, if it's malicious it might also do evil things at run time.</span></text><author><a class="comment-user" href="/users/395760/delnan" title="75,470 reputation">delnan</a></author></comment><comment><text><span class="comment-copy">But that will be true whether I <code>sudo</code> or not when I <code>pip</code>, right? Once it's installed, we're all at risk, no matter how it got there?</span></text><author><a class="comment-user owner" href="/users/656912/raxacoricofallapatorius" title="9,665 reputation">raxacoricofallapatorius</a></author></comment><comment><text><span class="comment-copy">@raxacoricofallapatorius Yes.</span></text><author><a class="comment-user" href="/users/395760/delnan" title="75,470 reputation">delnan</a></author></comment><comment><text><span class="comment-copy">So the risk is at instal time (as you say in the answer, I'm just confirming) and if I could avoid that I'd be safe (or at least not exposed to su damage during install). Can I accomplish that by simply giving myself write permissions where (and as) <code>pip</code> needs them, and then running <code>pip</code> as me?</span></text><author><a class="comment-user owner" href="/users/656912/raxacoricofallapatorius" title="9,665 reputation">raxacoricofallapatorius</a></author></comment><comment><text><span class="comment-copy">@raxacoricofallapatorius This is getting into territory I'm uncomfortable to answer, not because I don't have any idea (I have a hunch and can give reasons for it) but because it's notoriously hard to predict how seemingly small changes like these affect overall security. In addition, it's usually extremely simple to avoid not only <code>sudo</code> but also these permission issues by installing the packages somewhere else (e.g. in an virtualenv). Doing so may even be better and more reliable even when ignoring all security concerns.</span></text><author><a class="comment-user" href="/users/395760/delnan" title="75,470 reputation">delnan</a></author></comment><comment><text><span class="comment-copy">I'd be interested to hear your hunch.</span></text><author><a class="comment-user owner" href="/users/656912/raxacoricofallapatorius" title="9,665 reputation">raxacoricofallapatorius</a></author></comment><comment><text><span class="comment-copy">@raxacoricofallapatorius Depending on the exact write permissions and directory layout, I fear that more sophisticated malware would overwrite other, more trusted code, such as code used by system utilities routinely run as root.</span></text><author><a class="comment-user" href="/users/395760/delnan" title="75,470 reputation">delnan</a></author></comment><comment><text><span class="comment-copy">I think this might morph into a follow-on question (I think I pretty much have my answer to the question asked here), but why would giving myself write permission to <code>site-packages</code> and other directories used by <code>pip</code> installs be any different than putting things in a new folder with such permissions? It seems like that's as secure as I can expect to get, isn't it.</span></text><author><a class="comment-user owner" href="/users/656912/raxacoricofallapatorius" title="9,665 reputation">raxacoricofallapatorius</a></author></comment><comment><text><span class="comment-copy">@raxacoricofallapatorius <i>(…) but why would giving myself write permission to site-packages (…)</i> – <code>sudo pip</code> does not give you write permissions to specific directories like site-packages only but to all directories in the system.</span></text><author><a class="comment-user" href="/users/95735/piotr-dobrogost" title="23,356 reputation">Piotr Dobrogost</a></author></comment><comment><text><span class="comment-copy">So does that mean that giving yourself write permission to <code>site-packages</code> <i>is</i> the recommended alternative? Elsewhere I see that a soluiton to install under another user.  Is there <i>one</i> recommended best way to run pip without using <code>sudo</code>? That would be most pythonic.</span></text><author><a class="comment-user" href="/users/1704279/notconfusing" title="958 reputation">notconfusing</a></author></comment><comment><text><span class="comment-copy">@notconfusing My latest memo says the recommended way is to set up a virtualenv. The virtualenv will have a <code>site-packages</code> directory that belongs to some ordinary user.</span></text><author><a class="comment-user" href="/users/395760/delnan" title="75,470 reputation">delnan</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Besides obvious security risks (which I think are in fact low when you install software you know) brought in other answers there is another reason. Python that comes with the system is part of this system and when you want to manage system you use tools designated for system maintenance like package manager in case of installing/upgrading/uninstalling software. When you start to modify system's software with third party tools (pip in this instance) then you have no guarantee about the state of your system. Yet another reason is that sudo can bring you problems you wouldn't have a chance or have a very small chance to have otherwise. See for example <a href="http://stackoverflow.com/q/22236727/95735">Mismatch between sys.executable and sys.version in Python</a></p>
<p>Distros are aware of this problem and try to mitigate it. For example Fedora – <a href="https://fedoraproject.org/wiki/Changes/Making_sudo_pip_safe" rel="nofollow noreferrer">Making sudo pip safe</a> and Debian – <a href="https://wiki.debian.org/Python#Deviations_from_upstream" rel="nofollow noreferrer">dist-packages instead of site-packages</a>.</p>
</div></text><author><a href="/users/95735/piotr-dobrogost">Piotr Dobrogost</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Using pip that way means you trust it to the level you allow it to make anything to your system. Not only pip, but also any code it will download and execute from sources you may not trust and that can be malicious.</p>
<p>And pip doesn't need all that privileges, only the write access to specific files and directories. If you can't use your system's package manager and do not want to go the virtual environment way, you may create a specific user that has write privilege to the python installation directory and use it for pip. That way you better control what can pip do and not do. And you can use <code>sudo -u</code> for that!</p>
</div></text><author><a href="/users/1970751/cilyan">Cilyan</a></author><comments><comment><text><span class="comment-copy">So all I need to do is, for example, allow myself write permissions to <code>site-packages</code>?</span></text><author><a class="comment-user owner" href="/users/656912/raxacoricofallapatorius" title="9,665 reputation">raxacoricofallapatorius</a></author></comment><comment><text><span class="comment-copy">@raxacoricofallapatorius not just there, as some packages also install helper scripts (like <code>pip</code> itself, IPython, django, pygments, ...) so you'll also need access to whichever directory they install themselves in.</span></text><author><a class="comment-user" href="/users/1426065/mattdmo" title="59,522 reputation">MattDMo</a></author></comment><comment><text><span class="comment-copy">Yes and no. I'm no security expert, but I think it is better if the user running the scripts do not have write permission. Therefore I suggest rather a separate user.</span></text><author><a class="comment-user" href="/users/1970751/cilyan" title="2,683 reputation">Cilyan</a></author></comment><comment><text><span class="comment-copy">@MattDMo: Yes, that makes sense; but those cases are probably easily discovered as things fail without the appropriate permissions. If done though, isn't that the safest way to go then the worst that can happen to my system as a whole is what can happen when I run anything anyway, right? The only difference is that I could potentially ruin my Python installation as me (rather than having to  be su to do it), right?</span></text><author><a class="comment-user owner" href="/users/656912/raxacoricofallapatorius" title="9,665 reputation">raxacoricofallapatorius</a></author></comment><comment><text><span class="comment-copy">How do I create such a user, for the sole purpose of using <code>pip</code> (no other changes to the system, like a new home directory, etc. need)? After that I assume I just change the owner of <code>site-packages</code> to that user, correct?</span></text><author><a class="comment-user owner" href="/users/656912/raxacoricofallapatorius" title="9,665 reputation">raxacoricofallapatorius</a></author></comment><comment><text><span class="comment-copy">This depends on your system. Assuming linux, you could do <code>groupadd python; useradd -M pipuser -g python -d /tmp; passwd -l pipuser</code> then <code>chgrp -R python site-packages; chmod -R g+w site-packages</code> and finally <code>sudo --user pipuser pip install ...</code>. I do not know about Mac.</span></text><author><a class="comment-user" href="/users/1970751/cilyan" title="2,683 reputation">Cilyan</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The only thing "wrong" with <code>sudo</code> is that it, well, DOes as Super User ala root meaning you can potentially destroy an installation with the wrong command.  As PIP is a package maintenance for a particular program you would need such access anyhow to make changes...</p>
</div></text><author><a href="/users/1550186/ekriirke">EkriirkE</a></author><comments/></answer></answers></post>