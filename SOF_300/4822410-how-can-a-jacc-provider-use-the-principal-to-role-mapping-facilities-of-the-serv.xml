<?xml version="1.0" encoding="utf-8"?>
<post><title>security - How can a JACC provider use the Principal-to-role mapping facilities of the server it's deployed on? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I am writing a <code>JACC</code> provider.</p>
<p>Along the way, this means implementing a <a href="http://download.oracle.com/javaee/6/api/javax/security/jacc/PolicyConfiguration.html" rel="noreferrer"><code>PolicyConfiguration</code></a>.</p>
<p>The <code>PolicyConfiguration</code> is responsible for accepting configuration information from the application server, such as which permissions accrue to which roles.  This is so that a <a href="http://download.oracle.com/javase/6/docs/api/java/security/Policy.html" rel="noreferrer"><code>Policy</code></a> later on can make authorization decisions when handed <a href="http://download.oracle.com/javase/6/docs/api/java/security/ProtectionDomain.html" rel="noreferrer">information about the current user</a> and what he's trying to do.</p>
<p>However, it is not part of the <code>PolicyConfiguration</code>'s (atrocious) contract to maintain a mapping between roles and their permissions, and <code>Principals</code> that are assigned to those roles.</p>
<p>Typically--always, really--an application server houses this mapping.  For example, on Glassfish, you affect this mapping by supplying things like <code>sun-web.xml</code> and <code>sun-ejb-jar.xml</code> and so on with your Java EE modules.  (These vendor-specific files are responsible for saying, e.g., <code>superusers</code> is a group that is to be assigned the application role of <code>admins</code>.)</p>
<p>I would like to reuse the functionality these files supply, and I would like to do so for as wide an array of application servers as possible.</p>
<p>Here is--totally arbitrarily--IBM's take on the matter, which appears to confirm my suspicion that what <a href="http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/index.jsp?topic=/com.ibm.websphere.express.doc/info/exp/ae/csec_jaccextensions.html" rel="noreferrer">I want to do is essentially impossible</a>. (More ammunition for my case that this particular Java EE contract is not worth the paper it's printed on.)</p>
<p><strong>My question:</strong> how do I get at this principal-to-role-mapping information in--for starters--Glassfish and JBoss from within a <code>PolicyConfiguration</code>?  If there's a standard way to do it that I'm unaware of, I'm all ears.</p>
</div></text><author><a href="/users/751651/hbrock">hbrock</a></author><comments><comment><text><span class="comment-copy">Have you made any progress on this issue? I'd like to write a JACC provider too, and also a JASPIC authentication provider in order to build portable web applications...</span></text><author><a class="comment-user" href="/users/870122/perissf" title="10,256 reputation">perissf</a></author></comment><comment><text><span class="comment-copy">This doesn't sound very promising either: <code>Because JSR-115 does not define how to address role mapping, WebLogic JACC classes are used for role-to-principal mapping.</code> See <a href="http://docs.oracle.com/cd/E24329_01/web.1211/e24485/server_prot.htm#SCPRG401" rel="nofollow noreferrer">docs.oracle.com/cd/E24329_01/web.1211/e24485/â€¦</a></span></text><author><a class="comment-user" href="/users/472792/arjan-tijms" title="30,698 reputation">Arjan Tijms</a></author></comment><comment><text><span class="comment-copy">My take on this at the moment is that you have to always make sure your JACC provider is coupled to a JASPIC provider that you are therefore also obligated to write.  I haven't gone this route yet but it's on my table to try.</span></text><author><a class="comment-user owner" href="/users/208288/laird-nelson" title="3,785 reputation">Laird Nelson</a></author></comment><comment><text><span class="comment-copy">@LairdNelson, if you have time, you should probably write up an answer around your JASPIC comment. This sounds promising, and there's a 300 reputation bounty on this question.</span></text><author><a class="comment-user" href="/users/514485/jimhark" title="3,709 reputation">jimhark</a></author></comment><comment><text><span class="comment-copy">It would be interesting to see what you have in mind with the JASPIC/JACC combo. As far as I can see, with JASPIC you use a <code>GroupPrincipalCallback</code> which normally suffers from the same mandatory role mapping. But if JACC can do something here that it can't do for a proprietary module, then it would be interesting to share.</span></text><author><a class="comment-user" href="/users/472792/arjan-tijms" title="30,698 reputation">Arjan Tijms</a></author></comment><comment><text><span class="comment-copy">Hi; not trying to keep anyone in suspense. :-) I don't have an answer here that I could whip up in a hurry.  I just recall Ron Monzillo advising me that the only way to get principal-to-role assignments "into" a JACC provider in a way that it can understand is to have the JASPIC implementation effectively coupled to it.</span></text><author><a class="comment-user owner" href="/users/208288/laird-nelson" title="3,785 reputation">Laird Nelson</a></author></comment><comment><text><span class="comment-copy">you could simply parse the config file, but that would limit you to a specific application server, and/but it might be possible to determine which server you run on, or check for the different files...</span></text><author><a class="comment-user" href="/users/830197/zuloo" title="1,024 reputation">zuloo</a></author></comment><comment><text><span class="comment-copy">Have you tried <a href="http://docs.oracle.com/cd/E18930_01/html/821-2418/beacr.html" rel="nofollow noreferrer">here</a>?</span></text><author><a class="comment-user" href="/users/688463/veridian" title="1,337 reputation">Veridian</a></author></comment><comment><text><span class="comment-copy">One more piece of information related to this. From the JEUS 7 security manual: <code>The JACC interface does not contain any implementation related to principal-to-role mapping, but only for role-to-resource mapping. The user must implement a separate JEUS-specific interface to implement the mapping, and JEUS provides the isjeus.security.impl.aznrep.JACCPrincipalRoleMapper interface for this purpose.</code></span></text><author><a class="comment-user" href="/users/472792/arjan-tijms" title="30,698 reputation">Arjan Tijms</a></author></comment><comment><text><span class="comment-copy">Looking at JACC anew I wonder if we could do something like this in the specification without requiring new code or even a maintenance release: What If It Were Mandated that if you passed in a delimited set of principal names as a <code>String</code> to <code>PolicyContext#getContext(String)</code> and were assured that you would get back a <code>Set&lt;String&gt;</code> of corresponding roles if there were an appropriate policy context handler installed for that key?  No new interfaces, no backwards compatibility issues. No grosser than the existing <code>String</code> parsing that is already required for <code>EJBMethodPermission</code>.</span></text><author><a class="comment-user owner" href="/users/208288/laird-nelson" title="3,785 reputation">Laird Nelson</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>The short answer is: there's no standard way to do it. </p>
<p>Although Glassfish and JBoss support principal-to-role mappings, JACC does no assume all containers do, and so it delegates the responsibility of keeping those mappings to the JACC provider implementation. From the docs (see: <a href="http://docs.oracle.com/javaee/6/api/javax/security/jacc/PolicyConfiguration.html#addToRole%28java.lang.String,%20java.security.Permission%29" rel="nofollow"><code>PolicyConfiguration.addToRole</code> method</a>):</p>
<blockquote>
<p>It is the job of the Policy provider to ensure that all the
  permissions added to a role are granted to principals "mapped to the
  role".</p>
</blockquote>
<p>In other words, you need to implement that yourself inside your JACC provider for each container. For JBoss, for example, you could use one of the subclasses of <a href="https://access.redhat.com/site/documentation/en-US/JBoss_Enterprise_Application_Platform/6.1/html/API_Documentation/files/javadoc/org/jboss/security/mapping/providers/role/AbstractRolesMappingProvider.html" rel="nofollow"><code>AbstractRolesMappingProvider</code></a>.</p>
</div></text><author><a href="/users/498609/diego">Diego</a></author><comments/></answer></answers></post>