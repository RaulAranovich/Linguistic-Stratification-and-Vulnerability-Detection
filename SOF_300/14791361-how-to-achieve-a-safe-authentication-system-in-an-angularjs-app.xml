<?xml version="1.0" encoding="utf-8"?>
<post><title>javascript - How to achieve a Safe (!) authentication system in an angularjs app? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I'm new with angularjs...</p>
<p>I read the docs, and completed the tutorial; i also tried something else by myself, and things start to make sense to me.</p>
<p>Now i wonder how to make a <strong>safe authentication system</strong>.</p>
<p>The easy part: no code, i will describe operations my code execute:</p>
<blockquote>
<p>I've a classic form: username, and password text input.</p>
<p>The user fills the form, and press ENTER. </p>
<p>An ajax request starts, and the response is a JSON telling me
  something like "ok i know you" or "i don't know who you are".</p>
</blockquote>
<p><strong>What i need now is to mantain the logged status of the visitor (or not logged) between the different views of my application.</strong></p>
<p>I read on the internet that, to achieve this objective, someone sets a variable ($scope.isLogged = true), someone else uses cookies; but javascript variables, and cookies can be easily edited using firebug, or similiar development tools.</p>
<p>... and finally the question:</p>
<p>So, <strong>have you some suggestion to achieve a safe authentication system in an angularjs app?</strong></p>
</div></text><author><a href="/users/1670665/bruno">Bruno</a></author><comments/></question><answers><answer><text><div class="post-text" itemprop="text">
<p>You cannot authorize anything in angularjs, because the user has full controll of the execution environment (namely, the browser). Each check, case, if - anything you can think of - can be tampered with. There are javascript libraries that use asymmetric keys to perform local encryption to store local data somewhat safely, but they are not what you are looking for, really.</p>
<p>You can, and you should, authorize things on the server - the standard way you would do it in an ordinary application - using session; no special code is necessary, ajax calls use ordinary session cookies. Application does not need to know whether it's authenticated or not. It only needs to check what server thinks.</p>
<p>From the perspective of your angularjs application, being "logged in" or "logged out" is merely a gui hint for the user.</p>
</div></text><author><a href="/users/553279/fdreger">fdreger</a></author><comments><comment><text><span class="comment-copy">+1, especially for "From the perspective of your angularjs application, being "logged in" or "logged out" is merely a gui hint for the user." If a user wants to tamper with their execution environment such that Angular thinks they're logged in, so be it--as long as the server still authenticates any action that changes actual data, etc.</span></text><author><a class="comment-user" href="/users/62082/michelle-tilley" title="111,366 reputation">Michelle Tilley</a></author></comment><comment><text><span class="comment-copy">Hi, thank you. I'm interested in your answer. Especially in the part where you mention the session, because it's the traditional way i worked... i use PHP as server side language... just another question (i've not the time to try it personally now, but i'll do asap [indipendently from your answer, i promise :) ]): if during an ajax request a set a session, then this session remains available also in the next requests, right?</span></text><author><a class="comment-user owner" href="/users/1670665/bruno" title="3,789 reputation">Bruno</a></author></comment><comment><text><span class="comment-copy">@Bruno: yes. "session" is just another word for "cookie with an identifier" and since ajax requests share cookies with normal requests (and each other), then your server side will just work.</span></text><author><a class="comment-user" href="/users/553279/fdreger" title="8,469 reputation">fdreger</a></author></comment><comment><text><span class="comment-copy">Missing from this answer is any mention of CSRF protection; if your API has a cookie that authenticates the user there is nothing preventing another site from initiating a request on the user's behalf.</span></text><author><a class="comment-user" href="/users/66713/james-emerton" title="2,250 reputation">James Emerton</a></author></comment><comment><text><span class="comment-copy">@JamesEmerton: that's because it's completely irrelevant to the question. CSRF protection has nothing to do with angularjs at all. I did not mention SQL injection, session fixation etc for the same reason - they do not add anything angular-specific.</span></text><author><a class="comment-user" href="/users/553279/fdreger" title="8,469 reputation">fdreger</a></author></comment><comment><text><span class="comment-copy">@fdreger I disagree; the question was specifically about a <i>safe</i> authentication system. People use SO as a learning resource and it's important to at least point out the most relevant pitfalls.</span></text><author><a class="comment-user" href="/users/66713/james-emerton" title="2,250 reputation">James Emerton</a></author></comment><comment><text><span class="comment-copy">@JamesEmerton Web application security (including authentication and its pitfalls) is a vast topic that cannot possibly be covered in sufficient detail in a single answer. SO format is not about providing the most complete information. On the contrary: SO's strength is in giving specific answers to specific questions. Relevance is the key. IF you really say that adding stuff about CSRF is important, then why don't you mention proper password hashing? protection against HTML injection? against session fixation? Why include CSRF and not SQL injection?</span></text><author><a class="comment-user" href="/users/553279/fdreger" title="8,469 reputation">fdreger</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Probably you found a solution, but currently I made up an authenticaiton scheme I'm implementing in my Angular App. </p>
<p>On .run the app is registered with an ActiveSession set to false.
It then checks if the browser has a cookie with a token and a userId.</p>
<p>If YES, check token+userId on server and updates the token on both server and local (token it's a server generated key unique for each user)</p>
<p>If NO shows login form, check credentials and again if they are valid does a server request t get a new token and saves is locally.</p>
<p>The token is used to make a persistent login (remember me for 3 weeks) or when user refreshes the browser page.</p>
<p>Thank you</p>
<p><img alt="Authentication Scheme in Angular.js" src="https://i.stack.imgur.com/KgtcM.jpg"/></p>
</div></text><author><a href="/users/509263/alexandru-rada">Alexandru Rada</a></author><comments><comment><text><span class="comment-copy">+1 for using paper</span></text><author><a class="comment-user" href="/users/284476/lee" title="1,392 reputation">Lee</a></author></comment><comment><text><span class="comment-copy">+1 from me too , a Picture is worth 1000 word :)</span></text><author><a class="comment-user" href="/users/3088275/betacoder" title="158 reputation">BetaCoder</a></author></comment><comment><text><span class="comment-copy">plus one for taking question serious even if it is coming from the person you don't know</span></text><author><a class="comment-user" href="/users/1348422/adnan" title="434 reputation">Adnan</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Have passed 3 month since I asked this question... 
and now i would like to share what has become my favourite approach when i've to deal with user authentication in a web app built over angularjs.</p>
<p>Of course fdreger's answer is still a great answer... </p>
<blockquote>
<p>You cannot authorize anything in angularjs, because the user has full
  controll of the execution environment (namely, the browser).</p>
<p>From the perspective of your angularjs application, being "logged in"
  or "logged out" is merely a gui hint for the user.</p>
</blockquote>
<p>So, briefly my approach consists in:</p>
<p>1) <strong>bind to each route additional information about the route itself.</strong></p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">$routeProvider</span><span class="pun">.</span><span class="kwd">when</span><span class="pun">(</span><span class="str">'/login'</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
    templateUrl</span><span class="pun">:</span><span class="pln"> </span><span class="str">'partials/login.html'</span><span class="pun">,</span><span class="pln"> controller</span><span class="pun">:</span><span class="pln"> </span><span class="str">'loginCtrl'</span><span class="pun">,</span><span class="pln"> isFree</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pln">
</span><span class="pun">});</span></code></pre>
<p>2) <strong>use a service to mantain the data about the user, and his authentication status.</strong></p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">services</span><span class="pun">.</span><span class="pln">factory</span><span class="pun">(</span><span class="str">'User'</span><span class="pun">,</span><span class="pln"> </span><span class="pun">[</span><span class="kwd">function</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        isLogged</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">,</span><span class="pln">
        username</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pln">
    </span><span class="pun">};</span><span class="pln">
</span><span class="pun">}]);</span></code></pre>
<p>3) <strong>everytime the user try to access a new route, check if he has the grant to access.</strong></p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">$root</span><span class="pun">.</span><span class="pln">$on</span><span class="pun">(</span><span class="str">'$routeChangeStart'</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(</span><span class="kwd">event</span><span class="pun">,</span><span class="pln"> currRoute</span><span class="pun">,</span><span class="pln"> prevRoute</span><span class="pun">){</span><span class="pln">
    </span><span class="com">// prevRoute.isFree tell me if this route is available for all the users, or only for registered user.</span><span class="pln">
    </span><span class="com">// User.isLogged tell me if the user is logged</span><span class="pln">
</span><span class="pun">})</span></code></pre>
<p>I also wrote about this approach (more in detail) on my blog, <a href="http://blog.brunoscopelliti.com/deal-with-users-authentication-in-an-angularjs-web-app">users authentication with angularjs</a>.</p>
</div></text><author><a href="/users/1670665/bruno">Bruno</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>First of all: Client-side data can always be manipulated or tampered with.</p>
<p>As long as valid session IDs aren't easily guessable and measures like associating session tokens with the client's IP there is no big deal about it.</p>
<p>You could, in theory, also encrypt the cookie, as long as you do so on the server side.</p>
<p>For details on how to encrypt your cookies, see the docs of your server-side (e.g <a href="http://expressjs.com/api.html#res.cookie" rel="nofollow">http://expressjs.com/api.html#res.cookie</a> for Express.js)</p>
</div></text><author><a href="/users/585967/geekonaut">geekonaut</a></author><comments><comment><text><span class="comment-copy">First of all, thank you for your answer! Proceeding as you suggest, everytime the view changes, i've to execute an ajax request to check if the session key stored in the variable/cookie is the same generated at the moment of the authentication... am i right? or i'm missing some piece?</span></text><author><a class="comment-user owner" href="/users/1670665/bruno" title="3,789 reputation">Bruno</a></author></comment><comment><text><span class="comment-copy">Basically, for every HTTP request that needs user to be authenticated, the server will check the session key when the request comes in.  Then if the session key is not right, the server could send back a '401 not authorized' instead of the data the client wanted.</span></text><author><a class="comment-user" href="/users/1397051/andrew-joslin" title="38,978 reputation">Andrew Joslin</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>You need to learn about the server side / database end of it.</p>
<p>User logins need to be stored somewhere - 99.9% of the time this is in a server side database.  </p>
<p>Ideally for a really secure system you want a backend (server side) membership system that stores the session in a database table that is related to the member table that holds the encrypted password, but also provides a RESTful interface where you can build your api calls to.</p>
<p>One Script that I've used successfully a lot has been Amember <a href="https://www.amember.com/" rel="nofollow">https://www.amember.com/</a>.  It's a really cost effective way to go although there are a lot of other script out there, I've had a lot of success with this one..  It's also PHP so you can build your build out an API for your angular http calls really easily.</p>
<p>All of these javascript frameworks are great but the effect is that now too many are focusing too much on the front end of things - learn the database / backend as well!  :-)</p>
</div></text><author><a href="/users/928249/webmaster-sean">webmaster_sean</a></author><comments/></answer></answers></post>