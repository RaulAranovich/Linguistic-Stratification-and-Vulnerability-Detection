<?xml version="1.0" encoding="utf-8"?>
<post><title>security - How to do stateless (session-less) &amp; cookie-less authentication? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>Bob uses a web application in order to achieve something. And:</p>
<ul>
<li>His browser is on diet, therefore it does not support <strong>cookies</strong>. </li>
<li>The web application is a popular one, it deals with a lot of users at a given moment - it has to <em>scale</em> well. As long as keeping session would impose <strong>a limit to the number of simultaneous connections</strong>, and, of course, will bring a non-negligible <strong>performance penalty</strong>, we might like to have a session-less system :)</li>
</ul>
<p><strong>Some important notes:</strong> </p>
<ul>
<li>we do have <strong>transport security</strong> (<em>HTTPS</em> and its best friends);</li>
<li>behind the curtains, the web application delegates a lot of operations to <strong>external services</strong>, on current <strong>user's behalf</strong> (those systems do recognize Bob as one of their users) - this means that <strong>we have to forward them Bob's credentials</strong>.</li>
</ul>
<p>Now, how do we authenticate Bob (on each and every request)?
Which would be a reasonable way to implement such a thing?</p>
<ul>
<li>playing <em>tennis</em> with the credentials via <strong>HTML form hidden fields</strong>... the <em>ball</em> contains the credentials (<strong>username &amp; password</strong>) and the <em>two rackets</em> are the browser and the web application respectively. In other words, we may transport data back and forth via form fields instead of via cookies. At each web request, the browser posts the credentials. Though, in the case of a <strong>single-page application</strong>, this may look like playing <em>squash</em> against a rubber wall, instead of playing <em>tennis</em>, as the <em>web form</em> containing the credentials might be kept alive the entire lifetime of the <em>web page</em> (and the server will be configured not to offer the credentials back).</li>
<li>storing the username &amp; the password in the context of the page - JavaScript variables etc. Single-page required here, IMHO.</li>
<li>encrypted token - based authentication. In this case, the log-in action would result in the generation of an encrypted security token (username + password + something else). This token would be served back to the client and the upcoming requests will be accompanied by the token. Does this make sense? We already have HTTPS...</li>
<li>others...</li>
<li>last resort: do not do this, store credentials in the session! Session is good. With or without cookies.</li>
</ul>
<p>Does any web / security concern come into your mind, regarding any of the previously described ideas? For example,</p>
<ul>
<li><em>time-outing</em> - we may keep a <strong>timestamp</strong>, along with the credentials (time-stamp = the time Bob entered his credentials). E.g. when <strong>NOW - timestamp &gt; threshold</strong>, we might deny the request.</li>
<li><em>Cross-site scripting</em> protection - should not be different in any way, right?</li>
</ul>
<p>Thank you a lot for taking the time to reading this :)</p>
</div></text><author><a href="/users/1475331/user1475331">user1475331</a></author><comments><comment><text><span class="comment-copy">You could append a token to every URL. ASP.NET has a (legacy) mode to do that. This proves that it can work.</span></text><author><a class="comment-user" href="/users/122718/usr" title="131,495 reputation">usr</a></author></comment><comment><text><span class="comment-copy">Where is everybody? :)</span></text><author><a class="comment-user owner" href="/users/1475331/user1475331" title="1,341 reputation">user1475331</a></author></comment><comment><text><span class="comment-copy">I think you've got a pretty good idea of the options that are available. Trust your reasoning and decide yourself.</span></text><author><a class="comment-user" href="/users/122718/usr" title="131,495 reputation">usr</a></author></comment><comment><text><span class="comment-copy">is a plugin like silverlight of flash an option ?</span></text><author><a class="comment-user" href="/users/1103431/giu" title="914 reputation">Giu</a></author></comment><comment><text><span class="comment-copy">@usr not sure if it is a good idea as if an hacker get to your websever logs can steal your token and log in your system.</span></text><author><a class="comment-user" href="/users/379008/gibbok" title="25,213 reputation">GibboK</a></author></comment><comment><text><span class="comment-copy">@GibboK that is true. But it is a weak attack scenario because an attacker would need the logs <i>without</i> access to the server itself for this attack to be meaningful. Seems unlikely.</span></text><author><a class="comment-user" href="/users/122718/usr" title="131,495 reputation">usr</a></author></comment><comment><text><span class="comment-copy">@usr thanks for commenting. Accordingly to owasp passing sensitive data in the URL, possibly using query strings is not safe, it also depends on the web app architecture. If your app is on multiple tiers, an hacker could break in the webserver/backup system/reposiotry for log data, where he can steal tokens and access the system. <a href="https://www.owasp.org/index.php/The_Owasp_Code_Review_Top_9#Using_HTTP_GET_query_strings" rel="nofollow noreferrer">owasp.org/index.php/â€¦</a></span></text><author><a class="comment-user" href="/users/379008/gibbok" title="25,213 reputation">GibboK</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Ah, I love these questions - maintaining a session without a session.</p>
<p>I've seen multiple ways to do this during my stints during application assessments. One of the popular ways is the <em>playing tennis</em> way that you mentioned - sending the username and password in every request to authenticate the user. This, in my opinion, is unsafe, especially if the application isn't single page. It is also not scalable, especially if you want to add authorization to your app in addition to authentication in the future (although I guess you could build something based on logins too)</p>
<p>One popular, although not completely stateless mechanism (assuming you have JavaScript execution) is to embed the session cookie in the JavaScript. The security guy in me is screaming at this, but it could actually work - every request has a <code>X-Authentication-Token</code> header or something like that, and you map that to a database, file-store in memory, etc. on the backend to validate the user. This token can have a timeout of whatever time you specified, and if it times out, the user has to log in again. It's fairly scalable - if you store it in a database, its one SQL statement executed, and with the correct indexes, it should take very little time to execute, even with multiple simultaneous users. Load testing here would definitely help though. If I read the question correctly, this would be your encrypted token mechanism - although, I would strongly suggest that you use a cryptographically random token of say 32 characters, versus using a combination of username + password + whatever else - this way, it stays unpredictable, but you can still associate it with the user ID or some such thing.</p>
<p>Whichever you do end up using, ensure it is sent to you safely. HTTPS protects you across the wire, but it doesn't protect you if you leak the session token via the URL (or worse, credentials via the URL). I would recommend using a header, or if that's not feasible, sending the token via a POST request every time (this would mean a hidden form field on the user's browser.) The latter approach of using a POST request should use CSRF defenses, just in case, though I suspect using the token itself might be some sort of a CSRF defense.</p>
<p>Last, but not the least, make sure you have some mechanism in the backend to purge expired tokens. This has been the bane of many applications in the past - a rapidly growing database of authentication tokens which never seems to go away. If you need to support multiple user logins, make sure you either limit the number, or have a shorter time limit on each token. As I said before, load testing may be the answer to this.</p>
<p>There are some other security concerns that I can think of, but they are too broad to be addressed at this stage - if you keep all the use (and abuse) cases in mind, you should probably be able to do a fairly good implementation of this system.</p>
</div></text><author><a href="/users/1521291/karthik-rangarajan">Karthik Rangarajan</a></author><comments><comment><text><span class="comment-copy">Coudn't you do what the play framework does and send a signed cookie to the user? Then have that cookie sent back to the server for each subsequent request?</span></text><author><a class="comment-user" href="/users/1359765/j-will" title="1,127 reputation">j will</a></author></comment><comment><text><span class="comment-copy">&gt; His browser is on diet, therefore it does not support cookies.</span></text><author><a class="comment-user" href="/users/1521291/karthik-rangarajan" title="1,074 reputation">Karthik Rangarajan</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>About the log-in option - I think that usually you want to support sessions also for guests.</p>
<p>So, if you want to enforce login, the encrypted token option might be good. It might be good also for guest session somehow.
In another direction, I would combine between appending the token to the URL and the tennis option.</p>
<p>Notice that sending credentials only in the URL might be dangerous. For example, you might leak the token via the HTTP referer header or even by someone who just inspect your traffic or watch your computer.</p>
<p>Another thing, even if you could use cookies, I would recommend you to add random token or random verifer, to protect yourself from Cross Site Request Forgery (CSRF) attacks.</p>
</div></text><author><a href="/users/2782088/gari-bn">Gari BN</a></author><comments><comment><text><span class="comment-copy">A session is state stored on the server. The question asks for stateless authentication.</span></text><author><a class="comment-user" href="/users/4167/kwebble" title="1,914 reputation">Kwebble</a></author></comment></comments></answer></answers></post>