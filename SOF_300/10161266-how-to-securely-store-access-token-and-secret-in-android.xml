<?xml version="1.0" encoding="utf-8"?>
<post><title>security - How to securely store access token and secret in Android? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I am going to use oAuth to fetch mails and contacts from google. I don't want to ask the user each time to log in to obtain an access token and secret. From what I understood, I need to store them with my application either in a database or <code>SharedPreferences</code>. But I am a bit worried about security aspects with that. I read that you can encrypt and decrypt the tokens but it is easy for an attacker to just decompile your apk and classes and get the encryption key.<br/>
<strong>What's the best method to securely store these tokens in Android?</strong></p>
</div></text><author><a href="/users/2065587/mmbs">mmBs</a></author><comments><comment><text><span class="comment-copy">How do i store the consumer key and secret (hardconding them is not secured)? i need them to request the accesstoken and secret.. how do the other existing apps using oauth do it? hmm finally with oauth, you need to take care of much more security issues for me.... i need to keep the consumer token/secret securely and also the accesstoken and secret.... finally wouldn't it be more simple to just store the user's username/password encrypted?... in the end, isn't the latter better? I just still can't see how oauth is better...</span></text><author><a class="comment-user owner" href="/users/1334268/yeahman" title="877 reputation">yeahman</a></author></comment><comment><text><span class="comment-copy">can you tell me..which file stores the access token ?? I am new to android and i tried running sample Plus app.But i dont find this anywhere [GoogleAuthUtil.getToken() method.]</span></text><author><a class="comment-user" href="/users/2447909/abhishek-kaushik" title="412 reputation">Abhishek Kaushik</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Store them as shared preferences. Those are by default private, and other apps cannot access them. On a rooted devices, if the user explicitly allows access to some app that is trying to read them, the app might be able to use them, but you cannot protect against that. As for encryption, you have to either require the user to enter the decrypt passphrase every time (thus defeating the purpose of caching credentials), or save the key to a file, and you get the same problem. </p>
<p>There are a few benefits of storing tokens instead of the actual username password:</p>
<ul>
<li>Third party apps don't need to know the password and the user can be sure that they only send it to the original site (Facebook, Twitter, Gmail, etc.)</li>
<li>Even if someone steals a token, the don't get to see the password (which the user might be using on other sites too)</li>
<li>Tokens generally have a lifetime and expire after a certain time</li>
<li>Tokens can be revoked if you suspect they have been compromised</li>
</ul>
</div></text><author><a href="/users/242930/nikolay-elenkov">Nikolay Elenkov</a></author><comments><comment><text><span class="comment-copy">thx for the reply! but how can i know if my consumer key has been compromised? lol it's will be hard to tell..   ok about storing the access token and secret, ok i save them in sharedpreferences and encrypting them but how about consumer key and secret? I can't store them in sharedpreferences (I would need to explicitly write the consumer key and secret in the code to save it in sharedpreference in the first place).. don't know if you understand what i mean.</span></text><author><a class="comment-user owner" href="/users/1334268/yeahman" title="877 reputation">yeahman</a></author></comment><comment><text><span class="comment-copy">You have to either put the in the app in a (somewhat) obfuscated way, to they are not immediately visible after decompilation, or use your own authrorization proxy webapp that has the key and secret. Putting them in the app is obviously easier, and if think the risk of someone trying to crack your app is sufficiently low, take that approach. BTW, the points above are for the user password. If you find out your consumer key/secret have been compromised, you can revoke those too (that will, of course, break your app though).</span></text><author><a class="comment-user" href="/users/242930/nikolay-elenkov" title="43,762 reputation">Nikolay Elenkov</a></author></comment><comment><text><span class="comment-copy">ok thx .. i will go with the obfuscation way (can you recommend any good tool to do it?) ... having a proxy webapp is not very appealing as i would have to force my users to register to my site.. not very user-friendly adding an additional step in the whole chain...</span></text><author><a class="comment-user owner" href="/users/1334268/yeahman" title="877 reputation">yeahman</a></author></comment><comment><text><span class="comment-copy">@NikolayElenkov: You wrote 'As for encryption, you have to either require the user to enter the decrypt passphrase every time (thus defeating the purpose of caching credentials), or save the key to a file, and you get the same problem.'. What if crackers reverse your app to get insight how the encryption works? Your defense may be broken. Is it a best practice to store such information (token, encryption...) using native code?</span></text><author><a class="comment-user" href="/users/197896/anhldbk" title="1,761 reputation">anhldbk</a></author></comment><comment><text><span class="comment-copy">If app data is cleared, then the refresh token is lost, which is probably not what the user wanted.</span></text><author><a class="comment-user" href="/users/94363/rds" title="12,792 reputation">rds</a></author></comment><comment><text><span class="comment-copy">You can use tokens that need signature verification at the Backend too (like JWT) link : <a href="https://jwt.io/" rel="nofollow noreferrer">jwt.io</a> . Thus restricting attackers to create fake tokens.</span></text><author><a class="comment-user" href="/users/4111052/shikhar-bansal" title="674 reputation">shikhar bansal</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>You can store them in <a href="https://developer.android.com/reference/android/accounts/AccountManager.html" rel="nofollow noreferrer">AccountManager</a>. It's considered best practice according to these guys.</p>
<p><a href="https://i.stack.imgur.com/oT3jR.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/oT3jR.png"/></a></p>
<p>Here's the official definition:</p>
<blockquote>
<p>This class provides access to a centralized registry of the user's
  online accounts. The user enters credentials (username and password)
  once per account, granting applications access to online resources
  with "one-click" approval.</p>
</blockquote>
<p>For detailed guide on how to use AccountManager:</p>
<ul>
<li><a href="http://blog.udinic.com/2013/04/24/write-your-own-android-authenticator/" rel="nofollow noreferrer">Udi Cohen tutorial</a></li>
<li><a href="http://www.pilanites.com/android-account-manager/" rel="nofollow noreferrer">Pilanites blog</a></li>
<li><a href="https://www.youtube.com/watch?v=9fBcrzA-hWY" rel="nofollow noreferrer">Google IO presentation</a></li>
</ul>
<p>However, in the end AccountManager only stores your token as a plain text. So, I would suggest encrypting your secret before storing them in AccountManager. You can utilize various Encryption library like <a href="https://github.com/scottyab/AESCrypt-Android" rel="nofollow noreferrer">AESCrypt</a> or <a href="https://github.com/tozny/java-aes-crypto" rel="nofollow noreferrer">AESCrypto</a></p>
<p>Another option is to use <a href="https://facebook.github.io/conceal/" rel="nofollow noreferrer">Conceal library</a>. It's safe enough for Facebook and much easier to use than AccountManager. Here's a code snippet to save a secret file using Conceal.</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> cipherText </span><span class="pun">=</span><span class="pln"> crypto</span><span class="pun">.</span><span class="pln">encrypt</span><span class="pun">(</span><span class="pln">plainText</span><span class="pun">);</span><span class="pln">
</span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> plainText </span><span class="pun">=</span><span class="pln"> crypto</span><span class="pun">.</span><span class="pln">decrypt</span><span class="pun">(</span><span class="pln">cipherText</span><span class="pun">);</span></code></pre>
<p>Hope that's helps.</p>
</div></text><author><a href="/users/1760984/aldok">aldok</a></author><comments><comment><text><span class="comment-copy">Good tip that Conceal. Looks very easy to use. And for many use cases.</span></text><author><a class="comment-user" href="/users/638368/lagos" title="1,341 reputation">lagos</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Well you can secure you access token by fallowing two options.</p>
<ol>
<li>Use save your access token into android keystore that would not be reverse.</li>
<li>Use NDK function with some calculation that save your token and NDK with c++ code that is very hard to reverse </li>
</ol>
</div></text><author><a href="/users/2784634/m-noman">M.Noman</a></author><comments/></answer></answers></post>