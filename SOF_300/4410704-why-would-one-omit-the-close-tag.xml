<?xml version="1.0" encoding="utf-8"?>
<post><title>php - Why would one omit the close tag? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I keep reading it is poor practice to use the PHP close tag <code>?&gt;</code> at the end of the file. The header problem seems irrelevant in the following context (and this is the only good argument so far): </p>
<blockquote>
<p>Modern versions of PHP set the output_buffering flag in php.ini
  If output buffering is enabled, you can set HTTP headers and cookies after outputting html because returned code is not sent to the browser immediately.</p>
</blockquote>
<p>Every good practice book and wiki starts with this 'rule' but nobody offers good reasons.
<strong>Is there another good reason to skip the ending php tag?</strong></p>
</div></text><author><a href="/users/3560113/paracetamol">Paracetamol</a></author><comments><comment><text><span class="comment-copy">possible duplicate of [why in some scripts they omit the closing php tag ?&gt;  ](<a href="http://stackoverflow.com/questions/3219383/why-in-some-scripts-they-omit-the-closing-php-tag" title="why in some scripts they omit the closing php tag">stackoverflow.com/questions/3219383/…</a>)</span></text><author><a class="comment-user" href="/users/208809/gordon" title="228,088 reputation">Gordon</a></author></comment><comment><text><span class="comment-copy">@Christian - You mean that using the output_buffering is lazy, or leaving off the <code>?&gt;</code> is lazy?</span></text><author><a class="comment-user" href="/users/217588/el-yobo" title="10,552 reputation">El Yobo</a></author></comment><comment><text><span class="comment-copy">@Gordon - I don't think it's a dup, the OP knows the ostensible reasons, just wants to know if it is completely resolved with output buffering.</span></text><author><a class="comment-user" href="/users/217588/el-yobo" title="10,552 reputation">El Yobo</a></author></comment><comment><text><span class="comment-copy">wouldn't be the first time dated "standard practice" is still around, I still bitch about tab vs space. (Tabs are better, spaces have nothing but idiocy behind them)</span></text><author><a class="comment-user" href="/users/62202/louis" title="2,885 reputation">Louis</a></author></comment><comment><text><span class="comment-copy"><a href="http://php.net/manual/en/language.basic-syntax.phptags.php" rel="nofollow noreferrer">php.net/manual/en/language.basic-syntax.phptags.php</a> :)</span></text><author><a class="comment-user" href="/users/1024298/abuduba" title="3,145 reputation">abuduba</a></author></comment><comment><text><span class="comment-copy">Real reason: the closing tag is so 2004.</span></text><author><a class="comment-user" href="/users/358813/tacone" title="7,529 reputation">tacone</a></author></comment><comment><text><span class="comment-copy">Spaces suck. Why type 4 characters when you could type 1?</span></text><author><a class="comment-user" href="/users/477628/dtbarne" title="5,669 reputation">dtbarne</a></author></comment><comment><text><span class="comment-copy"><i>"The header problem seems irrelevant"</i> is a narrow-minded way of looking at this. Just because the default <code>output_buffering</code> means that accidentally outputting whitespace probably won't stop you from setting headers, that doesn't mean that accidentally outputting whitespace at the beginning of your response is not a bug. What if your response is <code>text/plain</code>, for example, and going to be rendered literally to the user? JSON and HTML are forgiving of leading whitespace, but not everything you might spit out from a webserver is.</span></text><author><a class="comment-user" href="/users/1709587/mark-amery" title="32,062 reputation">Mark Amery</a></author></comment><comment><text><span class="comment-copy">A better question would be: Why would one include the close tag? Code is evil. The best code is no code at all. If a problem can be eliminated instead of solved with code, this is better than having code. In this case, there is no problem needing to be solved. The code works fine without the close tag.</span></text><author><a class="comment-user" href="/users/172274/still-dreaming-1" title="2,473 reputation">still_dreaming_1</a></author></comment><comment><text><span class="comment-copy">I prefer spaces because they are consistent across every IDE you may find : simple notepads, Visual Studios, Eclipse, Web Text Editors, Textarea, HTML view, ... in every OS you may find. Tabs can behave very differently from one to the other, sizing from 2 spaces to 8 spaces, transformed to nothing (HTML), ...</span></text><author><a class="comment-user" href="/users/606648/sgissinger" title="433 reputation">sgissinger</a></author></comment><comment><text><span class="comment-copy">Oh god, this isn't the place for the tabs vs spaces holy war, lol :)</span></text><author><a class="comment-user" href="/users/3470632/kevin-wheeler" title="532 reputation">Kevin Wheeler</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>While I can't remember any other reason, sending headers earlier than the normal course may have far reaching consequences. Below are just a few of them that happened to come to my mind at the moment:</p>
<ol>
<li><p>While current PHP releases may have output buffering on, the actual <strong>production servers</strong> you will be deploying your code on are far more important than any development or testing machines. And they do not always tend to follow latest PHP trends immediately.</p></li>
<li><p>You may have headaches over inexplicable <strong>functionality loss</strong>. Say, you are implementing some kind payment gateway, and redirect user to a specific URL after successful confirmation by the payment processor. If some kind of PHP error, even a warning, or an excess line ending happens, the payment may remain unprocessed and the user may still seem unbilled. This is also one of the reasons why needless redirection is evil and if redirection is to be used, it must be used with caution.</p></li>
<li><p>You may get "Page loading canceled" type of errors in Internet Explorer, even in the most recent versions. This is because an <strong>AJAX</strong> response/json include contains something that it shouldn't contain, because of the excess line endings in some PHP files, just as I've encountered a few days ago.</p></li>
<li><p>If you have some <strong>file downloads</strong> in your app, they can break too, because of this. And you may not notice it, even after years, since the specific breaking habit of a download depends on the server, the browser, the type and content of the file (and possibly some other factors I don't want to bore you with).</p></li>
<li><p>Finally, many PHP frameworks including <a href="http://symfony.com/doc/current/contributing/code/standards.html" rel="noreferrer">Symfony</a>, <a href="http://framework.zend.com/manual/1.10/en/coding-standard.php-file-formatting.html" rel="noreferrer">Zend</a> and Laravel (there is no mention of this in the <a href="https://github.com/laravel/framework/blob/master/CONTRIBUTING.md#coding-guidelines" rel="noreferrer">coding guidelines</a> but it follows the suit) and the <a href="http://www.php-fig.org/psr/psr-2/" rel="noreferrer">PSR-2 standard</a> (item 2.2) require omission of the closing tag. PHP manual itself (<a href="http://php.net/basic-syntax.instruction-separation" rel="noreferrer">1</a>,<a href="http://php.net/manual/en/language.basic-syntax.phptags.php" rel="noreferrer">2</a>), <a href="http://make.wordpress.org/core/handbook/coding-standards/php/#remove-trailing-spaces" rel="noreferrer">Wordpress</a>, <a href="https://www.drupal.org/coding-standards#phptags" rel="noreferrer">Drupal</a> and many other PHP software I guess, advise to do so. If you simply make a habit of following the standard (and setup <a href="https://github.com/fabpot/PHP-CS-Fixer" rel="noreferrer">PHP-CS-Fixer</a> for your code) you can forget the issue. Otherwise you will always need to keep the issue in your mind.</p></li>
</ol>
<p>Bonus: a few gotchas (actually currently one) related to these 2 characters:</p>
<ol>
<li>Even some well-known libraries may contain excess line endings after <code>?&gt;</code>. An example is Smarty, even the most recent versions of both 2.* and 3.* branch have this. So, as always, <strong>watch for third party code</strong>. Bonus in bonus: A regex for deleting needless PHP endings: replace <code>(\s*\?&gt;\s*)$</code> with empty text in all files that contain PHP code.</li>
</ol>
</div></text><author><a href="/users/372654/halil-%c3%96zg%c3%bcr">Halil Özgür</a></author><comments><comment><text><span class="comment-copy">+1 for the regex replace, great tip.  ;-)</span></text><author><a class="comment-user" href="/users/195835/simon-east" title="22,528 reputation">Simon East</a></author></comment><comment><text><span class="comment-copy">Glad it helped :) By the way, a note for the future: the regex should run in multi-line mode.</span></text><author><a class="comment-user" href="/users/372654/halil-%c3%96zg%c3%bcr" title="10,650 reputation">Halil Özgür</a></author></comment><comment><text><span class="comment-copy">Slightly different regex I used to find the tags with Netbeans IDE, for Find &amp; Replace dialog: <code>\?&gt;(?s:.){0,10}\Z</code>   Short explanation: <a href="http://changeset.hr/blog/miscellaneous/catch-near-eof-with-regex" rel="nofollow noreferrer">changeset.hr/blog/miscellaneous/catch-near-eof-with-regex</a></span></text><author><a class="comment-user" href="/users/236195/frnhr" title="5,432 reputation">frnhr</a></author></comment><comment><text><span class="comment-copy">@Cek, it catches any text -including code- that is 10 characters or less after <code>?&gt;</code>: e.g. it matches -and would delete- <code>?&gt; Hello</code> in <code>&lt;?php echo "test"; ?&gt; Hello</code>. We'd want to clear only close tags.</span></text><author><a class="comment-user" href="/users/372654/halil-%c3%96zg%c3%bcr" title="10,650 reputation">Halil Özgür</a></author></comment><comment><text><span class="comment-copy">@HalilÖzgür true, that's why it's a <i>search</i>, not a <i>search&amp;replace</i> regex :)</span></text><author><a class="comment-user" href="/users/236195/frnhr" title="5,432 reputation">frnhr</a></author></comment><comment><text><span class="comment-copy">Point 2 is nonsense, it has <i>nothing</i> to do with security. The redirection is performed by the browser, so any browser can avoid redirecting. If you download the same page with a command line interface (type GET /page.html..) you will see whatever is after the header. If your page sends wrong HTML after the header "Location:" then you have security problems far beyond the ?&gt; closing tag. Not using exit() <i>is</i> the flaw. If your redirect succeeds and you think the browser will stop loading your HTML, you have a security flaw,  even if you omitted the ?&gt;</span></text><author><a class="comment-user" href="/users/1856861/francescomm" title="1,922 reputation">FrancescoMM</a></author></comment><comment><text><span class="comment-copy">@FrancescoMM, very true. However, if there is an error and the redirect is unsuccessful, the vulnerability will be announced to every public visitor :) This is basically security in levels :)</span></text><author><a class="comment-user" href="/users/372654/halil-%c3%96zg%c3%bcr" title="10,650 reputation">Halil Özgür</a></author></comment><comment><text><span class="comment-copy">@HalilÖzgür The vulnerability will be announced to every public visitor, including you :) So there is also a higher chance that you will see the problem and fix the insecurity. So <b>if</b> you are lucky to forget that extra white space (1 on a zillion chance), it actually is <b>safer</b>. It is much unsafer to have a hidden unsolved security problem hiding around!</span></text><author><a class="comment-user" href="/users/1856861/francescomm" title="1,922 reputation">FrancescoMM</a></author></comment><comment><text><span class="comment-copy">@FrancescoMM, sometimes the conditions that lead to problem change from time to time, and the visitor sees the "secured" content, while you don't see it since the problem doesn't happen in your machine :) So I prefer to err on the -slightly more- secure side of preventing to leak such things to the end user.  You are right though, one should never rely on the success of a redirect :) But say, you are working on existing code and it contains this kind of redirects. IMHO it's better not to leak those redirects until they get fixed (e.g. by removing end tags, using output buffering etc).</span></text><author><a class="comment-user" href="/users/372654/halil-%c3%96zg%c3%bcr" title="10,650 reputation">Halil Özgür</a></author></comment><comment><text><span class="comment-copy">Worse, apache 2.4.6 with PHP 5.4 actually seg faults on our production machines when there's empty space behind the closing tag. I just wasted hours until I finally narrowed down the bug with strace. Here is the error that apache throws: <code>[core:notice] [pid 7842] AH00052: child pid 10218 exit signal Segmentation fault (11)</code>.</span></text><author><a class="comment-user" href="/users/47680/artem-russakovskii" title="11,367 reputation">Artem Russakovskii</a></author></comment><comment><text><span class="comment-copy">@HalilÖzgür you should remove whole point 2. Such redirection is not a level of security, but anti-security. It's not a typical user who will accidentaly exploit this, but haxor, who will be actually ATTRACTED by just observing redirection takes place.</span></text><author><a class="comment-user" href="/users/205955/doc" title="4,321 reputation">doc</a></author></comment><comment><text><span class="comment-copy">OK, removed 2. I agree it didn't make sense after all, but it took some time from my side to remove it :)</span></text><author><a class="comment-user" href="/users/372654/halil-%c3%96zg%c3%bcr" title="10,650 reputation">Halil Özgür</a></author></comment><comment><text><span class="comment-copy">Most of this answer is lacking context. Only a small amount of it is provided. It makes it difficult to understand what these points have to do with the closing PHP tag? I am not suggesting the are invalid points, just that the lack of more contextual explanation makes it difficult to understand. It seems like it needs to start out with some technical explanation that helps the points to make more sense.</span></text><author><a class="comment-user" href="/users/172274/still-dreaming-1" title="2,473 reputation">still_dreaming_1</a></author></comment><comment><text><span class="comment-copy">@INTPnerd, could you provide some examples where this lacks context/technical explanation and how can it be improved? I'd really like to improve it, thanks for your input.</span></text><author><a class="comment-user" href="/users/372654/halil-%c3%96zg%c3%bcr" title="10,650 reputation">Halil Özgür</a></author></comment><comment><text><span class="comment-copy">It seems my brain was not working before, it seems to be working now. Anyway it seems you did preface the points with the idea that sending headers earlier than the normal course could be bad. So you seem to imply headers could get sent as a result of using the php closing tag. I just wish you had explained more about how the 2 are related. I have a pretty good guess, but I would like more details. Or perhaps the problem is that I don't really understand headers. What types of headers are you referring to? HTTP headers, HTML headers?</span></text><author><a class="comment-user" href="/users/172274/still-dreaming-1" title="2,473 reputation">still_dreaming_1</a></author></comment><comment><text><span class="comment-copy">@INTPnerd Oh, the question and most of the answers refer to the header thing, so I assumed anyone reading this thread would have an idea about it. The underlying issue and the actual cause of the problems in many of the answers here is unneeded whitespace after <code>?&gt;</code>, which (just like any output) causes the headers to be sent as soon as it's output. There are no "HTML headers" (other than the unrelated HTML5 <code>&lt;header&gt;</code> tag).</span></text><author><a class="comment-user" href="/users/372654/halil-%c3%96zg%c3%bcr" title="10,650 reputation">Halil Özgür</a></author></comment><comment><text><span class="comment-copy">This should work, regardless of global modifier: \s*\?&gt;\s*\Z  Notice the '\Z' at the end.  It ensures that you're capturing a php closing tag if and only if it's the last non-whitespace at the very end of the file.</span></text><author><a class="comment-user" href="/users/3257871/erutan409" title="365 reputation">Erutan409</a></author></comment><comment><text><span class="comment-copy">@Erutan409 definitely, if that's allowed in your editor/tool of choice.</span></text><author><a class="comment-user" href="/users/372654/halil-%c3%96zg%c3%bcr" title="10,650 reputation">Halil Özgür</a></author></comment><comment><text><span class="comment-copy">Why doesn't PHP just change things so that you don't need php tags at all. It's an arcane legacy thing anyways. Do people still mix html and php together? Nasty sandwich.</span></text><author><a class="comment-user" href="/users/1934710/askdesigners" title="194 reputation">Askdesigners</a></author></comment><comment><text><span class="comment-copy">@Askdesigners an idea for the future versions :)</span></text><author><a class="comment-user" href="/users/372654/halil-%c3%96zg%c3%bcr" title="10,650 reputation">Halil Özgür</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The reason you should leave off the php closing tag (<code>?&gt;</code>) is so that the programmer doesn't accidentally send extra newline chars.</p>
<p>The reason you shouldn't leave off the php closing tag is because it causes an imbalance in the php tags and any programmer with half a mind can remember to not add extra white-space.</p>
<p>So for your question:</p>
<blockquote>
<p>Is there another good reason to skip the ending php tag?</p>
</blockquote>
<p>No, there isn't <em>another</em> good reason to skip the ending php tags.</p>
<p>I will finish with some arguments for not bothering with the closing tag:</p>
<ol>
<li><p>People are always able to make mistakes, no matter how smart they are.
Adhering to a practice that reduces the number of possible mistakes is (IMHO) a good idea.</p></li>
<li><p>PHP is not XML. PHP doesn't need to adhere to XMLs strict standards to be well written and functional. If a missing closing tag annoys you, you're allowed to use a closing tag, it's not a set-in-stone rule one way or the other.</p></li>
</ol>
</div></text><author><a href="/users/497418/zzzzbov">zzzzBov</a></author><comments><comment><text><span class="comment-copy">&gt; <i>any programmer with half a mind can remember to not add extra white-space.</i> Even better, any developer with 1/2 a mind can add a pre-commit hook to SVC so that any trailing spaces are automatically deleted: no fuss, no muss.</span></text><author><a class="comment-user" href="/users/41688/bryanh" title="3,640 reputation">BryanH</a></author></comment><comment><text><span class="comment-copy">@BryanH, until you have a file where trailing whitespace is absolutely required, but that's <i>very</i> rare.</span></text><author><a class="comment-user" href="/users/497418/zzzzbov" title="107,263 reputation">zzzzBov</a></author></comment><comment><text><span class="comment-copy">You're right, of course. Check out <a href="http://stackoverflow.com/a/4465825/41688">mario's answer</a> for some very cool alternatives.</span></text><author><a class="comment-user" href="/users/41688/bryanh" title="3,640 reputation">BryanH</a></author></comment><comment><text><span class="comment-copy">&gt;"The reason you shouldn't leave off the php closing tag is because it causes an imbalance in the php tags and any programmer with half a mind can remember to not add extra white-space."  On Windows, maybe. On UNIX-like systems, all files end with \n and programs add it for you.  <b>EDIT:</b> Aha! As noted below by @mario, PHP eats that, actually.</span></text><author><a class="comment-user" href="/users/736162/andrea" title="9,902 reputation">Andrea</a></author></comment><comment><text><span class="comment-copy">Even better, any programmer with half of half of half of a mind can neglect to include the closing PHP tag. Also, the really good developers try hard not to mix PHP and other code in the same file, so both the starting and closing PHP tags are redundant, except that PHP is so stupid as to require the opening PHP tag. It should only be required if you use the closing tag, and then need to start PHP code again.</span></text><author><a class="comment-user" href="/users/172274/still-dreaming-1" title="2,473 reputation">still_dreaming_1</a></author></comment><comment><text><span class="comment-copy">Even more significant is that even programmers with double of a triple of a mind is human and forgets things somethings.</span></text><author><a class="comment-user" href="/users/76722/sebastian-mach" title="26,631 reputation">Sebastian Mach</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>It's a <strong>newbie coding style recommendation</strong>, well-intentioned, and advised <a href="http://php.net/basic-syntax.phptags" rel="noreferrer">by the manual</a>.</p>
<ul>
<li><p>Eschewing <code>?&gt;</code> however solves just <strong>a trickle</strong> of the common <a href="http://stackoverflow.com/questions/8028957/headers-already-sent-by-php">headers already sent causes</a> (raw output, <a href="https://en.wikipedia.org/wiki/Byte_order_mark" rel="noreferrer">BOM</a>, notices, etc.) and their follow-up problems. </p></li>
<li><p>PHP actually contains some magic to eat up single linebreaks after the <code>?&gt;</code> closing token. Albeit that has <a href="http://brian.moonspot.net/php-history-newline-closing-tag" rel="noreferrer">historic issues</a>, and leaves newcomers still susceptible to flaky editors and unawarely shuffling in other whitespace after <code>?&gt;</code>.</p></li>
<li><p>Stylistically some developers prefer to view <code>&lt;?php</code> and <code>?&gt;</code> as SGML tags / XML processing instructions, implying the balance consistency of a trailing close token.     (Which btw, <strong>is useful</strong> for dependency-conjoining class includes to supplant inefficient file-by-file autoloading.)</p></li>
<li><p>Somewhat uncommonly the opening <code>&lt;?php</code> is characterized as PHPs <em>shebang</em> (and fully feasible per <a href="http://en.wikipedia.org/wiki/Binfmt_misc" rel="noreferrer">binfmt_misc</a>), thereby validating the redundancy of a corresponding close tag.</p></li>
<li><p>There's an obvious advise discrepancy between <a href="http://pear.php.net/manual/en/standards.file.php" rel="noreferrer">classic PHP syntax guides</a> mandating <code>?&gt;\n</code> and the more <a href="http://www.php-fig.org/psr/psr-2/" rel="noreferrer">recent ones (PSR-2)</a> agreeing on omission.<br/>
(For the record: Zend Framework postulating one over the other does not imply its inherent superiority. It's a misconception that experts were drawn to / target audience of unwieldy APIs).</p></li>
<li><p><a href="https://en.wikipedia.org/wiki/Software_Configuration_Management" rel="noreferrer">SCMs</a> and modern IDEs <a href="https://www.jetbrains.com/phpstorm/webhelp/handling-lf-and-crlf-line-endings.html" rel="noreferrer">provide builtin solutions</a> mostly alleviating close tag caretaking.</p></li>
</ul>
<p>Discouraging any use of the <code>?&gt;</code> close tag merely delays explaining basic PHP processing behaviour and language semantics to eschew infrequent issues. It is <em>practical</em> still for collaborative software development due to proficiency variations in participants.</p>
<h3>Close tag variations</h3>
<ul>
<li><p>The <strong>regular</strong> <kbd>?</kbd><kbd>&gt;</kbd> close tag is also known as <a href="http://php.net/tokens#%7ET_CLOSE_TAG" rel="noreferrer"><code>T_CLOSE_TAG</code></a>, or thus "close token".</p></li>
<li><p>It comprises a few more incarnations, because of PHPs magic <strong>newline eating</strong>:</p>
<p><kbd>?</kbd><kbd>&gt;</kbd><kbd><strong>\n</strong></kbd>   (Unix linefeed)</p>
<p><kbd>?</kbd><kbd>&gt;</kbd><kbd><strong>\r</strong></kbd>   (Carriage return, classic MACs)</p>
<p><kbd>?</kbd><kbd>&gt;</kbd><kbd><strong>\r</strong></kbd><kbd><strong>\n</strong></kbd>   (CR/LF, on DOS/Win)</p>
<p>PHP doesn't support the Unicode combo linebreak <kbd><a href="http://en.wikipedia.org/wiki/Newline" rel="noreferrer">NEL</a></kbd> (U+0085) however.</p>
<p>Early PHP versions had IIRC compile-ins limiting platform-agnosticism somewhat (FI even just used <code>&gt;</code> as close marker), which is the likely historic origin of the close-tag-avoidance.</p></li>
<li><p>Often overlooked, but until <a href="https://wiki.php.net/rfc/remove_alternative_php_tags" rel="noreferrer">PHP7 removes them</a>, the  regular <kbd><code>&lt;?php</code></kbd> opening token can be <em>validly</em> paired with the rarely used <kbd><code>&lt;/script&gt;</code></kbd> as <strong>odd closing token</strong>.</p></li>
<li><p>The "<strong>hard close tag</strong>" isn't even one -- just made that term up for analogy. Conceptionally and usage-wise <a href="http://php.net/halt_compiler" rel="noreferrer"><code>__halt_compiler</code></a> should however be recognized as close token.</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">__HALT_COMPILER</span><span class="pun">();</span><span class="pln">
</span><span class="pun">?&gt;</span></code></pre>
<p>Which basically has the tokenizer discard any code or plain HTML sections thereafter. In particular PHAR stubs make use of that, or its redundant combination with <code>?&gt;</code> as depicted.</p></li>
<li><p>Likewise does a <strong>void <code>return;</code></strong> infrequently substitute in include scripts, rendering any <code>?&gt;</code> with trailing whitespace noneffective.</p></li>
<li><p>Then there are all kinds of <strong>soft / faux</strong> close tag variations; lesser known and seldomly used, but usually per <em>commented-out</em> tokens:</p>
<ul>
<li><p>Simple spacing <kbd><code>// ? &gt;</code></kbd> to evade detection by PHPs tokenizer.</p></li>
<li><p>Or fancy Unicode substitutes <kbd><code>// ﹖﹥</code></kbd> (U+FE56 SMALL QUESTION MARK, U+FE65 SMALL ANGLE BRACKET) which a regexp can grasp.</p></li>
</ul>
<p>Both <em>mean nothing to PHP</em>, but can have practical uses for PHP-unaware or semi-aware external toolkits. Again <code>cat</code>-joined scripts come to mind, with resulting <code>// ? &gt;  &lt;?php</code> concatenations that inline-retain the former file sectioning.</p></li>
</ul>
<p>So there are context-dependent but practical alternatives to an imperative close tag omission.</p>
<p>Manual babysitting of <code>?&gt;</code> close tags is not very contemporary either way. There always have been automation tools for that (even if just sed/awk or regex-oneliners). In particular:</p>
<blockquote>
<p><strong>phptags tag tidier</strong><br/>
<img height="32" src="https://i.stack.imgur.com/wnAS9.gif" width="48"/><br/>
<a href="https://fossil.include-once.org/phptags/" rel="noreferrer">https://fossil.include-once.org/phptags/</a> </p>
</blockquote>
<p>Which could generally be used to <code>--unclose</code> php tags for third-party code, or rather just fix any (and all) actual whitespace/BOM issues:</p>
<ul>
<li><code>phptags --warn --whitespace *.php</code></li>
</ul>
<p>It also handles <code>--long</code> tag conversion etc. for runtime/configuration compatibility.</p>
</div></text><author><a href="/users/345031/mario">mario</a></author><comments><comment><text><span class="comment-copy">Note to self: blunt phrasing attracts anonymous downvotes.</span></text><author><a class="comment-user" href="/users/345031/mario" title="110,445 reputation">mario</a></author></comment><comment><text><span class="comment-copy">Yes, blunt AND provocative phrasing attract downvotes. From what I've read over time, leaving out closing token has absolutely no downsides as long as you don't work with software that can't handle that. Unless you can actually prove that omitting closing tokens is bad and a very noob thing to do, my downvote stays ;)</span></text><author><a class="comment-user" href="/users/365488/pichan" title="1,115 reputation">Pichan</a></author></comment><comment><text><span class="comment-copy">@Pichan: I'll allow it. But I presume you haven't quite understood what's being told here. Eschewing and avoiding are two different things. And problems half solved are the result of snake oil advise.</span></text><author><a class="comment-user" href="/users/345031/mario" title="110,445 reputation">mario</a></author></comment><comment><text><span class="comment-copy">@mario I kind of see your point. Still, I've seen both newbies and pros omit the token and probably the only ones who have pointed out the missing token as a mistake have been of the noob group. Your answer is great for newbies who havent heard of this and mentioning "newbies use this" might really steer them away since who wants to be a noob. That said, I've yet to see any actual reason to not omit the ending token if you know what you're doing. Personally I omit it for aesthetics and habit from working with other people who aren't so pedantic about their file endings.</span></text><author><a class="comment-user" href="/users/365488/pichan" title="1,115 reputation">Pichan</a></author></comment><comment><text><span class="comment-copy">@mario: <b>It's a newbie coding style recommendation</b>. I disagree. The entire Zend Framework omits close tags. I think that's a very personal choice, I really prefer to leave my &lt;?php opened and I don't feel a newbie :)</span></text><author><a class="comment-user" href="/users/1420669/daniele-brugnara" title="1,751 reputation">Daniele Brugnara</a></author></comment><comment><text><span class="comment-copy">What about HTML? Is it then needed? For exammple <code>&lt;?php if($var): ?&gt;Hello World&lt;?php endif; ?&gt;</code> ??? I am genuinely curious as it isn't specifically mentioned.</span></text><author><a class="comment-user" href="/users/1510485/wasasquatch" title="170 reputation">WASasquatch</a></author></comment><comment><text><span class="comment-copy">@WASasquatch Yes. If you're switching between HTML and PHP mode, then you'll need close tokens in any case. (Not really relevant to the original question here.)</span></text><author><a class="comment-user" href="/users/345031/mario" title="110,445 reputation">mario</a></author></comment><comment><text><span class="comment-copy">@mario <b>It's a newbie coding style recommendation</b>, I would like to downvote if i could do on this community. Completely <b>based on your opinion</b> and none proof about this.</span></text><author><a class="comment-user" href="/users/5576355/renan-cavalieri" title="111 reputation">Renan Cavalieri</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>It isn't a tag…</p>
<p>But if you have it, you risk having white space after it. </p>
<p>If you then use it as an include at the top of a document, you could end up inserting white space (i.e. content) before you attempt to send HTTP headers … which isn't allowed.</p>
</div></text><author><a href="/users/19068/quentin">Quentin</a></author><comments><comment><text><span class="comment-copy">If it's not a tag what is it ?</span></text><author><a class="comment-user owner" href="/users/357314/danidacar" title="7,626 reputation">danidacar</a></author></comment><comment><text><span class="comment-copy">Can you please provide an example ? Maybe my php config is whack , but I can't reproduce the problem.</span></text><author><a class="comment-user owner" href="/users/357314/danidacar" title="7,626 reputation">danidacar</a></author></comment><comment><text><span class="comment-copy">@danip -- file1.php: <code>&lt;?php $i = 1; include 'file2.php'; ?&gt;[space][space][space]</code> -- file2.php: <code>&lt;?php header('Location: http://www.google.com'); ?&gt;</code></span></text><author><a class="comment-user" href="/users/107277/matt-huggins" title="31,117 reputation">Matt Huggins</a></author></comment><comment><text><span class="comment-copy">Matt Huggins - did you test that ? It's actually working..</span></text><author><a class="comment-user owner" href="/users/357314/danidacar" title="7,626 reputation">danidacar</a></author></comment><comment><text><span class="comment-copy">file1.php: <code>&lt;?php $i = 1; ?&gt;       </code> then file2.php: <code>&lt;?php include 'file1.php'; header('Location: http://www.google.com');?&gt;</code></span></text><author><a class="comment-user" href="/users/19068/quentin" title="529,013 reputation">Quentin</a></author></comment><comment><text><span class="comment-copy">I believe the header example is an old php problem solved now by the php config.</span></text><author><a class="comment-user owner" href="/users/357314/danidacar" title="7,626 reputation">danidacar</a></author></comment><comment><text><span class="comment-copy">There are downsides to output buffering as well; it uses more memory on the server (as all output has to be stored in RAM until it's output; without buffering it just goes straight away).  It's also ever so slightly slower.  Neither of these will be issues in most cases, but I'm lazy anyway, so why not just leave the closing tag off?  I use <code>phpcs</code> to ensure that the closing tag is left of every single one of my files and then I don't worry about output buffering :)</span></text><author><a class="comment-user" href="/users/217588/el-yobo" title="10,552 reputation">El Yobo</a></author></comment><comment><text><span class="comment-copy">Also, you still will have the extra white space, even if output buffering is enabled; it just won't screw up your headers as well.</span></text><author><a class="comment-user" href="/users/217588/el-yobo" title="10,552 reputation">El Yobo</a></author></comment><comment><text><span class="comment-copy">El Yobo, output buffering is still required for stuff like compression. It also allows the server to actually write a content-length header for dynamic content.</span></text><author><a class="comment-user" href="/users/314056/christian" title="18,198 reputation">Christian</a></author></comment><comment><text><span class="comment-copy">@danip: If you have set the output_buffer flag in the php configuration file, you could not reproduce this problem.</span></text><author><a class="comment-user" href="/users/193251/jichao" title="11,514 reputation">Jichao</a></author></comment><comment><text><span class="comment-copy">You may feel this absurdly pedantic, but -1 for <i>"it isn't a tag"</i>. It's not clear what you mean by this, and PHP doesn't agree with you - <a href="http://php.net/tokens" rel="nofollow noreferrer">they call it the <code>T_CLOSE_TAG</code></a>.</span></text><author><a class="comment-user" href="/users/1709587/mark-amery" title="32,062 reputation">Mark Amery</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>It's pretty useful not to let the closing <code>?&gt;</code> in.</p>
<p>The file stays valid to PHP (not a syntax error) and as @David Dorward said it allows to avoid having white space / break-line (anything that can send a header to the browser) after the <code>?&gt;</code>.</p>
<p>For example,</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pun">&lt;?</span><span class="pln">
    header</span><span class="pun">(</span><span class="str">"Content-type: image/png"</span><span class="pun">);</span><span class="pln">
    $img </span><span class="pun">=</span><span class="pln"> imagecreatetruecolor </span><span class="pun">(</span><span class="pln"> </span><span class="lit">10</span><span class="pun">,</span><span class="pln"> </span><span class="lit">10</span><span class="pun">);</span><span class="pln">
    imagepng </span><span class="pun">(</span><span class="pln"> $img</span><span class="pun">);</span><span class="pln">
</span><span class="pun">?&gt;</span><span class="pln">
[space here]
[break line here]</span></code></pre>
<p>won't be valid.</p>
<p>But </p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pun">&lt;?</span><span class="pln">
    header</span><span class="pun">(</span><span class="str">"Content-type: image/png"</span><span class="pun">);</span><span class="pln">
    $img </span><span class="pun">=</span><span class="pln"> imagecreatetruecolor </span><span class="pun">(</span><span class="pln"> </span><span class="lit">10</span><span class="pun">,</span><span class="pln"> </span><span class="lit">10</span><span class="pln"> </span><span class="pun">);</span><span class="pln">
    imagepng </span><span class="pun">(</span><span class="pln"> $img </span><span class="pun">);</span></code></pre>
<p>will.</p>
<p>For once, you must be lazy to be <em>secure</em>.</p>
</div></text><author><a href="/users/460368/shikiryu">Shikiryu</a></author><comments><comment><text><span class="comment-copy">How does that make you secure? It's just a lazy way to fix bad code...</span></text><author><a class="comment-user" href="/users/314056/christian" title="18,198 reputation">Christian</a></author></comment><comment><text><span class="comment-copy">That's why I put secure in italic. It prevents you from errors that may cost you a lot of time for a unwanted space after the <code>?&gt;</code>. <i>secure</i> may not be the good word here. Anyway, it doesn't <b>fix</b> anything (it's not bad code to me to prevent things, an <code>echo</code> here would have been a bad code) <b>but/and</b> it's still valid. Prove me wrong on this.</span></text><author><a class="comment-user" href="/users/460368/shikiryu" title="8,467 reputation">Shikiryu</a></author></comment><comment><text><span class="comment-copy">Thanks downvoter with no comment</span></text><author><a class="comment-user" href="/users/460368/shikiryu" title="8,467 reputation">Shikiryu</a></author></comment><comment><text><span class="comment-copy">I didn't downvote you, btw. But my point is compatible with yours. It doesn't fix anything. I never said it's not valid, so I don't need to prove anything.</span></text><author><a class="comment-user" href="/users/314056/christian" title="18,198 reputation">Christian</a></author></comment><comment><text><span class="comment-copy">Chouchenos, I bet you meant safe, rather than secure. IMHO a neg for that was too much. Brought you back to square one. ;-) You weren't saying the wrong thing after all. Even PHP development guidelines encourage you to do that. It's in fact much better to rely on closing tag omission, rather than output buffering, for example.  The latter would be like setting display_errors to off. Pure Cheating. And a good chance that your app wouldn't be portable. I really think that, as a rule, it's better not to rely on output buffering at all.</span></text><author><a class="comment-user" href="/users/303666/maraspin" title="1,895 reputation">maraspin</a></author></comment><comment><text><span class="comment-copy">With this one, now I have several reasons to avoid the closing tag!</span></text><author><a class="comment-user" href="/users/320594/jaime-hablutzel" title="3,467 reputation">Jaime Hablutzel</a></author></comment><comment><text><span class="comment-copy">I don't want to question people that like putting <code>?&gt;</code> at the end of a php only file. but have you ever had the need to debug some error caused by trailing spaces? Also not all servers are configured the same way especially when you move to another host, catching that errors is very time consuming. If you want put <code>?&gt;</code> just do it, if you also add some trailing space and your team need to debug that be ready to blames on git ^^</span></text><author><a class="comment-user" href="/users/1829943/gamedeveloper" title="4,062 reputation">GameDeveloper</a></author></comment><comment><text><span class="comment-copy">@Christian What do you mean with "bad code"?</span></text><author><a class="comment-user" href="/users/5576355/renan-cavalieri" title="111 reputation">Renan Cavalieri</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Well, there are two ways of looking at it.  </p>
<ol>
<li>PHP code is nothing more than a set of <a href="http://www.w3.org/TR/REC-xml/#sec-pi" rel="nofollow noreferrer">XML processing instructions</a>, and therefore any file with a <code>.php</code> extension is nothing more than an XML file that just so happens to be parsed for PHP code.</li>
<li>PHP just so happens to share the XML processing instruction format for its open and close tags. Based on that, files with <code>.php</code> extensions MAY be valid XML files, but they don't need to be.</li>
</ol>
<p>If you believe the first route, then all PHP files require closing end tags. To omit them will create an invalid XML file. Then again, without having an opening <code>&lt;?xml version="1.0" charset="latin-1" ?&gt;</code> declaration, you won't have a valid XML file anyway...  So it's not a major issue...</p>
<p>If you believe the second route, that opens the door for two types of <code>.php</code> files:</p>
<ul>
<li>Files that contain only code (library files for example)</li>
<li>Files that contain native XML and also code (template files for example)</li>
</ul>
<p>Based on that, code-only files are OK to end without a closing <code>?&gt;</code> tag. But the XML-code files are not OK to end without a closing <code>?&gt;</code> since it would invalidate the XML.</p>
<p>But I know what you're thinking. You're thinking what does it matter, you're never going to render a PHP file directly, so who cares if it's valid XML. Well, it does matter if you're designing a template. If it's valid XML/HTML, a normal browser will simply not display the PHP code (it's treated like a comment). So you can mock out the template without needing to run the PHP code within...</p>
<p>I'm not saying this is important. It's just a view that I don't see expressed too often, so what better place to share it...</p>
<p>Personally, I do not close tags in library files, but do in template files... I think it's a personal preference (and coding guideline) based more than anything hard...</p>
</div></text><author><a href="/users/338665/ircmaxell">ircmaxell</a></author><comments><comment><text><span class="comment-copy">This is completely false. PHP does NOT translate those tags into XML, and thus no imbalance is being generated.</span></text><author><a class="comment-user" href="/users/1196017/felicitus" title="157 reputation">Felicitus</a></author></comment><comment><text><span class="comment-copy">@Felicitus: I guess you missed the part that says <i>"I'm not saying this is important. It's just a view that I don't see expressed too often, so what better place to share it..."</i> It's not about PHP translating tags into XML. It's about what happens when a file is interpreted in an XML context (like HTML, or editors, etc)... But point missed...</span></text><author><a class="comment-user" href="/users/338665/ircmaxell" title="119,301 reputation">ircmaxell</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Well, I know the reason, but I can't show it:</p>
<blockquote>
<p>For files that contain only PHP code, the closing tag (<code>?&gt;</code>) is never
  permitted. It is not required by PHP,
  and omitting it prevents the
  accidental injection of trailing white
  space into the response.</p>
</blockquote>
<p>Source: <a href="http://framework.zend.com/manual/en/coding-standard.php-file-formatting.html" rel="nofollow">http://framework.zend.com/manual/en/coding-standard.php-file-formatting.html</a></p>
</div></text><author><a href="/users/109217/tawfekov">tawfekov</a></author><comments><comment><text><span class="comment-copy">That tag being "never permitted" is probably a Zend coding standard, but it's not a syntax rule for PHP file formatting.</span></text><author><a class="comment-user" href="/users/107277/matt-huggins" title="31,117 reputation">Matt Huggins</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>In addition to everything that's been said already, I'm going to throw in another reason that was a huge pain for us to debug.</p>
<p><a href="http://en.wikipedia.org/wiki/Apache_HTTP_Server" rel="nofollow">Apache</a> 2.4.6 with PHP 5.4 actually segmentation faults on our production machines when there's empty space behind the closing <code>php</code> tag. I just wasted hours until I finally narrowed down the bug with <a href="https://en.wikipedia.org/wiki/Strace" rel="nofollow">strace</a>.</p>
<p>Here is the error that Apache throws:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pun">[</span><span class="pln">core</span><span class="pun">:</span><span class="pln">notice</span><span class="pun">]</span><span class="pln"> </span><span class="pun">[</span><span class="pln">pid </span><span class="lit">7842</span><span class="pun">]</span><span class="pln"> AH00052</span><span class="pun">:</span><span class="pln"> child pid </span><span class="lit">10218</span><span class="pln"> </span><span class="kwd">exit</span><span class="pln"> signal </span><span class="typ">Segmentation</span><span class="pln"> fault </span><span class="pun">(</span><span class="lit">11</span><span class="pun">)</span></code></pre>
</div></text><author><a href="/users/47680/artem-russakovskii">Artem Russakovskii</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<h2>Pros</h2>
<ul>
<li>Would be logical to <a href="http://choosetheforce.blogspot.com/2008/05/should-you-close-that-php-tag.html" rel="nofollow">close any opened tag</a>, like with other languages. Not only X(HT)ML tags, but as well curly braces, brackets...</li>
<li><a href="http://wordpress.org/support/topic/287505" rel="nofollow">Less confusing for beginners</a>.</li>
</ul>
<h2>Cons</h2>
<ul>
<li>Avoids headache with adding inadvertently whitespaces after the closing tag, because it breaks the <strong>header()</strong> function behavior... Some <a href="http://lists.uvena.de/geany-devel/2009-December/001610.html" rel="nofollow">editors</a> or FTP clients / servers are also known to change automatically the end of files (at least, it's their default configuration)</li>
<li><a href="http://php.net/manual/en/language.basic-syntax.instruction-separation.php" rel="nofollow">PHP manual says closing tag is optional</a>, and <a href="http://framework.zend.com/manual/en/coding-standard.php-file-formatting.html" rel="nofollow">Zend even forbids it</a>.</li>
</ul>
<h2>Conclusion</h2>
<p>I would say that the arguments in favor of omitting the tag look stronger (helps to avoid big headache with <strong>header()</strong> + it's PHP/Zend "recommendation"). I admit that this isn't the most "beautiful" solution I've ever seen in terms of syntax consistency, but what could be better ?</p>
</div></text><author><a href="/users/488666/frosty-z">Frosty Z</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>"Is there another good reason (other than the header problem) to skip the ending php tag?"</p>
<p>You don't want to inadvertently output extraneous whitepace characters when generating binary output, <a href="http://en.wikipedia.org/wiki/Comma-separated_values" rel="nofollow">CSV</a> data, or other non-HTML output.</p>
</div></text><author><a href="/users/1238364/user1238364">user1238364</a></author><comments><comment><text><span class="comment-copy">I've had a client complain because their XML parser was refusing our output when it had an extra blank line at the beginning.  Worse, it was only happening on the one server out of seven with an extra line after the closing tag in an unrevisioned configuration file.</span></text><author><a class="comment-user" href="/users/21229/eswald" title="4,805 reputation">eswald</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>According to <a href="http://php.net/manual/en/language.basic-syntax.phptags.php" rel="nofollow">the docs</a>, it's preferable to omit the closing tag if it's at the end of the file for the following reason:</p>
<blockquote>
<p>If a file is pure PHP code, it is preferable to omit the PHP closing tag at the end of the file. This prevents accidental whitespace or new lines being added after the PHP closing tag, which may cause unwanted effects because PHP will start output buffering when there is no intention from the programmer to send any output at that point in the script.</p>
</blockquote>
<p>-- <a href="http://php.net/manual/en/language.basic-syntax.phptags.php" rel="nofollow">http://php.net/manual/en/language.basic-syntax.phptags.php</a></p>
</div></text><author><a href="/users/166339/asaph">Asaph</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>As my question was marked as duplicate of this one, I think it's O.K. to post why <strong>NOT</strong> omitting closing tag <code>?&gt;</code> can be for some reasons desired.</p>
<ul>
<li>With complete Processing Instructions Syntax (<code>&lt;?php ... ?&gt;</code>) PHP source is valid SGML document, which can be parsed and processed without problems with SGML parser. With additional restrictions it can be valid XML/XHTML as well. </li>
</ul>
<p>Nothing prevents you from writing valid XML/HTML/SGML code. <a href="http://www.sitepoint.com/should-you-close-your-php-code-tags/" rel="nofollow">PHP documentation</a> is aware of this. Excerpt:</p>
<blockquote>
<p>Note: Also note that if you are embedding PHP within XML or XHTML you will need to use the &lt; ?php ?&gt; tags to remain compliant with standards. </p>
</blockquote>
<p>Of course PHP syntax is not strict SGML/XML/HTML and you create a document, which is not SGML/XML/HTML, just like you can turn HTML into XHTML to be XML compliant or not.</p>
<ul>
<li><p>At some point you may want to concatenate sources. This will be not as easy as simply doing <code>cat source1.php source2.php</code> if you have inconsistency introduced by omitting closing <code>?&gt;</code> tags.</p></li>
<li><p>Without <code>?&gt;</code> it's harder to tell if document was left in PHP escape mode or PHP ignore mode (PI tag <code>&lt;?php</code> may have been opened or not). Life is easier if you consistently leave your documents in PHP ignore mode. It's just like work with well formatted HTML documents compared to documents with unclosed, badly nested tags etc.</p></li>
<li><p>It seems that some editors like Dreamweaver may have problems with PI left open<a href="http://www.sitepoint.com/should-you-close-your-php-code-tags/" rel="nofollow"> [1]</a>.</p></li>
</ul>
</div></text><author><a href="/users/205955/doc">doc</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>If I understand the question correctly, it has to do with output buffering and the affect this might have on closing/ending tags.  I am not sure that is an entirely valid question.  The problem is that the output buffer does not mean all content is held in memory before sending it out to the client.  It means some of the content is.</p>
<p>The programmer can purposely flush the buffer, or the output buffer so does the output buffer option in PHP really change how the closing tag affects coding?  I would argue that it does not.  </p>
<p>And maybe that is why most of the answers went back to personal style and syntax.</p>
</div></text><author><a href="/users/231395/ruz">Ruz</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>There are 2 possible use of php code:</p>
<ol>
<li>PHP code such as class definition or function definition</li>
<li>Use PHP as a template language (i.e. in views)</li>
</ol>
<p>in case 1. the closing tag is totally unusefull, also I would like to see just 1 (one) php open tag and NO (zero) closing tag in such a case. This is a good practice as it make code clean and separate logic from presentation.
For presentation case (2.) some found it is natural to close all tags (even the PHP-processed ones), that leads to confution, as the PHP has in fact 2 separate use case, that should not be mixed: logic/calculus and presentation</p>
</div></text><author><a href="/users/250970/daniele-cruciani">Daniele Cruciani</a></author><comments/></answer></answers></post>