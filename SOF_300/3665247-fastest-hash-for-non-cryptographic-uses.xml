<?xml version="1.0" encoding="utf-8"?>
<post><title>php - Fastest hash for non-cryptographic uses? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I'm essentially preparing phrases to be put into the database, they may be malformed so I want to store a short hash of them instead (I will be simply comparing if they exist or not, so hash is ideal).</p>
<p>I assume MD5 is fairly slow on 100,000+ requests so I wanted to know what would be the best method to hash the phrases, maybe rolling out my own hash function or using <code>hash('md4', '...'</code> would be faster in the end?</p>
<p>I know MySQL has MD5(), so that would complement a bit of speed on the query end, but maybe there's further a faster hashing function in MySQL I don't know about that would work with PHP..</p>
</div></text><author><a href="/users/361204/john">John</a></author><comments><comment><text><span class="comment-copy">What's stopping you from benchmarking the hashes?</span></text><author><a class="comment-user" href="/users/396458/nulluserexception" title="56,528 reputation">NullUserException</a></author></comment><comment><text><span class="comment-copy">NullUserException: You're right, I'll try them with random length phrases. Just wanted insight on what would be the norm if any to handle this sort of thing.</span></text><author><a class="comment-user owner" href="/users/361204/john" title="778 reputation">John</a></author></comment><comment><text><span class="comment-copy">MD5 isn't really that slow...</span></text><author><a class="comment-user" href="/users/148870/amber" title="272,217 reputation">Amber</a></author></comment><comment><text><span class="comment-copy">+1 to Amber: I've always been under the impression that MD5, although cryptologically unsafe, is among the fastest of the hash algorithms.</span></text><author><span class="comment-user">Jeff Mattfield</span></author></comment><comment><text><span class="comment-copy"><b>are you sure that hashing function is a bottleneck of the whole application?</b> I doubt so</span></text><author><a class="comment-user" href="/users/285587/your-common-sense" title="119,078 reputation">Your Common Sense</a></author></comment><comment><text><span class="comment-copy">Not related directly, but 'hash' functions seems to be not optimized: I made small benchmark <a href="http://dev.bluszcz.net/blog/dont-trust-the-comments-md5-vs-hash-in-php" rel="nofollow noreferrer">dev.bluszcz.net/blog/dont-trust-the-comments-md5-vs-hash-in-‌​php</a></span></text><author><a class="comment-user" href="/users/169406/bluszcz" title="2,141 reputation">bluszcz</a></author></comment><comment><text><span class="comment-copy">See also <a href="http://programmers.stackexchange.com/questions/49550/which-hashing-algorithm-is-best-for-uniqueness-and-speed" title="which hashing algorithm is best for uniqueness and speed">programmers.stackexchange.com/questions/49550/…</a></span></text><author><a class="comment-user" href="/users/32453/rogerdpack" title="25,027 reputation">rogerdpack</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>CRC32 is pretty fast and there's a function for it: <a href="http://www.php.net/manual/en/function.crc32.php" rel="noreferrer">http://www.php.net/manual/en/function.crc32.php</a></p>
<p>But you should be aware that CRC32 will have more collisions than MD5 or even SHA-1 hashes, simply because of the reduced length (32 bits compared to 128 bits respectively 160 bits). But if you just want to check whether a stored string is corrupted, you'll be fine with CRC32.</p>
</div></text><author><a href="/users/49505/joschi">joschi</a></author><comments><comment><text><span class="comment-copy">Wow, only required datatype is an unsigned integer, this will be SIGNIFICANLY faster than other hashing.</span></text><author><a class="comment-user owner" href="/users/361204/john" title="778 reputation">John</a></author></comment><comment><text><span class="comment-copy">@John: or not. CRC32 turns out to be <i>slower</i> than MD4, and not much faster than MD5, on ARM processors. Besides, CRC32 uses an unsigned 32-bit integer type, which is exactly all that MD5 needs...</span></text><author><a class="comment-user" href="/users/254279/thomas-pornin" title="54,558 reputation">Thomas Pornin</a></author></comment><comment><text><span class="comment-copy">MD5 still spits out a 128-bit hash for me...</span></text><author><a class="comment-user" href="/users/49505/joschi" title="7,622 reputation">joschi</a></author></comment><comment><text><span class="comment-copy">if you have the benefit/luxury of a newer Intel cpu, there is a crc32c assembly command that is...probably really fast (though isn't the traditional crc32 value).  See also xxhash <a href="https://code.google.com/p/xxhash/" rel="nofollow noreferrer">code.google.com/p/xxhash</a></span></text><author><a class="comment-user" href="/users/32453/rogerdpack" title="25,027 reputation">rogerdpack</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">fcn     time  generated hash
crc32</span><span class="pun">:</span><span class="pln">  </span><span class="lit">0.03163</span><span class="pln">  </span><span class="lit">798740135</span><span class="pln">
md5</span><span class="pun">:</span><span class="pln">    </span><span class="lit">0.0731</span><span class="pln">   </span><span class="lit">0dbab6d0c841278d33be207f14eeab8b</span><span class="pln">
sha1</span><span class="pun">:</span><span class="pln">   </span><span class="lit">0.07331</span><span class="pln">  </span><span class="lit">417a9e5c9ac7c52e32727cfd25da99eca9339a80</span><span class="pln">
xor</span><span class="pun">:</span><span class="pln">    </span><span class="lit">0.65218</span><span class="pln">  </span><span class="lit">119</span><span class="pln">
xor2</span><span class="pun">:</span><span class="pln">   </span><span class="lit">0.29301</span><span class="pln">  </span><span class="lit">134217728</span><span class="pln">
add</span><span class="pun">:</span><span class="pln">    </span><span class="lit">0.57841</span><span class="pln">  </span><span class="lit">1105</span></code></pre>
<p>And the code used to generate this is: </p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln"> $loops </span><span class="pun">=</span><span class="pln"> </span><span class="lit">100000</span><span class="pun">;</span><span class="pln">
 $str </span><span class="pun">=</span><span class="pln"> </span><span class="str">"ana are mere"</span><span class="pun">;</span><span class="pln">

 echo </span><span class="str">"&lt;pre&gt;"</span><span class="pun">;</span><span class="pln">

 $tss </span><span class="pun">=</span><span class="pln"> microtime</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln">
 </span><span class="kwd">for</span><span class="pun">(</span><span class="pln">$i</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">&lt;</span><span class="pln">$loops</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++){</span><span class="pln">
  $x </span><span class="pun">=</span><span class="pln"> crc32</span><span class="pun">(</span><span class="pln">$str</span><span class="pun">);</span><span class="pln">
 </span><span class="pun">}</span><span class="pln">
 $tse </span><span class="pun">=</span><span class="pln"> microtime</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln">
 echo </span><span class="str">"\ncrc32: \t"</span><span class="pln"> </span><span class="pun">.</span><span class="pln"> round</span><span class="pun">(</span><span class="pln">$tse</span><span class="pun">-</span><span class="pln">$tss</span><span class="pun">,</span><span class="pln"> </span><span class="lit">5</span><span class="pun">)</span><span class="pln"> </span><span class="pun">.</span><span class="pln"> </span><span class="str">" \t"</span><span class="pln"> </span><span class="pun">.</span><span class="pln"> $x</span><span class="pun">;</span><span class="pln">

 $tss </span><span class="pun">=</span><span class="pln"> microtime</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln">
 </span><span class="kwd">for</span><span class="pun">(</span><span class="pln">$i</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">&lt;</span><span class="pln">$loops</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++){</span><span class="pln">
  $x </span><span class="pun">=</span><span class="pln"> md5</span><span class="pun">(</span><span class="pln">$str</span><span class="pun">);</span><span class="pln">
 </span><span class="pun">}</span><span class="pln">
 $tse </span><span class="pun">=</span><span class="pln"> microtime</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln">
 echo </span><span class="str">"\nmd5: \t"</span><span class="pun">.</span><span class="pln">round</span><span class="pun">(</span><span class="pln">$tse</span><span class="pun">-</span><span class="pln">$tss</span><span class="pun">,</span><span class="pln"> </span><span class="lit">5</span><span class="pun">)</span><span class="pln"> </span><span class="pun">.</span><span class="pln"> </span><span class="str">" \t"</span><span class="pln"> </span><span class="pun">.</span><span class="pln"> $x</span><span class="pun">;</span><span class="pln">

 $tss </span><span class="pun">=</span><span class="pln"> microtime</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln">
 </span><span class="kwd">for</span><span class="pun">(</span><span class="pln">$i</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">&lt;</span><span class="pln">$loops</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++){</span><span class="pln">
  $x </span><span class="pun">=</span><span class="pln"> sha1</span><span class="pun">(</span><span class="pln">$str</span><span class="pun">);</span><span class="pln">
 </span><span class="pun">}</span><span class="pln">
 $tse </span><span class="pun">=</span><span class="pln"> microtime</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln">
 echo </span><span class="str">"\nsha1: \t"</span><span class="pun">.</span><span class="pln">round</span><span class="pun">(</span><span class="pln">$tse</span><span class="pun">-</span><span class="pln">$tss</span><span class="pun">,</span><span class="pln"> </span><span class="lit">5</span><span class="pun">)</span><span class="pln"> </span><span class="pun">.</span><span class="pln"> </span><span class="str">" \t"</span><span class="pln"> </span><span class="pun">.</span><span class="pln"> $x</span><span class="pun">;</span><span class="pln">

 $tss </span><span class="pun">=</span><span class="pln"> microtime</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln">
 </span><span class="kwd">for</span><span class="pun">(</span><span class="pln">$i</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">&lt;</span><span class="pln">$loops</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++){</span><span class="pln">
  $l </span><span class="pun">=</span><span class="pln"> strlen</span><span class="pun">(</span><span class="pln">$str</span><span class="pun">);</span><span class="pln">
  $x </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x77</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">for</span><span class="pun">(</span><span class="pln">$j</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln">$j</span><span class="pun">&lt;</span><span class="pln">$l</span><span class="pun">;</span><span class="pln">$j</span><span class="pun">++){</span><span class="pln">
   $x </span><span class="pun">=</span><span class="pln"> $x xor ord</span><span class="pun">(</span><span class="pln">$str</span><span class="pun">[</span><span class="pln">$j</span><span class="pun">]);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
 </span><span class="pun">}</span><span class="pln">
 $tse </span><span class="pun">=</span><span class="pln"> microtime</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln">
 echo </span><span class="str">"\nxor: \t"</span><span class="pun">.</span><span class="pln">round</span><span class="pun">(</span><span class="pln">$tse</span><span class="pun">-</span><span class="pln">$tss</span><span class="pun">,</span><span class="pln"> </span><span class="lit">5</span><span class="pun">)</span><span class="pln"> </span><span class="pun">.</span><span class="pln"> </span><span class="str">" \t"</span><span class="pln"> </span><span class="pun">.</span><span class="pln"> $x</span><span class="pun">;</span><span class="pln">

 $tss </span><span class="pun">=</span><span class="pln"> microtime</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln">
 </span><span class="kwd">for</span><span class="pun">(</span><span class="pln">$i</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">&lt;</span><span class="pln">$loops</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++){</span><span class="pln">
  $l </span><span class="pun">=</span><span class="pln"> strlen</span><span class="pun">(</span><span class="pln">$str</span><span class="pun">);</span><span class="pln">
  $x </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x08</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">for</span><span class="pun">(</span><span class="pln">$j</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln">$j</span><span class="pun">&lt;</span><span class="pln">$l</span><span class="pun">;</span><span class="pln">$j</span><span class="pun">++){</span><span class="pln">
   $x </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$x</span><span class="pun">&lt;&lt;</span><span class="lit">2</span><span class="pun">)</span><span class="pln"> xor $str</span><span class="pun">[</span><span class="pln">$j</span><span class="pun">];</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
 </span><span class="pun">}</span><span class="pln">
 $tse </span><span class="pun">=</span><span class="pln"> microtime</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln">
 echo </span><span class="str">"\nxor2: \t"</span><span class="pun">.</span><span class="pln">round</span><span class="pun">(</span><span class="pln">$tse</span><span class="pun">-</span><span class="pln">$tss</span><span class="pun">,</span><span class="pln"> </span><span class="lit">5</span><span class="pun">)</span><span class="pln"> </span><span class="pun">.</span><span class="pln"> </span><span class="str">" \t"</span><span class="pln"> </span><span class="pun">.</span><span class="pln"> $x</span><span class="pun">;</span><span class="pln">

 $tss </span><span class="pun">=</span><span class="pln"> microtime</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln">
 </span><span class="kwd">for</span><span class="pun">(</span><span class="pln">$i</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">&lt;</span><span class="pln">$loops</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++){</span><span class="pln">
  $l </span><span class="pun">=</span><span class="pln"> strlen</span><span class="pun">(</span><span class="pln">$str</span><span class="pun">);</span><span class="pln">
  $x </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">for</span><span class="pun">(</span><span class="pln">$j</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln">$j</span><span class="pun">&lt;</span><span class="pln">$l</span><span class="pun">;</span><span class="pln">$j</span><span class="pun">++){</span><span class="pln">
   $x </span><span class="pun">=</span><span class="pln"> $x </span><span class="pun">+</span><span class="pln"> ord</span><span class="pun">(</span><span class="pln">$str</span><span class="pun">[</span><span class="pln">$j</span><span class="pun">]);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
 </span><span class="pun">}</span><span class="pln">
 $tse </span><span class="pun">=</span><span class="pln"> microtime</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln">
 echo </span><span class="str">"\nadd: \t"</span><span class="pun">.</span><span class="pln">round</span><span class="pun">(</span><span class="pln">$tse</span><span class="pun">-</span><span class="pln">$tss</span><span class="pun">,</span><span class="pln"> </span><span class="lit">5</span><span class="pun">)</span><span class="pln"> </span><span class="pun">.</span><span class="pln"> </span><span class="str">" \t"</span><span class="pln"> </span><span class="pun">.</span><span class="pln"> $x</span><span class="pun">;</span></code></pre>
</div></text><author><a href="/users/11301/quamis">Quamis</a></author><comments><comment><text><span class="comment-copy">Ah, Thank you for this insight actually, just fortifies my use of CRC32 being fastest.</span></text><author><a class="comment-user owner" href="/users/361204/john" title="778 reputation">John</a></author></comment><comment><text><span class="comment-copy">@John - You can retrieve the hashing algorithms using: <code>hash_algos()</code>. The following hash benchmarking code was in the PHP comments ==&gt; <a href="http://codepad.viper-7.com/5Wdhw6" rel="nofollow noreferrer">codepad.viper-7.com/5Wdhw6</a></span></text><author><a class="comment-user" href="/users/186636/peter-ajtai" title="41,032 reputation">Peter Ajtai</a></author></comment><comment><text><span class="comment-copy">Thank you for your code. I have improved it a little bit. I don't think that we should compare functions like md5() that process the whole string and loops that do byte by byte like you made with xor. In PHP, these loops are very slow and are even slower than the md5 itself. We should compare one hases with another, all implemented as functions.</span></text><author><a class="comment-user" href="/users/6910868/maxim-masiutin" title="197 reputation">Maxim Masiutin</a></author></comment><comment><text><span class="comment-copy">@MaximMasiutin the xor examples were there to compare "native" hashing with some sort of weak custom hashing function, just to demonstate that PHP's loop per byte is slow, and point out that it should be avoided, just as you noticed</span></text><author><a class="comment-user" href="/users/11301/quamis" title="5,704 reputation">Quamis</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Ranked list where each loop shares the same thing to crypt as all the others.</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pun">&lt;?</span><span class="pln">php

set_time_limit</span><span class="pun">(</span><span class="lit">720</span><span class="pun">);</span><span class="pln">

$begin </span><span class="pun">=</span><span class="pln"> startTime</span><span class="pun">();</span><span class="pln">
$scores </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">();</span><span class="pln">


</span><span class="kwd">foreach</span><span class="pun">(</span><span class="pln">hash_algos</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">as</span><span class="pln"> $algo</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    $scores</span><span class="pun">[</span><span class="pln">$algo</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">for</span><span class="pun">(</span><span class="pln">$i</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln">$i</span><span class="pun">&lt;</span><span class="lit">10000</span><span class="pun">;</span><span class="pln">$i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    $number </span><span class="pun">=</span><span class="pln"> rand</span><span class="pun">()*</span><span class="lit">100000000000000</span><span class="pun">;</span><span class="pln">
    $string </span><span class="pun">=</span><span class="pln"> randomString</span><span class="pun">(</span><span class="lit">500</span><span class="pun">);</span><span class="pln">

    </span><span class="kwd">foreach</span><span class="pun">(</span><span class="pln">hash_algos</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">as</span><span class="pln"> $algo</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        $start </span><span class="pun">=</span><span class="pln"> startTime</span><span class="pun">();</span><span class="pln">

        hash</span><span class="pun">(</span><span class="pln">$algo</span><span class="pun">,</span><span class="pln"> $number</span><span class="pun">);</span><span class="pln"> </span><span class="com">//Number</span><span class="pln">
        hash</span><span class="pun">(</span><span class="pln">$algo</span><span class="pun">,</span><span class="pln"> $string</span><span class="pun">);</span><span class="pln"> </span><span class="com">//String</span><span class="pln">

        $end </span><span class="pun">=</span><span class="pln"> endTime</span><span class="pun">(</span><span class="pln">$start</span><span class="pun">);</span><span class="pln">

        $scores</span><span class="pun">[</span><span class="pln">$algo</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+=</span><span class="pln"> $end</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">   
</span><span class="pun">}</span><span class="pln">


asort</span><span class="pun">(</span><span class="pln">$scores</span><span class="pun">);</span><span class="pln">

$i</span><span class="pun">=</span><span class="lit">1</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">foreach</span><span class="pun">(</span><span class="pln">$scores </span><span class="kwd">as</span><span class="pln"> $alg </span><span class="pun">=&gt;</span><span class="pln"> $time</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">print</span><span class="pln"> $i</span><span class="pun">.</span><span class="str">' - '</span><span class="pun">.</span><span class="pln">$alg</span><span class="pun">.</span><span class="str">' '</span><span class="pun">.</span><span class="pln">$time</span><span class="pun">.</span><span class="str">'&lt;br /&gt;'</span><span class="pun">;</span><span class="pln">
    $i</span><span class="pun">++;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

echo </span><span class="str">"Entire page took "</span><span class="pun">.</span><span class="pln">endTime</span><span class="pun">(</span><span class="pln">$begin</span><span class="pun">).</span><span class="str">' seconds&lt;br /&gt;'</span><span class="pun">;</span><span class="pln">

echo </span><span class="str">"&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Hashes Compared&lt;/h2&gt;"</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">foreach</span><span class="pun">(</span><span class="pln">$scores </span><span class="kwd">as</span><span class="pln"> $alg </span><span class="pun">=&gt;</span><span class="pln"> $time</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">print</span><span class="pln"> $i</span><span class="pun">.</span><span class="str">' - '</span><span class="pun">.</span><span class="pln">$alg</span><span class="pun">.</span><span class="str">' '</span><span class="pun">.</span><span class="pln">hash</span><span class="pun">(</span><span class="pln">$alg</span><span class="pun">,</span><span class="pln">$string</span><span class="pun">).</span><span class="str">'&lt;br /&gt;'</span><span class="pun">;</span><span class="pln">
    $i</span><span class="pun">++;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">function</span><span class="pln"> startTime</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   $mtime </span><span class="pun">=</span><span class="pln"> microtime</span><span class="pun">();</span><span class="pln"> 
   $mtime </span><span class="pun">=</span><span class="pln"> explode</span><span class="pun">(</span><span class="str">" "</span><span class="pun">,</span><span class="pln">$mtime</span><span class="pun">);</span><span class="pln"> 
   $mtime </span><span class="pun">=</span><span class="pln"> $mtime</span><span class="pun">[</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> $mtime</span><span class="pun">[</span><span class="lit">0</span><span class="pun">];</span><span class="pln"> 
   </span><span class="kwd">return</span><span class="pln"> $mtime</span><span class="pun">;</span><span class="pln">   
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">function</span><span class="pln"> endTime</span><span class="pun">(</span><span class="pln">$starttime</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   $mtime </span><span class="pun">=</span><span class="pln"> microtime</span><span class="pun">();</span><span class="pln"> 
   $mtime </span><span class="pun">=</span><span class="pln"> explode</span><span class="pun">(</span><span class="str">" "</span><span class="pun">,</span><span class="pln">$mtime</span><span class="pun">);</span><span class="pln"> 
   $mtime </span><span class="pun">=</span><span class="pln"> $mtime</span><span class="pun">[</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> $mtime</span><span class="pun">[</span><span class="lit">0</span><span class="pun">];</span><span class="pln"> 
   $endtime </span><span class="pun">=</span><span class="pln"> $mtime</span><span class="pun">;</span><span class="pln"> 
   </span><span class="kwd">return</span><span class="pln"> $totaltime </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$endtime </span><span class="pun">-</span><span class="pln"> $starttime</span><span class="pun">);</span><span class="pln"> 
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">function</span><span class="pln"> randomString</span><span class="pun">(</span><span class="pln">$length</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    $characters </span><span class="pun">=</span><span class="pln"> </span><span class="str">'0123456789abcdefghijklmnopqrstuvwxyz'</span><span class="pun">;</span><span class="pln">
    $string </span><span class="pun">=</span><span class="pln"> </span><span class="str">''</span><span class="pun">;</span><span class="pln">    
    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$p </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $p </span><span class="pun">&lt;</span><span class="pln"> $length</span><span class="pun">;</span><span class="pln"> $p</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        $string </span><span class="pun">.=</span><span class="pln"> $characters</span><span class="pun">[</span><span class="pln">mt_rand</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="pln"> strlen</span><span class="pun">(</span><span class="pln">$characters</span><span class="pun">)</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)];</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> $string</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="pun">?&gt;</span></code></pre>
<p>And the output </p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="lit">1</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> crc32b </span><span class="lit">0.111036300659</span><span class="pln">
</span><span class="lit">2</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> crc32 </span><span class="lit">0.112048864365</span><span class="pln">
</span><span class="lit">3</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> md4 </span><span class="lit">0.120795726776</span><span class="pln">
</span><span class="lit">4</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> md5 </span><span class="lit">0.138875722885</span><span class="pln">
</span><span class="lit">5</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> sha1 </span><span class="lit">0.146368741989</span><span class="pln">
</span><span class="lit">6</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> adler32 </span><span class="lit">0.15501332283</span><span class="pln">
</span><span class="lit">7</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> tiger192</span><span class="pun">,</span><span class="lit">3</span><span class="pln"> </span><span class="lit">0.177447080612</span><span class="pln">
</span><span class="lit">8</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> tiger160</span><span class="pun">,</span><span class="lit">3</span><span class="pln"> </span><span class="lit">0.179498195648</span><span class="pln">
</span><span class="lit">9</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> tiger128</span><span class="pun">,</span><span class="lit">3</span><span class="pln"> </span><span class="lit">0.184012889862</span><span class="pln">
</span><span class="lit">10</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> ripemd128 </span><span class="lit">0.184052705765</span><span class="pln">
</span><span class="lit">11</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> ripemd256 </span><span class="lit">0.185411214828</span><span class="pln">
</span><span class="lit">12</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> salsa20 </span><span class="lit">0.198500156403</span><span class="pln">
</span><span class="lit">13</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> salsa10 </span><span class="lit">0.204956293106</span><span class="pln">
</span><span class="lit">14</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval160</span><span class="pun">,</span><span class="lit">3</span><span class="pln"> </span><span class="lit">0.206098556519</span><span class="pln">
</span><span class="lit">15</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval256</span><span class="pun">,</span><span class="lit">3</span><span class="pln"> </span><span class="lit">0.206891775131</span><span class="pln">
</span><span class="lit">16</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval224</span><span class="pun">,</span><span class="lit">3</span><span class="pln"> </span><span class="lit">0.206954240799</span><span class="pln">
</span><span class="lit">17</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> ripemd160 </span><span class="lit">0.207638263702</span><span class="pln">
</span><span class="lit">18</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> tiger192</span><span class="pun">,</span><span class="lit">4</span><span class="pln"> </span><span class="lit">0.208125829697</span><span class="pln">
</span><span class="lit">19</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> tiger160</span><span class="pun">,</span><span class="lit">4</span><span class="pln"> </span><span class="lit">0.208438634872</span><span class="pln">
</span><span class="lit">20</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> tiger128</span><span class="pun">,</span><span class="lit">4</span><span class="pln"> </span><span class="lit">0.209359407425</span><span class="pln">
</span><span class="lit">21</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval128</span><span class="pun">,</span><span class="lit">3</span><span class="pln"> </span><span class="lit">0.210256814957</span><span class="pln">
</span><span class="lit">22</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> sha256 </span><span class="lit">0.212738037109</span><span class="pln">
</span><span class="lit">23</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> ripemd320 </span><span class="lit">0.215386390686</span><span class="pln">
</span><span class="lit">24</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval192</span><span class="pun">,</span><span class="lit">3</span><span class="pln"> </span><span class="lit">0.215610980988</span><span class="pln">
</span><span class="lit">25</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> sha224 </span><span class="lit">0.218329429626</span><span class="pln">
</span><span class="lit">26</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval192</span><span class="pun">,</span><span class="lit">4</span><span class="pln"> </span><span class="lit">0.256464719772</span><span class="pln">
</span><span class="lit">27</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval160</span><span class="pun">,</span><span class="lit">4</span><span class="pln"> </span><span class="lit">0.256565093994</span><span class="pln">
</span><span class="lit">28</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval128</span><span class="pun">,</span><span class="lit">4</span><span class="pln"> </span><span class="lit">0.257113456726</span><span class="pln">
</span><span class="lit">29</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval224</span><span class="pun">,</span><span class="lit">4</span><span class="pln"> </span><span class="lit">0.258928537369</span><span class="pln">
</span><span class="lit">30</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval256</span><span class="pun">,</span><span class="lit">4</span><span class="pln"> </span><span class="lit">0.259262084961</span><span class="pln">
</span><span class="lit">31</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval192</span><span class="pun">,</span><span class="lit">5</span><span class="pln"> </span><span class="lit">0.288433790207</span><span class="pln">
</span><span class="lit">32</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval160</span><span class="pun">,</span><span class="lit">5</span><span class="pln"> </span><span class="lit">0.290239810944</span><span class="pln">
</span><span class="lit">33</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval256</span><span class="pun">,</span><span class="lit">5</span><span class="pln"> </span><span class="lit">0.291721343994</span><span class="pln">
</span><span class="lit">34</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval224</span><span class="pun">,</span><span class="lit">5</span><span class="pln"> </span><span class="lit">0.294484138489</span><span class="pln">
</span><span class="lit">35</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval128</span><span class="pun">,</span><span class="lit">5</span><span class="pln"> </span><span class="lit">0.300224781036</span><span class="pln">
</span><span class="lit">36</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> sha384 </span><span class="lit">0.352449893951</span><span class="pln">
</span><span class="lit">37</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> sha512 </span><span class="lit">0.354603528976</span><span class="pln">
</span><span class="lit">38</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> gost </span><span class="lit">0.392376661301</span><span class="pln">
</span><span class="lit">39</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> whirlpool </span><span class="lit">0.629067659378</span><span class="pln">
</span><span class="lit">40</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> snefru256 </span><span class="lit">0.829529047012</span><span class="pln">
</span><span class="lit">41</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> snefru </span><span class="lit">0.833986997604</span><span class="pln">
</span><span class="lit">42</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> md2 </span><span class="lit">1.80192279816</span><span class="pln">
</span><span class="typ">Entire</span><span class="pln"> page took </span><span class="lit">22.755341053</span><span class="pln"> seconds


</span><span class="typ">Hashes</span><span class="pln"> </span><span class="typ">Compared</span><span class="pln">

</span><span class="lit">1</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> crc32b </span><span class="lit">761331d7</span><span class="pln">
</span><span class="lit">2</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> crc32 </span><span class="lit">7e8c6d34</span><span class="pln">
</span><span class="lit">3</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> md4 </span><span class="lit">1bc8785de173e77ef28a24bd525beb68</span><span class="pln">
</span><span class="lit">4</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> md5 </span><span class="lit">9f9cfa3b5b339773b8d6dd77bbe931dd</span><span class="pln">
</span><span class="lit">5</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> sha1 ca2bd798e47eab85655f0ce03fa46b2e6e20a31f
</span><span class="lit">6</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> adler32 f5f2aefc
</span><span class="lit">7</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> tiger192</span><span class="pun">,</span><span class="lit">3</span><span class="pln"> d11b7615af06779259b29446948389c31d896dee25edfc50
</span><span class="lit">8</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> tiger160</span><span class="pun">,</span><span class="lit">3</span><span class="pln"> d11b7615af06779259b29446948389c31d896dee
</span><span class="lit">9</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> tiger128</span><span class="pun">,</span><span class="lit">3</span><span class="pln"> d11b7615af06779259b29446948389c3
</span><span class="lit">10</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> ripemd128 </span><span class="lit">5f221a4574a072bc71518d150ae907c8</span><span class="pln">
</span><span class="lit">11</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> ripemd256 bc89cd79f4e70b73fbb4faaf47a3caf263baa07e72dd435a0f62afe840f5c71c
</span><span class="lit">12</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> salsa20 </span><span class="lit">91d9b963e172988a8fc2c5ff1a8d67073b2c5a09573cb03e901615dc1ea5162640f607e0d7134c981eedb761934cd8200fe90642a4608eacb82143e6e7b822c4</span><span class="pln">
</span><span class="lit">13</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> salsa10 </span><span class="lit">320b8cb8498d590ca2ec552008f1e55486116257a1e933d10d35c85a967f4a89c52158f755f775cd0b147ec64cde8934bae1e13bea81b8a4a55ac2c08efff4ce</span><span class="pln">
</span><span class="lit">14</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval160</span><span class="pun">,</span><span class="lit">3</span><span class="pln"> </span><span class="lit">27ad6dd290161b883e614015b574b109233c7c0e</span><span class="pln">
</span><span class="lit">15</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval256</span><span class="pun">,</span><span class="lit">3</span><span class="pln"> </span><span class="lit">03706dd2be7b1888bf9f3b151145b009859a720e3fe921a575e11be801c54c9a</span><span class="pln">
</span><span class="lit">16</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval224</span><span class="pun">,</span><span class="lit">3</span><span class="pln"> </span><span class="lit">16706dd2c77b1888c29f3b151745b009879a720e4fe921a576e11be8</span><span class="pln">
</span><span class="lit">17</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> ripemd160 f419c7c997a10aaf2d83a5fa03c58350d9f9d2e4
</span><span class="lit">18</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> tiger192</span><span class="pun">,</span><span class="lit">4</span><span class="pln"> </span><span class="lit">112f486d3a9000f822c050a204d284d52473f267b1247dbd</span><span class="pln">
</span><span class="lit">19</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> tiger160</span><span class="pun">,</span><span class="lit">4</span><span class="pln"> </span><span class="lit">112f486d3a9000f822c050a204d284d52473f267</span><span class="pln">
</span><span class="lit">20</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> tiger128</span><span class="pun">,</span><span class="lit">4</span><span class="pln"> </span><span class="lit">112f486d3a9000f822c050a204d284d5</span><span class="pln">
</span><span class="lit">21</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval128</span><span class="pun">,</span><span class="lit">3</span><span class="pln"> </span><span class="lit">9d9155d430218e4dcdde1c62962ecca3</span><span class="pln">
</span><span class="lit">22</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> sha256 </span><span class="lit">6027f87b4dd4c732758aa52049257f9e9db7244f78c132d36d47f9033b5c3b09</span><span class="pln">
</span><span class="lit">23</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> ripemd320 </span><span class="lit">9ac00db553b51662826267daced37abfccca6433844f67d8f8cfd243cf78bbbf86839daf0961b61d</span><span class="pln">
</span><span class="lit">24</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval192</span><span class="pun">,</span><span class="lit">3</span><span class="pln"> </span><span class="lit">7d706dd2d37c1888eaa53b154948b009e09c720effed21a5</span><span class="pln">
</span><span class="lit">25</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> sha224 b6395266d8c7e40edde77969359e6a5d725f322e2ea4bd73d3d25768
</span><span class="lit">26</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval192</span><span class="pun">,</span><span class="lit">4</span><span class="pln"> d87cd76e4c8006d401d7068dce5dec3d02dfa037d196ea14
</span><span class="lit">27</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval160</span><span class="pun">,</span><span class="lit">4</span><span class="pln"> f2ddd76e156d0cd40eec0b8d09c8f23d0f47a437
</span><span class="lit">28</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval128</span><span class="pun">,</span><span class="lit">4</span><span class="pln"> f066e6312b91e7ef69f26b2adbeba875
</span><span class="lit">29</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval224</span><span class="pun">,</span><span class="lit">4</span><span class="pln"> </span><span class="lit">1b7cd76ea97c06d439d6068d7d56ec3d73dba0373895ea14e465bc0e</span><span class="pln">
</span><span class="lit">30</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval256</span><span class="pun">,</span><span class="lit">4</span><span class="pln"> </span><span class="lit">157cd76e8b7c06d432d6068d7556ec3d66dba0371c95ea14e165bc0ec31b9d37</span><span class="pln">
</span><span class="lit">31</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval192</span><span class="pun">,</span><span class="lit">5</span><span class="pln"> </span><span class="lit">05f9ea219ae1b98ba33bac6b37ccfe2f248511046c80c2f0</span><span class="pln">
</span><span class="lit">32</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval160</span><span class="pun">,</span><span class="lit">5</span><span class="pln"> e054ec218637bc8b4bf1b26b2fb40230e0161904
</span><span class="lit">33</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval256</span><span class="pun">,</span><span class="lit">5</span><span class="pln"> </span><span class="lit">48f6ea210ee1b98be835ac6b7dc4fe2f39841104a37cc2f06ceb2bf58ab4fe78</span><span class="pln">
</span><span class="lit">34</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval224</span><span class="pun">,</span><span class="lit">5</span><span class="pln"> </span><span class="lit">57f6ea2111e1b98bf735ac6b92c4fe2f43841104ab7cc2f076eb2bf5</span><span class="pln">
</span><span class="lit">35</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> haval128</span><span class="pun">,</span><span class="lit">5</span><span class="pln"> ccb8e0ac1fd12640ecd8976ab6402aa8
</span><span class="lit">36</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> sha384 bcf0eeaa1479bf6bef7ece0f5d7111c3aeee177aa7990926c633891464534cd8a6c69d905c36e882b3350ef40816ed02
</span><span class="lit">37</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> sha512 </span><span class="lit">8def9a1e6e31423ef73c94251d7553f6fe3ed262c44e852bdb43e3e2a2b76254b4da5ef25aefb32aae260bb386cd133045adfa2024b067c2990b60d6f014e039</span><span class="pln">
</span><span class="lit">38</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> gost ef6cb990b754b1d6a428f6bb5c113ee22cc9533558d203161441933d86e3b6f8
</span><span class="lit">39</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> whirlpool </span><span class="lit">54eb1d0667b6fdf97c01e005ac1febfacf8704da55c70f10f812b34cd9d45528b60d20f08765ced0ab3086d2bde312259aebf15d105318ae76995c4cf9a1e981</span><span class="pln">
</span><span class="lit">40</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> snefru256 </span><span class="lit">20849cbeda5ddec5043c09d36b2de4ba0ea9296b6c9efaa7c7257f30f351aea4</span><span class="pln">
</span><span class="lit">41</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> snefru </span><span class="lit">20849cbeda5ddec5043c09d36b2de4ba0ea9296b6c9efaa7c7257f30f351aea4</span><span class="pln">
</span><span class="lit">42</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> md2 d4864c8c95786480d1cf821f690753dc</span></code></pre>
</div></text><author><a href="/users/193376/pez-cuckow">Pez Cuckow</a></author><comments><comment><text><span class="comment-copy">There's a minimal off-by-one error at the end. <code>strlen($characters)</code> should be <code>strlen($characters) - 1</code> :)</span></text><author><a class="comment-user" href="/users/126603/mm" title="1,350 reputation">MM.</a></author></comment><comment><text><span class="comment-copy">The correction is really needed. Thanks to @MM.</span></text><author><a class="comment-user" href="/users/530197/insign" title="660 reputation">insign</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>There's a speed comparison on xxhash site. Copy pasting it here:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln"> </span><span class="typ">Name</span><span class="pln">            </span><span class="typ">Speed</span><span class="pln">       Q</span><span class="pun">.</span><span class="typ">Score</span><span class="pln">   </span><span class="typ">Author</span><span class="pln">
 xxHash          </span><span class="lit">5.4</span><span class="pln"> GB</span><span class="pun">/</span><span class="pln">s     </span><span class="lit">10</span><span class="pln">
 </span><span class="typ">MumurHash</span><span class="pln"> </span><span class="lit">3a</span><span class="pln">    </span><span class="lit">2.7</span><span class="pln"> GB</span><span class="pun">/</span><span class="pln">s     </span><span class="lit">10</span><span class="pln">       </span><span class="typ">Austin</span><span class="pln"> </span><span class="typ">Appleby</span><span class="pln">
 </span><span class="typ">SpookyHash</span><span class="pln">      </span><span class="lit">2.0</span><span class="pln"> GB</span><span class="pun">/</span><span class="pln">s     </span><span class="lit">10</span><span class="pln">       </span><span class="typ">Bob</span><span class="pln"> </span><span class="typ">Jenkins</span><span class="pln">
 </span><span class="typ">SBox</span><span class="pln">            </span><span class="lit">1.4</span><span class="pln"> GB</span><span class="pun">/</span><span class="pln">s      </span><span class="lit">9</span><span class="pln">       </span><span class="typ">Bret</span><span class="pln"> </span><span class="typ">Mulvey</span><span class="pln">
 </span><span class="typ">Lookup3</span><span class="pln">         </span><span class="lit">1.2</span><span class="pln"> GB</span><span class="pun">/</span><span class="pln">s      </span><span class="lit">9</span><span class="pln">       </span><span class="typ">Bob</span><span class="pln"> </span><span class="typ">Jenkins</span><span class="pln">
 </span><span class="typ">CityHash64</span><span class="pln">      </span><span class="lit">1.05</span><span class="pln"> GB</span><span class="pun">/</span><span class="pln">s    </span><span class="lit">10</span><span class="pln">       </span><span class="typ">Pike</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln"> </span><span class="typ">Alakuijala</span><span class="pln">
 FNV             </span><span class="lit">0.55</span><span class="pln"> GB</span><span class="pun">/</span><span class="pln">s     </span><span class="lit">5</span><span class="pln">       </span><span class="typ">Fowler</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Noll</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Vo</span><span class="pln">
 CRC32           </span><span class="lit">0.43</span><span class="pln"> GB</span><span class="pun">/</span><span class="pln">s     </span><span class="lit">9</span><span class="pln">
 MD5</span><span class="pun">-</span><span class="lit">32</span><span class="pln">          </span><span class="lit">0.33</span><span class="pln"> GB</span><span class="pun">/</span><span class="pln">s    </span><span class="lit">10</span><span class="pln">       </span><span class="typ">Ronald</span><span class="pln"> L</span><span class="pun">.</span><span class="pln"> </span><span class="typ">Rivest</span><span class="pln">
 SHA1</span><span class="pun">-</span><span class="lit">32</span><span class="pln">         </span><span class="lit">0.28</span><span class="pln"> GB</span><span class="pun">/</span><span class="pln">s    </span><span class="lit">10</span></code></pre>
<p>So it seems xxHash is by far the fastest one, while many others beat older hashes, like CRC32, MD5 and SHA.</p>
<p><a href="https://code.google.com/p/xxhash/" rel="noreferrer">https://code.google.com/p/xxhash/</a></p>
<p>Note that this is the ordering on a 32-bit compilation. On a 64-bit compilation the performance order is likely very different. Some of the hashes are heavily based on 64-bit multiplications and fetches.</p>
</div></text><author><a href="/users/1797000/hdante">hdante</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pun">+-------------------+---------+------+--------------+</span><span class="pln">
</span><span class="pun">|</span><span class="pln">       NAME        </span><span class="pun">|</span><span class="pln">  LOOPS  </span><span class="pun">|</span><span class="pln"> TIME </span><span class="pun">|</span><span class="pln">     OP</span><span class="pun">/</span><span class="pln">S     </span><span class="pun">|</span><span class="pln">
</span><span class="pun">+-------------------+---------+------+--------------+</span><span class="pln">
</span><span class="pun">|</span><span class="pln"> sha1ShortString   </span><span class="pun">|</span><span class="pln"> </span><span class="lit">1638400</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> </span><span class="lit">2.85</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> </span><span class="lit">574</span><span class="pun">,</span><span class="lit">877.19</span><span class="pln">   </span><span class="pun">|</span><span class="pln">
</span><span class="pun">|</span><span class="pln"> md5ShortString    </span><span class="pun">|</span><span class="pln"> </span><span class="lit">2777680</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> </span><span class="lit">4.11</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> </span><span class="lit">675</span><span class="pun">,</span><span class="lit">834.55</span><span class="pln">   </span><span class="pun">|</span><span class="pln">
</span><span class="pun">|</span><span class="pln"> crc32ShortString  </span><span class="pun">|</span><span class="pln"> </span><span class="lit">3847980</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> </span><span class="lit">3.61</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> </span><span class="lit">1</span><span class="pun">,</span><span class="lit">065</span><span class="pun">,</span><span class="lit">922.44</span><span class="pln"> </span><span class="pun">|</span><span class="pln">
</span><span class="pun">|</span><span class="pln"> sha1MediumString  </span><span class="pun">|</span><span class="pln"> </span><span class="lit">602620</span><span class="pln">  </span><span class="pun">|</span><span class="pln"> </span><span class="lit">4.75</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> </span><span class="lit">126</span><span class="pun">,</span><span class="lit">867.37</span><span class="pln">   </span><span class="pun">|</span><span class="pln">
</span><span class="pun">|</span><span class="pln"> md5MediumString   </span><span class="pun">|</span><span class="pln"> </span><span class="lit">884860</span><span class="pln">  </span><span class="pun">|</span><span class="pln"> </span><span class="lit">4.69</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> </span><span class="lit">188</span><span class="pun">,</span><span class="lit">669.51</span><span class="pln">   </span><span class="pun">|</span><span class="pln">
</span><span class="pun">|</span><span class="pln"> crc32MediumString </span><span class="pun">|</span><span class="pln"> </span><span class="lit">819200</span><span class="pln">  </span><span class="pun">|</span><span class="pln"> </span><span class="lit">4.85</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> </span><span class="lit">168</span><span class="pun">,</span><span class="lit">907.22</span><span class="pln">   </span><span class="pun">|</span><span class="pln">
</span><span class="pun">|</span><span class="pln"> sha1LongString    </span><span class="pun">|</span><span class="pln"> </span><span class="lit">181800</span><span class="pln">  </span><span class="pun">|</span><span class="pln"> </span><span class="lit">4.95</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> </span><span class="lit">36</span><span class="pun">,</span><span class="lit">727.27</span><span class="pln">    </span><span class="pun">|</span><span class="pln">
</span><span class="pun">|</span><span class="pln"> md5LongString     </span><span class="pun">|</span><span class="pln"> </span><span class="lit">281680</span><span class="pln">  </span><span class="pun">|</span><span class="pln"> </span><span class="lit">4.93</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> </span><span class="lit">57</span><span class="pun">,</span><span class="lit">135.90</span><span class="pln">    </span><span class="pun">|</span><span class="pln">
</span><span class="pun">|</span><span class="pln"> crc32LongString   </span><span class="pun">|</span><span class="pln"> </span><span class="lit">226220</span><span class="pln">  </span><span class="pun">|</span><span class="pln"> </span><span class="lit">4.95</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> </span><span class="lit">45</span><span class="pun">,</span><span class="lit">701.01</span><span class="pln">    </span><span class="pun">|</span><span class="pln">
</span><span class="pun">+-------------------+---------+------+--------------+</span></code></pre>
<p>It seems that crc32 is faster for small messages(in this case 26 characters) while md5 for longer messages(in this case &gt;852 characters).</p>
</div></text><author><a href="/users/528468/aalex-gabi">Aalex Gabi</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Instead of assuming that MD5 is "fairly slow", try it. A simple C-based implementation of MD5 on a simple PC (mine, a 2.4 GHz Core2, using a single core) can hash 6 <em>millions</em> of small messages <em>per second</em>. A small message is here anything up to 55 bytes. For longer messages, MD5 hashing speed is linear with the message size, i.e. it crunches data at about 400 megabytes per second. You may note that this is four times the maximum speed of a good harddisk or a gigabit ethernet network card.</p>
<p>Since my PC has four cores, this means that hashing data as fast as my harddisk can provide or receive uses at most 6% of the available computing power. It takes a very special situation for hashing speed to become a bottleneck or even to induce a noticeable cost on a PC.</p>
<p>On much smaller architectures where hashing speed <em>may</em> become somewhat relevant, you may want to use MD4. MD4 is fine for non-cryptographic purposes (and for cryptographic purposes, you should not be using MD5 anyway). It has been reported that MD4 is even faster than CRC32 on ARM-based platforms.</p>
</div></text><author><a href="/users/254279/thomas-pornin">Thomas Pornin</a></author><comments><comment><text><span class="comment-copy">There's a point to consider. MD5 takes 128 bits instead of 32. This means that database storage takes 4 times more space and hence 4 times slower to look up for comparing hashes (I <i>think</i>). What I'm concerned with (for my uses) is how fast it will be to query the database later when it's full of hashes.</span></text><author><a class="comment-user" href="/users/124119/camilo-martin" title="14,620 reputation">Camilo Martin</a></author></comment><comment><text><span class="comment-copy">If you do not use a wide enough output then you will get random collisions, which will be bad since the goal is to query a database to know whether a given "phrase" is already known; collisions here turn into false positives. With 32 bits, you will begin to see collisions as soon as you have 60000 or so phrases. This is true for all hash functions, cryptographic or not. That being said, you can always take the output of a hash function and truncate it to any length you see fit, within the limitations explained above.</span></text><author><a class="comment-user" href="/users/254279/thomas-pornin" title="54,558 reputation">Thomas Pornin</a></author></comment><comment><text><span class="comment-copy">@ThomasPornin If we go by the truncating way, wouldn't it again face the collision problem, I mean the only reason the md5 is supposed to not get easy collision is the extra no of characters its having when compared to CRC32, right?</span></text><author><a class="comment-user" href="/users/807104/mohd-abdul-mujib" title="3,693 reputation">Mohd Abdul Mujib</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>2016 update: Things have evolved.</p>
<p><strong>The current recommendation should be to use the <a href="https://en.wikipedia.org/wiki/MurmurHash" rel="nofollow noreferrer" title="Murmur Hash Family">Murmur Hash Family</a></strong> (see specifically the <strong>murmur2</strong> or <strong>murmur3</strong> variants).</p>
<p>Murmur hashes were designed for fast hashing with minimal collisions (much faster than CRC, MDx and SHAx). It's perfect to look for duplicates and very appropriate for HashTable indexes.</p>
<p>In fact it's used by many of the modern databases (Redis, ElastisSearch, Cassandra) to compute all sort of hashes for various purposes. This specific algorithm was the root source of many performance improvements in the current decade.</p>
<p>It's also used in implementations of <a href="http://billmill.org/bloomfilter-tutorial/" rel="nofollow noreferrer">Bloom Filters</a>. You should be aware that if you're searching for "fast hashes", you're probably facing a typical problem that is solved by Bloom filters. ;-)</p>
<p><strong>Note</strong>: murmur is a general purpose hash, meaning NON cryptographic. It doesn't prevent to find the source "text" that generated a hash. It's NOT appropriate to hash passwords.</p>
<p>Some more details: <a href="http://stackoverflow.com/a/11901654/5994461">MurmurHash - what is it?</a> </p>
</div></text><author><a href="/users/5994461/user5994461">user5994461</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I suggest urlencode() or base64_encode() for these reasons:</p>
<ul>
<li>You don't need cryptography</li>
<li>You want speed</li>
<li>You want a way to identify unique strings while cleaning up 'malformed' strings</li>
</ul>
<p>Adapting the benchmark code elsewhere in these replies, I've demonstrated that either of these are way faster than any hash algorithm. Depending on your application, you might be able to use urlencode() or base64_encode() to clean up any 'malformed' strings you want to store.</p>
</div></text><author><a href="/users/1465153/anachronist">Anachronist</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>If you're looking for fast and unique, I recommend xxHash or something that uses newer cpu's crc32c built-in command, see  <a href="http://stackoverflow.com/a/11422479/32453">http://stackoverflow.com/a/11422479/32453</a>.  It also links there to possibly even faster hashes if you don't care about the possibility of collision as much.</p>
</div></text><author><a href="/users/32453/rogerdpack">rogerdpack</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Step One: <a href="https://paragonie.com/book/pecl-libsodium/read/00-intro.md#installing-libsodium" rel="nofollow">Install libsodium</a><br/>
Step Two: Use <code>\Sodium\crypto_generichash()</code></p>
<hr/>
<p>Explanation: It uses <a href="https://en.wikipedia.org/wiki/BLAKE_%28hash_function%29#BLAKE2" rel="nofollow">BLAKE2b</a>.</p>
</div></text><author><a href="/users/2224584/scott-arciszewski">Scott Arciszewski</a></author><comments><comment><text><span class="comment-copy">question is "how quick is this thing"?</span></text><author><a class="comment-user" href="/users/4426048/my1" title="122 reputation">My1</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Adler32 performs best on my machine.
And <code>md5()</code> turned out faster than <code>crc32()</code>.</p>
</div></text><author><a href="/users/1035328/max-tsepkov">Max Tsepkov</a></author><comments><comment><text><span class="comment-copy">If MD5 is faster than a generic CRC32 function then something is very wrong.</span></text><author><a class="comment-user" href="/users/614342/nxasdf" title="453 reputation">nxasdf</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The implementation for md5 inside hash is a little bit faster than md5().
So this can be an option or some else, please try:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">echo </span><span class="str">'&lt;pre&gt;'</span><span class="pun">;</span><span class="pln">

$run </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">();</span><span class="pln">

</span><span class="kwd">function</span><span class="pln"> test</span><span class="pun">(</span><span class="pln">$algo</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
  </span><span class="com">#static $c = 0;</span><span class="pln">
  </span><span class="com">#if($c&gt;10) return;</span><span class="pln">
  </span><span class="com">#$c++;</span><span class="pln">

 $tss </span><span class="pun">=</span><span class="pln"> microtime</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln">
 </span><span class="kwd">for</span><span class="pun">(</span><span class="pln">$i</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">&lt;</span><span class="lit">100000</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++){</span><span class="pln">
  $x </span><span class="pun">=</span><span class="pln"> hash</span><span class="pun">(</span><span class="pln">$algo</span><span class="pun">,</span><span class="pln"> </span><span class="str">"ana are mere"</span><span class="pun">);</span><span class="pln">
 </span><span class="pun">}</span><span class="pln">
 $tse </span><span class="pun">=</span><span class="pln"> microtime</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln">

 $GLOBALS</span><span class="pun">[</span><span class="str">'run'</span><span class="pun">][(</span><span class="kwd">string</span><span class="pun">)</span><span class="pln">round</span><span class="pun">(</span><span class="pln">$tse</span><span class="pun">-</span><span class="pln">$tss</span><span class="pun">,</span><span class="pln"> </span><span class="lit">5</span><span class="pun">)]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"\nhash({$algo}): \t"</span><span class="pun">.</span><span class="pln">round</span><span class="pun">(</span><span class="pln">$tse</span><span class="pun">-</span><span class="pln">$tss</span><span class="pun">,</span><span class="pln"> </span><span class="lit">5</span><span class="pun">)</span><span class="pln"> </span><span class="pun">.</span><span class="pln"> </span><span class="str">" \t"</span><span class="pln"> </span><span class="pun">.</span><span class="pln"> $x</span><span class="pun">;</span><span class="pln">
 </span><span class="com">#echo "\n$i nhash({$algo}): \t".round($tse-$tss, 5) . " \t" . $x;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
array_map</span><span class="pun">(</span><span class="str">'test'</span><span class="pun">,</span><span class="pln"> hash_algos</span><span class="pun">());</span><span class="pln">
ksort</span><span class="pun">(</span><span class="pln">$run</span><span class="pun">);</span><span class="pln">
print_r</span><span class="pun">(</span><span class="pln">$run</span><span class="pun">);</span><span class="pln">
echo </span><span class="str">'&lt;/pre&gt;'</span><span class="pun">;</span></code></pre>
<p>You can see at <a href="http://www.dozent.net/Tipps-Tricks/PHP/hash-performance" rel="nofollow">http://www.dozent.net/Tipps-Tricks/PHP/hash-performance</a></p>
</div></text><author><a href="/users/2761747/frank">Frank</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p><a href="http://www.cryptopp.com/benchmarks.html" rel="nofollow">This</a> benchmark can help you. Before, I have your question.It contains <code>sha1</code> and <code>md5</code></p>
</div></text><author><a href="/users/1058591/persiangulf">PersianGulf</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p><a href="http://php.net/manual/en/function.crc32.php" rel="nofollow noreferrer">CRC32</a> is faster, but less secure than MD5 and SHA1. There is not that much speed difference between MD5 and SHA1.</p>
</div></text><author><a href="/users/182971/sjoerd">Sjoerd</a></author><comments><comment><text><span class="comment-copy">MD5 is now considered insecure. It's way more insecure than SHA1. Read MD5 wiki page.</span></text><author><a class="comment-user" href="/users/2135035/ahmed" title="1,140 reputation">Ahmed</a></author></comment></comments></answer></answers></post>