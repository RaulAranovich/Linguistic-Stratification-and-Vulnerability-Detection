<?xml version="1.0" encoding="utf-8"?>
<post><title>security - Difference between SSL &amp; TLS - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>According to wikipedia: <a href="http://en.wikipedia.org/wiki/Transport_Layer_Security" rel="noreferrer">http://en.wikipedia.org/wiki/Transport_Layer_Security</a></p>
<p>Seems like TLS is a replacement to SSL, but most websites are still using SSL?</p>
</div></text><author><a href="/users/396458/nulluserexception">NullUserException</a></author><comments><comment><text><span class="comment-copy">"most websites are still using SSL". Here's a good survey of protocol support <a href="https://www.trustworthyinternet.org/ssl-pulse/#chart-protocol-support" rel="nofollow noreferrer">trustworthyinternet.org/ssl-pulse/#chart-protocol-support</a></span></text><author><a class="comment-user" href="/users/284795/colonel-panic" title="60,789 reputation">Colonel Panic</a></author></comment><comment><text><span class="comment-copy">Similar more popular question: <a href="http://security.stackexchange.com/questions/5126/whats-the-difference-between-ssl-tls-and-https" title="whats the difference between ssl tls and https">security.stackexchange.com/questions/5126/…</a></span></text><author><a class="comment-user" href="/users/603516/vadzim" title="9,606 reputation">Vadzim</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>In short, TLSv1.0 is more or less SSLv3.1. You can find more details in <a href="https://serverfault.com/questions/178561/what-are-the-exact-protocol-level-differences-between-ssl-and-tls/179139#179139">this question on ServerFault</a>.</p>
<p>Most websites actually support both SSLv3 and TLSv1.0 at least, as <a href="http://www.cs.columbia.edu/%7Ehomin/papers/psst/LeeMalNah-2007.pdf" rel="nofollow noreferrer">this study indicates (Lee, Malkin, and Nahum's paper: <em>Cryptographic Strength of SSL/TLS Servers: Current and Recent Practices</em>, IMC 2007)</a> (link obtained from the <a href="http://thread.gmane.org/gmane.ietf.tls/5095" rel="nofollow noreferrer">IETF TLS list</a>). More than 98% support TLSv1+.</p>
<p>I think the reason why SSLv3 is still in use was for legacy support (although most browsers support TLSv1 and some TLSv1.1 or even TLSv1.2 nowadays). Until not so long ago, some distributions still had SSLv2 (considered insecure) on by default along with the others.</p>
<p>(You may also find <a href="http://stackoverflow.com/questions/3660798/what-happens-on-the-wire-when-a-tls-ldap-or-tls-http-connection-is-set-up/3661416#3661416">this question</a> interesting, although it's about the usage pattern of TLS rather than SSL vs. TLS (you could in fact have the same pattern with SSL). This does not apply to HTTPS anyway, since HTTPS uses SSL/TLS from the beginning of the connection.)</p>
</div></text><author><a href="/users/372643/bruno">Bruno</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>From <a href="http://www.thoughtcrime.org/blog/ssl-and-the-future-of-authenticity/">http://www.thoughtcrime.org/blog/ssl-and-the-future-of-authenticity/</a></p>
<blockquote>
<p>In the early 90’s, at the dawn of the World Wide Web, some engineers at Netscape developed a protocol for making secure HTTP requests, and what they came up with was called SSL. Given the relatively scarce body of knowledge concerning secure protocols at the time, as well the <a href="http://www.jwz.org/gruntle/nscpdorm.html">intense pressure</a> everyone at Netscape was working under, their efforts can only be seen as incredibly heroic. It’s amazing that SSL has endured for as long as it has, in contrast to a number of other protocols from the same vintage. We’ve definitely learned a lot since then, though, but the thing about protocols and APIs is that there’s very little going back.</p>
</blockquote>
<p>There were two major updates to the SSL protocol, SSL 2 (1995) and SSL 3 (1996). These were carefully done to be backwards compatible, to ease adoption. However <strong>backwards compatibility is a constraint for a security protocol</strong> for which it can mean backwards vulnerable.</p>
<p>Thus it was decided to break backwards compatiblity, and the new protocol named <a href="https://tools.ietf.org/html/rfc2246.html">TLS 1.0</a> (1999). (In hindsight, it might have been clearer to name it TLS 4)</p>
<blockquote>
<p>The differences between this protocol and SSL 3.0 are not dramatic, but they are significant enough that TLS 1.0 and SSL 3.0 do not interoperate. </p>
</blockquote>
<p>TLS has been revised twice, TLS 1.1 (2006) and TLS 1.2 (2008).</p>
<p>As of 2015, all SSL versions are broken and insecure (the POODLE attack) and browsers are removing support. TLS 1.0 is ubiquitous, but only <a href="https://www.trustworthyinternet.org/ssl-pulse/">60% of sites support TLS 1.1 and 1.2</a>, a sorry state of affairs.</p>
<hr/>
<p>If you're interested in this stuff, I recommend Moxie Marlinspike's clever and funny talk at 
<a href="https://www.youtube.com/watch?v=Z7Wl2FW2TcA">https://www.youtube.com/watch?v=Z7Wl2FW2TcA</a> </p>
</div></text><author><a href="/users/284795/colonel-panic">Colonel Panic</a></author><comments><comment><text><span class="comment-copy">I remember a Usenet news:comp.sources.unix posting called Secure Sockets Layer in the late 1980s. I doubt it has much if any relationship with what Netscape did other than the name.</span></text><author><a class="comment-user" href="/users/207421/ejp" title="214,361 reputation">EJP</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>tls1.0 means sslv3.1</p>
<p>tls1.1 means sslv3.2</p>
<p>tls1.2 means sslv3.3</p>
<p>the rfc just changed the name, you could find tls1.0's hex code is 0x0301, which means sslv3.1</p>
</div></text><author><a href="/users/3958622/zhenyu-li">zhenyu li</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>"If it ain't broken, don't touch it". SSL3 works fine in most scenarios (there was a fundamental flaw found in SSL/TLS protocol back in October, but this is a flaw of applications more than of a procol itself), so developers don't hurry to upgrade their SSL modules. TLS brings a number of useful extensions and security algorithms, but they are handy addition and not a must. So TLS on most servers remains an option. If both server and client support it, it will be used.  </p>
<p>Update: in '2016 SSL 3, and even TLS up to 1.2 are found to be vulnerable to various attacks and migration to TLS 1.2 is recommended. There exist attacks on implementations of TLS 1.2 as well, though they are server-dependent. TLS 1.3 is currently in development. And now TLS 1.2 is a must. </p>
</div></text><author><a href="/users/47961/eugene-mayevski-eldos">Eugene Mayevski 'EldoS</a></author><comments><comment><text><span class="comment-copy">No, this is a protocol flaw, and developers should upgrade their SSL stacks. This being said, there are guidelines for using the renegotiation extension in <a href="http://tools.ietf.org/html/rfc5746" rel="nofollow noreferrer">RFC 5746</a> for SSLv3, in addition for the ones for TLS.</span></text><author><a class="comment-user" href="/users/372643/bruno" title="78,944 reputation">Bruno</a></author></comment><comment><text><span class="comment-copy">If you kill somebody with the knife, this is not knife's flaw, but the one of your brain. Same here. If the protocol was used in the way it was not designed for, it's not a flaw of the protocol.</span></text><author><a class="comment-user" href="/users/47961/eugene-mayevski-eldos" title="36,320 reputation">Eugene Mayevski 'EldoS</a></author></comment><comment><text><span class="comment-copy">The protocol was designed in a way that application on top of it should treat it as a normal socket as much as possible. The renegotiation issue, without the new extension, forces awareness by the application layer (e.g. HTTP). There is an interested thread on this topic on the IETF TLS mailing list: <a href="http://www.ietf.org/mail-archive/web/tls/current/msg04000.html" rel="nofollow noreferrer">ietf.org/mail-archive/web/tls/current/msg04000.html</a></span></text><author><a class="comment-user" href="/users/372643/bruno" title="78,944 reputation">Bruno</a></author></comment><comment><text><span class="comment-copy">Exactly. Renegotiation is a special case that requires the application-level protocol to know about it (this case). So it's a problem of the application-level protocol if it explicitly used renegotiation.</span></text><author><a class="comment-user" href="/users/47961/eugene-mayevski-eldos" title="36,320 reputation">Eugene Mayevski 'EldoS</a></author></comment><comment><text><span class="comment-copy">I agree some of it should be done at the application level, but I'm not aware of any implementation and protocol takes that into account. The stacks can usually cope with renegotiation that they initiate legitimately, but not so much if a MITM initiates it (which is the problem). That's why the IETF TLS group chose to fix it at the TLS level, and that's also why people really should switch on that extension, or disable renegotiation altogether.</span></text><author><a class="comment-user" href="/users/372643/bruno" title="78,944 reputation">Bruno</a></author></comment><comment><text><span class="comment-copy">There are more fundamental issue in SSL 3.0 than the one you mention. E.g., CBC padding oracle, as well as the re-use of the IV or the previous record. The former still plagues TLS but can be worked-around, while the latter is fixed on TLS 1.1.</span></text><author><a class="comment-user" href="/users/703641/nikos" title="493 reputation">Nikos</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>TLS maintains backward compatibility with SSL and therefore the communication protocol is nearly identical in any of the mentioned versions herein. The two important differences between SSL v.3, TLS 1.0, and TLS 1.2, is the pseudo-random function (PRF) and the HMAC hashing function (SHA, MD5, handshake), which is used to construct a block of symmetric keys for Application Data encryption (server keys + client keys + IV).  Major difference between TLS 1.1 and TLS 1.2 is that 1.2 requires use-of "explicit" IV to protect against CBC attacks, although there is no changes to PRF or protocol needed for this. TLS 1.2 PRF is cipher-suite-specific, which means PRF can be negotiated during handshake.  SSL was originally developed by Netscape Communications (historic) and later maintained by Internet Engineering Task Force (IETF, current).  TLS is maintained by the Network Working Group.  Here are difference between PRF HMAC functions in TLS:</p>
<p>TLS 1.0 and 1.1</p>
<p>PRF(secret, label, seed) = P_MD5(S1, label + seed) XOR P_SHA-1(S2, label + seed);</p>
<p>TLS 1.2</p>
<p>PRF(secret, label, seed) = P_hash(secret, label + seed) </p>
</div></text><author><a href="/users/6754520/sensorvista">SensorVista</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p><a href="https://hpbn.co/transport-layer-security-tls/" rel="nofollow noreferrer">https://hpbn.co/transport-layer-security-tls/</a> is a good introduction</p>
<blockquote>
<p>The SSL protocol was originally developed at Netscape to enable ecommerce transaction security on the Web, which required encryption to protect customers’ personal data, as well as authentication and integrity guarantees to ensure a safe transaction. To achieve this, the SSL protocol was implemented at the application layer, directly on top of TCP (Figure 4-1), enabling protocols above it (HTTP, email, instant messaging, and many others) to operate unchanged while providing communication security when communicating across the network.</p>
<p>When SSL is used correctly, a third-party observer can only infer the connection endpoints, type of encryption, as well as the frequency and an approximate amount of data sent, but cannot read or modify any of the actual data.</p>
<p>SSL 2.0 was the first publicly released version of the protocol, but it was quickly replaced by SSL 3.0 due to a number of discovered security flaws. Because the SSL protocol was proprietary to Netscape, the IETF formed an effort to standardize the protocol, resulting in RFC 2246, which was published in January 1999 and became known as TLS 1.0. Since then, the IETF has continued iterating on the protocol to address security flaws, as well as to extend its capabilities: TLS 1.1 (RFC 2246) was published in April 2006, TLS 1.2 (RFC 5246) in August 2008, and work is now underway to define TLS 1.3.</p>
</blockquote>
</div></text><author><a href="/users/284795/colonel-panic">Colonel Panic</a></author><comments/></answer></answers></post>