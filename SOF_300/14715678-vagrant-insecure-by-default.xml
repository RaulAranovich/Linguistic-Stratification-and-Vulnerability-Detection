<?xml version="1.0" encoding="utf-8"?>
<post><title>security - Vagrant insecure by default? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p><strong>EDIT 2</strong>: TL;DR: <strong>the answer was yes in 2013, but this flaw has been fixed</strong></p>
<p>By following the Getting Started instructions on vagrantup.com, I seem to end up with a virtual machine that is accepting SSH connections on port 2222 so that anyone can get root access to my VM and read my host working directory using the default credentials (username=password=vagrant or vagrant_insecure_private_key).</p>
<p>Is this true? If yes, why is it not considered a gaping security vulnerability? What if I had copied sensitive data to the VM?</p>
<p><strong>EDIT</strong>: and for those who think anyone on the internet being able to read your sources and executing arbitrary code on your VM is not that bad, I recommend reading the "Breaking out" section in this blog post <a href="http://blog.ontoillogical.com/blog/2012/10/31/breaking-in-and-out-of-vagrant/" rel="nofollow noreferrer">http://blog.ontoillogical.com/blog/2012/10/31/breaking-in-and-out-of-vagrant/</a></p>
<p>In a nutshell: running Vagrant "as intended" can also enable anyone to break into your host/development machine (e.g., by using a malicious git post-commit hook).</p>
</div></text><author><a href="/users/1426569/oseiskar">oseiskar</a></author><comments><comment><text><span class="comment-copy">The link to <i>breaking in and out of vagrant</i> is broken. The following currently works: <a href="http://blog.ontoillogical.com/blog/2012/10/31/breaking-in-and-out-of-vagrant/" rel="nofollow noreferrer">blog.ontoillogical.com/blog/2012/10/31/…</a></span></text><author><a class="comment-user" href="/users/5018816/pnd" title="117 reputation">pnd</a></author></comment><comment><text><span class="comment-copy"><a href="http://web.archive.org/web/20160714220643/http://blog.ontoillogical.com/blog/2012/10/31/breaking-in-and-out-of-vagrant" rel="nofollow noreferrer">web.archive.org/web/20160714220643/http://…</a></span></text><author><a class="comment-user" href="/users/934195/mark-fox" title="4,266 reputation">Mark Fox</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>The short answer is <strong>YES</strong>.</p>
<p><strong>Why?</strong></p>
<p>When building Vagrant base boxes (manually or using tools like Veewee to automate), builders follow the <a href="http://docs.vagrantup.com/v1/docs/base_boxes.html" rel="noreferrer">vagrant base boxes specifications</a> which defines the following:</p>
<ol>
<li>User <code>root</code> and <code>vagrant</code> use <strong>vagrant</strong> as password</li>
<li>Public key authentication (password-less) for the user <code>vagrant</code>.</li>
</ol>
<p>Vagrant project provides an insecure <a href="https://github.com/mitchellh/vagrant/tree/master/keys" rel="noreferrer"><strong>key pair</strong></a> for SSH Public Key Authentication so that <code>vagrant ssh</code> works.</p>
<p>Because everyone has access to the private key, anyone can use the private key to login to your VMs (suppose they know your IP of the host machine, port is by default 2222 as forwarding rules in place.)</p>
<p>It is NOT secure OOTB. However, you can remove the trusted key from <code>~vagrant/.ssh/authorized_keys</code> and add your own, change password for <code>vagrant</code> and <code>root</code>, then it's considered relatively safe.</p>
<p><strong>Update</strong></p>
<p>Since Vagrant 1.2.3, by default SSH forwarded port binds to 127.0.0.1 so only local connections are allowed [GH-1785].</p>
<p><strong>IMPORTANT Update</strong></p>
<p>Since Vagrant 1.7.0 (<a href="https://github.com/mitchellh/vagrant/pull/4707" rel="noreferrer">PR #4707</a>) Vagrant will replace the default insecure ssh keypair with randomly generated keypair on first <code>vagrant up</code>.</p>
<p>See in the <a href="https://github.com/mitchellh/vagrant/blob/master/CHANGELOG.md" rel="noreferrer">CHANGELOG</a>: the default insecure keypair is used, Vagrant will automatically replace it with a randomly generated keypair on first <code>vagrant up</code>. <a href="https://github.com/mitchellh/vagrant/issues/2608" rel="noreferrer">GH-2608</a></p>
</div></text><author><a href="/users/1801697/terry-wang">Terry Wang</a></author><comments><comment><text><span class="comment-copy">The OOTB configuration is not fully compromised, but OOTB it does include giving effective access to the user running virtualbox in the host environment to anyone with root access in the VM.  That's a fairly serious flaw, but not sufficient on its own to compromise the host.</span></text><author><a class="comment-user" href="/users/2109800/mc0e" title="1,388 reputation">mc0e</a></author></comment><comment><text><span class="comment-copy">And passwordless sudo! It seems you cannot ignore that?</span></text><author><a class="comment-user" href="/users/582917/cmcdragonkai" title="2,326 reputation">CMCDragonkai</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I've raised this as an issue on the github repository for vagrant.  The developer has said they'll fix the issue with the forwarded ports being externally available.  The developer does not however accept the issue regarding compromise of the host environment from the VM.  I think they're dangerously wrong.</p>
<p><a href="https://github.com/mitchellh/vagrant/issues/1785">https://github.com/mitchellh/vagrant/issues/1785</a></p>
<p>Breaking out of the vm is easier than the linked blog post suggests.  You don't have to depend on git hooks to compromise the host, you just put arbitrary ruby code into the Vagrant file.</p>
<p>I'd run vagrant in a VM sandbox if I could.  Since I can't, I make do with a firewall.</p>
<p>It's a good idea to have provisioning rules to add a secure ssh key, and to remove the insecure key and the default password.</p>
</div></text><author><a href="/users/2109800/mc0e">mc0e</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I wrote this simple inline shell provisioner to swap out the authorized_keys with my id_rsa.pub.  Once provisioned the insecure_private_key cannot be used to authenticate.</p>
<pre><code>VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

# ...

  config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'" # avoids 'stdin: is not a tty' error.

  config.ssh.private_key_path = ["#{ENV['HOME']}/.ssh/id_rsa","#{ENV['HOME']}/.vagrant.d/insecure_private_key"]

  config.vm.provision "shell", inline: &lt;&lt;-SCRIPT
    printf "%s\n" "#{File.read("#{ENV['HOME']}/.ssh/id_rsa.pub")}" &gt; /home/vagrant/.ssh/authorized_keys
    chown -R vagrant:vagrant /home/vagrant/.ssh
  SCRIPT

end
</code></pre>
</div></text><author><a href="/users/3213055/donnoman">donnoman</a></author><comments><comment><text><span class="comment-copy">This looks great for the private key. But this won't do anything with the fact that account "vagrant" and "root" have the password "vagrant", right?</span></text><author><a class="comment-user" href="/users/1087002/noah-gibbs" title="395 reputation">Noah Gibbs</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>As of Vagrant 1.2.3 the default is to bind to localhost instead of the public interface, avoiding the external connection issue.</p>
</div></text><author><a href="/users/1024458/jerm">jerm</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Just wanted to add that there is a Vagrant plugin that solves this problem:<a href="https://github.com/virtuald/vagrant-rekey-ssh" rel="nofollow">vagrant-rekey-ssh</a>. It changes the default password of the VM, and removes the insecure SSH key.</p>
</div></text><author><a href="/users/633403/luca-invernizzi">Luca Invernizzi</a></author><comments><comment><text><span class="comment-copy">Good stuff.  Thanks.  The exposure of the host environment to the vagrant box remains though, in case there's any other vulnerabilities there.</span></text><author><a class="comment-user" href="/users/2109800/mc0e" title="1,388 reputation">mc0e</a></author></comment><comment><text><span class="comment-copy">FYI: This functionality is now included in Vagrant 1.7+. The plugin's obsolete.</span></text><author><a class="comment-user" href="/users/1443145/james" title="249 reputation">James</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I would like to explain why Vagrant is not necessarily as insecure as you might think.</p>
<p>I would like to start off by saying that as I am sure most of you are already aware, it is necessary to maintain open access to the Vagrant box because of the way these boxes are being shared.  For that reason, I believe the main security concern is not changing the default credentials after the box is downloaded.  Running such a machine in bridged mode would allow someone on the network to ssh in with default credentials.</p>
<p>It appears to me that the idea behind these boxes is that anyone can download it, and secure it once it is in their possession.  My vagrant installation replaces default keys with a new, randomly generated ssh key.  I am not sure if this is being done with a plugin, however I am curious to know if the password-less sudo and default password also present a security risk.</p>
</div></text><author><a href="/users/2259396/coffee123">Coffee123</a></author><comments/></answer></answers></post>