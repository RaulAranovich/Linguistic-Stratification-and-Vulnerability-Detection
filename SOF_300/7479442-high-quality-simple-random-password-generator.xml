<?xml version="1.0" encoding="utf-8"?>
<post><title>python - High quality, simple random password generator - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I'm interested in creating a very simple, high (cryptographic) quality random password generator. Is there a better way to do this?</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="kwd">import</span><span class="pln"> os</span><span class="pun">,</span><span class="pln"> random</span><span class="pun">,</span><span class="pln"> string

length </span><span class="pun">=</span><span class="pln"> </span><span class="lit">13</span><span class="pln">
chars </span><span class="pun">=</span><span class="pln"> string</span><span class="pun">.</span><span class="pln">ascii_letters </span><span class="pun">+</span><span class="pln"> string</span><span class="pun">.</span><span class="pln">digits </span><span class="pun">+</span><span class="pln"> </span><span class="str">'!@#$%^&amp;*()'</span><span class="pln">
random</span><span class="pun">.</span><span class="pln">seed </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">os</span><span class="pun">.</span><span class="pln">urandom</span><span class="pun">(</span><span class="lit">1024</span><span class="pun">))</span><span class="pln">

</span><span class="kwd">print</span><span class="pln"> </span><span class="str">''</span><span class="pun">.</span><span class="pln">join</span><span class="pun">(</span><span class="pln">random</span><span class="pun">.</span><span class="pln">choice</span><span class="pun">(</span><span class="pln">chars</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">for</span><span class="pln"> i </span><span class="kwd">in</span><span class="pln"> range</span><span class="pun">(</span><span class="pln">length</span><span class="pun">))</span></code></pre>
</div></text><author><a href="/users/396458/nulluserexception">NullUserException</a></author><comments><comment><text><span class="comment-copy">Are these passwords for humans or machines?</span></text><author><a class="comment-user" href="/users/215974/cheeken" title="16,513 reputation">cheeken</a></author></comment><comment><text><span class="comment-copy">@JarrodRoberson Stating that “randomness != cryptography” is just egregious in and of itself, since modern cryptography is built on randomness. Not all randomness is created equal (eg: a password selected at random from “password” and “passwords” is obviously not secure), but at its heart, cryptography == randomness.</span></text><author><a class="comment-user" href="/users/396458/nulluserexception" title="56,528 reputation">NullUserException</a></author></comment><comment><text><span class="comment-copy">Isn't <code>random.seed</code> a method, so <code>random.seed = 'random_string'</code> basically destroys that method and doesn't do anything?  Do you mean <code>random.seed('random_string')</code>?</span></text><author><a class="comment-user" href="/users/194586/nick-t" title="9,827 reputation">Nick T</a></author></comment><comment><text><span class="comment-copy"><code>os.urandom(1024)</code> fetches 1024 bytes. It seems a bit excessive to me. Perhaps seeding with 16 or 32 bytes would be more appropriate.</span></text><author><a class="comment-user" href="/users/608639/jww" title="41,097 reputation">jww</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>The difficult thing with passwords is to make them strong enough and still be able to remember them. If the password is not meant to be remembered by a human being, then it is not really a password.</p>
<p>You use Python's <code>os.urandom()</code>: that's good. For any practical purpose (even cryptography), the output of <code>os.urandom()</code> is indistinguishable from true alea. Then you use it as seed in <code>random</code>, which is less good: that one is a non-cryptographic PRNG, and its output may exhibit some structure which will not register in a statistical measurement tool, but might be exploited by an intelligent attacker. You should work with <code>os.urandom()</code> all along. To make things simple: choose an alphabet of length 64, e.g. letters (uppercase and lowercase), digits, and two extra punctuation characters (such as '+' and '/'). Then, for each password character, get one byte from <code>os.urandom()</code>, reduce the value modulo 64 (this is unbiased because 64 divides 256) and use the result as index in your <code>chars</code> array.</p>
<p>With an alphabet of length 64, you get 6 bits of entropy per character (because 2<sup>6</sup> = 64). Thus, with 13 characters, you get 78 bits of entropy. This is not ultimately strong in all cases, but already very strong (it could be defeated with a budget which will be counted in months and billions of dollars, not mere millions).</p>
</div></text><author><a href="/users/254279/thomas-pornin">Thomas Pornin</a></author><comments><comment><text><span class="comment-copy">Waaait a minute... This might sound like a dumb question, but <code>os.urandom()</code> returns type <code>bytes</code>, so how can I reduce that mod 64?</span></text><author><a class="comment-user" href="/users/817296/sean" title="724 reputation">Sean</a></author></comment><comment><text><span class="comment-copy">Ask for one byte, then get the byte value, which is an integer in the 0 to 255 range.</span></text><author><a class="comment-user" href="/users/254279/thomas-pornin" title="54,558 reputation">Thomas Pornin</a></author></comment><comment><text><span class="comment-copy">But it's pretty hard to remember 13 random characters. That is actually Randall's point in the famous XKCD comic.  I'd suggest <a href="https://github.com/redacted/XKCD-password-generator" rel="nofollow noreferrer">github.com/redacted/XKCD-password-generator</a> using its --acrostic option to get a pattern you find even easier to remember.</span></text><author><a class="comment-user" href="/users/507544/nealmcb" title="3,713 reputation">nealmcb</a></author></comment><comment><text><span class="comment-copy">For anyone else still confused, @ThomasPornin's solution would be e.g. <code>chars[ord(os.urandom(1)) % len(chars)]</code></span></text><author><a class="comment-user" href="/users/570722/christian-benke" title="254 reputation">Christian Benke</a></author></comment><comment><text><span class="comment-copy">@ChristianBenke: note that this is unbiased because the <code>chars[]</code> array we are talking about has length 64, and 256 (the number of possible values for a byte) is a multiple of 64. If you use an array length that is not an exact divisor of 256 then the selection will be biased (some of the characters will be more probable than others).</span></text><author><a class="comment-user" href="/users/254279/thomas-pornin" title="54,558 reputation">Thomas Pornin</a></author></comment><comment><text><span class="comment-copy">@ThomasPornin Oh my! What one has to consider! Thanks, makes sense!</span></text><author><a class="comment-user" href="/users/570722/christian-benke" title="254 reputation">Christian Benke</a></author></comment><comment><text><span class="comment-copy">@Sean As <code>os.urandom</code> output is of type bytes, I consider <code>os.urandom(1)[0]</code> to be more pythonic, because you want "first byte of a bytes array". But note that only <code>ord(os.urandom(1))</code> works both in Python 2 &amp; 3.</span></text><author><a class="comment-user" href="/users/462865/amir-ali-akbari" title="2,472 reputation">Amir Ali Akbari</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p><a href="http://xkcd.com/936/" rel="nofollow noreferrer">XKCD</a> has a great explanation of why <strong>what you think</strong> are strong passwords <strong>aren't</strong>.</p>
<p><img alt="http://xkcd.com/936/" src="https://imgs.xkcd.com/comics/password_strength.png"/></p>
<blockquote>
<p>To anyone who understands information theory and security and is in an
  infuriating argument with someone who does not (possibly involving
  mixed case), I sincerely apologize. - Randall Munroe</p>
</blockquote>
<p>And if you don't understand the <a href="http://en.wikipedia.org/wiki/Password_strength#Entropy_as_a_measure_of_password_strength" rel="nofollow noreferrer">math behind what this illustration is explaining</a>, don't try writing anything that should be cryptographically secure, because it won't be. Just put the mouse down and step away from the keyboard.</p>
</div></text><author><a href="/users/177800/jarrod-roberson">Jarrod Roberson</a></author><comments><comment><text><span class="comment-copy">For what it's worth, there's <a href="http://security.stackexchange.com/questions/6095/xkcd-936-short-complex-password-or-long-dictionary-passphrase">a post on IT Security SE</a> about this comic that Jeff recently used as an example of a great question.</span></text><author><a class="comment-user" href="/users/122607/pops" title="15,679 reputation">Pops<span class="mod-flair" title="moderator">♦</span></a></author></comment><comment><text><span class="comment-copy">That XKCD comic doesn't comes from nothing. It was based on what is true...What I have to say is that the hint of the comic was: "To anyone who understands information theory and security and is in an infuriating argument with someone who does not (possibly involving mixed case), I sincerely apologize." <a href="http://www.explainxkcd.com/2011/08/10/password-strength/" rel="nofollow noreferrer">explainxkcd.com/2011/08/10/password-strength</a> Also, LifeHacker bloged about that <a href="http://lifehacker.com/5830355/xkcd-password-generator-creates-high+security-easy+to+remember-passwords" rel="nofollow noreferrer">lifehacker.com/5830355/…</a></span></text><author><a class="comment-user" href="/users/460775/embarbosa" title="1,006 reputation">EMBarbosa</a></author></comment><comment><text><span class="comment-copy">That's what Randal was talking about when he make the commic: <a href="http://www.baekdal.com/tips/password-security-usability" rel="nofollow noreferrer">Why the password "this is fun" is 10 times more secure than "J4fS!2"</a></span></text><author><a class="comment-user" href="/users/460775/embarbosa" title="1,006 reputation">EMBarbosa</a></author></comment><comment><text><span class="comment-copy">Lets keep comments constructive, please.</span></text><author><a class="comment-user" href="/users/50049/tim-post" title="25,574 reputation">Tim Post<span class="mod-flair" title="moderator">♦</span></a></author></comment><comment><text><span class="comment-copy">The first sentence is wrong: randomness <i>does</i> make "cryptographically strong" passwords, and the comic is pointedly contrasting a <i>non-random,</i> difficult password with a <i>random,</i> easy pass phrase. Entropy of English words is a function of dictionary size, not word length. Rather than 4.7 bits per letter, is more like 17 bits per word. It is easier for me to create a mnemonic for a sequence of medium-length root words, so suppose I create a dictionary of 2048 such words. Even if an attacker steals my list, each <i>randomly</i> chosen word still adds at least 11 bits of entropy to the pass phrase.</span></text><author><a class="comment-user" href="/users/3474/erickson" title="191,743 reputation">erickson</a></author></comment><comment><text><span class="comment-copy">Dang! Someone beat me to the xkcd article showing that <b>random words &gt; random characters</b>.</span></text><author><a class="comment-user" href="/users/881224/droogans" title="3,750 reputation">Droogans</a></author></comment><comment><text><span class="comment-copy">@erickson - do you have a reference for "[entropy is] more like 17 bits per word". I'm interested in reading about it. (I've seen entropy estimates for english that are roughly 1.2 or 1.3 bits, so I'm wondering about the 17 for a word).</span></text><author><a class="comment-user" href="/users/608639/jww" title="41,097 reputation">jww</a></author></comment><comment><text><span class="comment-copy">@jww 17 bits is based on random selection from a dictionary of 130,000 words (roughly the number of tournament-legal Scrabble words between 5 and 11 letters long on the OWL2 list). This is just the entropy of a 130k-sided die, and can be computed exactly. An estimate of 1.2 bits per word is based on the ability to predict the next word in real English text. That's only an estimate, and will depend on the particular text. My comment was trying to point out the difference between the two cases; a mangled "troubadour" is <i>not</i> random. Drawing words from a shuffled dictionary is.</span></text><author><a class="comment-user" href="/users/3474/erickson" title="191,743 reputation">erickson</a></author></comment><comment><text><span class="comment-copy">@jww As an example, consider "I ____ you ____ much!" If you were to survey a large corpus of English text, you'll find that you can predict what goes in the blanks with high probability. The blanks don't lose much information; or, in other words, the entropy of those missing words is very low. What is the probability you can correctly fill in the blanks in "aspergilli  ____ graveness ____ doable"? (They are "chawbacons" and "monogamists", in this case.) Because the missing symbols were randomly selected from a large set, their entropy is high.</span></text><author><a class="comment-user" href="/users/3474/erickson" title="191,743 reputation">erickson</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Just two days ago, Kragen Javier Sitaker posted a program to do this at <a href="http://lists.canonical.org/pipermail/kragen-hacks/2011-September/000527.html" rel="nofollow noreferrer">http://lists.canonical.org/pipermail/kragen-hacks/2011-September/000527.html</a> (gone now - try <a href="https://github.com/jesterpm/bin/blob/master/mkpasswd" rel="nofollow noreferrer">https://github.com/jesterpm/bin/blob/master/mkpasswd</a>)</p>
<p>Generate a random, memorizable password: <a href="http://xkcd.com/936/" rel="nofollow noreferrer">http://xkcd.com/936/</a></p>
<p>Example run:</p>
<p>kragen at inexorable:~/devel/inexorable-misc$ ./mkpass.py 5 12 Your password is "learned damage saved residential stages". That's equivalent to a 60-bit key.</p>
<p>That password would take 2.5e+03 CPU-years to crack on my inexpensive Celeron E1200 from 2008, assuming an offline attack on a MS-Cache hash, which is the worst password hashing algorithm in common use, slightly worse than even simple MD5.</p>
<p>The most common password-hashing algorithm these days is FreeBSD’s iterated MD5; cracking such a hash would take 5.2e+06 CPU-years.</p>
<p>But a modern GPU can crack about 250 times as fast, so that same iterated MD5 would fall in 2e+04 GPU-years.</p>
<p>That GPU costs about US$1.45 per day to run in 2011, so cracking the password would cost about US$3e+09.</p>
<p>I've started using a password generated this way in place of a 9-printable- ASCII-character random password, which is equally strong. Munroe's assertion that these passwords are much easier to memorize is correct.  However, there is still a problem: because there are many fewer bits of entropy per character (about 1.7 instead of 6.6) there is a lot of redundancy in the password, and so attacks such as the ssh timing-channel attack (the Song, Wagner, and Tian Herbivore attack, which I learned about from Bram Cohen in the Bagdad Café in the wee hours one morning, years ago) and keyboard audio recording attacks have a much better chance of capturing enough information to make the password attackable.</p>
<p>My countermeasure to the Herbivore attack, which works well with 9-character password but is extremely annoying with my new password, is to type the password with a half-second delay between characters, so that the timing channel does not carry much information about the actual characters used. Additionally, the lower length of the 9-character password inherently gives the Herbivore approach much less information to chew on.</p>
<p>Other possible countermeasures include using Emacs shell-mode, which prompts you locally for the password when it recognizes a password prompt and then sends the whole password at once, and copying and pasting the password from somewhere else.</p>
<p>As you'd expect, this password also takes a little while longer to type: about 6 seconds instead of about 3 seconds.</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="com">#!/usr/bin/python</span><span class="pln">
</span><span class="com"># -*- coding: utf-8 -*-</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> random</span><span class="pun">,</span><span class="pln"> itertools</span><span class="pun">,</span><span class="pln"> os</span><span class="pun">,</span><span class="pln"> sys

</span><span class="kwd">def</span><span class="pln"> main</span><span class="pun">(</span><span class="pln">argv</span><span class="pun">):</span><span class="pln">
    </span><span class="kwd">try</span><span class="pun">:</span><span class="pln">
        nwords </span><span class="pun">=</span><span class="pln"> int</span><span class="pun">(</span><span class="pln">argv</span><span class="pun">[</span><span class="lit">1</span><span class="pun">])</span><span class="pln">
    </span><span class="kwd">except</span><span class="pln"> </span><span class="typ">IndexError</span><span class="pun">:</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> usage</span><span class="pun">(</span><span class="pln">argv</span><span class="pun">[</span><span class="lit">0</span><span class="pun">])</span><span class="pln">

    </span><span class="kwd">try</span><span class="pun">:</span><span class="pln">
        nbits </span><span class="pun">=</span><span class="pln"> int</span><span class="pun">(</span><span class="pln">argv</span><span class="pun">[</span><span class="lit">2</span><span class="pun">])</span><span class="pln">
    </span><span class="kwd">except</span><span class="pln"> </span><span class="typ">IndexError</span><span class="pun">:</span><span class="pln">
        nbits </span><span class="pun">=</span><span class="pln"> </span><span class="lit">11</span><span class="pln">

    filename </span><span class="pun">=</span><span class="pln"> os</span><span class="pun">.</span><span class="pln">path</span><span class="pun">.</span><span class="pln">join</span><span class="pun">(</span><span class="pln">os</span><span class="pun">.</span><span class="pln">environ</span><span class="pun">[</span><span class="str">'HOME'</span><span class="pun">],</span><span class="pln"> </span><span class="str">'devel'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'wordlist'</span><span class="pun">)</span><span class="pln">
    wordlist </span><span class="pun">=</span><span class="pln"> read_file</span><span class="pun">(</span><span class="pln">filename</span><span class="pun">,</span><span class="pln"> nbits</span><span class="pun">)</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> len</span><span class="pun">(</span><span class="pln">wordlist</span><span class="pun">)</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">2</span><span class="pun">**</span><span class="pln">nbits</span><span class="pun">:</span><span class="pln">
        sys</span><span class="pun">.</span><span class="pln">stderr</span><span class="pun">.</span><span class="pln">write</span><span class="pun">(</span><span class="str">"%r contains only %d words, not %d.\n"</span><span class="pln"> </span><span class="pun">%</span><span class="pln">
                         </span><span class="pun">(</span><span class="pln">filename</span><span class="pun">,</span><span class="pln"> len</span><span class="pun">(</span><span class="pln">wordlist</span><span class="pun">),</span><span class="pln"> </span><span class="lit">2</span><span class="pun">**</span><span class="pln">nbits</span><span class="pun">))</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="lit">2</span><span class="pln">

    display_password</span><span class="pun">(</span><span class="pln">generate_password</span><span class="pun">(</span><span class="pln">nwords</span><span class="pun">,</span><span class="pln"> wordlist</span><span class="pun">),</span><span class="pln"> nwords</span><span class="pun">,</span><span class="pln"> nbits</span><span class="pun">)</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="lit">0</span><span class="pln">

</span><span class="kwd">def</span><span class="pln"> usage</span><span class="pun">(</span><span class="pln">argv0</span><span class="pun">):</span><span class="pln">
    p </span><span class="pun">=</span><span class="pln"> sys</span><span class="pun">.</span><span class="pln">stderr</span><span class="pun">.</span><span class="pln">write
    p</span><span class="pun">(</span><span class="str">"Usage: %s nwords [nbits]\n"</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> argv0</span><span class="pun">)</span><span class="pln">
    p</span><span class="pun">(</span><span class="str">"Generates a password of nwords words, each with nbits bits\n"</span><span class="pun">)</span><span class="pln">
    p</span><span class="pun">(</span><span class="str">"of entropy, choosing words from the first entries in\n"</span><span class="pun">)</span><span class="pln">
    p</span><span class="pun">(</span><span class="str">"$HOME/devel/wordlist, which should be in the same format as\n"</span><span class="pun">)</span><span class="pln">
    p</span><span class="pun">(</span><span class="str">"&lt;http://canonical.org/~kragen/sw/wordlist&gt;, which is a text file\n"</span><span class="pun">)</span><span class="pln">
    p</span><span class="pun">(</span><span class="str">"with one word per line, preceded by its frequency, most frequent\n"</span><span class="pun">)</span><span class="pln">
    p</span><span class="pun">(</span><span class="str">"words first.\n"</span><span class="pun">)</span><span class="pln">
    p</span><span class="pun">(</span><span class="str">"\nRecommended:\n"</span><span class="pun">)</span><span class="pln">
    p</span><span class="pun">(</span><span class="str">"    %s 5 12\n"</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> argv0</span><span class="pun">)</span><span class="pln">
    p</span><span class="pun">(</span><span class="str">"    %s 6\n"</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> argv0</span><span class="pun">)</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="lit">1</span><span class="pln">

</span><span class="kwd">def</span><span class="pln"> read_file</span><span class="pun">(</span><span class="pln">filename</span><span class="pun">,</span><span class="pln"> nbits</span><span class="pun">):</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">[</span><span class="pln">line</span><span class="pun">.</span><span class="pln">split</span><span class="pun">()[</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="kwd">for</span><span class="pln"> line </span><span class="kwd">in</span><span class="pln">
            itertools</span><span class="pun">.</span><span class="pln">islice</span><span class="pun">(</span><span class="pln">open</span><span class="pun">(</span><span class="pln">filename</span><span class="pun">),</span><span class="pln"> </span><span class="lit">2</span><span class="pun">**</span><span class="pln">nbits</span><span class="pun">)]</span><span class="pln">

</span><span class="kwd">def</span><span class="pln"> generate_password</span><span class="pun">(</span><span class="pln">nwords</span><span class="pun">,</span><span class="pln"> wordlist</span><span class="pun">):</span><span class="pln">
    choice </span><span class="pun">=</span><span class="pln"> random</span><span class="pun">.</span><span class="typ">SystemRandom</span><span class="pun">().</span><span class="pln">choice
    </span><span class="kwd">return</span><span class="pln"> </span><span class="str">' '</span><span class="pun">.</span><span class="pln">join</span><span class="pun">(</span><span class="pln">choice</span><span class="pun">(</span><span class="pln">wordlist</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">for</span><span class="pln"> ii </span><span class="kwd">in</span><span class="pln"> range</span><span class="pun">(</span><span class="pln">nwords</span><span class="pun">))</span><span class="pln">

</span><span class="kwd">def</span><span class="pln"> display_password</span><span class="pun">(</span><span class="pln">password</span><span class="pun">,</span><span class="pln"> nwords</span><span class="pun">,</span><span class="pln"> nbits</span><span class="pun">):</span><span class="pln">
    </span><span class="kwd">print</span><span class="pln"> </span><span class="str">'Your password is "%s".'</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> password
    entropy </span><span class="pun">=</span><span class="pln"> nwords </span><span class="pun">*</span><span class="pln"> nbits
    </span><span class="kwd">print</span><span class="pln"> </span><span class="str">"That's equivalent to a %d-bit key."</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> entropy
    </span><span class="kwd">print</span><span class="pln">

    </span><span class="com"># My Celeron E1200</span><span class="pln">
    </span><span class="com"># (&lt;http://ark.intel.com/products/34440/Intel-Celeron-Processor-E1200-(512K-Cache-1_60-GHz-800-MHz-FSB)&gt;)</span><span class="pln">
    </span><span class="com"># was released on January 20, 2008.  Running it in 32-bit mode,</span><span class="pln">
    </span><span class="com"># john --test (&lt;http://www.openwall.com/john/&gt;) reports that it</span><span class="pln">
    </span><span class="com"># can do 7303000 MD5 operations per second, but I’m pretty sure</span><span class="pln">
    </span><span class="com"># that’s a single-core number (I don’t think John is</span><span class="pln">
    </span><span class="com"># multithreaded) on a dual-core processor.</span><span class="pln">
    t </span><span class="pun">=</span><span class="pln"> years</span><span class="pun">(</span><span class="pln">entropy</span><span class="pun">,</span><span class="pln"> </span><span class="lit">7303000</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">2</span><span class="pun">)</span><span class="pln">
    </span><span class="kwd">print</span><span class="pln"> </span><span class="str">"That password would take %.2g CPU-years to crack"</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> t
    </span><span class="kwd">print</span><span class="pln"> </span><span class="str">"on my inexpensive Celeron E1200 from 2008,"</span><span class="pln">
    </span><span class="kwd">print</span><span class="pln"> </span><span class="str">"assuming an offline attack on a MS-Cache hash,"</span><span class="pln">
    </span><span class="kwd">print</span><span class="pln"> </span><span class="str">"which is the worst password hashing algorithm in common use,"</span><span class="pln">
    </span><span class="kwd">print</span><span class="pln"> </span><span class="str">"slightly worse than even simple MD5."</span><span class="pln">
    </span><span class="kwd">print</span><span class="pln">

    t </span><span class="pun">=</span><span class="pln"> years</span><span class="pun">(</span><span class="pln">entropy</span><span class="pun">,</span><span class="pln"> </span><span class="lit">3539</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">2</span><span class="pun">)</span><span class="pln">
    </span><span class="kwd">print</span><span class="pln"> </span><span class="str">"The most common password-hashing algorithm these days is FreeBSD’s"</span><span class="pln">
    </span><span class="kwd">print</span><span class="pln"> </span><span class="str">"iterated MD5; cracking such a hash would take %.2g CPU-years."</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> t
    </span><span class="kwd">print</span><span class="pln">

    </span><span class="com"># (As it happens, my own machines use Drepper’s SHA-2-based</span><span class="pln">
    </span><span class="com"># hashing algorithm that was developed to replace the one</span><span class="pln">
    </span><span class="com"># mentioned above; I am assuming that it’s at least as slow as the</span><span class="pln">
    </span><span class="com"># MD5-crypt.)</span><span class="pln">

    </span><span class="com"># &lt;https://en.bitcoin.it/wiki/Mining_hardware_comparison&gt; says a</span><span class="pln">
    </span><span class="com"># Core 2 Duo U7600 can do 1.1 Mhash/s (of Bitcoin) at a 1.2GHz</span><span class="pln">
    </span><span class="com"># clock with one thread.  The Celeron in my machine that I</span><span class="pln">
    </span><span class="com"># benchmarked is basically a Core 2 Duo with a smaller cache, so</span><span class="pln">
    </span><span class="com"># I’m going to assume that it could probably do about 1.5Mhash/s.</span><span class="pln">
    </span><span class="com"># All common password-hashing algorithms (the ones mentioned</span><span class="pln">
    </span><span class="com"># above, the others implemented in John, and bcrypt, but not</span><span class="pln">
    </span><span class="com"># scrypt) use very little memory and, I believe, should scale on</span><span class="pln">
    </span><span class="com"># GPUs comparably to the SHA-256 used in Bitcoin.</span><span class="pln">

    </span><span class="com"># The same mining-hardware comparison says a Radeon 5870 card can</span><span class="pln">
    </span><span class="com"># do 393.46 Mhash/s for US$350.</span><span class="pln">

    </span><span class="kwd">print</span><span class="pln"> </span><span class="str">"But a modern GPU can crack about 250 times as fast,"</span><span class="pln">
    </span><span class="kwd">print</span><span class="pln"> </span><span class="str">"so that same iterated MD5 would fall in %.1g GPU-years."</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> </span><span class="pun">(</span><span class="pln">t </span><span class="pun">/</span><span class="pln"> </span><span class="lit">250</span><span class="pun">)</span><span class="pln">
    </span><span class="kwd">print</span><span class="pln">

    </span><span class="com"># Suppose we depreciate the video card by Moore’s law,</span><span class="pln">
    </span><span class="com"># i.e. halving in value every 18 months.  That's a loss of about</span><span class="pln">
    </span><span class="com"># 0.13% in value every day; at US$350, that’s about 44¢ per day,</span><span class="pln">
    </span><span class="com"># or US$160 per GPU-year.  If someone wanted your password as</span><span class="pln">
    </span><span class="com"># quickly as possible, they could distribute the cracking job</span><span class="pln">
    </span><span class="com"># across a network of millions of these cards.  The cards</span><span class="pln">
    </span><span class="com"># additionally use about 200 watts of power, which at 16¢/kWh</span><span class="pln">
    </span><span class="com"># works out to 77¢ per day.  If we assume an additional 20%</span><span class="pln">
    </span><span class="com"># overhead, that’s US$1.45/day or US$529/GPU-year.</span><span class="pln">
    cost_per_day </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1.45</span><span class="pln">
    cost_per_crack </span><span class="pun">=</span><span class="pln"> cost_per_day </span><span class="pun">*</span><span class="pln"> </span><span class="lit">365</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> t
    </span><span class="kwd">print</span><span class="pln"> </span><span class="str">"That GPU costs about US$%.2f per day to run in 2011,"</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> cost_per_day
    </span><span class="kwd">print</span><span class="pln"> </span><span class="str">"so cracking the password would cost about US$%.1g."</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> cost_per_crack

</span><span class="kwd">def</span><span class="pln"> years</span><span class="pun">(</span><span class="pln">entropy</span><span class="pun">,</span><span class="pln"> crypts_per_second</span><span class="pun">):</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> float</span><span class="pun">(</span><span class="lit">2</span><span class="pun">**</span><span class="pln">entropy</span><span class="pun">)</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> crypts_per_second </span><span class="pun">/</span><span class="pln"> </span><span class="lit">86400</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> </span><span class="lit">365.2422</span><span class="pln">

</span><span class="kwd">if</span><span class="pln"> __name__ </span><span class="pun">==</span><span class="pln"> </span><span class="str">'__main__'</span><span class="pun">:</span><span class="pln">
    sys</span><span class="pun">.</span><span class="pln">exit</span><span class="pun">(</span><span class="pln">main</span><span class="pun">(</span><span class="pln">sys</span><span class="pun">.</span><span class="pln">argv</span><span class="pun">))</span></code></pre>
</div></text><author><a href="/users/141818/roshan-mathews">Roshan Mathews</a></author><comments><comment><text><span class="comment-copy">could you put <code>generate_password()</code> (with <code>random.SystemRandom()</code>) at the top of your answer? It might help <a href="http://permalink.gmane.org/gmane.comp.python.ideas/36097" rel="nofollow noreferrer">people who landed here searching for: "python password generator"</a></span></text><author><a class="comment-user" href="/users/4279/j-f-sebastian" title="201,387 reputation">J.F. Sebastian</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>implementing @Thomas Pornin solution</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="kwd">import</span><span class="pln"> M2Crypto
</span><span class="kwd">import</span><span class="pln"> string

</span><span class="kwd">def</span><span class="pln"> random_password</span><span class="pun">(</span><span class="pln">length</span><span class="pun">=</span><span class="lit">10</span><span class="pun">):</span><span class="pln">
    chars </span><span class="pun">=</span><span class="pln"> string</span><span class="pun">.</span><span class="pln">ascii_uppercase </span><span class="pun">+</span><span class="pln"> string</span><span class="pun">.</span><span class="pln">digits </span><span class="pun">+</span><span class="pln"> string</span><span class="pun">.</span><span class="pln">ascii_lowercase
    password </span><span class="pun">=</span><span class="pln"> </span><span class="str">''</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> i </span><span class="kwd">in</span><span class="pln"> range</span><span class="pun">(</span><span class="pln">length</span><span class="pun">):</span><span class="pln">
        password </span><span class="pun">+=</span><span class="pln"> chars</span><span class="pun">[</span><span class="pln">ord</span><span class="pun">(</span><span class="pln">M2Crypto</span><span class="pun">.</span><span class="pln">m2</span><span class="pun">.</span><span class="pln">rand_bytes</span><span class="pun">(</span><span class="lit">1</span><span class="pun">))</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> len</span><span class="pun">(</span><span class="pln">chars</span><span class="pun">)]</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> password</span></code></pre>
</div></text><author><a href="/users/486209/yossi">yossi</a></author><comments><comment><text><span class="comment-copy">you could simply use os.urandom(1) (cryptographically strong) and remove the dependency from M2Crypto</span></text><author><a class="comment-user" href="/users/210090/riccardo-galli" title="5,685 reputation">Riccardo Galli</a></author></comment><comment><text><span class="comment-copy">Using <code>% len(chars)</code> this way has a slight bias towards the first 8 characters in <code>chars</code>. Each of these letters would appear 1.95% of the time, compared to 1.56% for the other characters.</span></text><author><a class="comment-user" href="/users/3786026/nick-frost" title="424 reputation">Nick Frost</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Another implemention of the XKCD method:</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="com">#!/usr/bin/env python</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> random
</span><span class="kwd">import</span><span class="pln"> re

</span><span class="com"># apt-get install wbritish</span><span class="pln">
</span><span class="kwd">def</span><span class="pln"> randomWords</span><span class="pun">(</span><span class="pln">num</span><span class="pun">,</span><span class="pln"> dictionary</span><span class="pun">=</span><span class="str">"/usr/share/dict/british-english"</span><span class="pun">):</span><span class="pln">
  r </span><span class="pun">=</span><span class="pln"> random</span><span class="pun">.</span><span class="typ">SystemRandom</span><span class="pun">()</span><span class="pln"> </span><span class="com"># i.e. preferably not pseudo-random</span><span class="pln">
  f </span><span class="pun">=</span><span class="pln"> open</span><span class="pun">(</span><span class="pln">dictionary</span><span class="pun">,</span><span class="pln"> </span><span class="str">"r"</span><span class="pun">)</span><span class="pln">
  count </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pln">
  chosen </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[]</span><span class="pln">
  </span><span class="kwd">for</span><span class="pln"> i </span><span class="kwd">in</span><span class="pln"> range</span><span class="pun">(</span><span class="pln">num</span><span class="pun">):</span><span class="pln">
    chosen</span><span class="pun">.</span><span class="pln">append</span><span class="pun">(</span><span class="str">""</span><span class="pun">)</span><span class="pln">
  prog </span><span class="pun">=</span><span class="pln"> re</span><span class="pun">.</span><span class="pln">compile</span><span class="pun">(</span><span class="str">"^[a-z]{5,9}$"</span><span class="pun">)</span><span class="pln"> </span><span class="com"># reasonable length, no proper nouns</span><span class="pln">
  </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">f</span><span class="pun">):</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> word </span><span class="kwd">in</span><span class="pln"> f</span><span class="pun">:</span><span class="pln">
      </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">prog</span><span class="pun">.</span><span class="pln">match</span><span class="pun">(</span><span class="pln">word</span><span class="pun">)):</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> i </span><span class="kwd">in</span><span class="pln"> range</span><span class="pun">(</span><span class="pln">num</span><span class="pun">):</span><span class="pln"> </span><span class="com"># generate all words in one pass thru file</span><span class="pln">
          </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">r</span><span class="pun">.</span><span class="pln">randint</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="pln">count</span><span class="pun">)</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pun">):</span><span class="pln"> 
            chosen</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> word</span><span class="pun">.</span><span class="pln">strip</span><span class="pun">()</span><span class="pln">
        count </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">1</span><span class="pln">
  </span><span class="kwd">return</span><span class="pun">(</span><span class="pln">chosen</span><span class="pun">)</span><span class="pln">

</span><span class="kwd">def</span><span class="pln"> genPassword</span><span class="pun">(</span><span class="pln">num</span><span class="pun">=</span><span class="lit">4</span><span class="pun">):</span><span class="pln">
  </span><span class="kwd">return</span><span class="pun">(</span><span class="str">" "</span><span class="pun">.</span><span class="pln">join</span><span class="pun">(</span><span class="pln">randomWords</span><span class="pun">(</span><span class="pln">num</span><span class="pun">)))</span><span class="pln">

</span><span class="kwd">if</span><span class="pun">(</span><span class="pln">__name__ </span><span class="pun">==</span><span class="pln"> </span><span class="str">"__main__"</span><span class="pun">):</span><span class="pln">
  </span><span class="kwd">print</span><span class="pln"> genPassword</span><span class="pun">()</span></code></pre>
<p>Sample output:</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="pln">$ </span><span class="pun">./</span><span class="pln">randompassword</span><span class="pun">.</span><span class="pln">py
affluent afford scarlets twines
$ </span><span class="pun">./</span><span class="pln">randompassword</span><span class="pun">.</span><span class="pln">py
speedboat ellipse further staffer</span></code></pre>
</div></text><author><a href="/users/46478/ojw">OJW</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I know this question was posted back in 2011, but for those coming to it now in 2014 and beyond, I have one thing to say: RESIST THE URGE TO REINVENT THE WHEEL.</p>
<p>In these situations your best bet is to search for open-source software, e.g., constrain your search to github results. By far the best thing I've found:</p>
<p><strong><a href="https://github.com/redacted/XKCD-password-generator" rel="nofollow">https://github.com/redacted/XKCD-password-generator</a></strong></p>
</div></text><author><a href="/users/406281/rsaw">rsaw</a></author><comments><comment><text><span class="comment-copy">Agreed.  There are some nice options in the github version, e.g. to print out how much entropy your password has, and to let you provide an "acrostic" so that the first character of each word matches a word of your choice.</span></text><author><a class="comment-user" href="/users/507544/nealmcb" title="3,713 reputation">nealmcb</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Considering your comment,</p>
<blockquote>
<p>I just need to be able to generate passwords that are more secure than the ones I would come up with in my head.</p>
</blockquote>
<p>it seems you want to use your program to generate passwords, rather than just writing it as an exercise. It is preferable to use an existing implementation, because if you make a mistake, the output might be compromised. Read about <a href="http://en.wikipedia.org/wiki/Random_number_generator_attack" rel="nofollow">random number generator attacks</a>; in particular, a well-known RNG bug in Debian exposed people's SSL private keys.</p>
<p>So instead, consider using <a href="http://linux.die.net/man/1/pwgen" rel="nofollow"><code>pwgen</code></a>. It provides several options, which you should choose depending on what you plan to use the passwords for.</p>
</div></text><author><a href="/users/319931/mechanical-snail">Mechanical snail</a></author><comments><comment><text><span class="comment-copy">The Debian vulnerability was an implementation error. Generally, <code>/dev/urando</code> &amp; <code>/dev/random</code> are non-distinguishable from true random (except for the first 10 minutes or so after system boot)</span></text><author><a class="comment-user" href="/users/22674/jacco" title="15,768 reputation">Jacco</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="kwd">import</span><span class="pln"> random


r </span><span class="pun">=</span><span class="pln"> random</span><span class="pun">.</span><span class="typ">SystemRandom</span><span class="pun">()</span><span class="pln">


</span><span class="kwd">def</span><span class="pln"> generate_password</span><span class="pun">(</span><span class="pln">words</span><span class="pun">,</span><span class="pln"> top</span><span class="pun">=</span><span class="lit">2000</span><span class="pun">,</span><span class="pln"> k</span><span class="pun">=</span><span class="lit">4</span><span class="pun">,</span><span class="pln"> numbers</span><span class="pun">=</span><span class="kwd">None</span><span class="pun">,</span><span class="pln"> characters</span><span class="pun">=</span><span class="kwd">None</span><span class="pun">,</span><span class="pln">
                      first_upper</span><span class="pun">=</span><span class="kwd">True</span><span class="pun">):</span><span class="pln">
    </span><span class="str">"""Return a random password based on a sorted word list."""</span><span class="pln">
    elements </span><span class="pun">=</span><span class="pln"> r</span><span class="pun">.</span><span class="pln">sample</span><span class="pun">(</span><span class="pln">words</span><span class="pun">[:</span><span class="pln">top</span><span class="pun">],</span><span class="pln"> k</span><span class="pun">)</span><span class="pln">

    </span><span class="kwd">if</span><span class="pln"> numbers</span><span class="pun">:</span><span class="pln">
        elements</span><span class="pun">.</span><span class="pln">insert</span><span class="pun">(</span><span class="pln">r</span><span class="pun">.</span><span class="pln">randint</span><span class="pun">(</span><span class="lit">1</span><span class="pun">,</span><span class="pln"> len</span><span class="pun">(</span><span class="pln">elements</span><span class="pun">)),</span><span class="pln"> r</span><span class="pun">.</span><span class="pln">choice</span><span class="pun">(</span><span class="pln">numbers</span><span class="pun">))</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> characters</span><span class="pun">:</span><span class="pln">
        elements</span><span class="pun">.</span><span class="pln">insert</span><span class="pun">(</span><span class="pln">r</span><span class="pun">.</span><span class="pln">randint</span><span class="pun">(</span><span class="lit">1</span><span class="pun">,</span><span class="pln"> len</span><span class="pun">(</span><span class="pln">elements</span><span class="pun">)),</span><span class="pln"> r</span><span class="pun">.</span><span class="pln">choice</span><span class="pun">(</span><span class="pln">characters</span><span class="pun">))</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> first_upper</span><span class="pun">:</span><span class="pln">
        elements</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> elements</span><span class="pun">[</span><span class="lit">0</span><span class="pun">].</span><span class="pln">title</span><span class="pun">()</span><span class="pln">

    </span><span class="kwd">return</span><span class="pln"> </span><span class="str">''</span><span class="pun">.</span><span class="pln">join</span><span class="pun">(</span><span class="pln">elements</span><span class="pun">)</span><span class="pln">


</span><span class="kwd">if</span><span class="pln"> __name__ </span><span class="pun">==</span><span class="pln"> </span><span class="str">'__main__'</span><span class="pun">:</span><span class="pln">
    </span><span class="kwd">with</span><span class="pln"> open</span><span class="pun">(</span><span class="str">'./google-10000-english-usa.txt'</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">as</span><span class="pln"> f</span><span class="pun">:</span><span class="pln">
        words </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">w</span><span class="pun">.</span><span class="pln">strip</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">for</span><span class="pln"> w </span><span class="kwd">in</span><span class="pln"> f</span><span class="pun">]</span><span class="pln">
    </span><span class="kwd">print</span><span class="pun">(</span><span class="pln">generate_password</span><span class="pun">(</span><span class="pln">words</span><span class="pun">,</span><span class="pln"> numbers</span><span class="pun">=</span><span class="str">'0123456789'</span><span class="pun">,</span><span class="pln"> characters</span><span class="pun">=</span><span class="str">'!@#$%'</span><span class="pun">))</span></code></pre>
<ul>
<li>Generates passwords that you can remember</li>
<li>Uses <code>os.urandom()</code></li>
<li>Handles real-world rules like adding numbers, uppercase, characters.</li>
</ul>
<p>Sure it can be improved, but this is what I use.</p>
</div></text><author><a href="/users/290443/mikerand">MikeRand</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>You can't trust python's pseudo random number generator when generating a password. It is not necessarily cryptographically random. You are seeding the pseudo random number generator from <code>os.urandom</code> which is a good start. But then you depend on python's generator after that.</p>
<p>A better choice would be the <a href="http://docs.python.org/library/random.html#random.SystemRandom" rel="nofollow"><code>random.SystemRandom()</code></a> class which takes random numbers from the same source as <code>urandom</code>. According to the python documentation that should be good enough for cryptographic use. The <code>SystemRandom</code> class gives you everything that the main random class does but you don't need to worry about the pseudorandomness.</p>
<p>Example code using random.SystemRandom (for Python 2.6):</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="kwd">import</span><span class="pln"> random</span><span class="pun">,</span><span class="pln"> string
length </span><span class="pun">=</span><span class="pln"> </span><span class="lit">13</span><span class="pln">
chars </span><span class="pun">=</span><span class="pln"> string</span><span class="pun">.</span><span class="pln">ascii_letters </span><span class="pun">+</span><span class="pln"> string</span><span class="pun">.</span><span class="pln">digits </span><span class="pun">+</span><span class="pln"> </span><span class="str">'!@#$%^&amp;*()'</span><span class="pln">

rnd </span><span class="pun">=</span><span class="pln"> random</span><span class="pun">.</span><span class="typ">SystemRandom</span><span class="pun">()</span><span class="pln">
</span><span class="kwd">print</span><span class="pln"> </span><span class="str">''</span><span class="pun">.</span><span class="pln">join</span><span class="pun">(</span><span class="pln">rnd</span><span class="pun">.</span><span class="pln">choice</span><span class="pun">(</span><span class="pln">chars</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">for</span><span class="pln"> i </span><span class="kwd">in</span><span class="pln"> range</span><span class="pun">(</span><span class="pln">length</span><span class="pun">))</span></code></pre>
<p>Note: Your mileage may vary - the Python Documentation says that random.SystemRandom availability varies by operating system.</p>
</div></text><author><a href="/users/322806/winston-ewert">Winston Ewert</a></author><comments><comment><text><span class="comment-copy">The Linux PRNG (<code>/dev/urandom</code>) is considered cryptographically secure. See <a href="http://security.stackexchange.com/questions/3936/is-a-rand-from-dev-urandom-secure-for-a-login-key" title="is a rand from dev urandom secure for a login key">security.stackexchange.com/questions/3936/…</a>.</span></text><author><a class="comment-user" href="/users/319931/mechanical-snail" title="14,783 reputation">Mechanical snail</a></author></comment><comment><text><span class="comment-copy">I think you are getting your concepts mixed up here. In a deterministic computer there is no true randomness; everything (including <code>/dev/urandom</code>) is pseudo random unless you have specialized hardware.</span></text><author><a class="comment-user" href="/users/396458/nulluserexception" title="56,528 reputation">NullUserException</a></author></comment><comment><text><span class="comment-copy">@NullUserExceptionఠ_ఠ +1 A consumer can do this with a webcam or CCD in a pitch black environment (see <a href="http://www.lavarnd.org/what/how-it-works.html" rel="nofollow noreferrer"><code>LavaRnd</code></a>).</span></text><author><a class="comment-user" href="/users/244343/darvids0n" title="10,279 reputation">darvids0n</a></author></comment><comment><text><span class="comment-copy">@NullUserExceptionఠ_ఠ, There a few source of randomness that your computer does collect. However, I was wrong, urandom mixes that with a pseudorandom number generator. Nevertheless, using SystemRandom is a good idea because you can be sure its cryptographically random whereas the same isn't neccesairly true of the python random number generator.</span></text><author><a class="comment-user" href="/users/322806/winston-ewert" title="27,834 reputation">Winston Ewert</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>That way works.  It is perfectly fine.  If you had additional rules, such as excluding dictionary words, then you may want to include those filters as well, but the likelihood of randomly generating a dictionary word with that setup is extremely small.</p>
</div></text><author><a href="/users/60805/mvrak">mvrak</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Built my own CLI answer to the topic at hand (full source code at the following URL):</p>
<p><a href="http://0netenv.blogspot.com/2016/08/password-generator-with-argparse.html" rel="nofollow">http://0netenv.blogspot.com/2016/08/password-generator-with-argparse.html</a></p>
<p>Wrote a password generator using argparse.
Hope this helps someone (either building a password generator or using argparse)!</p>
<p>Either way, it was fun to build! </p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="pln">$ </span><span class="pun">./</span><span class="pln">pwgen</span><span class="pun">.</span><span class="pln">py </span><span class="pun">-</span><span class="pln">h
usage</span><span class="pun">:</span><span class="pln"> pwgen</span><span class="pun">.</span><span class="pln">py </span><span class="pun">[-</span><span class="pln">h</span><span class="pun">]</span><span class="pln"> </span><span class="pun">[-</span><span class="pln">c COUNT</span><span class="pun">]</span><span class="pln"> </span><span class="pun">[-</span><span class="pln">a</span><span class="pun">]</span><span class="pln"> </span><span class="pun">[-</span><span class="pln">l</span><span class="pun">]</span><span class="pln"> </span><span class="pun">[-</span><span class="pln">n</span><span class="pun">]</span><span class="pln"> </span><span class="pun">[-</span><span class="pln">s</span><span class="pun">]</span><span class="pln"> </span><span class="pun">[-</span><span class="pln">u</span><span class="pun">]</span><span class="pln"> </span><span class="pun">[-</span><span class="pln">p</span><span class="pun">]</span><span class="pln">

 </span><span class="typ">Create</span><span class="pln"> a random password
 </span><span class="typ">Special</span><span class="pln"> characters</span><span class="pun">,</span><span class="pln"> numbers</span><span class="pun">,</span><span class="pln"> UPPERCASE </span><span class="pun">-</span><span class="str">"Oscar"</span><span class="pun">,</span><span class="pln">
 </span><span class="kwd">and</span><span class="pln"> lowercase </span><span class="pun">-</span><span class="str">"lima"</span><span class="pln"> to avoid confusion</span><span class="pun">.</span><span class="pln">
 </span><span class="typ">Default</span><span class="pln"> options </span><span class="pun">(</span><span class="pln">no arguments</span><span class="pun">):</span><span class="pln"> </span><span class="pun">-</span><span class="pln">c </span><span class="lit">16</span><span class="pln"> </span><span class="pun">-</span><span class="pln">a
                </span><span class="typ">Enjoy</span><span class="pun">!</span><span class="pln"> </span><span class="pun">--</span><span class="lit">0NetEnv@gmail</span><span class="pun">.</span><span class="pln">com

optional arguments</span><span class="pun">:</span><span class="pln">
  </span><span class="pun">-</span><span class="pln">h</span><span class="pun">,</span><span class="pln"> </span><span class="pun">--</span><span class="pln">help            show this help message </span><span class="kwd">and</span><span class="pln"> exit
  </span><span class="pun">-</span><span class="pln">c COUNT</span><span class="pun">,</span><span class="pln"> </span><span class="pun">--</span><span class="pln">count COUNT
                        password length
  </span><span class="pun">-</span><span class="pln">a</span><span class="pun">,</span><span class="pln"> </span><span class="pun">--</span><span class="pln">all             same </span><span class="kwd">as</span><span class="pln"> </span><span class="pun">-</span><span class="pln">l </span><span class="pun">-</span><span class="pln">n </span><span class="pun">-</span><span class="pln">s </span><span class="pun">-</span><span class="pln">u
  </span><span class="pun">-</span><span class="pln">l</span><span class="pun">,</span><span class="pln"> </span><span class="pun">--</span><span class="pln">lower           include lowercase characters
  </span><span class="pun">-</span><span class="pln">n</span><span class="pun">,</span><span class="pln"> </span><span class="pun">--</span><span class="pln">number          include </span><span class="lit">0</span><span class="pun">-</span><span class="lit">9</span><span class="pln">
  </span><span class="pun">-</span><span class="pln">s</span><span class="pun">,</span><span class="pln"> </span><span class="pun">--</span><span class="pln">special         include special characters
  </span><span class="pun">-</span><span class="pln">u</span><span class="pun">,</span><span class="pln"> </span><span class="pun">--</span><span class="pln">upper           include uppercase characters
  </span><span class="pun">-</span><span class="pln">p</span><span class="pun">,</span><span class="pln"> </span><span class="pun">--</span><span class="pln">license         </span><span class="kwd">print</span><span class="pln"> license </span><span class="kwd">and</span><span class="pln"> exit</span></code></pre>
<p>Here's the code:</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="com">#!/usr/bin/env python2</span><span class="pln">
</span><span class="com"># -*- coding: utf-8 -*-</span><span class="pln">

license </span><span class="pun">=</span><span class="pln"> </span><span class="str">"""
#  pwgen -- the pseudo-random password generator 
#
#  This software is distributed under the MIT license.
#    
#  The MIT License (MIT)
#
#  Copyright (c) 2016 0NetEnv 0netenv@gmail.com
#  Permission is hereby granted, free of charge, to any 
#  person obtaining a copy of this software and associated 
#  documentation files (the "Software"), to deal in the 
#  Software without restriction, including without 
#  limitation the rights to use, copy, modify, merge, 
#  publish, distribute, sublicense, and/or sell copies 
#  of the Software, and to permit persons to whom the 
#  Software is furnished to do so, subject to the following 
#  conditions:
#
#  The above copyright notice and this permission notice 
#  shall be included in all copies or substantial portions 
#  of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF 
#  ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED 
#  TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
#  PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT 
#  SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
#  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
#  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR 
#  IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
#  DEALINGS IN THE SOFTWARE.
#  
#  NOTE:
#  This software was tested on Slackware 14.2, Raspbian, &amp; 
#  Mac OS X 10.11
#
"""</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> string
</span><span class="kwd">import</span><span class="pln"> random
</span><span class="kwd">import</span><span class="pln"> sys
</span><span class="com"># first time using argparse library</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> argparse
</span><span class="com"># wanted to change the formatting of the help menu a little bit, so used RawTextHelpFormatter directly</span><span class="pln">
</span><span class="kwd">from</span><span class="pln"> argparse </span><span class="kwd">import</span><span class="pln"> </span><span class="typ">RawTextHelpFormatter</span><span class="pln">

typo </span><span class="pun">=</span><span class="pln"> </span><span class="str">''</span><span class="pln">
c </span><span class="pun">=</span><span class="pln"> </span><span class="lit">16</span><span class="pln">
counter </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pln">
line </span><span class="pun">=</span><span class="pln"> </span><span class="str">'-'</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">40</span><span class="pln">

</span><span class="com"># CREATE FUNCTION for PWGEN</span><span class="pln">
</span><span class="kwd">def</span><span class="pln"> pwgen</span><span class="pun">(</span><span class="pln">z</span><span class="pun">,</span><span class="pln"> t</span><span class="pun">):</span><span class="pln">
    </span><span class="com"># EMPTY SET OF CHARACTERS</span><span class="pln">
    charsset </span><span class="pun">=</span><span class="pln"> </span><span class="str">''</span><span class="pln">
    </span><span class="com"># UPPERCASE -"O"</span><span class="pln">
    U </span><span class="pun">=</span><span class="pln"> </span><span class="str">'ABCDEFGHIJKLMNPQRSTUVWXYZ'</span><span class="pln">
    </span><span class="com"># lowercase -"l"</span><span class="pln">
    L </span><span class="pun">=</span><span class="pln"> </span><span class="str">'abcdefghijkmnopqrstuvwxyz'</span><span class="pln">
    N </span><span class="pun">=</span><span class="pln"> </span><span class="str">'0123456789'</span><span class="pln">
    S </span><span class="pun">=</span><span class="pln"> </span><span class="str">'!@#$%^&amp;*?&lt;&gt;'</span><span class="pln">

    </span><span class="com"># make sure we're using an integer, not a char/string</span><span class="pln">
    z </span><span class="pun">=</span><span class="pln"> int</span><span class="pun">(</span><span class="pln">z</span><span class="pun">)</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> type </span><span class="kwd">in</span><span class="pln"> t</span><span class="pun">:</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="str">'u'</span><span class="pln"> </span><span class="kwd">in</span><span class="pln"> t</span><span class="pun">:</span><span class="pln">
            charsset </span><span class="pun">=</span><span class="pln"> charsset </span><span class="pun">+</span><span class="pln"> U
        </span><span class="kwd">if</span><span class="pln"> </span><span class="str">'l'</span><span class="pln"> </span><span class="kwd">in</span><span class="pln"> t</span><span class="pun">:</span><span class="pln">
            charsset </span><span class="pun">=</span><span class="pln"> charsset </span><span class="pun">+</span><span class="pln"> L
        </span><span class="kwd">if</span><span class="pln"> </span><span class="str">'n'</span><span class="pln"> </span><span class="kwd">in</span><span class="pln"> t</span><span class="pun">:</span><span class="pln">
            charsset </span><span class="pun">=</span><span class="pln"> charsset </span><span class="pun">+</span><span class="pln"> N
        </span><span class="kwd">if</span><span class="pln"> </span><span class="str">'s'</span><span class="pln"> </span><span class="kwd">in</span><span class="pln"> t</span><span class="pun">:</span><span class="pln">
            charsset </span><span class="pun">=</span><span class="pln"> charsset </span><span class="pun">+</span><span class="pln"> S
        </span><span class="kwd">if</span><span class="pln"> </span><span class="str">'a'</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> t</span><span class="pun">:</span><span class="pln">
            charsset </span><span class="pun">=</span><span class="pln"> charsset </span><span class="pun">+</span><span class="pln"> U </span><span class="pun">+</span><span class="pln"> L </span><span class="pun">+</span><span class="pln"> N </span><span class="pun">+</span><span class="pln"> S

    </span><span class="kwd">return</span><span class="pln"> </span><span class="str">''</span><span class="pun">.</span><span class="pln">join</span><span class="pun">(</span><span class="pln">random</span><span class="pun">.</span><span class="pln">choice</span><span class="pun">(</span><span class="pln">charsset</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">for</span><span class="pln"> _ </span><span class="kwd">in</span><span class="pln"> range</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="pln"> int</span><span class="pun">(</span><span class="pln">z</span><span class="pun">)))</span><span class="pln">

</span><span class="com"># GET ARGUMENTS using ARGPARSE</span><span class="pln">
parser </span><span class="pun">=</span><span class="pln"> argparse</span><span class="pun">.</span><span class="typ">ArgumentParser</span><span class="pun">(</span><span class="pln">description</span><span class="pun">=</span><span class="str">'\n Create a random password\n\
 Special characters, numbers, UPPERCASE -"Oscar",\n\
 and lowercase -"lima" to avoid confusion.\n\
 Default options (no arguments): -c 16 -a\n\
 \t\tEnjoy! --0NetEnv@gmail.com'</span><span class="pun">,</span><span class="pln"> formatter_class</span><span class="pun">=</span><span class="pln">argparse</span><span class="pun">.</span><span class="typ">RawTextHelpFormatter</span><span class="pun">)</span><span class="pln">
parser</span><span class="pun">.</span><span class="pln">add_argument</span><span class="pun">(</span><span class="str">"-c"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"--count"</span><span class="pun">,</span><span class="pln"> dest</span><span class="pun">=</span><span class="str">"count"</span><span class="pun">,</span><span class="pln"> action</span><span class="pun">=</span><span class="str">"store"</span><span class="pun">,</span><span class="pln"> help</span><span class="pun">=</span><span class="str">"password length"</span><span class="pun">)</span><span class="pln">
parser</span><span class="pun">.</span><span class="pln">add_argument</span><span class="pun">(</span><span class="str">"-a"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"--all"</span><span class="pun">,</span><span class="pln"> help</span><span class="pun">=</span><span class="str">"same as -l -n -s -u"</span><span class="pun">,</span><span class="pln"> action</span><span class="pun">=</span><span class="str">"store_true"</span><span class="pun">)</span><span class="pln">
parser</span><span class="pun">.</span><span class="pln">add_argument</span><span class="pun">(</span><span class="str">"-l"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"--lower"</span><span class="pun">,</span><span class="pln"> help</span><span class="pun">=</span><span class="str">"include lowercase characters"</span><span class="pun">,</span><span class="pln"> action</span><span class="pun">=</span><span class="str">"store_true"</span><span class="pun">)</span><span class="pln">
parser</span><span class="pun">.</span><span class="pln">add_argument</span><span class="pun">(</span><span class="str">"-n"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"--number"</span><span class="pun">,</span><span class="pln"> help</span><span class="pun">=</span><span class="str">"include 0-9"</span><span class="pun">,</span><span class="pln"> action</span><span class="pun">=</span><span class="str">"store_true"</span><span class="pun">)</span><span class="pln">
parser</span><span class="pun">.</span><span class="pln">add_argument</span><span class="pun">(</span><span class="str">"-s"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"--special"</span><span class="pun">,</span><span class="pln"> help</span><span class="pun">=</span><span class="str">"include special characters"</span><span class="pun">,</span><span class="pln"> action</span><span class="pun">=</span><span class="str">"store_true"</span><span class="pun">)</span><span class="pln">
parser</span><span class="pun">.</span><span class="pln">add_argument</span><span class="pun">(</span><span class="str">"-u"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"--upper"</span><span class="pun">,</span><span class="pln"> help</span><span class="pun">=</span><span class="str">"include uppercase characters"</span><span class="pun">,</span><span class="pln"> action</span><span class="pun">=</span><span class="str">"store_true"</span><span class="pun">)</span><span class="pln">
parser</span><span class="pun">.</span><span class="pln">add_argument</span><span class="pun">(</span><span class="str">"-p"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"--license"</span><span class="pun">,</span><span class="pln"> help</span><span class="pun">=</span><span class="str">"print license and exit"</span><span class="pun">,</span><span class="pln"> action</span><span class="pun">=</span><span class="str">"store_true"</span><span class="pun">)</span><span class="pln">

</span><span class="com"># COLLECT ARGPARSE RESULTS</span><span class="pln">
results </span><span class="pun">=</span><span class="pln"> args </span><span class="pun">=</span><span class="pln"> parser</span><span class="pun">.</span><span class="pln">parse_args</span><span class="pun">()</span><span class="pln">

</span><span class="com"># CHECK RESULTS</span><span class="pln">
</span><span class="com"># Check that a length was given.</span><span class="pln">
</span><span class="com"># If not, gripe and exit.</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> args</span><span class="pun">.</span><span class="pln">count </span><span class="pun">==</span><span class="pln"> </span><span class="str">'0'</span><span class="pun">:</span><span class="pln">
    </span><span class="kwd">print</span><span class="pln"> </span><span class="pun">(</span><span class="str">"Input error:\nCannot create a zero length password.\nExiting"</span><span class="pun">)</span><span class="pln">
    exit </span><span class="pun">(</span><span class="lit">0</span><span class="pun">)</span><span class="pln">
</span><span class="com"># check character results and add to counter if </span><span class="pln">
</span><span class="com"># selection is made.</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> args</span><span class="pun">.</span><span class="pln">lower</span><span class="pun">:</span><span class="pln">
    typo </span><span class="pun">=</span><span class="pln"> typo </span><span class="pun">+</span><span class="pln"> </span><span class="str">'l'</span><span class="pln">
    counter </span><span class="pun">=</span><span class="pln"> counter </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pln">
    </span><span class="com">#print "lower"</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> args</span><span class="pun">.</span><span class="pln">number</span><span class="pun">:</span><span class="pln">
    typo </span><span class="pun">=</span><span class="pln"> typo </span><span class="pun">+</span><span class="pln"> </span><span class="str">'n'</span><span class="pln">
    counter </span><span class="pun">=</span><span class="pln"> counter </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pln">
    </span><span class="com">#print "number"</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> args</span><span class="pun">.</span><span class="pln">special</span><span class="pun">:</span><span class="pln">
    typo </span><span class="pun">=</span><span class="pln"> typo </span><span class="pun">+</span><span class="pln"> </span><span class="str">'s'</span><span class="pln">
    counter </span><span class="pun">=</span><span class="pln"> counter </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pln">
    </span><span class="com">#print "special"</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> args</span><span class="pun">.</span><span class="pln">upper</span><span class="pun">:</span><span class="pln">
    typo </span><span class="pun">=</span><span class="pln"> typo </span><span class="pun">+</span><span class="pln"> </span><span class="str">'u'</span><span class="pln">
    counter </span><span class="pun">=</span><span class="pln"> counter </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pln">
    </span><span class="com">#print "upper"</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> args</span><span class="pun">.</span><span class="pln">all</span><span class="pun">:</span><span class="pln">
    typo </span><span class="pun">=</span><span class="pln"> </span><span class="str">'a'</span><span class="pln">
    counter </span><span class="pun">=</span><span class="pln"> counter </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pln">
    </span><span class="com">#print "all"</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> args</span><span class="pun">.</span><span class="pln">license</span><span class="pun">:</span><span class="pln">
    </span><span class="kwd">print</span><span class="pln"> </span><span class="pun">(</span><span class="pln">license</span><span class="pun">)</span><span class="pln">
    exit </span><span class="pun">(</span><span class="lit">1</span><span class="pun">)</span><span class="pln">

</span><span class="com"># CHECK COUNTER</span><span class="pln">
</span><span class="com"># Check our counter and see if we used any command line </span><span class="pln">
</span><span class="com"># options. We don't want to error out.</span><span class="pln">
</span><span class="com"># try it gracefully. If no arguments are given, </span><span class="pln">
</span><span class="com"># use defaults and tell the user.</span><span class="pln">
</span><span class="com"># args.count comes from argparse and by default requires</span><span class="pln">
</span><span class="com"># an input to '-c'. We want to get around that for the </span><span class="pln">
</span><span class="com"># sake of convenience.</span><span class="pln">
</span><span class="com"># Without further adieu, here's our if statement:</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> args</span><span class="pun">.</span><span class="pln">count</span><span class="pun">:</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> counter </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pun">:</span><span class="pln">
        typo </span><span class="pun">=</span><span class="pln"> </span><span class="str">'a'</span><span class="pln">
        </span><span class="kwd">print</span><span class="pln"> </span><span class="pun">(</span><span class="str">"defaulting to '--all'"</span><span class="pun">)</span><span class="pln">
    </span><span class="kwd">print</span><span class="pln"> </span><span class="pun">(</span><span class="pln">line</span><span class="pun">)</span><span class="pln">
    </span><span class="kwd">print</span><span class="pln"> </span><span class="pun">(</span><span class="pln">pwgen</span><span class="pun">(</span><span class="pln">results</span><span class="pun">.</span><span class="pln">count</span><span class="pun">,</span><span class="pln">typo</span><span class="pun">))</span><span class="pln">
</span><span class="kwd">else</span><span class="pun">:</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> counter </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pun">:</span><span class="pln">
        typo </span><span class="pun">=</span><span class="pln"> </span><span class="str">'a'</span><span class="pln">
        </span><span class="kwd">print</span><span class="pln"> </span><span class="pun">(</span><span class="str">"defaulting to '--count 16 --all'"</span><span class="pun">)</span><span class="pln">
    </span><span class="kwd">print</span><span class="pln"> </span><span class="pun">(</span><span class="pln">line</span><span class="pun">)</span><span class="pln">
    </span><span class="kwd">print</span><span class="pln"> </span><span class="pun">(</span><span class="pln">pwgen</span><span class="pun">(</span><span class="pln">c</span><span class="pun">,</span><span class="pln">typo</span><span class="pun">))</span><span class="pln">
</span><span class="kwd">print</span><span class="pln"> </span><span class="pun">(</span><span class="pln">line</span><span class="pun">)</span><span class="pln">
</span><span class="com">#print typo</span></code></pre>
</div></text><author><a href="/users/6687075/0netenv">0NetEnv</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Here is another implementation (python 2; would require some minor rewrites to get it working in 3) that is much faster than OJW's, which seems to loop through the dictionary for each word, despite the comment/implication to the contrary. Timing of OJW's script on my machine, with an 80,000 IOP SSD: </p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="pln">real    </span><span class="lit">0m3.264s</span><span class="pln">
user    </span><span class="lit">0m1.768s</span><span class="pln">
sys     </span><span class="lit">0m1.444s</span></code></pre>
<p>The following script loads the whole dictionary into a list, then picks words based on a random selection of the index value, using OJW's regex for filtering. </p>
<p>This also generates 10 passphrase sets, allows passing command-line parameters to adjust the number of words, and adds number and symbol padding (also adjustable length). </p>
<p>Sample times for this script:</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="pln">real    </span><span class="lit">0m0.289s</span><span class="pln">
user    </span><span class="lit">0m0.176s</span><span class="pln">
sys     </span><span class="lit">0m0.108s</span></code></pre>
<p>Usage: xkcdpass-mod.py 2 4 (for example; these are the default values). </p>
<p>It prints spaces in the output for easy reading, although I've almost never encountered an online service that allows using them, so I would just ignore them. This could definitely be cleaned up with argparse or getopt and allowing switches for including spaces or not, including/excluding symbols, capitals, etc., plus some additional refactoring, but I haven't gotten to that yet. So, without further ado: </p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="com">#!/usr/bin/env python</span><span class="pln">
</span><span class="com">#Copyright AMH, 2013; dedicated to public domain.</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> os</span><span class="pun">,</span><span class="pln"> re</span><span class="pun">,</span><span class="pln"> sys</span><span class="pun">,</span><span class="pln"> random
</span><span class="kwd">from</span><span class="pln"> sys </span><span class="kwd">import</span><span class="pln"> argv

</span><span class="kwd">def</span><span class="pln"> getargs</span><span class="pun">():</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> len</span><span class="pun">(</span><span class="pln">argv</span><span class="pun">)</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="lit">3</span><span class="pun">:</span><span class="pln">
        numwords </span><span class="pun">=</span><span class="pln"> argv</span><span class="pun">[</span><span class="lit">1</span><span class="pun">]</span><span class="pln">
        numpads </span><span class="pun">=</span><span class="pln"> argv</span><span class="pun">[</span><span class="lit">2</span><span class="pun">]</span><span class="pln">
        </span><span class="kwd">return</span><span class="pun">(</span><span class="pln">numwords</span><span class="pun">,</span><span class="pln"> numpads</span><span class="pun">)</span><span class="pln">
    </span><span class="kwd">elif</span><span class="pln"> len</span><span class="pun">(</span><span class="pln">argv</span><span class="pun">)</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="lit">2</span><span class="pun">:</span><span class="pln">
        numwords </span><span class="pun">=</span><span class="pln"> argv</span><span class="pun">[</span><span class="lit">1</span><span class="pun">]</span><span class="pln">
        numpads </span><span class="pun">=</span><span class="pln"> </span><span class="lit">4</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln">numwords</span><span class="pun">,</span><span class="pln"> numpads</span><span class="pun">)</span><span class="pln">
    </span><span class="kwd">else</span><span class="pun">:</span><span class="pln">
        numwords </span><span class="pun">=</span><span class="pln"> </span><span class="lit">2</span><span class="pln">
        numpads </span><span class="pun">=</span><span class="pln"> </span><span class="lit">4</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln">numwords</span><span class="pun">,</span><span class="pln"> numpads</span><span class="pun">)</span><span class="pln">

</span><span class="kwd">def</span><span class="pln"> dicopen</span><span class="pun">(</span><span class="pln">dictionary</span><span class="pun">=</span><span class="str">"/usr/share/dict/american-english"</span><span class="pun">):</span><span class="pln">
    f </span><span class="pun">=</span><span class="pln"> open</span><span class="pun">(</span><span class="pln">dictionary</span><span class="pun">,</span><span class="pln"> </span><span class="str">"r"</span><span class="pun">)</span><span class="pln">
    dic </span><span class="pun">=</span><span class="pln"> f</span><span class="pun">.</span><span class="pln">readlines</span><span class="pun">()</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> dic

</span><span class="kwd">def</span><span class="pln"> genPassword</span><span class="pun">(</span><span class="pln">numwords</span><span class="pun">,</span><span class="pln"> numpads</span><span class="pun">):</span><span class="pln">
    r </span><span class="pun">=</span><span class="pln"> random</span><span class="pun">.</span><span class="typ">SystemRandom</span><span class="pun">()</span><span class="pln">
    pads </span><span class="pun">=</span><span class="pln"> </span><span class="str">'0123456789!@#$%^&amp;*()'</span><span class="pln">
    padding </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[]</span><span class="pln">
    words </span><span class="pun">=</span><span class="pln"> dicopen</span><span class="pun">()</span><span class="pln">
    wordlist </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[]</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> i </span><span class="kwd">in</span><span class="pln"> range </span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="pln">int</span><span class="pun">(</span><span class="pln">numpads</span><span class="pun">)):</span><span class="pln">
        padding</span><span class="pun">.</span><span class="pln">append</span><span class="pun">(</span><span class="pln">pads</span><span class="pun">[</span><span class="pln">r</span><span class="pun">.</span><span class="pln">randint</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="pln">len</span><span class="pun">(</span><span class="pln">pads</span><span class="pun">)-</span><span class="lit">1</span><span class="pun">)])</span><span class="pln">
    </span><span class="com">#initialize counter for only adding filtered words to passphrase</span><span class="pln">
    j </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pln">
    </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">j </span><span class="pun">&lt;</span><span class="pln"> int</span><span class="pun">(</span><span class="pln">numwords</span><span class="pun">)):</span><span class="pln">
        inclusion_criteria </span><span class="pun">=</span><span class="pln"> re</span><span class="pun">.</span><span class="pln">compile</span><span class="pun">(</span><span class="str">'^[a-z]{5,10}$'</span><span class="pun">)</span><span class="pln">
        </span><span class="com">#Select a random number, then pull the word at that index value, rather than looping through the dictionary for each word</span><span class="pln">
        current_word </span><span class="pun">=</span><span class="pln"> words</span><span class="pun">[</span><span class="pln">r</span><span class="pun">.</span><span class="pln">randint</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="pln">len</span><span class="pun">(</span><span class="pln">words</span><span class="pun">)-</span><span class="lit">1</span><span class="pun">)].</span><span class="pln">strip</span><span class="pun">()</span><span class="pln">
        </span><span class="com">#Only append matching words</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> inclusion_criteria</span><span class="pun">.</span><span class="pln">match</span><span class="pun">(</span><span class="pln">current_word</span><span class="pun">):</span><span class="pln">
            wordlist</span><span class="pun">.</span><span class="pln">append</span><span class="pun">(</span><span class="pln">current_word</span><span class="pun">)</span><span class="pln">
            j </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">1</span><span class="pln">
        </span><span class="kwd">else</span><span class="pun">:</span><span class="pln">
        </span><span class="com">#Ignore non-matching words</span><span class="pln">
            </span><span class="kwd">pass</span><span class="pln">
    </span><span class="kwd">return</span><span class="pun">(</span><span class="str">" "</span><span class="pun">.</span><span class="pln">join</span><span class="pun">(</span><span class="pln">wordlist</span><span class="pun">)+</span><span class="str">' '</span><span class="pun">+</span><span class="str">''</span><span class="pun">.</span><span class="pln">join</span><span class="pun">(</span><span class="pln">padding</span><span class="pun">))</span><span class="pln">

</span><span class="kwd">if</span><span class="pun">(</span><span class="pln">__name__ </span><span class="pun">==</span><span class="pln"> </span><span class="str">"__main__"</span><span class="pun">):</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> i </span><span class="kwd">in</span><span class="pln"> range </span><span class="pun">(</span><span class="lit">1</span><span class="pun">,</span><span class="lit">11</span><span class="pun">):</span><span class="pln">
       </span><span class="kwd">print</span><span class="pln"> </span><span class="str">"item "</span><span class="pun">+</span><span class="pln">str</span><span class="pun">(</span><span class="pln">i</span><span class="pun">)+</span><span class="str">"\n"</span><span class="pun">+</span><span class="pln">genPassword</span><span class="pun">(</span><span class="pln">getargs</span><span class="pun">()[</span><span class="lit">0</span><span class="pun">],</span><span class="pln"> getargs</span><span class="pun">()[</span><span class="lit">1</span><span class="pun">])</span></code></pre>
<p>Sample output:</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="pun">[✗]─[</span><span class="pln">user@machine</span><span class="pun">]─[~/</span><span class="pln">bin</span><span class="pun">]</span><span class="pln">
</span><span class="pun">└──╼</span><span class="pln"> xkcdpass</span><span class="pun">-</span><span class="pln">mod</span><span class="pun">.</span><span class="pln">py
item </span><span class="lit">1</span><span class="pln">
digress basketball </span><span class="pun">)%^)</span><span class="pln">
item </span><span class="lit">2</span><span class="pln">
graves giant </span><span class="pun">&amp;</span><span class="lit">118</span><span class="pln">
item </span><span class="lit">3</span><span class="pln">
impelled maniacs </span><span class="pun">^@%</span><span class="lit">1</span></code></pre>
<p>And going for the full "correct horse battery staple" (CHBS), no padding:</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="pun">┌─[</span><span class="pln">user@machine</span><span class="pun">]─[~/</span><span class="pln">bin</span><span class="pun">]</span><span class="pln">
</span><span class="pun">└──╼</span><span class="pln"> xkcdpass</span><span class="pun">-</span><span class="pln">mod</span><span class="pun">.</span><span class="pln">py </span><span class="lit">4</span><span class="pln"> </span><span class="lit">0</span><span class="pln">
item </span><span class="lit">1</span><span class="pln">
superseded warred nighthawk rotary 
item </span><span class="lit">2</span><span class="pln">
idealize chirruping gabbing vegan 
item </span><span class="lit">3</span><span class="pln">
wriggling contestant hiccoughs instanced </span></code></pre>
<p>According to <a href="https://www.grc.com/haystack.htm" rel="nofollow">https://www.grc.com/haystack.htm</a>, for all practical purposes, assuming 100 trillion guesses per second (i.e., 100 TH/s) the shorter version would take about 50-60 million centuries to crack; the full CHBS = 1.24 hundred trillion trillion centuries; adding padding to that, 15.51 trillion trillion trillion centuries. </p>
<p>Even enlisting the entire Bitcoin mining network (~2500 TH/s as of this writing), the short version would still likely take 250-300 million years to break, which is probably secure enough for most purposes. </p>
</div></text><author><a href="/users/2230152/lawyeronlinux">LawyerOnLinux</a></author><comments><comment><text><span class="comment-copy">Your estimate of "50-60 million centuries to crack" the passphrase "graves giant &amp;118" (apparently) is a huge mistake.  You must assume (as Randall did) that the attacker is generating guesses the same way you are - by picking random words from the dictionary.  Randall calculates 44 bits of entropy even for 4 words.  Also, taking an extra 3 seconds to run a program like this hardly matters.</span></text><author><a class="comment-user" href="/users/507544/nealmcb" title="3,713 reputation">nealmcb</a></author></comment><comment><text><span class="comment-copy">And your pads are hard to remember but easy to crack since there are only 20 possibilities for each character (less than a lower case letter of the alphabet!), so only about 4 bits of entropy each.  Given your cracking speed assumption, cracking a 4-word password like Randall's with 44 bits of entropy would take less than a second, and cracking one like your 2-word example plus 4 random pads would be far easier (only about 22+4*4 = 38 bits of entropy).</span></text><author><a class="comment-user" href="/users/507544/nealmcb" title="3,713 reputation">nealmcb</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Implenting @Thomas Pornin solution: (can't comment @Yossi inexact answer)</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="kwd">import</span><span class="pln"> string</span><span class="pun">,</span><span class="pln"> os
chars </span><span class="pun">=</span><span class="pln"> string</span><span class="pun">.</span><span class="pln">letters </span><span class="pun">+</span><span class="pln"> string</span><span class="pun">.</span><span class="pln">digits </span><span class="pun">+</span><span class="pln"> </span><span class="str">'+/'</span><span class="pln">
</span><span class="kwd">assert</span><span class="pln"> </span><span class="lit">256</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> len</span><span class="pun">(</span><span class="pln">chars</span><span class="pun">)</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pln">  </span><span class="com"># non-biased later modulo</span><span class="pln">
PWD_LEN </span><span class="pun">=</span><span class="pln"> </span><span class="lit">16</span><span class="pln">
</span><span class="kwd">print</span><span class="pln"> </span><span class="str">''</span><span class="pun">.</span><span class="pln">join</span><span class="pun">(</span><span class="pln">chars</span><span class="pun">[</span><span class="pln">ord</span><span class="pun">(</span><span class="pln">c</span><span class="pun">)</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> len</span><span class="pun">(</span><span class="pln">chars</span><span class="pun">)]</span><span class="pln"> </span><span class="kwd">for</span><span class="pln"> c </span><span class="kwd">in</span><span class="pln"> os</span><span class="pun">.</span><span class="pln">urandom</span><span class="pun">(</span><span class="pln">PWD_LEN</span><span class="pun">))</span></code></pre>
</div></text><author><a href="/users/421846/foudfou">foudfou</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="kwd">import</span><span class="pln"> uuid
</span><span class="kwd">print</span><span class="pun">(</span><span class="str">'Your new password is: {0}'</span><span class="pun">).</span><span class="pln">format</span><span class="pun">(</span><span class="pln">uuid</span><span class="pun">.</span><span class="pln">uuid4</span><span class="pun">())</span></code></pre>
</div></text><author><a href="/users/274910/alex">Alex</a></author><comments><comment><text><span class="comment-copy">I'm not confident that uuid uses random generator that is cryptographically secure. A reference would be a must.</span></text><author><a class="comment-user" href="/users/1695680/thorsummoner" title="3,018 reputation">ThorSummoner</a></author></comment><comment><text><span class="comment-copy">The implementation of uuid4 is operating system dependent. <a href="https://github.com/python/cpython/blob/master/Lib/uuid.py#L463" rel="nofollow noreferrer">github.com/python/cpython/blob/master/Lib/uuid.py#L463</a></span></text><author><a class="comment-user" href="/users/274910/alex" title="1,673 reputation">Alex</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>There are some problems with your implementation:</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="pln">random</span><span class="pun">.</span><span class="pln">seed </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">os</span><span class="pun">.</span><span class="pln">urandom</span><span class="pun">(</span><span class="lit">1024</span><span class="pun">))</span></code></pre>
<p>This does not seed the random number generator; it replaces the <code>seed</code> function with a bytestring. You need to call <code>seed</code>, like, <code>random.seed(…)</code>.</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="kwd">print</span><span class="pln"> </span><span class="str">''</span><span class="pun">.</span><span class="pln">join</span><span class="pun">(</span><span class="pln">random</span><span class="pun">.</span><span class="pln">choice</span><span class="pun">(</span><span class="pln">chars</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">for</span><span class="pln"> i </span><span class="kwd">in</span><span class="pln"> range</span><span class="pun">(</span><span class="pln">length</span><span class="pun">))</span></code></pre>
<p>Python's default PRNG is a Mersenne Twister, which is not a cryptographically strong PRNG, so I'm wary of using it for cryptographic purposes. The <code>random</code> module includes <code>random.SystemRandom</code>, which on at least most *nix systems, should use a CSPRNG. <em>However</em>,</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="pln">random</span><span class="pun">.</span><span class="pln">choice</span><span class="pun">(</span><span class="pln">chars</span><span class="pun">)</span></code></pre>
<p>…is implemented as…</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="kwd">def</span><span class="pln"> choice</span><span class="pun">(</span><span class="pln">self</span><span class="pun">,</span><span class="pln"> seq</span><span class="pun">):</span><span class="pln">
    </span><span class="str">"""Choose a random element from a non-empty sequence."""</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> seq</span><span class="pun">[</span><span class="pln">int</span><span class="pun">(</span><span class="pln">self</span><span class="pun">.</span><span class="pln">random</span><span class="pun">()</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> len</span><span class="pun">(</span><span class="pln">seq</span><span class="pun">))]</span><span class="pln">  </span><span class="com"># raises IndexError if seq is empty</span></code></pre>
<p>…in <em>Python 2</em>. Unfortunately, <code>self.random</code> here is a C function, so this gets hard to see; the code smell here is that this code almost certainly doesn't choose uniformly. The code has completely changed in Python 3, and does a much better job of ensuring uniformity. The Python 3 docs for <code>randrange</code> note,</p>
<blockquote>
<p>Changed in version 3.2: <code>randrange()</code> is more sophisticated about producing equally distributed values. Formerly it used a style like <code>int(random()*n)</code> which could produce slightly uneven distributions.</p>
</blockquote>
<p><code>randrange</code> and <code>choice</code> both call the same method (<code>_randbelow</code>) under the hood.</p>
<p>In Python 3, <code>choice</code> is fine; in Python 2, it only comes <em>close</em> to a uniform distribution, but does not guarantee it. Since this is crypto, I lean on the "take no chances" side of the fence, and would like to have that guarantee.</p>
</div></text><author><a href="/users/101999/thanatos">Thanatos</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>It is easy :)</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="kwd">def</span><span class="pln"> codegenerator</span><span class="pun">():</span><span class="pln">
    alphabet </span><span class="pun">=</span><span class="pln"> </span><span class="str">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span><span class="pln">
    pw_length </span><span class="pun">=</span><span class="pln"> </span><span class="lit">8</span><span class="pln">
    mypw </span><span class="pun">=</span><span class="pln"> </span><span class="str">""</span><span class="pln">

    </span><span class="kwd">for</span><span class="pln"> i </span><span class="kwd">in</span><span class="pln"> range</span><span class="pun">(</span><span class="pln">pw_length</span><span class="pun">):</span><span class="pln">
        next_index </span><span class="pun">=</span><span class="pln"> random</span><span class="pun">.</span><span class="pln">randrange</span><span class="pun">(</span><span class="pln">len</span><span class="pun">(</span><span class="pln">alphabet</span><span class="pun">))</span><span class="pln">
        mypw </span><span class="pun">=</span><span class="pln"> mypw </span><span class="pun">+</span><span class="pln"> alphabet</span><span class="pun">[</span><span class="pln">next_index</span><span class="pun">]</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> mypw</span></code></pre>
<p>and the do:</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="kwd">print</span><span class="pln"> codegenerator</span><span class="pun">()</span></code></pre>
<p>Thanks <a href="http://xkcd.com/936/" rel="nofollow">http://xkcd.com/936/</a></p>
</div></text><author><a href="/users/1756032/tarek-kalaji">Tarek Kalaji</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>A little bit off topic, but I made this, using also TKinter. Hope it can helps:</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="kwd">import</span><span class="pln"> os</span><span class="pun">,</span><span class="pln"> random</span><span class="pun">,</span><span class="pln"> string
</span><span class="kwd">from</span><span class="pln"> tkinter </span><span class="kwd">import</span><span class="pln"> </span><span class="pun">*</span><span class="pln">

</span><span class="kwd">def</span><span class="pln"> createPwd</span><span class="pun">():</span><span class="pln">
    </span><span class="kwd">try</span><span class="pun">:</span><span class="pln">
        length </span><span class="pun">=</span><span class="pln"> int</span><span class="pun">(</span><span class="pln">e1</span><span class="pun">.</span><span class="pln">get</span><span class="pun">())</span><span class="pln">
    </span><span class="kwd">except</span><span class="pln"> </span><span class="typ">ValueError</span><span class="pun">:</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln">
    chars </span><span class="pun">=</span><span class="pln"> string</span><span class="pun">.</span><span class="pln">ascii_letters </span><span class="pun">+</span><span class="pln"> string</span><span class="pun">.</span><span class="pln">digits </span><span class="pun">+</span><span class="pln"> </span><span class="str">'!@#$%^&amp;*()?\/'</span><span class="pln">
    random</span><span class="pun">.</span><span class="pln">seed </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">os</span><span class="pun">.</span><span class="pln">urandom</span><span class="pun">(</span><span class="lit">1024</span><span class="pun">))</span><span class="pln">
    e2</span><span class="pun">.</span><span class="pln">config</span><span class="pun">(</span><span class="pln">state</span><span class="pun">=</span><span class="pln">NORMAL</span><span class="pun">)</span><span class="pln">
    e2</span><span class="pun">.</span><span class="pln">delete</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="str">'end'</span><span class="pun">)</span><span class="pln">
    e2</span><span class="pun">.</span><span class="pln">insert</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="str">''</span><span class="pun">.</span><span class="pln">join</span><span class="pun">(</span><span class="pln">random</span><span class="pun">.</span><span class="pln">choice</span><span class="pun">(</span><span class="pln">chars</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">for</span><span class="pln"> i </span><span class="kwd">in</span><span class="pln"> range</span><span class="pun">(</span><span class="pln">length</span><span class="pun">)))</span><span class="pln">
    e2</span><span class="pun">.</span><span class="pln">config</span><span class="pun">(</span><span class="pln">state</span><span class="pun">=</span><span class="str">"readonly"</span><span class="pun">)</span><span class="pln">

mainWindow </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Tk</span><span class="pun">()</span><span class="pln">
mainWindow</span><span class="pun">.</span><span class="pln">title</span><span class="pun">(</span><span class="str">'Password generator'</span><span class="pun">)</span><span class="pln">

mainWindow</span><span class="pun">.</span><span class="pln">resizable</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="lit">0</span><span class="pun">)</span><span class="pln">

f0 </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Frame</span><span class="pun">(</span><span class="pln">mainWindow</span><span class="pun">)</span><span class="pln">

f0</span><span class="pun">.</span><span class="pln">pack</span><span class="pun">(</span><span class="pln">side</span><span class="pun">=</span><span class="pln">TOP</span><span class="pun">,</span><span class="pln">pady</span><span class="pun">=</span><span class="lit">5</span><span class="pun">,</span><span class="pln">padx</span><span class="pun">=</span><span class="lit">5</span><span class="pun">,</span><span class="pln">fill</span><span class="pun">=</span><span class="pln">X</span><span class="pun">,</span><span class="pln">expand</span><span class="pun">=</span><span class="lit">1</span><span class="pun">)</span><span class="pln">

</span><span class="typ">Label</span><span class="pun">(</span><span class="pln">f0</span><span class="pun">,</span><span class="pln">text</span><span class="pun">=</span><span class="str">"Length: "</span><span class="pun">,</span><span class="pln">anchor</span><span class="pun">=</span><span class="pln">E</span><span class="pun">).</span><span class="pln">grid</span><span class="pun">(</span><span class="pln">row</span><span class="pun">=</span><span class="lit">0</span><span class="pun">,</span><span class="pln">column</span><span class="pun">=</span><span class="lit">0</span><span class="pun">,</span><span class="pln">sticky</span><span class="pun">=</span><span class="pln">E</span><span class="pun">)</span><span class="pln">

e1 </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Entry</span><span class="pun">(</span><span class="pln">f0</span><span class="pun">)</span><span class="pln">
e1</span><span class="pun">.</span><span class="pln">insert</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="str">'12'</span><span class="pun">)</span><span class="pln">
e1</span><span class="pun">.</span><span class="pln">grid</span><span class="pun">(</span><span class="pln">row</span><span class="pun">=</span><span class="lit">0</span><span class="pun">,</span><span class="pln">column</span><span class="pun">=</span><span class="lit">1</span><span class="pun">)</span><span class="pln">

btn </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Button</span><span class="pun">(</span><span class="pln">f0</span><span class="pun">,</span><span class="pln">text</span><span class="pun">=</span><span class="str">"Generate"</span><span class="pun">)</span><span class="pln">
btn</span><span class="pun">[</span><span class="str">'command'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">lambda</span><span class="pun">:</span><span class="pln"> createPwd</span><span class="pun">()</span><span class="pln">
btn</span><span class="pun">.</span><span class="pln">grid</span><span class="pun">(</span><span class="pln">row</span><span class="pun">=</span><span class="lit">0</span><span class="pun">,</span><span class="pln">column</span><span class="pun">=</span><span class="lit">2</span><span class="pun">,</span><span class="pln">rowspan</span><span class="pun">=</span><span class="lit">1</span><span class="pun">,</span><span class="pln">padx</span><span class="pun">=</span><span class="lit">10</span><span class="pun">,</span><span class="pln">ipadx</span><span class="pun">=</span><span class="lit">10</span><span class="pun">)</span><span class="pln">

</span><span class="typ">Label</span><span class="pun">(</span><span class="pln">f0</span><span class="pun">,</span><span class="pln">text</span><span class="pun">=</span><span class="str">"Generated password: "</span><span class="pun">,</span><span class="pln">anchor</span><span class="pun">=</span><span class="pln">E</span><span class="pun">).</span><span class="pln">grid</span><span class="pun">(</span><span class="pln">row</span><span class="pun">=</span><span class="lit">1</span><span class="pun">,</span><span class="pln">column</span><span class="pun">=</span><span class="lit">0</span><span class="pun">,</span><span class="pln">sticky</span><span class="pun">=</span><span class="pln">E</span><span class="pun">)</span><span class="pln">
e2 </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Entry</span><span class="pun">(</span><span class="pln">f0</span><span class="pun">)</span><span class="pln">
e2</span><span class="pun">.</span><span class="pln">grid</span><span class="pun">(</span><span class="pln">row</span><span class="pun">=</span><span class="lit">1</span><span class="pun">,</span><span class="pln">column</span><span class="pun">=</span><span class="lit">1</span><span class="pun">)</span><span class="pln">

createPwd</span><span class="pun">()</span><span class="pln">

</span><span class="com">#starting main window</span><span class="pln">
mainWindow</span><span class="pun">.</span><span class="pln">mainloop</span><span class="pun">()</span></code></pre>
</div></text><author><a href="/users/3396785/newbieforever">newbieforever</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>This is a simple small program addressed to people whome can't figure out a secure passwords for there own public accounts.</p>
<p>Just run the program on a command console and pass in a bunch of letters that seems familiar to you, and it will generate a sequence of symbols based on what you've inserted.</p>
<p>of course, the program does not support multiple sequences generation.</p>
<p>You can download the code from my github pull: <a href="https://github.com/abdechahidely/python_password_generator" rel="nofollow noreferrer">https://github.com/abdechahidely/python_password_generator</a></p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="kwd">from</span><span class="pln"> string </span><span class="kwd">import</span><span class="pln"> ascii_lowercase</span><span class="pun">,</span><span class="pln"> ascii_uppercase</span><span class="pun">,</span><span class="pln"> digits</span><span class="pun">,</span><span class="pln"> punctuation
</span><span class="kwd">from</span><span class="pln"> random </span><span class="kwd">import</span><span class="pln"> randint</span><span class="pun">,</span><span class="pln"> choice</span><span class="pun">,</span><span class="pln"> shuffle
</span><span class="kwd">from</span><span class="pln"> math   </span><span class="kwd">import</span><span class="pln"> ceil
</span><span class="kwd">from</span><span class="pln"> re     </span><span class="kwd">import</span><span class="pln"> finditer

lower_cases  </span><span class="pun">=</span><span class="pln"> ascii_lowercase
upper_cases  </span><span class="pun">=</span><span class="pln"> ascii_uppercase
lower_upper  </span><span class="pun">=</span><span class="pln"> dict</span><span class="pun">(</span><span class="pln">zip</span><span class="pun">(</span><span class="pln">lower_cases</span><span class="pun">,</span><span class="pln"> upper_cases</span><span class="pun">))</span><span class="pln">
upper_lower  </span><span class="pun">=</span><span class="pln"> dict</span><span class="pun">(</span><span class="pln">zip</span><span class="pun">(</span><span class="pln">upper_cases</span><span class="pun">,</span><span class="pln"> lower_cases</span><span class="pun">))</span><span class="pln">
punctuations </span><span class="pun">=</span><span class="pln"> </span><span class="str">'#$%&amp;@!?.'</span><span class="pln">
space        </span><span class="pun">=</span><span class="pln"> </span><span class="str">' '</span><span class="pln">

</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">PunctOrDigit</span><span class="pun">():</span><span class="pln">

    </span><span class="kwd">def</span><span class="pln"> __init__</span><span class="pun">(</span><span class="pln">self</span><span class="pun">,</span><span class="pln"> number_of_punctuations</span><span class="pun">,</span><span class="pln"> number_of_digits</span><span class="pun">):</span><span class="pln">
        self</span><span class="pun">.</span><span class="pln">puncts </span><span class="pun">=</span><span class="pln"> number_of_punctuations
        self</span><span class="pun">.</span><span class="pln">digits </span><span class="pun">=</span><span class="pln"> number_of_digits
        self</span><span class="pun">.</span><span class="pln">dupl_puncts </span><span class="pun">=</span><span class="pln"> self</span><span class="pun">.</span><span class="pln">puncts
        self</span><span class="pun">.</span><span class="pln">dupl_digits </span><span class="pun">=</span><span class="pln"> self</span><span class="pun">.</span><span class="pln">digits

    </span><span class="kwd">def</span><span class="pln"> </span><span class="typ">PorD</span><span class="pun">(</span><span class="pln">self</span><span class="pun">):</span><span class="pln">
        symbol_type </span><span class="pun">=</span><span class="pln"> choice</span><span class="pun">(</span><span class="str">'pd'</span><span class="pun">)</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> symbol_type </span><span class="pun">==</span><span class="pln"> </span><span class="str">'p'</span><span class="pun">:</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> self</span><span class="pun">.</span><span class="pln">puncts </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pun">:</span><span class="pln">
                </span><span class="kwd">return</span><span class="pln"> </span><span class="str">'d'</span><span class="pln">
            </span><span class="kwd">else</span><span class="pun">:</span><span class="pln">
                self</span><span class="pun">.</span><span class="pln">puncts </span><span class="pun">-=</span><span class="pln"> </span><span class="lit">1</span><span class="pln">
                </span><span class="kwd">return</span><span class="pln"> symbol_type
        </span><span class="kwd">if</span><span class="pln"> symbol_type </span><span class="pun">==</span><span class="pln"> </span><span class="str">'d'</span><span class="pun">:</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> self</span><span class="pun">.</span><span class="pln">digits </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pun">:</span><span class="pln">
                </span><span class="kwd">return</span><span class="pln"> </span><span class="str">'p'</span><span class="pln">
            </span><span class="kwd">else</span><span class="pun">:</span><span class="pln">
                self</span><span class="pun">.</span><span class="pln">digits </span><span class="pun">-=</span><span class="pln"> </span><span class="lit">1</span><span class="pln">
                </span><span class="kwd">return</span><span class="pln"> symbol_type

    </span><span class="kwd">def</span><span class="pln"> reset</span><span class="pun">(</span><span class="pln">self</span><span class="pun">):</span><span class="pln">
        self</span><span class="pun">.</span><span class="pln">puncts </span><span class="pun">=</span><span class="pln"> self</span><span class="pun">.</span><span class="pln">dupl_puncts
        self</span><span class="pun">.</span><span class="pln">digits </span><span class="pun">=</span><span class="pln"> self</span><span class="pun">.</span><span class="pln">dupl_digits

</span><span class="kwd">def</span><span class="pln"> is_empty</span><span class="pun">(</span><span class="pln">text</span><span class="pun">):</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> symbol </span><span class="kwd">in</span><span class="pln"> text</span><span class="pun">:</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> symbol </span><span class="pun">!=</span><span class="pln"> space</span><span class="pun">:</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">False</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">True</span><span class="pln">

</span><span class="kwd">def</span><span class="pln"> contain_unauthorized_symbols</span><span class="pun">(</span><span class="pln">text</span><span class="pun">):</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> symbol </span><span class="kwd">in</span><span class="pln"> text</span><span class="pun">:</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> symbol </span><span class="kwd">in</span><span class="pln"> punctuation </span><span class="kwd">or</span><span class="pln"> symbol </span><span class="kwd">in</span><span class="pln"> digits</span><span class="pun">:</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">True</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">False</span><span class="pln">

</span><span class="kwd">def</span><span class="pln"> user_input</span><span class="pun">():</span><span class="pln">
    user_input </span><span class="pun">=</span><span class="pln"> input</span><span class="pun">(</span><span class="str">'-- Sentence to transform: '</span><span class="pun">)</span><span class="pln">
    </span><span class="kwd">while</span><span class="pln"> is_empty</span><span class="pun">(</span><span class="pln">user_input</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">or</span><span class="pln"> len</span><span class="pun">(</span><span class="pln">user_input</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">8</span><span class="pln"> </span><span class="kwd">or</span><span class="pln"> contain_unauthorized_symbols</span><span class="pun">(</span><span class="pln">user_input</span><span class="pun">):</span><span class="pln">
        user_input </span><span class="pun">=</span><span class="pln"> input</span><span class="pun">(</span><span class="str">'-- Sentence to transform: '</span><span class="pun">)</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> user_input

</span><span class="kwd">def</span><span class="pln"> number_of_punctuations</span><span class="pun">(</span><span class="pln">text</span><span class="pun">):</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> ceil</span><span class="pun">(</span><span class="pln">len</span><span class="pun">(</span><span class="pln">text</span><span class="pun">)</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> </span><span class="lit">2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="lit">3</span><span class="pln">

</span><span class="kwd">def</span><span class="pln"> number_of_digits</span><span class="pun">(</span><span class="pln">text</span><span class="pun">):</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> ceil</span><span class="pun">(</span><span class="pln">len</span><span class="pun">(</span><span class="pln">text</span><span class="pun">)</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> </span><span class="lit">2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="lit">2</span><span class="pln">

</span><span class="kwd">def</span><span class="pln"> total_symbols</span><span class="pun">(</span><span class="pln">text</span><span class="pun">):</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln">number_of_digits</span><span class="pun">(</span><span class="pln">text</span><span class="pun">)</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> number_of_punctuations</span><span class="pun">(</span><span class="pln">text</span><span class="pun">),</span><span class="pln"> 
            number_of_punctuations</span><span class="pun">(</span><span class="pln">text</span><span class="pun">),</span><span class="pln">
            number_of_digits</span><span class="pun">(</span><span class="pln">text</span><span class="pun">))</span><span class="pln">

</span><span class="kwd">def</span><span class="pln"> positions_to_change</span><span class="pun">(</span><span class="pln">text</span><span class="pun">):</span><span class="pln">
    pos_objct </span><span class="pun">=</span><span class="pln"> </span><span class="typ">PunctOrDigit</span><span class="pun">(</span><span class="pln">number_of_punctuations</span><span class="pun">(</span><span class="pln">text</span><span class="pun">),</span><span class="pln"> number_of_digits</span><span class="pun">(</span><span class="pln">text</span><span class="pun">))</span><span class="pln">
    positions </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{}</span><span class="pln">
    </span><span class="kwd">while</span><span class="pln"> len</span><span class="pun">(</span><span class="pln">positions</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln"> total_symbols</span><span class="pun">(</span><span class="pln">text</span><span class="pun">)[</span><span class="lit">0</span><span class="pun">]:</span><span class="pln">
        i </span><span class="pun">=</span><span class="pln"> randint</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="pln">len</span><span class="pun">(</span><span class="pln">text</span><span class="pun">)-</span><span class="lit">1</span><span class="pun">)</span><span class="pln">
        </span><span class="kwd">while</span><span class="pln"> i </span><span class="kwd">in</span><span class="pln"> positions</span><span class="pun">:</span><span class="pln">
            i </span><span class="pun">=</span><span class="pln"> randint</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="pln">len</span><span class="pun">(</span><span class="pln">text</span><span class="pun">)-</span><span class="lit">1</span><span class="pun">)</span><span class="pln">
        positions</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> pos_objct</span><span class="pun">.</span><span class="typ">PorD</span><span class="pun">()</span><span class="pln">
    pos_objct</span><span class="pun">.</span><span class="pln">reset</span><span class="pun">()</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> positions

</span><span class="kwd">def</span><span class="pln"> random_switch</span><span class="pun">(</span><span class="pln">letter</span><span class="pun">):</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> letter </span><span class="kwd">in</span><span class="pln"> lower_cases</span><span class="pun">:</span><span class="pln">
        switch_or_pass </span><span class="pun">=</span><span class="pln"> choice</span><span class="pun">(</span><span class="str">'sp'</span><span class="pun">)</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> switch_or_pass </span><span class="pun">==</span><span class="pln"> </span><span class="str">'s'</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> lower_upper</span><span class="pun">[</span><span class="pln">letter</span><span class="pun">]</span><span class="pln">
        </span><span class="kwd">else</span><span class="pun">:</span><span class="pln">                     </span><span class="kwd">return</span><span class="pln"> letter
    </span><span class="kwd">if</span><span class="pln"> letter </span><span class="kwd">in</span><span class="pln"> upper_cases</span><span class="pun">:</span><span class="pln">
        switch_or_pass </span><span class="pun">=</span><span class="pln"> choice</span><span class="pun">(</span><span class="str">'sp'</span><span class="pun">)</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> switch_or_pass </span><span class="pun">==</span><span class="pln"> </span><span class="str">'s'</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> upper_lower</span><span class="pun">[</span><span class="pln">letter</span><span class="pun">]</span><span class="pln">
        </span><span class="kwd">else</span><span class="pun">:</span><span class="pln">                     </span><span class="kwd">return</span><span class="pln"> letter

</span><span class="kwd">def</span><span class="pln"> repeated</span><span class="pun">(</span><span class="pln">text</span><span class="pun">):</span><span class="pln">
    reps </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{}</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> letter </span><span class="kwd">in</span><span class="pln"> set</span><span class="pun">(</span><span class="pln">list</span><span class="pun">(</span><span class="pln">text</span><span class="pun">)):</span><span class="pln">
        indexs </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">w</span><span class="pun">.</span><span class="pln">start</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">for</span><span class="pln"> w </span><span class="kwd">in</span><span class="pln"> finditer</span><span class="pun">(</span><span class="pln">letter</span><span class="pun">,</span><span class="pln"> text</span><span class="pun">)]</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> letter </span><span class="pun">!=</span><span class="pln"> </span><span class="str">' '</span><span class="pun">:</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> len</span><span class="pun">(</span><span class="pln">indexs</span><span class="pun">)</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">:</span><span class="pln">
                reps</span><span class="pun">[</span><span class="pln">letter</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> indexs
    </span><span class="kwd">return</span><span class="pln"> reps

</span><span class="kwd">def</span><span class="pln"> not_repeated</span><span class="pun">(</span><span class="pln">text</span><span class="pun">):</span><span class="pln">
    reps </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{}</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> letter </span><span class="kwd">in</span><span class="pln"> set</span><span class="pun">(</span><span class="pln">list</span><span class="pun">(</span><span class="pln">text</span><span class="pun">)):</span><span class="pln">
        indexs </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">w</span><span class="pun">.</span><span class="pln">start</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">for</span><span class="pln"> w </span><span class="kwd">in</span><span class="pln"> finditer</span><span class="pun">(</span><span class="pln">letter</span><span class="pun">,</span><span class="pln"> text</span><span class="pun">)]</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> letter </span><span class="pun">!=</span><span class="pln"> </span><span class="str">' '</span><span class="pun">:</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> len</span><span class="pun">(</span><span class="pln">indexs</span><span class="pun">)</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="lit">1</span><span class="pun">:</span><span class="pln">
                reps</span><span class="pun">[</span><span class="pln">letter</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> indexs
    </span><span class="kwd">return</span><span class="pln"> reps

</span><span class="kwd">def</span><span class="pln"> generator</span><span class="pun">(</span><span class="pln">text</span><span class="pun">,</span><span class="pln"> positions_to_change</span><span class="pun">):</span><span class="pln">
    rep     </span><span class="pun">=</span><span class="pln"> repeated</span><span class="pun">(</span><span class="pln">text</span><span class="pun">)</span><span class="pln">
    not_rep </span><span class="pun">=</span><span class="pln"> not_repeated</span><span class="pun">(</span><span class="pln">text</span><span class="pun">)</span><span class="pln">
    text    </span><span class="pun">=</span><span class="pln"> list</span><span class="pun">(</span><span class="pln">text</span><span class="pun">)</span><span class="pln">

    </span><span class="kwd">for</span><span class="pln"> x </span><span class="kwd">in</span><span class="pln"> text</span><span class="pun">:</span><span class="pln">
        x_pos </span><span class="pun">=</span><span class="pln"> text</span><span class="pun">.</span><span class="pln">index</span><span class="pun">(</span><span class="pln">x</span><span class="pun">)</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> x </span><span class="kwd">not</span><span class="pln"> </span><span class="kwd">in</span><span class="pln"> positions_to_change</span><span class="pun">:</span><span class="pln">
            text</span><span class="pun">[</span><span class="pln">x_pos</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> random_switch</span><span class="pun">(</span><span class="pln">x</span><span class="pun">)</span><span class="pln">

    </span><span class="kwd">for</span><span class="pln"> x </span><span class="kwd">in</span><span class="pln"> rep</span><span class="pun">:</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> pos </span><span class="kwd">in</span><span class="pln"> rep</span><span class="pun">[</span><span class="pln">x</span><span class="pun">]:</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> pos </span><span class="kwd">in</span><span class="pln"> positions_to_change</span><span class="pun">:</span><span class="pln">
                </span><span class="kwd">if</span><span class="pln"> positions_to_change</span><span class="pun">[</span><span class="pln">pos</span><span class="pun">]</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">'p'</span><span class="pun">:</span><span class="pln">
                    shuffle</span><span class="pun">(</span><span class="pln">list</span><span class="pun">(</span><span class="pln">punctuations</span><span class="pun">))</span><span class="pln">
                    text</span><span class="pun">[</span><span class="pln">pos</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> choice</span><span class="pun">(</span><span class="pln">punctuations</span><span class="pun">)</span><span class="pln">
                </span><span class="kwd">if</span><span class="pln"> positions_to_change</span><span class="pun">[</span><span class="pln">pos</span><span class="pun">]</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">'d'</span><span class="pun">:</span><span class="pln">
                    shuffle</span><span class="pun">(</span><span class="pln">list</span><span class="pun">(</span><span class="pln">digits</span><span class="pun">))</span><span class="pln">
                    text</span><span class="pun">[</span><span class="pln">pos</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> choice</span><span class="pun">(</span><span class="pln">digits</span><span class="pun">)</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> x </span><span class="kwd">in</span><span class="pln"> not_rep</span><span class="pun">:</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> pos </span><span class="kwd">in</span><span class="pln"> not_rep</span><span class="pun">[</span><span class="pln">x</span><span class="pun">]:</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> pos </span><span class="kwd">in</span><span class="pln"> positions_to_change</span><span class="pun">:</span><span class="pln">
                </span><span class="kwd">if</span><span class="pln"> positions_to_change</span><span class="pun">[</span><span class="pln">pos</span><span class="pun">]</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">'p'</span><span class="pun">:</span><span class="pln">
                    shuffle</span><span class="pun">(</span><span class="pln">list</span><span class="pun">(</span><span class="pln">punctuations</span><span class="pun">))</span><span class="pln">
                    text</span><span class="pun">[</span><span class="pln">pos</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> choice</span><span class="pun">(</span><span class="pln">punctuations</span><span class="pun">)</span><span class="pln">
                </span><span class="kwd">if</span><span class="pln"> positions_to_change</span><span class="pun">[</span><span class="pln">pos</span><span class="pun">]</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">'d'</span><span class="pun">:</span><span class="pln">
                    shuffle</span><span class="pun">(</span><span class="pln">list</span><span class="pun">(</span><span class="pln">digits</span><span class="pun">))</span><span class="pln">
                    text</span><span class="pun">[</span><span class="pln">pos</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> choice</span><span class="pun">(</span><span class="pln">digits</span><span class="pun">)</span><span class="pln">

    text </span><span class="pun">=</span><span class="pln"> </span><span class="str">''</span><span class="pun">.</span><span class="pln">join</span><span class="pun">(</span><span class="pln">text</span><span class="pun">)</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> text

</span><span class="kwd">if</span><span class="pln"> __name__ </span><span class="pun">==</span><span class="pln"> </span><span class="str">'__main__'</span><span class="pun">:</span><span class="pln">
    x </span><span class="pun">=</span><span class="pln"> user_input</span><span class="pun">()</span><span class="pln">
    </span><span class="kwd">print</span><span class="pun">(</span><span class="pln">generator</span><span class="pun">(</span><span class="pln">x</span><span class="pun">,</span><span class="pln"> positions_to_change</span><span class="pun">(</span><span class="pln">x</span><span class="pun">)))</span></code></pre>
</div></text><author><a href="/users/7342204/a-ihya">A. Ihya</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Here is my random password generator after researching this topic:</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="pun">`</span><span class="kwd">import</span><span class="pln"> os</span><span class="pun">,</span><span class="pln"> random</span><span class="pun">,</span><span class="pln"> string
   </span><span class="com">#Generate Random Password</span><span class="pln">
   UPP </span><span class="pun">=</span><span class="pln"> random</span><span class="pun">.</span><span class="typ">SystemRandom</span><span class="pun">().</span><span class="pln">choice</span><span class="pun">(</span><span class="pln">string</span><span class="pun">.</span><span class="pln">ascii_uppercase</span><span class="pun">)</span><span class="pln">
   LOW1 </span><span class="pun">=</span><span class="pln"> random</span><span class="pun">.</span><span class="typ">SystemRandom</span><span class="pun">().</span><span class="pln">choice</span><span class="pun">(</span><span class="pln">string</span><span class="pun">.</span><span class="pln">ascii_lowercase</span><span class="pun">)</span><span class="pln">
   LOW2 </span><span class="pun">=</span><span class="pln"> random</span><span class="pun">.</span><span class="typ">SystemRandom</span><span class="pun">().</span><span class="pln">choice</span><span class="pun">(</span><span class="pln">string</span><span class="pun">.</span><span class="pln">ascii_lowercase</span><span class="pun">)</span><span class="pln">
   LOW3 </span><span class="pun">=</span><span class="pln"> random</span><span class="pun">.</span><span class="typ">SystemRandom</span><span class="pun">().</span><span class="pln">choice</span><span class="pun">(</span><span class="pln">string</span><span class="pun">.</span><span class="pln">ascii_lowercase</span><span class="pun">)</span><span class="pln">
   DIG1 </span><span class="pun">=</span><span class="pln"> random</span><span class="pun">.</span><span class="typ">SystemRandom</span><span class="pun">().</span><span class="pln">choice</span><span class="pun">(</span><span class="pln">string</span><span class="pun">.</span><span class="pln">digits</span><span class="pun">)</span><span class="pln">
   DIG2 </span><span class="pun">=</span><span class="pln"> random</span><span class="pun">.</span><span class="typ">SystemRandom</span><span class="pun">().</span><span class="pln">choice</span><span class="pun">(</span><span class="pln">string</span><span class="pun">.</span><span class="pln">digits</span><span class="pun">)</span><span class="pln">
   DIG3 </span><span class="pun">=</span><span class="pln"> random</span><span class="pun">.</span><span class="typ">SystemRandom</span><span class="pun">().</span><span class="pln">choice</span><span class="pun">(</span><span class="pln">string</span><span class="pun">.</span><span class="pln">digits</span><span class="pun">)</span><span class="pln">
   SPEC </span><span class="pun">=</span><span class="pln"> random</span><span class="pun">.</span><span class="typ">SystemRandom</span><span class="pun">().</span><span class="pln">choice</span><span class="pun">(</span><span class="str">'!@#$%^&amp;*()'</span><span class="pun">)</span><span class="pln">
   PWD </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">None</span><span class="pln">
   PWD </span><span class="pun">=</span><span class="pln"> UPP </span><span class="pun">+</span><span class="pln"> LOW1 </span><span class="pun">+</span><span class="pln"> LOW2 </span><span class="pun">+</span><span class="pln"> LOW3 </span><span class="pun">+</span><span class="pln"> DIG1 </span><span class="pun">+</span><span class="pln"> DIG2 </span><span class="pun">+</span><span class="pln"> DIG3 </span><span class="pun">+</span><span class="pln"> SPEC
   PWD </span><span class="pun">=</span><span class="pln"> </span><span class="str">''</span><span class="pun">.</span><span class="pln">join</span><span class="pun">(</span><span class="pln">random</span><span class="pun">.</span><span class="pln">sample</span><span class="pun">(</span><span class="pln">PWD</span><span class="pun">,</span><span class="pln">len</span><span class="pun">(</span><span class="pln">PWD</span><span class="pun">)))</span><span class="pln">
   </span><span class="kwd">print</span><span class="pun">(</span><span class="pln">PWD</span><span class="pun">)`</span></code></pre>
<p>This will generate a random password with 1 random uppercase letter, 3 random lowercase letters, 3 random digits, and 1 random special character--this can be adjusted as needed. Then it combines each random character and creates a random order. I don't know if this is considered "high quality", but it gets the job done. </p>
</div></text><author><a href="/users/3737798/d84-n1nj4">d84_n1nj4</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Base64 let us encode binary data in a human readable/writable mode with no data loss.</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="kwd">import</span><span class="pln"> os
random_bytes</span><span class="pun">=</span><span class="pln">os</span><span class="pun">.</span><span class="pln">urandom</span><span class="pun">(</span><span class="lit">12</span><span class="pun">)</span><span class="pln">
secret</span><span class="pun">=</span><span class="pln">random_bytes</span><span class="pun">.</span><span class="pln">encode</span><span class="pun">(</span><span class="str">"base64"</span><span class="pun">)</span></code></pre>
</div></text><author><a href="/users/7179224/daniel-ba%c3%b1obre-dopico">Daniel Bañobre Dopico</a></author><comments><comment><text><span class="comment-copy">Always encourage a small bit of text in answers to introduce code snippets.</span></text><author><a class="comment-user" href="/users/236247/demongolem" title="5,642 reputation">demongolem</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>This is more for fun than anything.
Scores favorably in passwordmeter.com but impossible to remember.</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="com">#!/usr/bin/ruby</span><span class="pln">

puts </span><span class="pun">(</span><span class="lit">33.</span><span class="pun">.</span><span class="lit">126</span><span class="pun">).</span><span class="pln">map</span><span class="pun">{|</span><span class="pln">x</span><span class="pun">|</span><span class="pln"> </span><span class="pun">(</span><span class="str">'a'</span><span class="pun">..</span><span class="str">'z'</span><span class="pun">).</span><span class="pln">include</span><span class="pun">?(</span><span class="pln">x</span><span class="pun">.</span><span class="pln">chr</span><span class="pun">.</span><span class="pln">downcase</span><span class="pun">)</span><span class="pln"> </span><span class="pun">?</span><span class="pln">
                       </span><span class="pun">(</span><span class="lit">0.</span><span class="pun">.</span><span class="lit">9</span><span class="pun">).</span><span class="pln">to_a</span><span class="pun">.</span><span class="pln">shuffle</span><span class="pun">[</span><span class="lit">0</span><span class="pun">].</span><span class="pln">to_s </span><span class="pun">+</span><span class="pln"> x</span><span class="pun">.</span><span class="pln">chr </span><span class="pun">:</span><span class="pln">
                       x</span><span class="pun">.</span><span class="pln">chr</span><span class="pun">}.</span><span class="pln">uniq</span><span class="pun">.</span><span class="pln">shuffle</span><span class="pun">[</span><span class="lit">0.</span><span class="pun">.</span><span class="lit">41</span><span class="pun">].</span><span class="pln">join</span><span class="pun">[</span><span class="lit">0.</span><span class="pun">.</span><span class="lit">41</span><span class="pun">]</span></code></pre>
</div></text><author><a href="/users/5090/mitja">Mitja</a></author><comments/></answer></answers></post>