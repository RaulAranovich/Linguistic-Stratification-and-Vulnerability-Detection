<?xml version="1.0" encoding="utf-8"?>
<post><title>java - XSS prevention in JSP/Servlet web application - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>How can I prevent XSS attacks in a JSP/Servlet web application?</p>
</div></text><author><a href="/users/157882/balusc">BalusC</a></author><comments><comment><text><span class="comment-copy">The great post how to prevent XSS attacks in different situations is posted there: <a href="http://stackoverflow.com/questions/19824338/avoid-xss-and-allow-some-html-tags-with-javascript/19943011#19943011" title="avoid xss and allow some html tags with javascript">stackoverflow.com/questions/19824338/…</a></span></text><author><a class="comment-user" href="/users/1459144/user1459144" title="1,328 reputation">user1459144</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>XSS can be prevented in JSP by using <a href="http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/" rel="noreferrer">JSTL</a> <a href="http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/c/out.html" rel="noreferrer"><code>&lt;c:out&gt;</code></a> tag or <a href="http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/fn/escapeXml.fn.html" rel="noreferrer"><code>fn:escapeXml()</code></a> EL function when (re)displaying <strong>user-controlled input</strong>. This includes request headers, cookies, URL, body, parameters, etc, the whole request. Also the user-controlled input which is stored in a database needs to be escaped during redisplaying.</p>
<p>For example:</p>
<pre class="lang-html prettyprint prettyprinted" style=""><code><span class="tag">&lt;p&gt;&lt;c:out</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"${bean.userControlledValue}"</span><span class="tag">&gt;&lt;/p&gt;</span><span class="pln">
</span><span class="tag">&lt;p&gt;&lt;input</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"foo"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"${fn:escapeXml(param.foo)}"</span><span class="tag">&gt;&lt;/p&gt;</span></code></pre>
<p>This will escape characters which may malform the rendered HTML such as <code>&lt;</code>, <code>&gt;</code>, <code>"</code>, <code>'</code> and <code>&amp;</code> into <a href="http://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references" rel="noreferrer">HTML/XML entities</a> such as <code>&amp;lt;</code>, <code>&amp;gt;</code>, <code>&amp;quot;</code>, <code>&amp;apos;</code> and <code>&amp;amp;</code>.</p>
<p>Note that you don't need to escape them in the Java (Servlet) code, since they are harmless over there. Some may opt to escape them during <em>request</em> processing (as you do in Servlet) instead of <em>response</em> processing (as you do in JSP), but this way you may risk that the data unnecessarily get double-escaped or that the DB-stored data becomes unportable (e.g. when exporting data to CSV, XLS, PDF, etc which doesn't require HTML-escaping at all). </p>
<p>If you'd like to redisplay user-controlled input as HTML wherein you would like to allow only a specific subset of HTML tags like <code>&lt;b&gt;</code>, <code>&lt;i&gt;</code>, <code>&lt;u&gt;</code>, etc, then you need to sanitize the input by a whitelist. You can use a Markdown parser like Pegdown or a HTML parser like Jsoup for this. See also <a href="http://stackoverflow.com/questions/7505387/im-looking-for-a-java-html-encoder">I'm looking for a Java HTML encoder</a>.</p>
<p>The only concern in the server side with regard to databases is <a href="http://en.wikipedia.org/wiki/SQL_injection" rel="noreferrer">SQL injection</a> prevention. You need to make sure that you never string-concatenate user-controlled input straight in the SQL or JPQL query and that you're using parameterized queries all the way. In JDBC terms, this means that you should use <a href="http://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html" rel="noreferrer"><code>PreparedStatement</code></a> instead of <code>Statement</code>. In JPA terms, use <a href="http://docs.oracle.com/javaee/6/api/javax/persistence/Query.html#setParameter%28int,%20java.lang.Object%29" rel="noreferrer"><code>Query</code></a>.</p>
<hr/>
<p>An alternative would be to migrate from JSP/Servlet to Java EE's MVC framework <a href="http://stackoverflow.com/tags/jsf/info">JSF</a>. It has builtin XSS prevention over all place. See also <a href="http://stackoverflow.com/questions/7722159/csrf-xss-and-sql-injection-attack-prevention-in-jsf">CSRF, XSS and SQL Injection attack prevention in JSF</a>.</p>
</div></text><author><a href="/users/157882/balusc">BalusC</a></author><comments><comment><text><span class="comment-copy">Just because you're using Hibernate, doesn't mean you're safe from SQL injection. See <a href="http://blog.harpoontech.com/2008/10/how-to-avoid-sql-injection-in-hibernate.html" rel="nofollow noreferrer">blog.harpoontech.com/2008/10/…</a> for example.</span></text><author><a class="comment-user" href="/users/65977/matrixfrog" title="14,821 reputation">MatrixFrog</a></author></comment><comment><text><span class="comment-copy">@chad: that's not true. It's only the case when you're string-concatenating user-controlled input straight in the SQL/HQL/JPQL query like so <code>"SELECT ... WHERE SOMEVAL = " + someval</code> instead of using parameterized queries as you've shown. No one ORM can safeguard against this kind of developer mistakes.</span></text><author><a class="comment-user" href="/users/157882/balusc" title="724,614 reputation">BalusC</a></author></comment><comment><text><span class="comment-copy">@BalusC - Doh! I had that reversed.  Vulnerable example is: Query query = session.createQuery("SELECT * FROM TABLE WHERE SOMEVAL = " + someval);  Using the binding syntax ":" in Hibernate (like my example above) prevents SQL injection.  Deleting comment to prevent someone using my bad example.</span></text><author><a class="comment-user" href="/users/182097/chadmaughan" title="469 reputation">chadmaughan</a></author></comment><comment><text><span class="comment-copy">I think you DO have to validate in the server aswell. All the validation can be bypassed by altering the HTTP parameters. And sometimes, the data that you persist can be consumed by other applications in an enterprise app. Sometimes you dont have access to the views of the other applications so you need to sanitze the input before persisting in the database.</span></text><author><a class="comment-user" href="/users/1937081/guido-celada" title="1,525 reputation">Guido Celada</a></author></comment><comment><text><span class="comment-copy">@Guido: you're not understanding the problem.</span></text><author><a class="comment-user" href="/users/157882/balusc" title="724,614 reputation">BalusC</a></author></comment><comment><text><span class="comment-copy">@BalusC: please expand.</span></text><author><a class="comment-user" href="/users/1937081/guido-celada" title="1,525 reputation">Guido Celada</a></author></comment><comment><text><span class="comment-copy">@BalusC: Hi Bal, by using yours suggestion I get removed 4 XSS issues in my app thanks a lot for useful solution. Here I need yours suggestion again as I displaying dom object using jstl espression like <code>&lt;div&gt;&lt;c:out value="${htmlContent}" escapeXml="false" /&gt;&lt;/div&gt;</code> here <code>htmlContent</code>value is something like <code>&lt;span&gt;&lt;h1&gt;Hi&lt;/h1&gt;&lt;/span&gt;</code> (this value coming from database) now  if I remove <code>escapeXml="false"</code> from <code>c:out</code> then its displays as it is on page then if keep <code>escapeXml="false"</code> its parsing the dom object properly but when my htmlContent having some script code then xss issue is coming.</span></text><author><a class="comment-user" href="/users/1717301/venki" title="318 reputation">Venki</a></author></comment><comment><text><span class="comment-copy">@BalusC: if <code>htmlContent</code> is <code>&lt;span&gt;&lt;h1&gt;&lt;script&gt;alert("Hi");&lt;/script&gt;&lt;/h1&gt;&lt;/span&gt;</code> then if I use <code>&lt;c:out value="${htmlContent}" escapeXml="false" /&gt;&lt;/div&gt;</code> in jsp then on browser user will get alert box so it may leades XSS issue. Please suggest me what I can do in this situation.</span></text><author><a class="comment-user" href="/users/1717301/venki" title="318 reputation">Venki</a></author></comment><comment><text><span class="comment-copy">@Venki: Just read 4th paragraph of answer which tells something about dealing with user-controlled HTML.</span></text><author><a class="comment-user" href="/users/157882/balusc" title="724,614 reputation">BalusC</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The how-to-prevent-xss has been asked several times. You will find a lot of information in StackOverflow. Also, <a href="http://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet" rel="noreferrer">OWASP website has an XSS prevention cheat sheet</a> that you should go through.</p>
<p>On the libraries to use, <a href="http://www.owasp.org/index.php/Category:OWASP_Enterprise_Security_API#tab=Java_EE" rel="noreferrer">OWASP's ESAPI library</a> has a java flavour. You should try that out. Besides that, every framework that you use has some protection against XSS. Again, OWASP website has information on most popular frameworks, so I would recommend going through their site.</p>
</div></text><author><a href="/users/242940/sripathi-krishnan">Sripathi Krishnan</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I had great luck with OWASP Anti-Samy and an AspectJ advisor on all my Spring Controllers that blocks XSS from getting in.</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">UserInputSanitizer</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">Policy</span><span class="pln"> policy</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">AntiSamy</span><span class="pln"> antiSamy</span><span class="pun">;</span><span class="pln">

    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">AntiSamy</span><span class="pln"> getAntiSamy</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">PolicyException</span><span class="pln">  </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">antiSamy </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            policy </span><span class="pun">=</span><span class="pln"> getPolicy</span><span class="pun">(</span><span class="str">"evocatus-default"</span><span class="pun">);</span><span class="pln">
            antiSamy </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">AntiSamy</span><span class="pun">();</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> antiSamy</span><span class="pun">;</span><span class="pln">

    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> sanitize</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> input</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">CleanResults</span><span class="pln"> cr</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">try</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            cr </span><span class="pun">=</span><span class="pln"> getAntiSamy</span><span class="pun">().</span><span class="pln">scan</span><span class="pun">(</span><span class="pln">input</span><span class="pun">,</span><span class="pln"> policy</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Exception</span><span class="pln"> e</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">RuntimeException</span><span class="pun">(</span><span class="pln">e</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> cr</span><span class="pun">.</span><span class="pln">getCleanHTML</span><span class="pun">();</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">Policy</span><span class="pln"> getPolicy</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> name</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">PolicyException</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">Policy</span><span class="pln"> policy </span><span class="pun">=</span><span class="pln"> 
            </span><span class="typ">Policy</span><span class="pun">.</span><span class="pln">getInstance</span><span class="pun">(</span><span class="typ">Policy</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">.</span><span class="pln">getResourceAsStream</span><span class="pun">(</span><span class="str">"/META-INF/antisamy/"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> name </span><span class="pun">+</span><span class="pln"> </span><span class="str">".xml"</span><span class="pun">));</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> policy</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

</span><span class="pun">}</span></code></pre>
<p>You can get the AspectJ advisor from the <a href="http://stackoverflow.com/questions/4843886/what-is-the-aspectj-declaritive-syntax-for-overwritting-an-argument">this stackoverflow post</a></p>
<p>I think this is a better approach then c:out particular if you do a lot of javascript.</p>
</div></text><author><a href="/users/318174/adam-gent">Adam Gent</a></author><comments><comment><text><span class="comment-copy">The normal practice is to HTML-escape any user-controlled data during redisplaying, not during processing the submitted data in servlet nor during storing in DB. If you HTML-escape it during processing the submitted data and/or storing in DB as well, then it's all spread over the business code and/or in the database. That's only maintenance trouble and you will risk double-escapes or more when you do it at different places. The business code and DB are in turn not sensitive for XSS. Only the view is. You should then escape it only right there in view.</span></text><author><a class="comment-user" href="/users/517550/shubham-maheshwari" title="105 reputation">Shubham Maheshwari</a></author></comment><comment><text><span class="comment-copy">Yes and no. Although the general practice is to escape on display there are many reasons you might want to sanitize on write. There are some cases where you do want your users to enter a subset of HTML and although you could sanitize on display this is actually rather slow and even confusing to users. Second if you share the data with 3rd party services like external APIs those services may or may not do the proper sanitizing themselves.</span></text><author><a class="comment-user" href="/users/318174/adam-gent" title="28,404 reputation">Adam Gent</a></author></comment><comment><text><span class="comment-copy">as you and me both mentioned, the "normal practice" is to escape on display. What you have mentioned in you above comment are more specific use cases and hence would agreeably require specific solutions.</span></text><author><a class="comment-user" href="/users/517550/shubham-maheshwari" title="105 reputation">Shubham Maheshwari</a></author></comment><comment><text><span class="comment-copy">Yes I perhaps should make my use case more clear. I work on mainly content management (HTML editing) things.</span></text><author><a class="comment-user" href="/users/318174/adam-gent" title="28,404 reputation">Adam Gent</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Managing XSS requires multiple validations, data from the client side. </p>
<ol>
<li><strong>Input Validations</strong> (form validation) on the Server side. There are multiple ways of going about it. You can try JSR 303 bean validation(<a href="http://docs.jboss.org/hibernate/validator/5.0/reference/en-US/html_single/" rel="noreferrer">hibernate validator</a>), or <a href="http://owasp-esapi-java.googlecode.com/svn/trunk_doc/latest/org/owasp/esapi/reference/DefaultValidator.html" rel="noreferrer">ESAPI Input Validation framework</a>. Though I've not tried it myself (yet), there is an annotation that checks for safe html <strong>(@SafeHtml)</strong>. You could in fact use Hibernate validator with Spring MVC for bean validations -&gt; <a href="http://blog.springsource.org/2012/08/29/integrating-spring-mvc-with-jquery-for-validation-rules/" rel="noreferrer">Ref</a></li>
<li><strong>Escaping URL requests</strong> - For all your HTTP requests, use some sort of XSS filter. I've used the following for our web app and it takes care of cleaning up the HTTP URL request - <a href="http://www.servletsuite.com/servlets/xssflt.htm" rel="noreferrer">http://www.servletsuite.com/servlets/xssflt.htm</a></li>
<li><strong>Escaping data/html</strong> returned to the client (look above at @BalusC explanation).</li>
</ol>
</div></text><author><a href="/users/1777979/masterv">MasterV</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I would suggest regularly testing for vulnerabilities using an automated tool, and fixing whatever it finds. It's a lot easier to suggest a library to help with a specific vulnerability then for all XSS attacks in general.</p>
<p><a href="http://code.google.com/p/skipfish/" rel="nofollow noreferrer">Skipfish</a> is an open source tool from Google that I've been investigating: it finds quite a lot of stuff, and seems worth using.</p>
</div></text><author><a href="/users/8313/sean-reilly">Sean Reilly</a></author><comments><comment><text><span class="comment-copy">Prevention is better than diagnosing (eg. skipfish) followed by subsequent quick-fixes.</span></text><author><a class="comment-user" href="/users/242940/sripathi-krishnan" title="22,613 reputation">Sripathi Krishnan</a></author></comment><comment><text><span class="comment-copy">I disagree. Prevention without diagnosis is just dogma. Run the diagnosis as part of your CI cycle to avoid the "quick fix" problem.</span></text><author><a class="comment-user" href="/users/8313/sean-reilly" title="14,927 reputation">Sean Reilly</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>There is no easy, out of the box solution against XSS. The OWASP ESAPI API has some support for the escaping that is very usefull, and they have tag libraries.</p>
<p>My approach was to basically to extend the stuts 2 tags in following ways.</p>
<ol>
<li>Modify s:property tag so it can take extra attributes stating what sort of escaping is required (escapeHtmlAttribute="true" etc.). This involves creating a new Property and PropertyTag classes. The Property class uses OWASP ESAPI api for the escaping.</li>
<li>Change freemarker templates to use the new version of s:property and set the escaping.</li>
</ol>
<p>If you didn't want to modify the classes in step 1, another approach would be to import the ESAPI tags into the freemarker templates and escape as needed. Then if you need to use a s:property tag in your JSP, wrap it with and ESAPI tag.</p>
<p>I have written a more detailed explanation here.</p>
<p><a href="http://www.nutshellsoftware.org/software/securing-struts-2-using-esapi-part-1-securing-outputs/" rel="nofollow">http://www.nutshellsoftware.org/software/securing-struts-2-using-esapi-part-1-securing-outputs/</a></p>
<p>I agree escaping inputs is not ideal. </p>
</div></text><author><a href="/users/751672/brett-carr">brett.carr</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>My personal opinion is that you should avoid using JSP/ASP/PHP/etc pages. Instead output to an API similar to SAX (only designed for calling rather than handling). That way there is a single layer that has to create well formed output.</p>
</div></text><author><a href="/users/4725/tom-hawtin-tackline">Tom Hawtin - tackline</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>If you want to automatically escape <strong>all</strong> JSP variables without having to explicitly wrap each variable, you can use an EL resolver <a href="http://pukkaone.github.com/2011/01/03/jsp-cross-site-scripting-elresolver.html" rel="nofollow">as detailed here with full source and an example (JSP 2.0 or newer)</a>, and discussed in more detail <a href="http://raibledesigns.com/rd/entry/fixing_xss_in_jsp_2" rel="nofollow">here</a>:</p>
<p>For example, by using the above mentioned EL resolver, your JSP code will remain like so, but each variable will be automatically escaped by the resolver</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="pun">...</span><span class="pln">
</span><span class="pun">&lt;</span><span class="pln">c</span><span class="pun">:</span><span class="pln">forEach items</span><span class="pun">=</span><span class="str">"${orders}"</span><span class="pln"> var</span><span class="pun">=</span><span class="str">"item"</span><span class="pun">&gt;</span><span class="pln">
  </span><span class="pun">&lt;</span><span class="pln">p</span><span class="pun">&gt;</span><span class="pln">$</span><span class="pun">{</span><span class="pln">item</span><span class="pun">.</span><span class="pln">name</span><span class="pun">}&lt;/</span><span class="pln">p</span><span class="pun">&gt;</span><span class="pln">
  </span><span class="pun">&lt;</span><span class="pln">p</span><span class="pun">&gt;</span><span class="pln">$</span><span class="pun">{</span><span class="pln">item</span><span class="pun">.</span><span class="pln">price</span><span class="pun">}&lt;/</span><span class="pln">p</span><span class="pun">&gt;</span><span class="pln">
  </span><span class="pun">&lt;</span><span class="pln">p</span><span class="pun">&gt;</span><span class="pln">$</span><span class="pun">{</span><span class="pln">item</span><span class="pun">.</span><span class="pln">description</span><span class="pun">}&lt;/</span><span class="pln">p</span><span class="pun">&gt;</span><span class="pln">
</span><span class="pun">&lt;/</span><span class="pln">c</span><span class="pun">:</span><span class="pln">forEach</span><span class="pun">&gt;</span><span class="pln">
</span><span class="pun">...</span></code></pre>
<p>If you want to force escaping by default in Spring, you could consider this as well, but it doesn't escape EL expressions, just tag output, I think:</p>
<p><a href="http://forum.springsource.org/showthread.php?61418-Spring-cross-site-scripting&amp;p=205646#post205646" rel="nofollow">http://forum.springsource.org/showthread.php?61418-Spring-cross-site-scripting&amp;p=205646#post205646</a></p>
<p>Note: Another approach to EL escaping that uses XSL transformations to preprocess JSP files can be found here:</p>
<p><a href="http://therning.org/niklas/2007/09/preprocessing-jsp-files-to-automatically-escape-el-expressions/" rel="nofollow">http://therning.org/niklas/2007/09/preprocessing-jsp-files-to-automatically-escape-el-expressions/</a></p>
</div></text><author><a href="/users/26510/brad-parks">Brad Parks</a></author><comments/></answer></answers></post>