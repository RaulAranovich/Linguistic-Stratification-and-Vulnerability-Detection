<?xml version="1.0" encoding="utf-8"?>
<post><title>apache - PHP $_SERVER['HTTP_HOST'] vs. $_SERVER['SERVER_NAME'], am I understanding the man pages correctly? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I did a lot of searching and also read the PHP $_SERVER man page. Do I have this right regarding which to use for my PHP scripts for simple link definitions used throughout my site?</p>
<p><code>$_SERVER['SERVER_NAME']</code> is based on your web servers' config file (Apache2 in my case), and varies depending on a few directives: (1) VirtualHost, (2) ServerName, (3) UseCanonicalName, etc.</p>
<p><code>$_SERVER['HTTP_HOST']</code> is based on the request from the client.</p>
<p>Therefore, it would seem to me that the proper one to use in order to make my scripts as compatible as possible would be <code>$_SERVER['HTTP_HOST']</code>. Is this assumption correct?</p>
<p><strong>Followup comments:</strong></p>
<p>I guess I got a little paranoid after reading this article and noting that some folks said "they wouldn't trust any of the $_SERVER vars":</p>
<ul>
<li><p><a href="http://markjaquith.wordpress.com/2009/09/21/php-server-vars-not-safe-in-forms-or-links/" rel="noreferrer">http://markjaquith.wordpress.com/2009/09/21/php-server-vars-not-safe-in-forms-or-links/</a></p></li>
<li><p><a href="http://php.net/manual/en/reserved.variables.server.php#89567" rel="noreferrer">http://php.net/manual/en/reserved.variables.server.php#89567</a> (comment: Vladimir Kornea 14-Mar-2009 01:06)</p></li>
</ul>
<p>Apparently the discussion is mainly about <code>$_SERVER['PHP_SELF']</code> and why you shouldn't use it in the form action attribute without proper escaping to prevent XSS attacks.</p>
<p>My conclusion about my original question above is that it is "safe" to use <code>$_SERVER['HTTP_HOST']</code> for all links on a site without having to worry about XSS attacks, even when used in forms.</p>
<p>Please correct me if I'm wrong.</p>
</div></text><author><a href="/users/632951/pacerier">Pacerier</a></author><comments/></question><answers><answer><text><div class="post-text" itemprop="text">
<p>That’s probably everyone’s first thought. But it’s a little bit more difficult. See <a href="http://shiflett.org/blog/2006/mar/server-name-versus-http-host" rel="noreferrer">Chris Shiflett’s article <em><code>SERVER_NAME</code> Versus <code>HTTP_HOST</code></em></a>.</p>
<p>It seems that there is no silver bullet. Only when you <a href="http://httpd.apache.org/docs/2.2/mod/core.html#usecanonicalname" rel="noreferrer">force Apache to use the canonical name</a> you will always get the right server name with <code>SERVER_NAME</code>.</p>
<p>So you either go with that or you check the host name against a white list:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">$allowed_hosts </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">(</span><span class="str">'foo.example.com'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'bar.example.com'</span><span class="pun">);</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">isset</span><span class="pun">(</span><span class="pln">$_SERVER</span><span class="pun">[</span><span class="str">'HTTP_HOST'</span><span class="pun">])</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> </span><span class="pun">!</span><span class="pln">in_array</span><span class="pun">(</span><span class="pln">$_SERVER</span><span class="pun">[</span><span class="str">'HTTP_HOST'</span><span class="pun">],</span><span class="pln"> $allowed_hosts</span><span class="pun">))</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    header</span><span class="pun">(</span><span class="pln">$_SERVER</span><span class="pun">[</span><span class="str">'SERVER_PROTOCOL'</span><span class="pun">].</span><span class="str">' 400 Bad Request'</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">exit</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/53114/gumbo">Gumbo</a></author><comments><comment><text><span class="comment-copy">Lol, I read that article and it didn't really seem to answer my question. Which one do the pro devs use? If either.</span></text><author><a class="comment-user owner" href="/users/142233/jeff" title="2,327 reputation">Jeff</a></author></comment><comment><text><span class="comment-copy">Iiiiinteresting, I never knew SERVER_NAME used the user-supplied values by default in Apache.</span></text><author><a class="comment-user" href="/users/15880/powerlord" title="63,907 reputation">Powerlord</a></author></comment><comment><text><span class="comment-copy">@Jeff, For servers that host more than one sub/domain, you have only two choices <code>$_SERVER['SERVER_NAME']</code> and <code>$_SERVER['HTTP_HOST']</code> (aside from implementing some other custom handshake based on the user request). Pro devs do not trust the things they don't understand completely. So they either have their SAPI <b>setup perfectly correctly</b> (in which case the option they use <i>will</i> give the correct result), or they'll do whitelisting such that it doesn't matter what values the SAPI supply.</span></text><author><a class="comment-user" href="/users/632951/pacerier" title="33,795 reputation">Pacerier</a></author></comment><comment><text><span class="comment-copy">@Gumbo, You need to <a href="http://stackoverflow.com/a/28889208/632951">apply the "port" patch</a> due to serious issues with certain SAPIs. Also, <code>array_key_exists</code> is <a href="http://php.net/manual/en/internals2.variables.tables.php" rel="nofollow noreferrer">more scalable</a> compared to <code>in_array</code> that has O(n) performance.</span></text><author><a class="comment-user" href="/users/632951/pacerier" title="33,795 reputation">Pacerier</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Just an additional note - if the server runs on a port other than 80 (as might be common on a development/intranet machine) then <code>HTTP_HOST</code> contains the port, while <code>SERVER_NAME</code> does not.</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">$_SERVER</span><span class="pun">[</span><span class="str">'HTTP_HOST'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">'localhost:8080'</span><span class="pln">
$_SERVER</span><span class="pun">[</span><span class="str">'SERVER_NAME'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">'localhost'</span></code></pre>
<p>(At least that's what I've noticed in Apache port-based virtualhosts)</p>
<p>As Mike has noted below, <code>HTTP_HOST</code> does <em>not</em> contain <code>:443</code> when running on HTTPS (unless you're running on a non-standard port, which I haven't tested).</p>
</div></text><author><a href="/users/195835/simon-east">Simon East</a></author><comments><comment><text><span class="comment-copy">Note: The port is not present in HTTP_HOST for 443 either (default SSL port).</span></text><author><a class="comment-user" href="/users/811240/mike" title="11,571 reputation">Mike</a></author></comment><comment><text><span class="comment-copy">So in other words, the value of <code>HTTP_HOST</code> is not exactly the <code>Host:</code> parameter the user supplied. It;s merely based on that.</span></text><author><a class="comment-user" href="/users/632951/pacerier" title="33,795 reputation">Pacerier</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>This is a verbose translation of what Symfony uses to get the host name (<em>see the second example for a more literal translation</em>):</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="kwd">function</span><span class="pln"> getHost</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    $possibleHostSources </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">(</span><span class="str">'HTTP_X_FORWARDED_HOST'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'HTTP_HOST'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'SERVER_NAME'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'SERVER_ADDR'</span><span class="pun">);</span><span class="pln">
    $sourceTransformations </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">(</span><span class="pln">
        </span><span class="str">"HTTP_X_FORWARDED_HOST"</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(</span><span class="pln">$value</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            $elements </span><span class="pun">=</span><span class="pln"> explode</span><span class="pun">(</span><span class="str">','</span><span class="pun">,</span><span class="pln"> $value</span><span class="pun">);</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> trim</span><span class="pun">(</span><span class="kwd">end</span><span class="pun">(</span><span class="pln">$elements</span><span class="pun">));</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">);</span><span class="pln">
    $host </span><span class="pun">=</span><span class="pln"> </span><span class="str">''</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">foreach</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$possibleHostSources </span><span class="kwd">as</span><span class="pln"> $source</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">empty</span><span class="pun">(</span><span class="pln">$host</span><span class="pun">))</span><span class="pln"> </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">empty</span><span class="pun">(</span><span class="pln">$_SERVER</span><span class="pun">[</span><span class="pln">$source</span><span class="pun">]))</span><span class="pln"> </span><span class="kwd">continue</span><span class="pun">;</span><span class="pln">
        $host </span><span class="pun">=</span><span class="pln"> $_SERVER</span><span class="pun">[</span><span class="pln">$source</span><span class="pun">];</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">array_key_exists</span><span class="pun">(</span><span class="pln">$source</span><span class="pun">,</span><span class="pln"> $sourceTransformations</span><span class="pun">))</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            $host </span><span class="pun">=</span><span class="pln"> $sourceTransformations</span><span class="pun">[</span><span class="pln">$source</span><span class="pun">](</span><span class="pln">$host</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln"> 
    </span><span class="pun">}</span><span class="pln">

    </span><span class="com">// Remove port number from host</span><span class="pln">
    $host </span><span class="pun">=</span><span class="pln"> preg_replace</span><span class="pun">(</span><span class="str">'/:\d+$/'</span><span class="pun">,</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln"> $host</span><span class="pun">);</span><span class="pln">

    </span><span class="kwd">return</span><span class="pln"> trim</span><span class="pun">(</span><span class="pln">$host</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<hr/>
<p><strong><em>Outdated:</em></strong></p>
<p>This is my translation to bare PHP of a method used in Symfony framework that tries to get the hostname from every way possible in order of best practice:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="kwd">function</span><span class="pln"> get_host</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$host </span><span class="pun">=</span><span class="pln"> $_SERVER</span><span class="pun">[</span><span class="str">'HTTP_X_FORWARDED_HOST'</span><span class="pun">])</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        $elements </span><span class="pun">=</span><span class="pln"> explode</span><span class="pun">(</span><span class="str">','</span><span class="pun">,</span><span class="pln"> $host</span><span class="pun">);</span><span class="pln">

        $host </span><span class="pun">=</span><span class="pln"> trim</span><span class="pun">(</span><span class="kwd">end</span><span class="pun">(</span><span class="pln">$elements</span><span class="pun">));</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">else</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">$host </span><span class="pun">=</span><span class="pln"> $_SERVER</span><span class="pun">[</span><span class="str">'HTTP_HOST'</span><span class="pun">])</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">$host </span><span class="pun">=</span><span class="pln"> $_SERVER</span><span class="pun">[</span><span class="str">'SERVER_NAME'</span><span class="pun">])</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                $host </span><span class="pun">=</span><span class="pln"> </span><span class="pun">!</span><span class="pln">empty</span><span class="pun">(</span><span class="pln">$_SERVER</span><span class="pun">[</span><span class="str">'SERVER_ADDR'</span><span class="pun">])</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> $_SERVER</span><span class="pun">[</span><span class="str">'SERVER_ADDR'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">;</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="com">// Remove port number from host</span><span class="pln">
    $host </span><span class="pun">=</span><span class="pln"> preg_replace</span><span class="pun">(</span><span class="str">'/:\d+$/'</span><span class="pun">,</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln"> $host</span><span class="pun">);</span><span class="pln">

    </span><span class="kwd">return</span><span class="pln"> trim</span><span class="pun">(</span><span class="pln">$host</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/339872/antitoxic">antitoxic</a></author><comments><comment><text><span class="comment-copy">this code hurts my brain!.. please, for the love of butterflies, don't write your code this way! (excuse my engrish)</span></text><author><a class="comment-user" href="/users/430590/stefannch" title="1,612 reputation">StefanNch</a></author></comment><comment><text><span class="comment-copy">@StefanNch Please define "this way".</span></text><author><a class="comment-user" href="/users/924299/showdev" title="13,815 reputation">showdev</a></author></comment><comment><text><span class="comment-copy">@showdev I really find "hard" to read condition statement like <code>if ($host = $_SERVER['HTTP_X_FORWARDED_HOST'])</code> or <code>x = a == 1 ? True : False</code>. First time I've saw it my brain was looking for $host instantiation and an answer for "why is only one "=" sign?". I'm starting to dislike weak typing programming languages. Everything is written differently. You don't save time and you're not special. I don't write code this way, because after time passes, I'm the one who needs to debug it. Looks really messy for a tired brain! I know my english is engrish, but at least i try.</span></text><author><a class="comment-user" href="/users/430590/stefannch" title="1,612 reputation">StefanNch</a></author></comment><comment><text><span class="comment-copy">guys, I simply ported the code from Symfony. This is the way I took it. For all it matters - it works and it seems quite thorough. I, myself, also thing this is not readable enough but I haven't had time to rewrite it completely.</span></text><author><a class="comment-user" href="/users/339872/antitoxic" title="2,725 reputation">antitoxic</a></author></comment><comment><text><span class="comment-copy">Looks fine to me. Those are <a href="http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary" rel="nofollow noreferrer">ternary operators</a> and actually can save time (and bytes) without diminishing readability, when used appropriately.</span></text><author><a class="comment-user" href="/users/924299/showdev" title="13,815 reputation">showdev</a></author></comment><comment><text><span class="comment-copy">Saving bytes is usefull only for assembly languages. If this techniques saves you time and you can handle it in the future, I have nothing against it. I'm not here to create a controversy out of personal perferences for a function; if it works, is good. For me slower-writes/faster-reads saves time. My apologies if I've offended someone.</span></text><author><a class="comment-user" href="/users/430590/stefannch" title="1,612 reputation">StefanNch</a></author></comment><comment><text><span class="comment-copy">@StefanNch,  I've added a more verbose example. I hope it's more useful.</span></text><author><a class="comment-user" href="/users/339872/antitoxic" title="2,725 reputation">antitoxic</a></author></comment><comment><text><span class="comment-copy">@antitoxic, -1 Symfony coders (like many others) don't exactly know what they are doing in this case. This doesn't give you the host name (see Simon's answer). This merely give you a best <b>guess</b> which <b>will be</b> wrong many times.</span></text><author><a class="comment-user" href="/users/632951/pacerier" title="33,795 reputation">Pacerier</a></author></comment><comment><text><span class="comment-copy">@StefanNch "Saving bytes is useful only for assembly languages", extremely untrue. Just to point out one example for scripting languages such as PHP, bytes saved can assist in quicker parses for the interpreter.  Being verbose wont generally affect compiled languages. Also you should really get used to reading ternary statements as a programer, they're available most languages and increase readability unless you just don't know the language..</span></text><author><a class="comment-user" href="/users/578023/garet-claborn" title="608 reputation">Garet Claborn</a></author></comment><comment><text><span class="comment-copy">@GaretClaborn I've done (way) too many "performance" tests at my life to realize that the problem should not be on my shoulders. As long I will stay in programming, I will try to write my code knowing that others might need to understand it. There is no time to decipher just because the machine parse and execute the code .001 seconds faster for 1 million calls. Anyway this is my opinion based on my experiences. When I can improve a script I'm not chopping variable names just to prove myself how hardcore I am. Don't have time to elaborate further, so good luck.</span></text><author><a class="comment-user" href="/users/430590/stefannch" title="1,612 reputation">StefanNch</a></author></comment><comment><text><span class="comment-copy">@StefanNch sorry i dont have time to explain basics like this but you should research better.</span></text><author><a class="comment-user" href="/users/578023/garet-claborn" title="608 reputation">Garet Claborn</a></author></comment><comment><text><span class="comment-copy">@GaretClaborn Nor i asked for it. I've explained my point of view as well as I could and pretty much just that.</span></text><author><a class="comment-user" href="/users/430590/stefannch" title="1,612 reputation">StefanNch</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Use either. They are both equally (in)secure, as in many cases SERVER_NAME is just populated from HTTP_HOST anyway. I normally go for HTTP_HOST, so that the user stays on the exact host name they started on. For example if I have the same site on a .com and .org domain, I don't want to send someone from .org to .com, particularly if they might have login tokens on .org that they'd lose if sent to the other domain.</p>
<p>Either way, you just need to be sure that your webapp will only ever respond for known-good domains. This can be done either (a) with an application-side check like Gumbo's, or (b) by using a virtual host on the domain name(s) you want that <strong>does not respond</strong> to requests that give an unknown Host header.</p>
<p>The reason for this is that if you allow your site to be accessed under any old name, you lay yourself open to DNS rebinding attacks (where another site's hostname points to your IP, a user accesses your site with the attacker's hostname, then the hostname is moved to the attacker's IP, taking your cookies/auth with it) and search engine hijacking (where an attacker points their own hostname at your site and tries to make search engines see it as the ‘best’ primary hostname).</p>
<blockquote>
<p>Apparently the discussion is mainly about $_SERVER['PHP_SELF'] and why you shouldn't use it in the form action attribute without proper escaping to prevent XSS attacks.</p>
</blockquote>
<p>Pfft. Well you shouldn't use <em>anything</em> in <em>any</em> attribute without escaping with <code>htmlspecialchars($string, ENT_QUOTES)</code>, so there's nothing special about server variables there.</p>
</div></text><author><a href="/users/18936/bobince">bobince</a></author><comments><comment><text><span class="comment-copy">Stay with solution (a), (b) is not really safe, using absolute URI in HTTP requests allows for name based virtualhosts security bypass. So the real rule is <b>never</b> trust SERVER_NAME or HTTP_HOST.</span></text><author><a class="comment-user" href="/users/550618/regilero" title="20,643 reputation">regilero</a></author></comment><comment><text><span class="comment-copy">@bobince, How does the mentioned search engine hijacking work? Search engines  map words to domain <b>urls</b>, they don't deal with IPs. So why do you say that "an attacker can make search engines see <code>attacker.com</code> as the best primary source for your server's IP" mean? That doesn't seem to mean anything to search engines, What's that even going to do?</span></text><author><a class="comment-user" href="/users/632951/pacerier" title="33,795 reputation">Pacerier</a></author></comment><comment><text><span class="comment-copy">Google certainly had (and probably still has in some form) the concept of dupe sites, so that if your site is accessible as <code>http://example.com/</code>, <code>http://www.example.com/</code> and <code>http://93.184.216.34/</code> it would combine them into one site, choose the most popular of the addresses, and only return links to that version. If you could point <code>evil-example.com</code>at the same address and make Google briefly see that as the more popular address you could steal the site's juice. I don't know how practical this is today but I've seen Russian link farm attackers try to do it in the past.</span></text><author><a class="comment-user" href="/users/18936/bobince" title="387,708 reputation">bobince</a></author></comment><comment><text><span class="comment-copy">And if someone uses an HTTP 1.0 browser with no <code>host</code> header ...</span></text><author><a class="comment-user" href="/users/2495645/anthony-rutledge" title="1,834 reputation">Anthony Rutledge</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The major difference between the two is that <code>$_SERVER['SERVER_NAME']</code> is a server controlled variable, while <code>$_SERVER['HTTP_HOST']</code> is a user-controlled value.</p>
<p>The rule of thumb is to never trust values from the user, so <code>$_SERVER['SERVER_NAME']</code> is the better choice.</p>
<p>As Gumbo pointed out, Apache will construct SERVER_NAME from user-supplied values if you don't set <code>UseCanonicalName On</code>.</p>
<p>Edit: Having said all that, if the site is using a name-based virtual host, the HTTP Host header is the only way to reach sites that aren't the default site.</p>
</div></text><author><a href="/users/15880/powerlord">Powerlord</a></author><comments><comment><text><span class="comment-copy">Understood. My hangup is "how could a user alter the value of $_SERVER['HTTP_HOST']?" Is it even possible?</span></text><author><a class="comment-user owner" href="/users/142233/jeff" title="2,327 reputation">Jeff</a></author></comment><comment><text><span class="comment-copy">A user can alter that because it's just the contents of the Host header from the incoming request. The main server (or the VirtualHost bound to <b>default</b>:80) will respond to all unknown hosts, thus the contents of the Host tag on that site could be set to anything.</span></text><author><a class="comment-user" href="/users/15880/powerlord" title="63,907 reputation">Powerlord</a></author></comment><comment><text><span class="comment-copy">Note that IP-based virtual hosts will ALWAYS respond on their specific IP, so you cannot <b>under any circumstances</b> trust the HTTP Host value on them.</span></text><author><a class="comment-user" href="/users/15880/powerlord" title="63,907 reputation">Powerlord</a></author></comment><comment><text><span class="comment-copy">@Jeff,  It's like asking "It is possible to call pizza hut's phone number and <b>request</b> to speak to KFC staff?" Sure of course you can <b>request</b> anything you want. @Powerlord, This has nothing to do with IP-based virtual hosts. Your server, regardless of IP-based virtual host or not, cannot under any circumstances trust the HTTP's <code>Host:</code> value unless you have <b>already verified</b> it, either manually or via your SAPI's setup.</span></text><author><a class="comment-user" href="/users/632951/pacerier" title="33,795 reputation">Pacerier</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<blockquote>
<p>Is it "safe" to use <code>$_SERVER['HTTP_HOST']</code> for all links on a site without having to worry about XSS attacks, even when used in forms?</p>
</blockquote>
<p>Yes, it's <a href="http://stackoverflow.com/questions/6474783/which-server-variables-are-safe">safe</a> to use <code>$_SERVER['HTTP_HOST']</code>, (and even <code>$_GET</code> and <code>$_POST</code>) <strong>as long as you verify them</strong> before accepting them. This is what I do for secure production servers:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="com">/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */</span><span class="pln">
$reject_request </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">if</span><span class="pun">(</span><span class="pln">array_key_exists</span><span class="pun">(</span><span class="str">'HTTP_HOST'</span><span class="pun">,</span><span class="pln"> $_SERVER</span><span class="pun">)){</span><span class="pln">
    $host_name </span><span class="pun">=</span><span class="pln"> $_SERVER</span><span class="pun">[</span><span class="str">'HTTP_HOST'</span><span class="pun">];</span><span class="pln">
    </span><span class="com">// [ need to cater for `host:port` since some "buggy" SAPI(s) have been known to return the port too, see http://goo.gl/bFrbCO</span><span class="pln">
    $strpos </span><span class="pun">=</span><span class="pln"> strpos</span><span class="pun">(</span><span class="pln">$host_name</span><span class="pun">,</span><span class="pln"> </span><span class="str">':'</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">$strpos </span><span class="pun">!==</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">){</span><span class="pln">
        $host_name </span><span class="pun">=</span><span class="pln"> substr</span><span class="pun">(</span><span class="pln">$host_name</span><span class="pun">,</span><span class="pln"> $strpos</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="com">// ]</span><span class="pln">
    </span><span class="com">// [ for dynamic verification, replace this chunk with db/file/curl queries</span><span class="pln">
    $reject_request </span><span class="pun">=</span><span class="pln"> </span><span class="pun">!</span><span class="pln">array_key_exists</span><span class="pun">(</span><span class="pln">$host_name</span><span class="pun">,</span><span class="pln"> array</span><span class="pun">(</span><span class="pln">
        </span><span class="str">'a.com'</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">,</span><span class="pln">
        </span><span class="str">'a.a.com'</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">,</span><span class="pln">
        </span><span class="str">'b.com'</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">,</span><span class="pln">
        </span><span class="str">'b.b.com'</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">null</span><span class="pln">
    </span><span class="pun">));</span><span class="pln">
    </span><span class="com">// ]</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
</span><span class="kwd">if</span><span class="pun">(</span><span class="pln">$reject_request</span><span class="pun">){</span><span class="pln">
    </span><span class="com">// log errors</span><span class="pln">
    </span><span class="com">// display errors (optional)</span><span class="pln">
    </span><span class="kwd">exit</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
</span><span class="com">/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */</span><span class="pln">
echo </span><span class="str">'Hello World!'</span><span class="pun">;</span><span class="pln">
</span><span class="com">// ...</span></code></pre>
<p>The advantage of <code>$_SERVER['HTTP_HOST']</code> is that its behavior is more well-defined than <code>$_SERVER['SERVER_NAME']</code>. Contrast <a href="http://php.net/manual/en/reserved.variables.server.php#refsect1-reserved.variables.server-indices" rel="nofollow">➫➫</a>:</p>
<blockquote>
<p>Contents of the Host: header from the current request, if there is one.</p>
</blockquote>
<p>with:</p>
<blockquote>
<p>The name of the server host under which the current script is executing.</p>
</blockquote>
<p>Using a better defined interface like  <code>$_SERVER['HTTP_HOST']</code> means that more SAPIs will implement it using <strong>reliable</strong> well-defined behavior. (Unlike <a href="http://stackoverflow.com/a/9458970/632951">the other</a>.) However, it is still totally SAPI dependent <a href="http://php.net/manual/en/reserved.variables.server.php#refsect1-reserved.variables.server-description" rel="nofollow">➫➫</a>:</p>
<blockquote>
<p>There is no guarantee that every web server will provide any of these [<code>$_SERVER</code> entries]; servers may omit some, or provide others not listed here. </p>
</blockquote>
<p>To understand how to properly retrieve the host name, first and foremost you need to understand that a server which contains only <em>code</em> has no means of knowing (pre-requisite for verifying) <strong>its own name</strong> on the network. It needs to interface with a component that supplies it its own name. This can be done via:</p>
<ul>
<li><p>local config file</p></li>
<li><p>local database</p></li>
<li><p>hardcoded source code</p></li>
<li><p>external request (<a href="http://en.wikipedia.org/wiki/CURL" rel="nofollow">curl</a>)</p></li>
<li><p>client/attacker's <code>Host:</code> request</p></li>
<li><p>etc</p></li>
</ul>
<p>Usually its done via the local (SAPI) config file. Note that you have configured it correctly, e.g. in Apache <a href="http://httpd.apache.org/docs/2.2/mod/core.html#usecanonicalname" rel="nofollow">➫➫</a>:</p>
<blockquote>
<p>A couple of things need to be 'faked' to make the dynamic virtual host look like a normal one. </p>
<p>The most important is the server name which is used by Apache to generate self-referential URLs, etc. It is configured with the <code>ServerName</code> directive, and it is available to CGIs via the <code>SERVER_NAME</code> environment variable. </p>
<p>The actual value used at run time is <strong>controlled by</strong> the UseCanonicalName setting. </p>
<p><strong>With</strong> <code>UseCanonicalName Off</code> the server name comes from the contents of the <code>Host:</code> header in the request. <strong>With</strong> <code>UseCanonicalName DNS</code> it comes from a reverse DNS lookup of the virtual host's IP address. The former setting is used for name-based dynamic virtual hosting, and the latter is used for** IP-based hosting. </p>
<p><strong>If</strong> Apache cannot work out the server name because there is no <code>Host:</code> header or the DNS lookup fails <strong>then</strong> the value configured with <code>ServerName</code> is used instead. </p>
</blockquote>
</div></text><author><a href="/users/632951/pacerier">Pacerier</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I am not sure and not really trust <code>$_SERVER['HTTP_HOST']</code> because it depend on header from client. In another way, if a domain requested by client is not mine one, they will not getting into my site because DNS and TCP/IP protocol point it to the correct destination. However I don't know if possible to hijack the DNS, network or even Apache server. To be safe, I define host name in environment and compare it with <code>$_SERVER['HTTP_HOST']</code>.</p>
<p>Add <code>SetEnv MyHost domain.com</code> in .htaccess file on root and add ths code in Common.php</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">getenv</span><span class="pun">(</span><span class="str">'MyHost'</span><span class="pun">)!=</span><span class="pln">$_SERVER</span><span class="pun">[</span><span class="str">'HTTP_HOST'</span><span class="pun">])</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  header</span><span class="pun">(</span><span class="pln">$_SERVER</span><span class="pun">[</span><span class="str">'SERVER_PROTOCOL'</span><span class="pun">].</span><span class="str">' 400 Bad Request'</span><span class="pun">);</span><span class="pln">
  </span><span class="kwd">exit</span><span class="pun">();</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>I include this Common.php file in every php page. This page doing anything required for each request like <code>session_start()</code>, modify session cookie and reject if post method come from different domain.</p>
</div></text><author><a href="/users/186334/callmelann">CallMeLaNN</a></author><comments><comment><text><span class="comment-copy">Of course it's possible to bypass DNS. An attacker can simply issue a fradulent <code>Host:</code> value directly to your server's IP.</span></text><author><a class="comment-user" href="/users/632951/pacerier" title="33,795 reputation">Pacerier</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p><code>XSS</code> will always be there even if you use <code>$_SERVER['HTTP_HOST']</code>, <code>$_SERVER['SERVER_NAME']</code> OR <code>$_SERVER['PHP_SELF']</code></p>
</div></text><author><a href="/users/2172808/jaydeep-dave">Jaydeep Dave</a></author><comments/></answer></answers></post>