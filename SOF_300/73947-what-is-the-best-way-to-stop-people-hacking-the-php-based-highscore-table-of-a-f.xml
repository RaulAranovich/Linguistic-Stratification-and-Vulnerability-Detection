<?xml version="1.0" encoding="utf-8"?>
<post><title>actionscript 3 - What is the best way to stop people hacking the PHP-based highscore table of a Flash game - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I'm talking about an action game with no upper score limit and no way to verify the score on the server by replaying moves etc. </p>
<p>What I really need is the strongest encryption possible in Flash/PHP, and a way to prevent people calling the PHP page other than through my Flash file. I have tried some simple methods in the past of making multiple calls for a single score and completing a checksum / fibonacci sequence etc, and also obfuscating the SWF with Amayeta SWF Encrypt, but they were all hacked eventually.</p>
<p>Thanks to StackOverflow responses I have now found some more info from Adobe - <a href="http://www.adobe.com/devnet/flashplayer/articles/secure_swf_apps_12.html" rel="noreferrer">http://www.adobe.com/devnet/flashplayer/articles/secure_swf_apps_12.html</a> and <a href="https://github.com/mikechambers/as3corelib" rel="noreferrer">https://github.com/mikechambers/as3corelib</a> - which I think I can use for the encryption. Not sure this will get me around CheatEngine though.</p>
<p>I need to know the best solutions for both AS2 and AS3, if they are different.</p>
<p>The main problems seem to be things like TamperData and LiveHTTP headers, but I understand there are more advanced hacking tools as well - like CheatEngine (thanks Mark Webster)</p>
</div></text><author><a href="/users/890523/charles-forest">Charles Forest</a></author><comments><comment><text><span class="comment-copy">you should put score limits, there is no reason why you could not it, per level , in total,ect ...</span></text><author><a class="comment-user" href="/users/750852/mpm" title="14,759 reputation">mpm</a></author></comment><comment><text><span class="comment-copy">First link is not available any more</span></text><author><a class="comment-user" href="/users/1168944/mike" title="1,678 reputation">Mike</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>This is a classic problem with Internet games and contests. Your Flash code works with users to decide a score for a game. But users aren't trusted, and the Flash code runs on the user's computer. You're SOL. There is nothing you can do to prevent an attacker from forging high scores:</p>
<ul>
<li><p>Flash is even easier to reverse engineer than you might think it is, since the bytecodes are well documented and describe a high-level language (Actionscript) --- when you publish a Flash game, you're publishing your source code, whether you know it or not.</p></li>
<li><p>Attackers control the runtime memory of the Flash interpreter, so that anyone who knows how to use a programmable debugger can alter any variable (including the current score) at any time, or alter the program itself.</p></li>
</ul>
<p>The simplest possible attack against your system is to run the HTTP traffic for the game through a proxy, catch the high-score save, and replay it with a higher score.</p>
<p>You can try to block this attack by binding each high score save to a single instance of the game, for instance by sending an encrypted token to the client at game startup, which might look like:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">hex</span><span class="pun">-</span><span class="pln">encoding</span><span class="pun">(</span><span class="pln"> AES</span><span class="pun">(</span><span class="pln">secret</span><span class="pun">-</span><span class="pln">key</span><span class="pun">-</span><span class="pln">stored</span><span class="pun">-</span><span class="pln">only</span><span class="pun">-</span><span class="pln">on</span><span class="pun">-</span><span class="pln">server</span><span class="pun">,</span><span class="pln"> timestamp</span><span class="pun">,</span><span class="pln"> user</span><span class="pun">-</span><span class="pln">id</span><span class="pun">,</span><span class="pln"> random</span><span class="pun">-</span><span class="pln">number</span><span class="pun">))</span></code></pre>
<p>(You could also use a session cookie to the same effect).</p>
<p>The game code echoes this token back to the server with the high-score save. But an attacker can still just launch the game again, get a token, and then immediately paste that token into a replayed high-score save. </p>
<p>So next you feed not only a token or session cookie, but also a high-score-encrypting session key. This will be a 128 bit AES key, itself encrypted with a key hardcoded into the Flash game:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">hex</span><span class="pun">-</span><span class="pln">encoding</span><span class="pun">(</span><span class="pln"> AES</span><span class="pun">(</span><span class="pln">key</span><span class="pun">-</span><span class="pln">hardcoded</span><span class="pun">-</span><span class="kwd">in</span><span class="pun">-</span><span class="pln">flash</span><span class="pun">-</span><span class="pln">game</span><span class="pun">,</span><span class="pln"> random</span><span class="pun">-</span><span class="lit">128</span><span class="pun">-</span><span class="pln">bit</span><span class="pun">-</span><span class="pln">key</span><span class="pun">))</span></code></pre>
<p>Now before the game posts the high score, it decrypts the high-score-encrypting-session key, which it can do because you hardcoded the high-score-encrypting-session-key-decrypting-key into the Flash binary. You encrypt the high score with this decrypted key, along with the SHA1 hash of the high score:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">hex</span><span class="pun">-</span><span class="pln">encoding</span><span class="pun">(</span><span class="pln"> AES</span><span class="pun">(</span><span class="pln">random</span><span class="pun">-</span><span class="lit">128</span><span class="pun">-</span><span class="pln">bit</span><span class="pun">-</span><span class="pln">key</span><span class="pun">-</span><span class="kwd">from</span><span class="pun">-</span><span class="pln">above</span><span class="pun">,</span><span class="pln"> high</span><span class="pun">-</span><span class="pln">score</span><span class="pun">,</span><span class="pln"> SHA1</span><span class="pun">(</span><span class="pln">high</span><span class="pun">-</span><span class="pln">score</span><span class="pun">)))</span></code></pre>
<p>The PHP code on the server checks the token to make sure the request came from a valid game instance, then decrypts the encrypted high score, checking to make sure the high-score matches the SHA1 of the high-score (if you skip this step, decryption will simply produce random, likely very high, high scores). </p>
<p>So now the attacker decompiles your Flash code and quickly finds the AES code, which sticks out like a sore thumb, although even if it didn't it'd be tracked down in 15 minutes with a memory search and a tracer ("I know my score for this game is 666, so let's find 666 in memory, then catch any operation that touches that value --- oh look, the high score encryption code!"). With the session key, the attacker doesn't even have to run the Flash code; she grabs a game launch token and a session key and can send back an arbitrary high score.</p>
<p>You're now at the point where most developers just give up --- give or take a couple months of messing with attackers by:</p>
<ul>
<li><p>Scrambling the AES keys with XOR operations</p></li>
<li><p>Replacing key byte arrays with functions that calculate the key</p></li>
<li><p>Scattering fake key encryptions and high score postings throughout the binary.</p></li>
</ul>
<p>This is all mostly a waste of time. It goes without saying, SSL isn't going to help you either; SSL can't protect you when one of the two SSL endpoints is evil.</p>
<p>Here are some things that can actually reduce high score fraud:</p>
<ul>
<li><p>Require a login to play the game, have the login produce a session cookie, and don't allow multiple outstanding game launches on the same session, or multiple concurrent sessions for the same user.</p></li>
<li><p>Reject high scores from game sessions that last less than the shortest real games ever played (for a more sophisticated approach, try "quarantining" high scores for game sessions that last less than 2 standard deviations below the mean game duration). Make sure you're tracking game durations serverside.</p></li>
<li><p>Reject or quarantine high scores from logins that have only played the game once or twice, so that attackers have to produce a "paper trail" of reasonable looking game play for each login they create.</p></li>
<li><p>"Heartbeat" scores during game play, so that your server sees the score growth over the lifetime of one game play. Reject high scores that don't follow reasonable score curves (for instance, jumping from 0 to 999999). </p></li>
<li><p>"Snapshot" game state during game play (for instance, amount of ammunition, position in the level, etc), which you can later reconcile against recorded interim scores. You don't even have to have a way to detect anomalies in this data to start with; you just have to collect it, and then you can go back and analyze it if things look fishy.</p></li>
<li><p>Disable the account of any user who fails one of your security checks (for instance, by ever submitting an encrypted high score that fails validation). </p></li>
</ul>
<p>Remember though that you're only deterring high score fraud here. There's <em>nothing</em> you can do to prevent if. If there's money on the line in your game, someone is going to defeat any system you come up with. The objective isn't to <em>stop</em> this attack; it's to make the attack more expensive than just getting really good at the game and beating it.</p>
</div></text><author><a href="/users/5674/tqbf">tqbf</a></author><comments><comment><text><span class="comment-copy">I made a online game community, and we designed our entire reward system to reward a top 10th percentile score instead of just the highest scorer and it has worked out great, so trying to sidestep around the problem helps too!</span></text><author><a class="comment-user" href="/users/914/grapefrukt" title="18,919 reputation">grapefrukt</a></author></comment><comment><text><span class="comment-copy">+1, great stuff tqbf!</span></text><author><a class="comment-user" href="/users/1269/muerte" title="1,603 reputation">muerte</a></author></comment><comment><text><span class="comment-copy">+1 Wow, answers like that is why I love stackoverflow.</span></text><author><a class="comment-user" href="/users/84671/ludwig-weinzierl" title="8,699 reputation">Ludwig Weinzierl</a></author></comment><comment><text><span class="comment-copy">+1 This is an amazing answer! Wish I could upvote more than once.</span></text><author><a class="comment-user" href="/users/76968/micmcg" title="2,058 reputation">micmcg</a></author></comment><comment><text><span class="comment-copy">Nice! In short, unless the game <i>runs</i> on the server (or at least has a sanity check running on the server), you cannot prevent abuse. Same problem with multiplayer shooters: If the client is modified to produce better aiming, you can't prevent that in the network protocol.</span></text><author><a class="comment-user" href="/users/596781/kerrek-sb" title="310,295 reputation">Kerrek SB</a></author></comment><comment><text><span class="comment-copy">I guess one could also log all user actions and replay them on the server to verify / determine the high score</span></text><author><a class="comment-user" href="/users/5683109/i3ck" title="248 reputation">I3ck</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>You may be asking the wrong question.  You seem focused on the methods people are using to game their way up the high score list, but blocking specific methods only goes so far.  I have no experience with TamperData, so I can't speak to that.</p>
<p>The question you should be asking is: "How can I verify that submitted scores are valid and authentic?"  The specific way to do that is game-dependent.  For very simple puzzle games, you might send over the score along with the specific starting state and the sequence of moves that resulted in the end state, and then re-run the game on the server side using the same moves.  Confirm that the stated score is the same as the computed score and only accept the score if they match.</p>
</div></text><author><a href="/users/7154/stephen-deken">Stephen Deken</a></author><comments><comment><text><span class="comment-copy">This is a technique I've used in the past as well for a voting system. There is no way you can prevent people from cheating, what you can do however is record their behavior so you can check if there are cheating. For our voting system we used to store time stamps and IP addresses. [cont.]</span></text><author><a class="comment-user" href="/users/21406/luke" title="10,394 reputation">Luke</a></author></comment><comment><text><span class="comment-copy">That way we could at least see patterns of cheating behavior and disqualify people when necessary. We've used it successfully a number of times.</span></text><author><a class="comment-user" href="/users/21406/luke" title="10,394 reputation">Luke</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>An easy way to do this would be to provide a cryptographic hash of your highscore value along with the score it self.  For example, when posting the results via HTTP GET:
<strong><a href="http://example.com/highscores.php?score=500&amp;checksum=0a16df3dc0301a36a34f9065c3ff8095" rel="noreferrer">http://example.com/highscores.php?score=500&amp;checksum=0a16df3dc0301a36a34f9065c3ff8095</a></strong></p>
<p>When calculating this checksum, a shared secret should be used; this secret should never be transmitted over the network, but should be hard coded within both the PHP backend and the flash frontend.  The checksum above was created by prepending the string "<strong>secret</strong>" to the score "<strong>500</strong>", and running it through md5sum.</p>
<p>Although this system will prevent a user from posting arbitrary scores, it does not prevent a "replay attack", where a user reposts a previously calculated score and hash combination.  In the example above, a score of 500 would always produce the same hash string.  Some of this risk can be mitigated by incorporating more information (such as a username, timestamp, or IP address) in the string which is to be hashed.  Although this will not prevent the replay of data, it will insure that a set of data is only valid for a single user at a single time.</p>
<p>To prevent <strong>any</strong> replay attacks from occurring, some type of challenge-response system will have to be created, such as the following:</p>
<ol>
<li>The flash game ("the client") performs an HTTP GET of <strong><a href="http://example.com/highscores.php" rel="noreferrer">http://example.com/highscores.php</a></strong> with no parameters.  This page returns two values: a randomly generated <em>salt</em> value, and a cryptographic hash of that salt value combined with the shared secret.  This salt value should be stored in a local database of pending queries, and should have a timestamp associated with it so that it can "expire" after perhaps one minute.</li>
<li>The flash game combines the salt value with the shared secret and calculates a hash to verify that this matches the one provided by the server.  This step is necessary to prevent tampering with salt values by users, as it verifies that the salt value was actually generated by the server.</li>
<li>The flash game combines the salt value with the shared secret, high score value, and any other relevant information (nickname, ip, timestamp), and calculates a hash.  It then sends this information back to the PHP backend via HTTP GET or POST, along with the salt value, high score, and other information.</li>
<li>The server combines the information received in the same way as on the client, and calculates a hash to verify that this matches the one provided by the client.  It then also verifies that the salt value is still valid as listed in the pending query list.  If both these conditions are true, it writes the high score to the high score table and returns a signed "success" message to the client.  It also removes the salt value from the pending query list.</li>
</ol>
<p><strong>Please keep in mind that the security of any of the above techniques is compromised if the shared secret is ever accessible to the user</strong></p>
<p>As an alternative, some of this back-and-forth could be avoided by forcing the client to communicate with the server over HTTPS, and insuring that the client is preconfigured to trust only certificates signed by a specific certificate authority which you alone have access to.</p>
</div></text><author><a href="/users/12657/stormlash">stormlash</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I like what tpqf said, but rather than disabling an account when cheating is discovered, implement a honeypot so whenever they log in, they see their hacked scores and never suspect that they have been marked as a troll.  Google for "phpBB MOD Troll" and you'll see an ingenious approach.</p>
</div></text><author><a href="/users/14253/dgm">DGM</a></author><comments><comment><text><span class="comment-copy">The problem with that approach is that these cheats brag to each other on message boards etc, so it wouldn't really deter them.</span></text><author><a class="comment-user owner" href="/users/11911/iain" title="5,628 reputation">Iain</a></author></comment><comment><text><span class="comment-copy">I disagree. This sounds like a very clever approach.</span></text><author><a class="comment-user" href="/users/7724/bzlm" title="7,245 reputation">bzlm</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>In the accepted answer tqbf mentions that you can just do a memory search for the score variable ("My score is 666 so I look for the number 666 in memory").</p>
<p>There's a way around this. I have a class here: <a href="http://divillysausages.com/blog/safenumber_and_safeint" rel="nofollow">http://divillysausages.com/blog/safenumber_and_safeint</a></p>
<p>Basically, you have an object to store your score. In the setter it multiplies the value that you pass it with a random number (+ and -), and in the getter you divide the saved value by the random multiplicator to get the original back. It's simple, but helps stop memory search.</p>
<p>Also, check out the video from some of the guys behind the PushButton engine who talk about some of the different ways you can combat hacking: <a href="http://zaa.tv/2010/12/the-art-of-hacking-flash-games/" rel="nofollow">http://zaa.tv/2010/12/the-art-of-hacking-flash-games/</a>. They were the inspiration behind the class.</p>
</div></text><author><a href="/users/639441/divillysausages">divillysausages</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Encrypting using a known (private) reversible key would be the simplest method. I'm not all up on AS so I'm not sure what sorts of encryption providers there are.</p>
<p>But you could include variables like game-length (encrypted, again) and a click count.</p>
<p>All things like this <em>can</em> be reverse engineered so consider throwing in a bunch of junk data to throw people off the scent.</p>
<p>Edit: It might be worth chucking in some PHP sessions too. Start the session when they click start game and (as the comment to this post says) log the time. When they submit the score you can check they've actually got an open game and they're not submitting a score too soon or too large.</p>
<p>It might be worth working out a scalar to see say what the maximum score is per second/minute of play.</p>
<p>Neither of these things are uncircumventable but it'll help to have some logic not in the Flash where people can see it.</p>
</div></text><author><a href="/users/12870/oli">Oli</a></author><comments><comment><text><span class="comment-copy">Anyone following this approach must also include a time, and validate the time, otherwise you are vulnerable to replay attacks.</span></text><author><a class="comment-user" href="/users/8435/tom-ritter" title="71,070 reputation">Tom Ritter</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>In my experience, this is best approached as a social engineering problem rather than a programming problem. Rather than focusing on making it impossible to cheat, focus on making it boring by removing the incentives to cheat. For example, if the main incentive is publicly visible high scores, simply putting a delay on when high scores are shown can significantly reduce cheating by removing the positive feedback loop for cheaters.</p>
</div></text><author><a href="/users/10837/scott-reynen">Scott Reynen</a></author><comments><comment><text><span class="comment-copy">But that also removes the positive feedback of an instant high score for actual players, so you're reducing the quality of game play.</span></text><author><a class="comment-user" href="/users/2730306/chris-garrett" title="3,155 reputation">Chris Garrett</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Whenever your highscore system is based on the fact that the Flash application sends unencrpyted/unsigned highscore data via the network, that can be intercepted and manipulated/replayed. The answer follows from that: encrypt (decently!) or cryptographically sign highscore data. This, at least, makes it harder for people to crack your highscore system because they'll need to extract the secret key from your SWF file. Many people will probably give up right there. On the other hand, all it takes is a singly person to extract the key and post it somewhere.</p>
<p>Real solutions involve more communication between the Flash application and the highscore database so that the latter can verify that a given score is somewhat realistic. This is probably complicated depending on what kind of game you've got.</p>
</div></text><author><a href="/users/12471/jan-kr%c3%bcger">Jan Krüger</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>There is no way to make it completely unhackable, as it is easy to decompile SWFs, and a skilled developer hacker could then trace through your code and work out how to bypass any encrypted system you might employ.</p>
<p>If you simply want to stop kids cheating via the use of simple tools like TamperData though, then you could generate an encryption key that you pass to the SWF at startup. Then use something like <a href="http://code.google.com/p/as3crypto/" rel="nofollow noreferrer">http://code.google.com/p/as3crypto/</a> to encrypt the high score before passing it back to the PHP code. Then decrypt it at the server end before storing it in the database.</p>
</div></text><author><a href="/users/7122/david-arno">David Arno</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>You are talking about what is called the "client trust" problem.  Because the client (in this cash, a SWF running in a browser) is doing something it's designed to do. Save a high score.</p>
<p>The problem is that you want to make sure that "save score" requests are coming from your flash movie, and not some arbitrary HTTP request.  A possible solution for this is to encode a token generated by the server into the SWF at the time of request (using <a href="http://flasm.sourceforge.net/" rel="nofollow noreferrer">flasm</a>) that must accompany the request to save a high score. Once the server saves that score, the token is expired and can no longer be used for requests.</p>
<p>The downside of this is that a user will only be able to submit one high score per load of the flash movie - you've have to force them to refresh/reload the SWF before they can play again for a new score.</p>
</div></text><author><a href="/users/8815/peter-bailey">Peter Bailey</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I usually include "ghost data" of the game session with the highscore entry. So if I'm making a racing game, I include the replay data. You often have the replay data already for replay functionality or ghost racing functionality (playing against your last race,  or playing against the ghost of dude #14 on the leaderboard).</p>
<p>Checking these is very manual labour, but if the goal is to verify if the top 10 entries in a contest are legit, this can be a useful addition to the arsenal of security measures others have pointed out already.</p>
<p>If the goal is to keep highscores list online untill the end of time without anybody having to look at them, this won't bring you much.</p>
</div></text><author><a href="/users/47901/lucas-meijer">Lucas Meijer</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>The way that a new popular arcade mod does it is that it sends data from the flash to php, back to flash (or reloads it), then back to php. This allows you to do anything you want to compare the data as well bypass post data/decryption hacks and the like. One way that it does this is by assigning 2 randomized values from php into the flash (which you cannot grab or see even if running a realtime flash data grabber), using a mathematical formula to add the score with the random values then checking it using the same formula to reverse it to see if the score matches it when it finally goes to the php at the end. These random values are never visible as well as it also times the transaction taking place and if it's any more than a couple seconds then it also flags it as cheating because it assumes you have stopped the send to try to figure out the randomized values or run the numbers through some type of cipher to return possible random values to compare with the score value.</p>
<p>This seems like a pretty good solution if you ask me, does anybody see any issues with using this method? Or possible ways around it?</p>
</div></text><author><a href="/users/243636/vaughn">Vaughn</a></author><comments><comment><text><span class="comment-copy">Wireshark.  Wireshark is always the hole.</span></text><author><a class="comment-user" href="/users/72943/aehiilrs" title="1,015 reputation">aehiilrs</a></author></comment><comment><text><span class="comment-copy">yeah, ive tried this exact method... well... i somehow got legit users being logged as cheaters (the function works all the time on my computer, but it doesnt work on some other computers)... so now I just allowed for cheating... I log people who dont pass the above check &amp; I log people with really high scores &amp; then manually abuse them... by making their scores * -1 :P they usually take the joke well.</span></text><author><a class="comment-user" href="/users/587387/sigtran" title="249 reputation">Sigtran</a></author></comment><comment><text><span class="comment-copy">"One way that it does this is by assigning 2 randomized values from php into the flash (which you cannot grab or see even if running a realtime flash data grabber)" - Please enlighten me, is there a way to pass values from php to flash without being monitored by firebug or any other tool?</span></text><author><a class="comment-user" href="/users/448662/mkto" title="1,666 reputation">mkto</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I think the simplest way would be to make calls to a function like RegisterScore(score) each time the game registers a score to be added and then encode it, package it and send it to a php script as a string. The php script would know how to decode it properly. This would stop any calls straight to the php script as any tries to force a score would result in a decompression error.</p>
</div></text><author><a href="/users/1062353/mathieu-landry">mathieu landry</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>It is only possible by keeping the <strong>all game logic at server-side</strong> which also stores the score internally without knowledge of the user. For economical and scientific reasons, mankind can not apply this theory to all game types excluding turn-based. For e.g. keeping physics at server-side is computationally expensive and hard to get responsive as speed of hand. Even possible, while playing chess anyone can match AI chess gameplay to opponent. Therefore, better <strong>multiplayer games</strong> should also contain on-demand creativity.</p>
</div></text><author><a href="/users/1233686/hurturk">hurturk</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>You cannot trust any data the client returns.  Validation needs to be performed on the server side.  I'm not a game developer, but I do make business software.  In both instances money can be involved and people will break client side obfuscation techniques.</p>
<p>Maybe send data back to server periodically and do some validation.  Don't focus on client code, even if that is where your applicaiton lives.</p>
</div></text><author><a href="/users/1413277/zeller">zeller</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I made kind of workaround... I had a gave where scores incremented ( you always get +1 score ). First, I started to count from random num (let's say 14 ) and when I display the scores, just showed the scores var minus 14. This was so if the crackers are looking for example for 20, they won't find it ( it will be 34 in the memory ). Second, since I know what the next point should be... I used adobe crypto library, to create the hash of what the next point <strong>should be</strong>. When I have to increment the scores, I check if the hash of the incremented scores is equal to the hash is should be. If the cracker have changed the points in the memory, the hashes are not equal. I perform some server-side verification and when I got different points from game and from the PHP, I know that cheating were involved. Here is snippet ot my code ( I'm using Adobe Crypto libraty MD5 class and random cryptography salt. callPhp() is my server side validation )</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">private</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> addPoint</span><span class="pun">(</span><span class="kwd">event</span><span class="pun">:</span><span class="typ">Event</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">):</span><span class="kwd">void</span><span class="pun">{</span><span class="pln">
            trace</span><span class="pun">(</span><span class="str">"expectedHash: "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> expectedHash </span><span class="pun">+</span><span class="pln"> </span><span class="str">"  || new hash: "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> MD5</span><span class="pun">.</span><span class="pln">hash</span><span class="pun">(</span><span class="pln"> </span><span class="typ">Number</span><span class="pun">(</span><span class="pln">SCORES </span><span class="pun">+</span><span class="pln"> POINT</span><span class="pun">).</span><span class="pln">toString</span><span class="pun">()</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> expectedHashSalt</span><span class="pun">)</span><span class="pln"> </span><span class="pun">);</span><span class="pln">
            </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">expectedHash </span><span class="pun">==</span><span class="pln"> MD5</span><span class="pun">.</span><span class="pln">hash</span><span class="pun">(</span><span class="pln"> </span><span class="typ">Number</span><span class="pun">(</span><span class="pln">SCORES </span><span class="pun">+</span><span class="pln"> POINT</span><span class="pun">).</span><span class="pln">toString</span><span class="pun">()</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> expectedHashSalt</span><span class="pun">)){</span><span class="pln">
                SCORES </span><span class="pun">+=</span><span class="pln">POINT</span><span class="pun">;</span><span class="pln">
                callPhp</span><span class="pun">();</span><span class="pln">
                expectedHash </span><span class="pun">=</span><span class="pln"> MD5</span><span class="pun">.</span><span class="pln">hash</span><span class="pun">(</span><span class="pln"> </span><span class="typ">Number</span><span class="pun">(</span><span class="pln">SCORES </span><span class="pun">+</span><span class="pln"> POINT</span><span class="pun">).</span><span class="pln">toString</span><span class="pun">()</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> expectedHashSalt</span><span class="pun">);</span><span class="pln">
            </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                </span><span class="com">//trace("cheat engine usage");</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">}</span></code></pre>
<p>Using this technique + SWF obfustication, I was able to stop the crackers. Also, when I'm sending the scores to the server-side, I use my own small, encryption / decryption function. Something like this (server side code not included, but you can see the algorithm and write it in PHP) :</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">package</span><span class="pln">  </span><span class="pun">{</span><span class="pln">

    </span><span class="kwd">import</span><span class="pln"> bassta</span><span class="pun">.</span><span class="pln">utils</span><span class="pun">.</span><span class="typ">Hash</span><span class="pun">;</span><span class="pln">

    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ScoresEncoder</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

        </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">var</span><span class="pln"> ranChars</span><span class="pun">:</span><span class="typ">Array</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">var</span><span class="pln"> charsTable</span><span class="pun">:</span><span class="typ">Hash</span><span class="pun">;</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="typ">ScoresEncoder</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> init</span><span class="pun">():</span><span class="kwd">void</span><span class="pun">{</span><span class="pln">

            ranChars </span><span class="pun">=</span><span class="pln"> </span><span class="typ">String</span><span class="pun">(</span><span class="str">"qwertyuiopasdfghjklzxcvbnm"</span><span class="pun">).</span><span class="pln">split</span><span class="pun">(</span><span class="str">""</span><span class="pun">)</span><span class="pln">

            charsTable </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Hash</span><span class="pun">({</span><span class="pln">
                </span><span class="str">"0"</span><span class="pun">:</span><span class="pln"> </span><span class="str">"x"</span><span class="pun">,</span><span class="pln">
                </span><span class="str">"1"</span><span class="pun">:</span><span class="pln"> </span><span class="str">"f"</span><span class="pun">,</span><span class="pln">
                </span><span class="str">"2"</span><span class="pun">:</span><span class="pln"> </span><span class="str">"q"</span><span class="pun">,</span><span class="pln">
                </span><span class="str">"3"</span><span class="pun">:</span><span class="pln"> </span><span class="str">"z"</span><span class="pun">,</span><span class="pln">
                </span><span class="str">"4"</span><span class="pun">:</span><span class="pln"> </span><span class="str">"a"</span><span class="pun">,</span><span class="pln">
                </span><span class="str">"5"</span><span class="pun">:</span><span class="pln"> </span><span class="str">"o"</span><span class="pun">,</span><span class="pln">
                </span><span class="str">"6"</span><span class="pun">:</span><span class="pln"> </span><span class="str">"n"</span><span class="pun">,</span><span class="pln">
                </span><span class="str">"7"</span><span class="pun">:</span><span class="pln"> </span><span class="str">"p"</span><span class="pun">,</span><span class="pln">
                </span><span class="str">"8"</span><span class="pun">:</span><span class="pln"> </span><span class="str">"w"</span><span class="pun">,</span><span class="pln">
                </span><span class="str">"9"</span><span class="pun">:</span><span class="pln"> </span><span class="str">"y"</span><span class="pln">

            </span><span class="pun">});</span><span class="pln">

        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> encodeScore</span><span class="pun">(</span><span class="pln">_s</span><span class="pun">:</span><span class="typ">Number</span><span class="pun">):</span><span class="typ">String</span><span class="pun">{</span><span class="pln">

            </span><span class="kwd">var</span><span class="pln"> _fin</span><span class="pun">:</span><span class="typ">String</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">""</span><span class="pun">;</span><span class="pln">

            </span><span class="kwd">var</span><span class="pln"> scores</span><span class="pun">:</span><span class="typ">String</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> addLeadingZeros</span><span class="pun">(</span><span class="pln">_s</span><span class="pun">);</span><span class="pln">
            </span><span class="kwd">for</span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> i</span><span class="pun">:</span><span class="kwd">uint</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">&lt;</span><span class="pln"> scores</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++){</span><span class="pln">
                </span><span class="com">//trace( scores.charAt(i) + " - &gt; " + charsTable[ scores.charAt(i) ] );</span><span class="pln">
                _fin </span><span class="pun">+=</span><span class="pln"> charsTable</span><span class="pun">[</span><span class="pln"> scores</span><span class="pun">.</span><span class="pln">charAt</span><span class="pun">(</span><span class="pln">i</span><span class="pun">)</span><span class="pln"> </span><span class="pun">];</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">

            </span><span class="kwd">return</span><span class="pln"> _fin</span><span class="pun">;</span><span class="pln">

        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> decodeScore</span><span class="pun">(</span><span class="pln">_s</span><span class="pun">:</span><span class="typ">String</span><span class="pun">):</span><span class="typ">String</span><span class="pun">{</span><span class="pln">

            </span><span class="kwd">var</span><span class="pln"> _fin</span><span class="pun">:</span><span class="typ">String</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">""</span><span class="pun">;</span><span class="pln">

            </span><span class="kwd">var</span><span class="pln"> decoded</span><span class="pun">:</span><span class="typ">String</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> _s</span><span class="pun">;</span><span class="pln">

            </span><span class="kwd">for</span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> i</span><span class="pun">:</span><span class="kwd">uint</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">&lt;</span><span class="pln"> decoded</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++){</span><span class="pln">
                </span><span class="com">//trace( decoded.charAt(i) + " - &gt; "  + charsTable.getKey( decoded.charAt(i) ) );</span><span class="pln">
                _fin </span><span class="pun">+=</span><span class="pln"> charsTable</span><span class="pun">.</span><span class="pln">getKey</span><span class="pun">(</span><span class="pln"> decoded</span><span class="pun">.</span><span class="pln">charAt</span><span class="pun">(</span><span class="pln">i</span><span class="pun">)</span><span class="pln"> </span><span class="pun">);</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">

            </span><span class="kwd">return</span><span class="pln"> _fin</span><span class="pun">;</span><span class="pln">

        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> encodeScoreRand</span><span class="pun">(</span><span class="pln">_s</span><span class="pun">:</span><span class="typ">Number</span><span class="pun">):</span><span class="typ">String</span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> _fin</span><span class="pun">:</span><span class="typ">String</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">""</span><span class="pun">;</span><span class="pln">

            _fin </span><span class="pun">+=</span><span class="pln"> generateRandomChars</span><span class="pun">(</span><span class="lit">10</span><span class="pun">)</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> encodeScore</span><span class="pun">(</span><span class="pln">_s</span><span class="pun">)</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> generateRandomChars</span><span class="pun">(</span><span class="lit">3</span><span class="pun">)</span><span class="pln">

            </span><span class="kwd">return</span><span class="pln"> _fin</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> decodeScoreRand</span><span class="pun">(</span><span class="pln">_s</span><span class="pun">:</span><span class="typ">String</span><span class="pun">):</span><span class="typ">Number</span><span class="pun">{</span><span class="pln">

            </span><span class="kwd">var</span><span class="pln"> decodedString</span><span class="pun">:</span><span class="typ">String</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> _s</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> decoded</span><span class="pun">:</span><span class="typ">Number</span><span class="pun">;</span><span class="pln">

            decodedString </span><span class="pun">=</span><span class="pln"> decodedString</span><span class="pun">.</span><span class="pln">substring</span><span class="pun">(</span><span class="lit">10</span><span class="pun">,</span><span class="lit">13</span><span class="pun">);</span><span class="pln">         
            decodedString </span><span class="pun">=</span><span class="pln"> decodeScore</span><span class="pun">(</span><span class="pln">decodedString</span><span class="pun">);</span><span class="pln">

            decoded </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Number</span><span class="pun">(</span><span class="pln">decodedString</span><span class="pun">);</span><span class="pln">

            </span><span class="kwd">return</span><span class="pln"> decoded</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> generateRandomChars</span><span class="pun">(</span><span class="pln">_length</span><span class="pun">:</span><span class="typ">Number</span><span class="pun">):</span><span class="typ">String</span><span class="pun">{</span><span class="pln">

            </span><span class="kwd">var</span><span class="pln"> newRandChars</span><span class="pun">:</span><span class="typ">String</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">""</span><span class="pun">;</span><span class="pln">

            </span><span class="kwd">for</span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> i</span><span class="pun">:</span><span class="kwd">uint</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">&lt;</span><span class="pln"> _length</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++){</span><span class="pln">
                newRandChars</span><span class="pun">+=</span><span class="pln"> ranChars</span><span class="pun">[</span><span class="pln"> </span><span class="typ">Math</span><span class="pun">.</span><span class="pln">ceil</span><span class="pun">(</span><span class="pln"> </span><span class="typ">Math</span><span class="pun">.</span><span class="pln">random</span><span class="pun">()*</span><span class="pln">ranChars</span><span class="pun">.</span><span class="pln">length</span><span class="pun">-</span><span class="lit">1</span><span class="pln"> </span><span class="pun">)];</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">

            </span><span class="kwd">return</span><span class="pln"> newRandChars</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> addLeadingZeros</span><span class="pun">(</span><span class="pln">_s</span><span class="pun">:</span><span class="typ">Number</span><span class="pun">):</span><span class="typ">String</span><span class="pun">{</span><span class="pln">

            </span><span class="kwd">var</span><span class="pln"> _fin</span><span class="pun">:</span><span class="typ">String</span><span class="pun">;</span><span class="pln">

            </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">_s </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">10</span><span class="pln"> </span><span class="pun">){</span><span class="pln">
                 _fin </span><span class="pun">=</span><span class="pln"> </span><span class="str">"00"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> _s</span><span class="pun">.</span><span class="pln">toString</span><span class="pun">();</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">

            </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">_s </span><span class="pun">&gt;=</span><span class="pln"> </span><span class="lit">10</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> _s </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">99</span><span class="pln"> </span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                 _fin </span><span class="pun">=</span><span class="pln"> </span><span class="str">"0"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> _s</span><span class="pun">.</span><span class="pln">toString</span><span class="pun">();</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">

            </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">_s </span><span class="pun">&gt;=</span><span class="pln"> </span><span class="lit">100</span><span class="pln"> </span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                _fin </span><span class="pun">=</span><span class="pln"> _s</span><span class="pun">.</span><span class="pln">toString</span><span class="pun">();</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">           

            </span><span class="kwd">return</span><span class="pln"> _fin</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">


    </span><span class="pun">}</span><span class="com">//end</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>Then I send the variable among with other fake-vars and it just get's lost among the way... It is a lot of work for just small flash game, but where prizes are involved some people just get greedy. If you need any help, write me a PM.</p>
<p>Cheers, Ico</p>
</div></text><author><a href="/users/1584898/%d0%a5%d1%80%d0%b8%d1%81%d1%82%d0%be-%d0%9f%d0%b0%d0%bd%d0%b0%d0%b9%d0%be%d1%82%d0%be%d0%b2">Христо Панайотов</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>It's not really possible to achieve what you want. The internals of the Flash app are always partially accessible, especially when you know how to use things like <a href="http://www.cheatengine.org/" rel="nofollow noreferrer">CheatEngine</a>, meaning no matter how secure your website and browser&lt;-&gt;server communications are, it is still going to be relatively simple to overcome.</p>
</div></text><author><a href="/users/7068/mark-webster">Mark Webster</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>It might be a good idea to communicate with backend via <a href="http://www.silexlabs.org/amfphp/" rel="nofollow">AMFPHP</a>. It should discourage at least the lazy ones from trying to push the results via browser console.</p>
</div></text><author><a href="/users/3243730/m1gu3l">m1gu3l</a></author><comments/></answer></answers></post>