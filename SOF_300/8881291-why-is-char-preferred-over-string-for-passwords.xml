<?xml version="1.0" encoding="utf-8"?>
<post><title>java - Why is char[] preferred over String for passwords? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>In Swing, the password field has a <code>getPassword()</code> (returns <code>char[]</code>) method instead of the usual <code>getText()</code> (returns <code>String</code>) method. Similarly, I have come across a suggestion not to use <code>String</code> to handle passwords.</p>
<p>Why does <code>String</code> pose a threat to security when it comes to passwords?
It feels inconvenient to use <code>char[]</code>.</p>
</div></text><author><a href="/users/3980929/rakete1111">Rakete1111</a></author><comments><comment><text><span class="comment-copy">Can you cite the source of the suggestion? I can't really think of a reason for <code>char[]</code> being more secure except maybe the most amateurish of threats.</span></text><author><a class="comment-user" href="/users/1054036/viruzzo" title="2,761 reputation">Viruzzo</a></author></comment><comment><text><span class="comment-copy">@Viruzzo take a look at the javadocs. The <code>getText()</code> method of <code>JPasswordField</code> is deprecated in favour of <code>getPassword()</code> "for security reasons".</span></text><author><a class="comment-user" href="/users/7412/dogbane" title="150,554 reputation">dogbane</a></author></comment><comment><text><span class="comment-copy">@dogbane I was just dubious about the "security reasons"; Jon Skeet's answer clarified things.</span></text><author><a class="comment-user" href="/users/1054036/viruzzo" title="2,761 reputation">Viruzzo</a></author></comment><comment><text><span class="comment-copy">If you add an <code>ActionListener</code> to <code>JPasswordField</code> (probably the usual case), you get the password <code>String</code> as the action "command". It can also get stuck in the underlying <code>Document</code>. But still, it's a pointless tick in your employer's pointless tick list.</span></text><author><a class="comment-user" href="/users/4725/tom-hawtin-tackline" title="113,096 reputation">Tom Hawtin - tackline</a></author></comment><comment><text><span class="comment-copy">char[]? Why not byte[]? In any thread dump/heap analyzer you can see Strings, and it's easy to notice if one contains password. For char[] it's harder, but still, if your heap analyzer will display chars one by one it'll be same as String. For byte[] it's unlikely.</span></text><author><a class="comment-user" href="/users/307295/mvmn" title="1,173 reputation">mvmn</a></author></comment><comment><text><span class="comment-copy">Also if you see the Console class,(Jdk 6) at--&gt; <a href="http://docs.oracle.com/javase/7/docs/api/java/io/Console.html#readPassword%28%29" rel="nofollow noreferrer">docs.oracle.com/javase/7/docs/api/java/io/…</a> , you will see same that the readPassword method always returns  a char[] ,,</span></text><author><a class="comment-user" href="/users/1404898/kdjava" title="625 reputation">KDjava</a></author></comment><comment><text><span class="comment-copy">I am not an expert, but may it be related to strings are objects and are passed by reference thus creating multiple instances in memory?</span></text><author><a class="comment-user" href="/users/1253746/scott-lafoy" title="194 reputation">scott lafoy</a></author></comment><comment><text><span class="comment-copy">Just to provide a valid scenario where this might matter, it's a common practice in forensics to ensure that no computers requiring investigation are turned off before their memory is dumped, in case they are utilizing software encryption.  Even the best encryption system needs to maintain a state capable of decryption.</span></text><author><a class="comment-user" href="/users/1188377/zenexer" title="8,798 reputation">Zenexer</a></author></comment><comment><text><span class="comment-copy">@scottlafoy Both <code>char[]</code> and <code>String</code> objects are going to be passed by reference; individual <code>char</code> values will not be.  It's when objects are passed by <i>value</i>, not reference, that multiple copies are created.  Generally, this is not an issue, as such objects are usually designed to be small.</span></text><author><a class="comment-user" href="/users/1188377/zenexer" title="8,798 reputation">Zenexer</a></author></comment><comment><text><span class="comment-copy">This recommendation is impossible to implement and of questionable utility for standard Java servlets:   <a href="http://stackoverflow.com/questions/15016250/in-java-how-do-i-extract-a-password-from-a-httpservletrequest-header-without-ge" title="in java how do i extract a password from a httpservletrequest header without ge">stackoverflow.com/questions/15016250/…</a></span></text><author><a class="comment-user" href="/users/545127/raedwald" title="19,372 reputation">Raedwald</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p><strong>Strings are immutable</strong>. That means once you've created the <code>String</code>, if another process can dump memory, there's no way (aside from <a href="https://en.wikipedia.org/wiki/Reflection_%28computer_programming%29">reflection</a>) you can get rid of the data before <a href="https://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29">garbage collection</a> kicks in.</p>
<p>With an array, you can explicitly wipe the data after you're done with it. You can overwrite the array with anything you like, and the password won't be present anywhere in the system, even before garbage collection.</p>
<p>So yes, this <em>is</em> a security concern - but even using <code>char[]</code> only reduces the window of opportunity for an attacker, and it's only for this specific type of attack.</p>
<p>As noted in comments, it's possible that arrays being moved by the garbage collector will leave stray copies of the data in memory. I believe this is implementation-specific - the garbage collector <em>may</em> clear all memory as it goes, to avoid this sort of thing. Even if it does, there's still the time during which the <code>char[]</code> contains the actual characters as an attack window.</p>
</div></text><author><a href="/users/22656/jon-skeet">Jon Skeet</a></author><comments><comment><text><span class="comment-copy">My understanding is that with the amount of memory reorganizing that can be done with the runtime, copies of even a <code>char[]</code> might be left in memory and never be cleared until that memory is reused.  I don't know a source that validates that though.  Either way I doubt the String would get cleared at GC time but rather at the time an Object is reallocated over that memory.</span></text><author><a class="comment-user" href="/users/228171/mark-peters" title="58,061 reputation">Mark Peters</a></author></comment><comment><text><span class="comment-copy">@Mark Peters: If the GC kicks in, before you empty the char-array, you have another copy. But this copy is at least in a heavy used area of the memory, so the chances are high it gets overwritten fast.</span></text><author><a class="comment-user" href="/users/21005/mnementh" title="27,320 reputation">Mnementh</a></author></comment><comment><text><span class="comment-copy">@Xeon06: In .NET there's <a href="http://msdn.microsoft.com/en-us/library/system.security.securestring.aspx" rel="nofollow noreferrer"><code>SecureString</code></a> which is better yet - but relatively painful to use.</span></text><author><a class="comment-user" href="/users/22656/jon-skeet" title="944,280 reputation">Jon Skeet</a></author></comment><comment><text><span class="comment-copy">If a GC causes a <code>char[]</code> to get relocated, the old one might exist for a little while, but would generally be in a place that would 'naturally' get overwritten before the next GC.  A problem with <code>String</code> is references to things can sometimes stick around a lot longer than intended (e.g. clearing some implementations of <code>List&lt;T&gt;</code> might reset the count without erasing the backing store).  Such things might cause a reference to a string to stick around a long time after all "useful" references have been abandoned.</span></text><author><a class="comment-user" href="/users/363751/supercat" title="45,690 reputation">supercat</a></author></comment><comment><text><span class="comment-copy">If the immutability is the problem, can we use a <code>StringBuilder</code> or <code>StringBuffer</code> instead?</span></text><author><a class="comment-user" href="/users/1271435/andy-res" title="10,318 reputation">Andy Res</a></author></comment><comment><text><span class="comment-copy">@Andy: One issue there is that the values can get copied transparently if you're not careful - so it's still hard to really wipe things out. But I should emphasise that I'm not a security expert.</span></text><author><a class="comment-user" href="/users/22656/jon-skeet" title="944,280 reputation">Jon Skeet</a></author></comment><comment><text><span class="comment-copy">The answer covered it all, but just to complement: Java Strings are subject to being stored in a pool (for the specified case, see the String's intern() method, but there could also be implementation dependent pools). A pool is normally a fixed-size cache that only evicts entries when it's fulll, probably using some LRU scheme. All this means that Strings can eventually persist for quite a long time, without being affected by garbage collectors.</span></text><author><a class="comment-user" href="/users/2512648/alexandre-pereira-nunes" title="425 reputation">Alexandre Pereira Nunes</a></author></comment><comment><text><span class="comment-copy">great answer. I always knew you did it that way, but wondered why; never looked into it.</span></text><author><a class="comment-user" href="/users/334927/kara-rawson" title="1,143 reputation">Kara Rawson</a></author></comment><comment><text><span class="comment-copy">Are we glossing over the fact that a malicious entity that can read this data already has read memory access to your system? It seems that would be of so much a greater concern that doing this char[] instead of String just seems like pissing in the ocean.</span></text><author><a class="comment-user" href="/users/330057/corsika" title="55,673 reputation">corsiKa</a></author></comment><comment><text><span class="comment-copy">@corsika: As I mentioned in the answer, it's reducing one specific attack vector, that's all. It makes things harder for an attacker.</span></text><author><a class="comment-user" href="/users/22656/jon-skeet" title="944,280 reputation">Jon Skeet</a></author></comment><comment><text><span class="comment-copy">@JonSkeet How can passwords(or any string for that matter) stored in stringpool retrieved? I tried lots of forums but was not able to find a way.</span></text><author><a class="comment-user" href="/users/1336558/mohit-kanwar" title="1,795 reputation">Mohit Kanwar</a></author></comment><comment><text><span class="comment-copy">@CodeFighter: First obvious way: dump the entire process's memory, then look for anything "string-like". (Once you've worked out what constitutes <i>one</i> string, the rest is easy as there'll be a reference to the string type within each string object.)</span></text><author><a class="comment-user" href="/users/22656/jon-skeet" title="944,280 reputation">Jon Skeet</a></author></comment><comment><text><span class="comment-copy">More info on storing Passwords in Strings in Java is on the Security Stackexchange: <a href="https://security.stackexchange.com/questions/6753/deleting-a-java-object-securely" title="deleting a java object securely">security.stackexchange.com/questions/6753/…</a></span></text><author><a class="comment-user" href="/users/3540161/rolf" title="4,233 reputation">Rolf</a></author></comment><comment><text><span class="comment-copy">If a process has access to memory of your application, then that is already a security breach, right?</span></text><author><a class="comment-user" href="/users/1009901/yeti" title="672 reputation">Yeti</a></author></comment><comment><text><span class="comment-copy">@Yeti: Yes, but it's not like it's black and white. If they can only get a snapshot of the memory then you want to reduce how much damage that snapshot can do, or reduce the window during which a really serious snapshot can be taken.</span></text><author><a class="comment-user" href="/users/22656/jon-skeet" title="944,280 reputation">Jon Skeet</a></author></comment><comment><text><span class="comment-copy">What about <code>CharSequence</code>? is it almost the same as <code>String</code>? I just saw, that <code>CharSequence</code> has less methods to work with.</span></text><author><a class="comment-user" href="/users/2098411/milixyron" title="80 reputation">Milixyron</a></author></comment><comment><text><span class="comment-copy">@Milixyron: Well <code>CharSequence</code> is just an interface, which <code>String</code> implements. It doesn't provide any way of clearing it, leading to the same problems.</span></text><author><a class="comment-user" href="/users/22656/jon-skeet" title="944,280 reputation">Jon Skeet</a></author></comment><comment><text><span class="comment-copy">A common attack method is to run a process that allocates lots of memory and then scans it for left-over, useful data like passwords. The process doesn't need any magical access to another process's memory space; it just relies on other processes dying without first clearing out sensitive data and the OS also not clearing memory (or page buffers) before making it available to a new process. Clearing out passwords stored in <code>char[]</code> locations cuts off that line of attack, something not possible when using <code>String</code>.</span></text><author><a class="comment-user" href="/users/535871/ted-hopp" title="174,539 reputation">Ted Hopp</a></author></comment><comment><text><span class="comment-copy">Just thought I'd let you know. Someone posted an exact copy &amp; paste (ripoff) of this answer on Quora (Written Nov 6, 2015): <a href="https://www.quora.com/What-is-best-primitive-type-to-store-password-in-java" rel="nofollow noreferrer">quora.com/What-is-best-primitive-type-to-store-password-in-j‌​ava</a></span></text><author><a class="comment-user" href="/users/641627/alexbt" title="5,223 reputation">alexbt</a></author></comment><comment><text><span class="comment-copy">@Alex: Thanks, have reported it.</span></text><author><a class="comment-user" href="/users/22656/jon-skeet" title="944,280 reputation">Jon Skeet</a></author></comment><comment><text><span class="comment-copy">How would someone snatch a String out of garbage collection?</span></text><author><a class="comment-user" href="/users/3519829/ungeheuer" title="425 reputation">Ungeheuer</a></author></comment><comment><text><span class="comment-copy">@Adrian: With tools to dump a process's memory. They exist for pretty much every platform. Yes, you need to have a fair amount of access to the machine to start with, but it still increases the attacks you can do.</span></text><author><a class="comment-user" href="/users/22656/jon-skeet" title="944,280 reputation">Jon Skeet</a></author></comment><comment><text><span class="comment-copy">@Ted Hopp: so the only obstacle is to find an OS that does not clearing the memory before making it available to a new process…</span></text><author><a class="comment-user" href="/users/2711488/holger" title="95,540 reputation">Holger</a></author></comment><comment><text><span class="comment-copy">@Holger - You mean like Windows or Linux? And let's not forget the paging areas on hard drives. Any OS that wiped all of that for every process would slow to a crawl unless it had special hardware support. It's up to the process obtaining memory to clear it if that's what it needs. (The <a href="http://stackoverflow.com/questions/1538420/difference-between-malloc-and-calloc">difference between <code>malloc</code> and <code>calloc</code></a>, for instance, is whether you get an uninitialized memory block or one that's been cleared. A data sniffing program probably wouldn't be using <code>calloc</code>.)</span></text><author><a class="comment-user" href="/users/535871/ted-hopp" title="174,539 reputation">Ted Hopp</a></author></comment><comment><text><span class="comment-copy">@Ted Hopp: I can’t speak for Linux, but Windows <i>does</i> clear memory pages. It’s not clear why this should be slow at all, that happens once for each allocated page and it doesn’t even need to happen on the allocation, but the first actual use, though there’s also a background clearing of unused pages in advance when CPU cycles are free. The reason is exactly security. That doesn’t affect the difference between <code>malloc</code> and <code>calloc</code> as these are not operating system, C library functions. So <code>malloc</code> might return non-zero memory which the same program has freed earlier…</span></text><author><a class="comment-user" href="/users/2711488/holger" title="95,540 reputation">Holger</a></author></comment><comment><text><span class="comment-copy">@Holger - Interesting. It seems that Windows has tightened up security quite a bit. The CVE database contains a large list of memory exploits for <a href="https://www.cvedetails.com/vulnerability-list/vendor_id-26/product_id-739/cvssscoremin-9/cvssscoremax-/Microsoft-Windows-Xp.html" rel="nofollow noreferrer">Windows XP</a> and <a href="https://www.cvedetails.com/vulnerability-list/vendor_id-26/product_id-17153/Microsoft-Windows-7.html" rel="nofollow noreferrer">Windows 7</a>. Then there's this interesting blog post on <a href="http://nullprogram.com/blog/2016/09/03/" rel="nofollow noreferrer">How to Read and Write Other Process Memory</a> on Windows and Linux.</span></text><author><a class="comment-user" href="/users/535871/ted-hopp" title="174,539 reputation">Ted Hopp</a></author></comment><comment><text><span class="comment-copy">@Ted Hopp: well, this blog uses explicit access to process memory of other processes, which should be (and surely is) subject to access checking and won’t work, if you try to read the memory of a privileged process. That’s different to attempts to find accidentally left over artifacts in newly allocated memory. The security bugs are, as far as I can see, also not related to artifacts in allocations, however, there are enough other bugs left in Windows…</span></text><author><a class="comment-user" href="/users/2711488/holger" title="95,540 reputation">Holger</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>While other suggestions here seem valid, there is one other good reason. With plain <code>String</code> you have much higher chances of <strong>accidentally printing the password to logs</strong>, monitors or some other insecure place. <code>char[]</code> is less vulnerable.</p>
<p>Consider this:</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="typ">Object</span><span class="pln"> pw </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Password"</span><span class="pun">;</span><span class="pln">
    </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"String: "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> pw</span><span class="pun">);</span><span class="pln">

    pw </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Password"</span><span class="pun">.</span><span class="pln">toCharArray</span><span class="pun">();</span><span class="pln">
    </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Array: "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> pw</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>Prints:</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="typ">String</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Password</span><span class="pln">
</span><span class="typ">Array</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">C@5829428e</span></code></pre>
</div></text><author><a href="/users/277683/konrad-garus">Konrad Garus</a></author><comments><comment><text><span class="comment-copy">@voo, but i doubt you'd log via direct writing to stream and concatenation. logging framework would transform the char[] into good output</span></text><author><a class="comment-user" href="/users/554431/bestsss" title="8,229 reputation">bestsss</a></author></comment><comment><text><span class="comment-copy">@Thr4wn Default implementation of <code>toString</code> is <code>classname@hashcode</code>. <code>[C</code> represents <code>char[]</code>, the rest is hexadecimal hash code.</span></text><author><a class="comment-user" href="/users/277683/konrad-garus" title="33,371 reputation">Konrad Garus</a></author></comment><comment><text><span class="comment-copy">Interesting idea. I would like to point out that this does not transpose to Scala which has a meaningful toString for arrays.</span></text><author><a class="comment-user" href="/users/578101/mauhiz" title="319 reputation">mauhiz</a></author></comment><comment><text><span class="comment-copy">I'd write a <code>Password</code> class type for this. It's less obscure, and harder to accidentally pass somewhere.</span></text><author><a class="comment-user" href="/users/1804599/rightfold" title="20,199 reputation">rightfold</a></author></comment><comment><text><span class="comment-copy">@Voo I agree with bestsss. Your logging framework will determine how the char array is printed.  I think in most scenarios a char array will get printed.</span></text><author><a class="comment-user" href="/users/4418511/gc" title="318 reputation">GC_</a></author></comment><comment><text><span class="comment-copy">Why would someone assume the char array was going to be cast as an Object?  I'm not sure I get why every likes this answer.  Suppose you did this: System.out.println("Password".toCharArray());</span></text><author><a class="comment-user" href="/users/4418511/gc" title="318 reputation">GC_</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>To quote an official document, the <a href="http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html#PBEEx">Java Cryptography Architecture guide</a> says this about <code>char[]</code> vs. <code>String</code> passwords (about password-based encryption, but this is more generally about passwords of course):</p>
<blockquote>
<p>It would seem logical to collect and store the password in an object
  of type <code>java.lang.String</code>. However, here's the caveat: <code>Object</code>s of
  type <code>String</code> are immutable, i.e., there are no methods defined that
  allow you to change (overwrite) or zero out the contents of a <code>String</code>
  after usage. This feature makes <code>String</code> objects unsuitable for
  storing security sensitive information such as user passwords. You
  should always collect and store security sensitive information in a
  <code>char</code> array instead.</p>
</blockquote>
<p><a href="http://www.oracle.com/technetwork/java/seccodeguide-139067.html#2">Guideline 2-2 of the Secure Coding Guidelines for the Java Programming Language, Version 4.0</a> also says something similar (although it is originally in the context of logging):</p>
<blockquote>
<p><em>Guideline 2-2: Do not log highly sensitive information</em></p>
<p>Some information, such as Social Security numbers (SSNs) and
  passwords, is highly sensitive. This information should not be kept
  for longer than necessary nor where it may be seen, even by
  administrators. For instance, it should not be sent to log files and
  its presence should not be detectable through searches. Some transient
  data may be kept in mutable data structures, such as char arrays, and
  cleared immediately after use. Clearing data structures has reduced
  effectiveness on typical Java runtime systems as objects are moved in
  memory transparently to the programmer.</p>
<p>This guideline also has implications for implementation and use of
  lower-level libraries that do not have semantic knowledge of the data
  they are dealing with. As an example, a low-level string parsing
  library may log the text it works on. An application may parse an SSN
  with the library. This creates a situation where the SSNs are
  available to administrators with access to the log files.</p>
</blockquote>
</div></text><author><a href="/users/372643/bruno">Bruno</a></author><comments><comment><text><span class="comment-copy">this is exactly the flawed/bogus reference I talk about below Jon's answer, it's a well known source w/ a lot of criticism.</span></text><author><a class="comment-user" href="/users/554431/bestsss" title="8,229 reputation">bestsss</a></author></comment><comment><text><span class="comment-copy">@bestass can you please also cite a reference?</span></text><author><a class="comment-user" href="/users/961954/user961954" title="3,005 reputation">user961954</a></author></comment><comment><text><span class="comment-copy">@bestass sorry, but <code>String</code> is pretty well understood and how it behaves in the JVM... there are good reasons to use <code>char[]</code> in place of <code>String</code> when dealing with passwords in a secure manner.</span></text><author><a class="comment-user" href="/users/2161954/snakedoc" title="4,609 reputation">SnakeDoc</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Character arrays (<code>char[]</code>) can be cleared after use by setting each character to zero and Strings not. If someone can somehow see the memory image, they can see a password in plain text if Strings are used, but if <code>char[]</code> is used, after purging data with 0's, the password is secure.</p>
</div></text><author><a href="/users/1011704/alephx">alephx</a></author><comments><comment><text><span class="comment-copy">Not secure by default.  If we're talking a web application, most web containers will pass the password into the <code>HttpServletRequest</code> object in plaintext.  If the JVM version is 1.6 or lower, it'll be in permgen space.  If it's in 1.7, it'll still be readable until it gets collected.  (Whenever that is.)</span></text><author><a class="comment-user" href="/users/557153/avgvstvs" title="2,715 reputation">avgvstvs</a></author></comment><comment><text><span class="comment-copy">@avgvstvs: strings are not automatically moved to the permgen space, that only applies to intern'ed strings. Besides that, the permgen space is also subject to garbage collection, just at a lower rate. The real issue with the permgen space is it’s fixed size, which is exactly the reason why no one should mindlessly call <code>intern()</code> on arbitrary strings. But you are right in that the <code>String</code> instances exist in the first place (until collected) and turning them into <code>char[]</code> arrays afterwards doesn’t change it.</span></text><author><a class="comment-user" href="/users/2711488/holger" title="95,540 reputation">Holger</a></author></comment><comment><text><span class="comment-copy">@Holger see <a href="https://docs.oracle.com/javase/specs/jvms/se6/html/ConstantPool.doc.html#67960" rel="nofollow noreferrer">docs.oracle.com/javase/specs/jvms/se6/html/…</a>  "Otherwise, a new instance of class String is created containing the sequence of Unicode characters given by the CONSTANT_String_info structure; that class instance is the result of string literal derivation. Finally, the intern method of the new String instance is invoked."  In 1.6, the JVM would call intern for you when it detected identical sequences.</span></text><author><a class="comment-user" href="/users/557153/avgvstvs" title="2,715 reputation">avgvstvs</a></author></comment><comment><text><span class="comment-copy">@avgvstvs: this is relevant to the <i>constant pool</i> entries of a class, describing string literals, only. The constant pool of a class contains, as the name suggests, only <i>constant</i> strings, which obviously must be known at compile time (how could they appear in the class file otherwise). Strings created at runtime, i.e. via <code>Stringbuilder</code> or one of the constructors of <code>String</code> are not affected.</span></text><author><a class="comment-user" href="/users/2711488/holger" title="95,540 reputation">Holger</a></author></comment><comment><text><span class="comment-copy">@Holger, you are correct I conflated constant pool and string pool, but it is also false that permgen space <i>only</i> applied to interned strings.  Prior to 1.7, both the constant_pool and the string_pool resided in permgen space.  That means the only class of Strings that were allocated to the heap were as you said, <code>new String()</code> or <code>StringBuilder.toString()</code>  I managed applications with lots of string constants, and we had lots of permgen creep as a result.  Until 1.7.</span></text><author><a class="comment-user" href="/users/557153/avgvstvs" title="2,715 reputation">avgvstvs</a></author></comment><comment><text><span class="comment-copy">@avgvstvs: well, string constants are, as the JLS mandates, always interned, hence the statement that interned strings ended up in the permgen space, applied to string constants implicitly. The only difference is that string constants were created in the permgen space in the first place, whereas calling <code>intern()</code> on an arbitrary string could cause the allocation of an equivalent string in the permgen space. The latter could get GC’ed, if there was no literal string of the same contents sharing that object…</span></text><author><a class="comment-user" href="/users/2711488/holger" title="95,540 reputation">Holger</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Some people believe that you have to overwrite the memory used to store the password once you no longer need it. This reduces the time window an attacker has to read the password from your system and completely ignores the fact that the attacker already needs enough access to hijack the JVM memory to do this. An attacker with that much access can catch your key events making this completely useless (AFAIK, so please correct me if I am wrong).</p>
<p><strong>Update</strong></p>
<p>Thanks to the comments I have to update my answer. Apparently there are two cases where this can add a (very) minor security improvement as it reduces the time a password could land on the hard drive. Still I think it's overkill for most use cases.</p>
<ul>
<li>Your target system may be badly configured or you have to assume it is and you have to be paranoid about core dumps (can be valid if the systems are not managed by an administrator). </li>
<li>Your software has to be overly paranoid to prevent data leaks with the attacker gaining access to the hardware - using things like <a href="http://en.wikipedia.org/wiki/TrueCrypt" rel="noreferrer">TrueCrypt</a> (discontinued), <a href="https://veracrypt.codeplex.com/" rel="noreferrer">VeraCrypt</a>, or <a href="https://ciphershed.org/" rel="noreferrer">CipherShed</a>.</li>
</ul>
<p>If possible, disabling core dumps and the swap file would take care of both problems. However, they would require administrator rights and may reduce functionality (less memory to use) and pulling RAM from a running system would still be a valid concern.</p>
</div></text><author><a href="/users/216111/josefx">josefx</a></author><comments><comment><text><span class="comment-copy">I'd replace "completely useless" with "just a minor security improvement". For example you could get access to a memory dump if you happen to have read access to a tmp directory, a badly configured machine and a crash in your application. In that case you wouldn't be able to install a keylogger, but you <i>could</i> analyze the core dump.</span></text><author><a class="comment-user" href="/users/40342/joachim-sauer" title="197,306 reputation">Joachim Sauer</a></author></comment><comment><text><span class="comment-copy">Wiping unencrypted data from memory as soon as you're done with it is considered a best practice not because it's foolproof (it's not); but because it reduces your threat exposure level.  Real time attacks aren't prevented by doing this; but because it serves a a damage mitigation tool by significantly reduces the amount of data that is exposed in a retroactive attack on a memory snapshot (eg a copy of your apps memory that was written to a swap file, or that was read out of memory yanked from a running server and moved to a different one before its state failed).</span></text><author><a class="comment-user" href="/users/85661/dan-neely" title="2,871 reputation">Dan Neely</a></author></comment><comment><text><span class="comment-copy">I tend to agree with the attitude of this response. I'd venture to propose most security breaches of consequence occur at a much higher level of abstraction than the bits in memory.  Sure, there are probably scenarios in hyper-secure defense systems where this may be of considerable concern but seriously thinking at this level is overkill for 99% of the applications where .NET or Java are being leveraged (as it related to garbage collection).</span></text><author><a class="comment-user" href="/users/941058/kingdango" title="2,425 reputation">kingdango</a></author></comment><comment><text><span class="comment-copy">maybe localhost isn't what you want to protect.  Maybe you have created a program running on an unsecure client and you need the password for accessing a database.  If you don't trust the client and are trying to protect the database, wiping passwords from memory is good advice.</span></text><author><a class="comment-user" href="/users/47402/rolf-rander" title="2,645 reputation">Rolf Rander</a></author></comment><comment><text><span class="comment-copy">@RolfRander that is even worse, you should not enter passwords on an untrusted client - use a one time key (not sure this is the right term, a password that only works once and gets locked out after that use).</span></text><author><a class="comment-user" href="/users/216111/josefx" title="11,746 reputation">josefx</a></author></comment><comment><text><span class="comment-copy">most websites use passwords for login.  Your credit card number and security-digits is also a kind of password.</span></text><author><a class="comment-user" href="/users/47402/rolf-rander" title="2,645 reputation">Rolf Rander</a></author></comment><comment><text><span class="comment-copy">@RolfRander there is nothing about websites that requires an untrusted client, if the user chooses to use a compromised system then there is nothing that you can do to protect him from the consequences.</span></text><author><a class="comment-user" href="/users/216111/josefx" title="11,746 reputation">josefx</a></author></comment><comment><text><span class="comment-copy">as I said, the point might be protecting the server, not the client. My point with the website-example is that there are lots of services using passwords (for different reasons, although other mechanisms obviously would be more secure.  Bottom line being that a scenario where you want to protect the server, won't trust the client and are using passwords, storing passwords in a char[] is a wise choice and this isn't really a far-fetched scenario.</span></text><author><a class="comment-user" href="/users/47402/rolf-rander" title="2,645 reputation">Rolf Rander</a></author></comment><comment><text><span class="comment-copy">@RolfRander somehow I get the feeling that you use a single login for all your clients and don't have any security/validation serverside. Its your duty to make sure that a user can't compromise the database (access restrictions and validation serverside) and the users duty to make sure that his account can't be compromised (his password).</span></text><author><a class="comment-user" href="/users/216111/josefx" title="11,746 reputation">josefx</a></author></comment><comment><text><span class="comment-copy">Absolutely. But for the user to make sure his password isn't compromised, the software handling the password has to take care to reduce the chance that malware (on the client) can pick up passwords from the client application memory.  To achieve that, I believe storing the password in a char[] and overwriting this afterwards is good advice.</span></text><author><a class="comment-user" href="/users/47402/rolf-rander" title="2,645 reputation">Rolf Rander</a></author></comment><comment><text><span class="comment-copy">I'd say that of someone understands the thinking behind the char vs sting then they are more likely to be thinking of security when configuring the servers. Not thinking is what usually introduces security holes.</span></text><author><a class="comment-user" href="/users/1567566/tinman" title="582 reputation">Tinman</a></author></comment><comment><text><span class="comment-copy">After the Heartbleed penetration of server memory, revealing passwords, I would replace the string "just a minor security improvement" with "absolutely essential to not use String for passwords, but use a char [] instead."</span></text><author><a class="comment-user" href="/users/253661/peter-vdl" title="2,065 reputation">Peter vdL</a></author></comment><comment><text><span class="comment-copy">@PetervdL heartbleed happened because someone got the great idea that reusing memory was cheaper than allocating new (cleared) memory, you cannot reuse a String in Java, just hope that nobody ever gets the idea to put your char[] into a reuse list for better performance.</span></text><author><a class="comment-user" href="/users/216111/josefx" title="11,746 reputation">josefx</a></author></comment><comment><text><span class="comment-copy">You're missing the point completely, Josefx.  The point is that heartbleed allowed remote reading of process memory, which everyone had hitherto thought very unlikely.  When combined with the use of Java strings, passwords are easily revealed.  Char [] allows the developer to blank out passwords, String does not even give that opportunity.  Char [] + heartbleed may be harmful if coder screws up.  String + heartbleed == definitely always harmful.</span></text><author><a class="comment-user" href="/users/253661/peter-vdl" title="2,065 reputation">Peter vdL</a></author></comment><comment><text><span class="comment-copy">@PetervdL heartbleed only allowed reading of a specific reused collection of buffers (used for both security critical data and network I/O without clearing in between - for performance reasons), you cannot combine this with a Java String since they are by design not reuseable. Nor can you read into random memory using Java to get at the contents of a String. The language and design problems that lead to heartbleed are just not possible with Java Strings.</span></text><author><a class="comment-user" href="/users/216111/josefx" title="11,746 reputation">josefx</a></author></comment><comment><text><span class="comment-copy">I'm afraid you are still missing the point, josefx, in your dogmatic insistence on being "right" (you're not).  The issue is not the specific heartbleed bug, but I have lost all interest in educating you further.  Please don't contact me in any way.</span></text><author><a class="comment-user" href="/users/253661/peter-vdl" title="2,065 reputation">Peter vdL</a></author></comment><comment><text><span class="comment-copy">@PetervdL then please do not refer the "heartbleed bug in combination with Java Strings" and I am sure most I mentioned in relation to heartbleed was correct, the libreSSL developers got quite detailed on why OpenSSL was a security nightmare. There "may" be a way to use a bug in the JIT to bypass Javas build in range checks or the automatic zeroing of object memory and it "might" be possible for someone to trigger this from a remote location without crashing the JVM, however that has nothing in common with heartbleed, nor would any bug on the JVM be so simple or optimized for exploits.</span></text><author><a class="comment-user" href="/users/216111/josefx" title="11,746 reputation">josefx</a></author></comment><comment><text><span class="comment-copy">@PetervdL It's not just not "specific" to the Heartbleed bug; it's totally inapplicable. I suggest you don't reference Heartbleed as justification for security measures until you have a better grasp of its nature. Thanks to josefx for shedding light on this often misunderstood issue.</span></text><author><a class="comment-user" href="/users/201891/davids" title="2,421 reputation">DavidS</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<ol>
<li><strong>Strings are immutable</strong> in Java if you store password as plain text it will be available in memory until Garbage collector clears it and since Strings are used in String pool for re-usability there is pretty high chance that it will be remain in memory for long duration, which pose a security threat. Since any one who has access to memory dump can find the password in clear text </li>
<li><strong>Java recommendation</strong> using <code>getPassword()</code> method of JPasswordField which returns a char[] and deprecated <code>getText()</code> method which returns password in clear text stating security reason. </li>
<li><p><strong>toString()</strong> there is always a risk of printing plain text in log file or console but if use Array you won't print contents of array instead its memory location get printed. </p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="typ">String</span><span class="pln"> strPwd </span><span class="pun">=</span><span class="pln"> </span><span class="str">"passwd"</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">char</span><span class="pun">[]</span><span class="pln"> charPwd </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">[]{</span><span class="str">'p'</span><span class="pun">,</span><span class="str">'a'</span><span class="pun">,</span><span class="str">'s'</span><span class="pun">,</span><span class="str">'s'</span><span class="pun">,</span><span class="str">'w'</span><span class="pun">,</span><span class="str">'d'</span><span class="pun">};</span><span class="pln">
</span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"String password: "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> strPwd </span><span class="pun">);</span><span class="pln">
</span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Character password: "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> charPwd </span><span class="pun">);</span></code></pre>
<blockquote>
<p>String password: passwd</p>
<p>Character password: [C@110b2345</p>
</blockquote></li>
</ol>
<p><strong>Final thoughts:</strong> Though using char[] is not just enough you need to erase content to be more secure. I also suggest working with hash'd or encrypted password instead of plaintext and clearing it from memory as soon as authentication is completed.</p>
</div></text><author><a href="/users/1910558/srujan-kumar-gulla">Srujan Kumar Gulla</a></author><comments><comment><text><span class="comment-copy">Re 3): That is the first time ever anyone has brought up an upside of the "unusual" way Java prints arrays. :-)</span></text><author><a class="comment-user" href="/users/14955/thilo" title="168,713 reputation">Thilo</a></author></comment><comment><text><span class="comment-copy">"Since any one who has access to memory dump can find the password in clear text" How can I get an access to memory dump and find a password there?</span></text><author><a class="comment-user" href="/users/1336558/mohit-kanwar" title="1,795 reputation">Mohit Kanwar</a></author></comment><comment><text><span class="comment-copy">@MohitKanwar Trigger a memory dump via jmap or jvisualvm.  If heapdumponoutofmemoryerror is set you might be able to trigger a remote heap dump by causing an out of memory condition.  Once you have the dump you can walk through it with jvisualvm or eclipse memory analyzer tool or command line tools and inspect all the Objects and their values.</span></text><author><a class="comment-user" href="/users/249623/ryan" title="1,454 reputation">Ryan</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I don't think this is a valid suggestion, but, I can at least guess at the reason.</p>
<p>I think the motivation is wanting to make sure that you can erase all trace of the password in memory promptly and with certainty after it is used. With a <code>char[]</code> you could overwrite each element of the array with a blank or something for sure. You can't edit the internal value of a <code>String</code> that way.</p>
<p>But that alone isn't a good answer; why not just make sure a reference to the <code>char[]</code> or <code>String</code> doesn't escape? Then there's no security issue. But the thing is that <code>String</code> objects can be <code>intern()</code>ed in theory and kept alive inside the constant pool. I suppose using <code>char[]</code> forbids this possibility.</p>
</div></text><author><a href="/users/64174/sean-owen">Sean Owen</a></author><comments><comment><text><span class="comment-copy">I wouldn't say that the problem is that your references will or will not "escape". It's just that strings will remain unmodified in memory for some additional time, while <code>char[]</code> can be modified, and then it's irrelevant whether it's collected or not. And since string interning needs to be done explicitly for non-literals, it's the same like telling that a <code>char[]</code> can be referenced by a static field.</span></text><author><a class="comment-user" href="/users/69809/groo" title="28,253 reputation">Groo</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The answer has already been given, but I'd like to share an issue that I discovered lately with Java standard libraries. While they take great care now of replacing password strings with <code>char[]</code> everywhere (which of course is a good thing), other security-critical data seems to be overlooked when it comes to clearing it from memory.</p>
<p>I'm thinking of e.g. the <a href="http://docs.oracle.com/javase/6/docs/api/java/security/PrivateKey.html" rel="noreferrer">PrivateKey</a> class. Consider a scenario where you would load a private RSA key from a PKCS#12 file, using it to perform some operation. Now in this case, sniffing the password alone wouldn't help you much as long as physical access to the key file is properly restricted. As an attacker, you would be much better off if you obtained the key directly instead of the password. The desired information can be leaked manifold, core dumps, a debugger session or swap files are just some examples.</p>
<p>And as it turns out, there is nothing that lets you clear the private information of a <code>PrivateKey</code> from memory, because there's no API that lets you wipe the bytes that form the corresponding information.</p>
<p>This is a bad situation, as this <a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.77.3297&amp;rep=rep1&amp;type=pdf" rel="noreferrer">paper</a> describes how this circumstance could be potentially exploited.</p>
<p>The OpenSSL library for example overwrites critical memory sections before private keys are freed. Since Java is garbage-collected, we would need explicit methods to wipe and invalidate private information for Java keys, which are to be applied immediately after using the key. </p>
</div></text><author><a href="/users/827060/emboss">emboss</a></author><comments><comment><text><span class="comment-copy">One way around this is to use an implementation of <code>PrivateKey</code> that doesn't actually load its private content in memory: via a PKCS#11 hardware token for example. Perhaps a software implementation of PKCS#11 could take care of cleaning up the memory manually. Perhaps using something like the NSS store (which shares most of its implementation with the <code>PKCS11</code> store type in Java) is better. The <code>KeychainStore</code> (OSX keystore) loads the full content of the private key into its <code>PrivateKey</code> instances, but it should not need to. (Not sure what the <code>WINDOWS-MY</code> KeyStore does on Windows.)</span></text><author><a class="comment-user" href="/users/372643/bruno" title="78,944 reputation">Bruno</a></author></comment><comment><text><span class="comment-copy">@Bruno Sure, hardware-based tokens do not suffer from this, but what about situations where you are more or less forced to use a software key? Not every deployment has the budget to afford an HSM. Software key stores will at some point have to load the key into memory, so IMO we should at least be given the option to clear the memory at will again.</span></text><author><a class="comment-user" href="/users/827060/emboss" title="28,430 reputation">emboss</a></author></comment><comment><text><span class="comment-copy">Absolutely, I was just wondering whether some software implementations equivalent to an HSM might behave better in terms of cleaning up the memory. For example, when using client-auth with Safari/OSX, the Safari process never actually sees the private key, the underlying SSL library provided by the OS talks directly to the security daemon which prompts the user for using the key from the keychain. While this is all done in software, a similar separation like this may help if signing is delegated to a different entity (even software based) that would unload or clear the memory better.</span></text><author><a class="comment-user" href="/users/372643/bruno" title="78,944 reputation">Bruno</a></author></comment><comment><text><span class="comment-copy">@Bruno: Interesting idea, an additional indirection layer that takes care of clearing the memory would indeed solve this transparently. Writing a PKCS#11 wrapper for the software key store could already do the trick?</span></text><author><a class="comment-user" href="/users/827060/emboss" title="28,430 reputation">emboss</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>As Jon Skeet states, there is no way except by using reflection. </p>
<p>However, if reflection is an option for you, you can do this.</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"please enter a password"</span><span class="pun">);</span><span class="pln">
    </span><span class="com">// don't actually do this, this is an example only.</span><span class="pln">
    </span><span class="typ">Scanner</span><span class="pln"> in </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Scanner</span><span class="pun">(</span><span class="typ">System</span><span class="pun">.</span><span class="pln">in</span><span class="pun">);</span><span class="pln">
    </span><span class="typ">String</span><span class="pln"> password </span><span class="pun">=</span><span class="pln"> in</span><span class="pun">.</span><span class="pln">nextLine</span><span class="pun">();</span><span class="pln">
    usePassword</span><span class="pun">(</span><span class="pln">password</span><span class="pun">);</span><span class="pln">

    clearString</span><span class="pun">(</span><span class="pln">password</span><span class="pun">);</span><span class="pln">

    </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"password: '"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> password </span><span class="pun">+</span><span class="pln"> </span><span class="str">"'"</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> usePassword</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> password</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> clearString</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> password</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">try</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">Field</span><span class="pln"> value </span><span class="pun">=</span><span class="pln"> </span><span class="typ">String</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">.</span><span class="pln">getDeclaredField</span><span class="pun">(</span><span class="str">"value"</span><span class="pun">);</span><span class="pln">
        value</span><span class="pun">.</span><span class="pln">setAccessible</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">char</span><span class="pun">[]</span><span class="pln"> chars </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">char</span><span class="pun">[])</span><span class="pln"> value</span><span class="pun">.</span><span class="pln">get</span><span class="pun">(</span><span class="pln">password</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">Arrays</span><span class="pun">.</span><span class="pln">fill</span><span class="pun">(</span><span class="pln">chars</span><span class="pun">,</span><span class="pln"> </span><span class="str">'*'</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Exception</span><span class="pln"> e</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">AssertionError</span><span class="pun">(</span><span class="pln">e</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>when run</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="pln">please enter a password
hello world
password</span><span class="pun">:</span><span class="pln"> </span><span class="str">'***********'</span></code></pre>
<p>Note: if the String's char[] has been copied as a part of a GC cycle, there is a chance the previous copy is somewhere in memory.  </p>
<p>This old copy wouldn't appear in a heap dump, but if you have direct access to the raw memory of the process you could see it.  In general you should avoid anyone having such access.</p>
</div></text><author><a href="/users/57695/peter-lawrey">Peter Lawrey</a></author><comments><comment><text><span class="comment-copy">Better to do also something to prevent printing the password's length which we get from <code>'***********'</code>.</span></text><author><a class="comment-user" href="/users/2410359/chux" title="55,064 reputation">chux</a></author></comment><comment><text><span class="comment-copy">@chux you can use a zero width character, though this might be more confusing than useful.  Its not possible to change the length of a char array without using Unsafe. ;)</span></text><author><a class="comment-user" href="/users/57695/peter-lawrey" title="379,447 reputation">Peter Lawrey</a></author></comment><comment><text><span class="comment-copy">Because of Java 8's String Deduplication, I think doing something like that can be pretty destructive... you may end up clearing other strings in your program that by chance had the same value of the password String. Unlikely, but possible...</span></text><author><a class="comment-user" href="/users/660887/jamp" title="1,048 reputation">jamp</a></author></comment><comment><text><span class="comment-copy">@jamp Java 9 is expected to have this feature as well as compact string (i.e. using a byte[]]). I don't believe this happens in Java 8.</span></text><author><a class="comment-user" href="/users/57695/peter-lawrey" title="379,447 reputation">Peter Lawrey</a></author></comment><comment><text><span class="comment-copy">@PeterLawrey It must be enabled with a JVM argument, but it is there. Can read about it here: <a href="https://blog.codecentric.de/en/2014/08/string-deduplication-new-feature-java-8-update-20-2/" rel="nofollow noreferrer">blog.codecentric.de/en/2014/08/…</a></span></text><author><a class="comment-user" href="/users/660887/jamp" title="1,048 reputation">jamp</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>These are all the reasons, one should choose <strong>char[]</strong> array instead of <strong>String</strong> for password.</p>
<p><strong>1.</strong>  Since Strings are immutable in Java if you store password as plain text it will be available in memory until Garbage collector clears it and since String are used in String pool for reusability there is pretty high chance that it will be remain in memory for long duration, which pose a security threat. Since any one who has access to memory dump can find the password in clear text and that's another reason you should always used an encrypted password than plain text. Since Strings are immutable there is no way contents of Strings can be changed because any change will produce new String, while if you char[] you can still set all his element as blank or zero. So Storing password in character array clearly mitigates security risk of stealing password.</p>
<p><strong>2.</strong>  Java itself recommends using getPassword() method of JPasswordField which returns a char[] and deprecated getText() method which returns password in clear text stating security reason. Its good to follow advice from Java team and adhering to standard rather than going against it.</p>
<p><strong>3.</strong>  With String there is always a risk of printing plain text in log file or console but if use Array you won't print contents of array instead its memory location get printed. though not a real reason but still make sense.</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="pln">    </span><span class="typ">String</span><span class="pln"> strPassword</span><span class="pun">=</span><span class="str">"Unknown"</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">char</span><span class="pun">[]</span><span class="pln"> charPassword</span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">[]{</span><span class="str">'U'</span><span class="pun">,</span><span class="str">'n'</span><span class="pun">,</span><span class="str">'k'</span><span class="pun">,</span><span class="str">'w'</span><span class="pun">,</span><span class="str">'o'</span><span class="pun">,</span><span class="str">'n'</span><span class="pun">};</span><span class="pln">
    </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"String password: "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> strPassword</span><span class="pun">);</span><span class="pln">
    </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Character password: "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> charPassword</span><span class="pun">);</span><span class="pln">

    </span><span class="typ">String</span><span class="pln"> password</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Unknown</span><span class="pln">
    </span><span class="typ">Character</span><span class="pln"> password</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">C@110b053</span></code></pre>
<p>Reference from:  <a href="http://javarevisited.blogspot.com/2012/03/why-character-array-is-better-than.html" rel="noreferrer">http://javarevisited.blogspot.com/2012/03/why-character-array-is-better-than.html</a>
Hope this helps.</p>
</div></text><author><a href="/users/1835198/human-being">Human Being</a></author><comments><comment><text><span class="comment-copy">This is redundant. This answer is a exact version of the answer written by  @SrujanKumarGulla <a href="http://stackoverflow.com/a/14060804/1793718">stackoverflow.com/a/14060804/1793718</a>. Please don't copy paste or duplicate the same answer twice.</span></text><author><a class="comment-user" href="/users/1793718/lucky" title="6,826 reputation">Lucky</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p><strong>Edit:</strong> Coming back to this answer after a year of security research, I realize it makes the rather unfortunate implication that you would ever actually compare plaintext passwords. Please don't. <a href="http://stackoverflow.com/questions/2860943/how-can-i-hash-a-password-in-java">Use a secure one-way hash with a salt and a reasonable number of iterations</a>. Consider using a library: this stuff is hard to get right!</p>
<p><strong>Original answer:</strong> What about the fact that String.equals() uses <a href="http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8-b132/java/lang/String.java#String.equals%28java.lang.Object%29" rel="nofollow noreferrer">short-circuit evaluation</a>, and is therefore vulnerable to a timing attack? It may be unlikely, but you could <em>theoretically</em> time the password comparison in order to determine the correct sequence of characters.</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="kwd">public</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> equals</span><span class="pun">(</span><span class="typ">Object</span><span class="pln"> anObject</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">this</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> anObject</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">anObject </span><span class="kwd">instanceof</span><span class="pln"> </span><span class="typ">String</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">String</span><span class="pln"> anotherString </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">String</span><span class="pun">)</span><span class="pln">anObject</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">int</span><span class="pln"> n </span><span class="pun">=</span><span class="pln"> value</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln">
        </span><span class="com">// Quits here if Strings are different lengths.</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">n </span><span class="pun">==</span><span class="pln"> anotherString</span><span class="pun">.</span><span class="pln">value</span><span class="pun">.</span><span class="pln">length</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">char</span><span class="pln"> v1</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> value</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">char</span><span class="pln"> v2</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> anotherString</span><span class="pun">.</span><span class="pln">value</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
            </span><span class="com">// Quits here at first different character.</span><span class="pln">
            </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">n</span><span class="pun">--</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">v1</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> v2</span><span class="pun">[</span><span class="pln">i</span><span class="pun">])</span><span class="pln">
                    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">
                i</span><span class="pun">++;</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>Some more resources on timing attacks:</p>
<ul>
<li><a href="http://codahale.com/a-lesson-in-timing-attacks/" rel="nofollow noreferrer">A Lesson In Timing Attacks</a></li>
<li><a href="https://security.stackexchange.com/a/83671">A discussion about timing attacks</a> over on Information Security Stack Exchange</li>
<li>And of course, the <a href="http://en.wikipedia.org/wiki/Timing_attack" rel="nofollow noreferrer">Timing Attack Wikipedia page</a></li>
</ul>
</div></text><author><a href="/users/3264657/txteclipse">txteclipse</a></author><comments><comment><text><span class="comment-copy">But that could be there in char[] comparison as well, somewhere we would be doing the same in password validation too. so how is char[] better than string?</span></text><author><a class="comment-user" href="/users/1336558/mohit-kanwar" title="1,795 reputation">Mohit Kanwar</a></author></comment><comment><text><span class="comment-copy">You're absolutely correct, the mistake can be made either way. Knowing about the problem is the most important thing here, considering there's no explicit password-comparison method in Java for either String-based or char[]-based passwords. I'd say the temptation to use compare() for Strings is a good reason to go with char[]. That way you at least have control over how the comparison is done (without extending String, which is a pain imo).</span></text><author><a class="comment-user" href="/users/3264657/txteclipse" title="357 reputation">txteclipse</a></author></comment><comment><text><span class="comment-copy">Besides comparing plaintext passwords isn’t the right thing anyway, the temptation to use <code>Arrays.equals</code> for <code>char[]</code> is as high as for <code>String.equals</code>. If anyone cared, there was a dedicated key class encapsulating the actual password and taking care of the issues—oh wait, the real security packages <i>have</i> dedicated key classes, this Q&amp;A is only about a <i>habit</i> outside of them, say, e.g. <code>JPasswordField</code>, to use <code>char[]</code> instead of <code>String</code> (where the actual algorithms use <code>byte[]</code> anyway).</span></text><author><a class="comment-user" href="/users/2711488/holger" title="95,540 reputation">Holger</a></author></comment><comment><text><span class="comment-copy">Security relevant software should do something like <code>sleep(secureRandom.nextInt())</code> before rejecting a login attempt anyway, that’s not only removing the possibility of timing attacks, it also makes counteracts brute force attempts.</span></text><author><a class="comment-user" href="/users/2711488/holger" title="95,540 reputation">Holger</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Strings are immutable and cannot be altered once they have been created. Creating a password as a string will leave stray references to the password on the heap or on the String pool. Now if someone takes a heap dump of the Java process and carefully scans through he might be able to guess the passwords. Of course these non used strings will be garbage collected but that depends on when the GC kicks in.</p>
<p>On the other side char[] are mutable as soon as the authentication is done you can overwrite them with any character like all M's or backslashes. Now even if someone takes a heap dump he might not be able to get the passwords which are not currently in use. This gives you more control in the sense like clearing the Object content yourself vs waiting for the GC to do it.</p>
</div></text><author><a href="/users/102040/geek">Geek</a></author><comments><comment><text><span class="comment-copy">They'll only be GC'd if the JVM in question is &gt; 1.6.  Prior to 1.7, all strings were stored in permgen.</span></text><author><a class="comment-user" href="/users/557153/avgvstvs" title="2,715 reputation">avgvstvs</a></author></comment><comment><text><span class="comment-copy">@avgvstvs:  “all strings were stored in permgen” is just dead wrong. Only interned strings were stored there and if they weren’t originating from string literals referenced by code, they were still garbage collected. Just think about it. If strings were generally never GCed in JVMs prior to 1.7, how could any Java application survive more than a few minutes?</span></text><author><a class="comment-user" href="/users/2711488/holger" title="95,540 reputation">Holger</a></author></comment><comment><text><span class="comment-copy">@Holger This is false.  Interned <code>strings</code> AND the <code>String</code> pool (pool of previously used strings) were BOTH stored in Permgen prior to 1.7.  Also, See section 5.1:  <a href="https://docs.oracle.com/javase/specs/jvms/se6/html/ConstantPool.doc.html#67960" rel="nofollow noreferrer">docs.oracle.com/javase/specs/jvms/se6/html/…</a>  The JVM always checked <code>Strings</code> to see if they were the same reference value, and would call <code>String.intern()</code> FOR YOU.  The result was that every time the JVM detected identical Strings in the <code>constant_pool</code> or heap it would move them into permgen.  And I worked on several applications with "creeping permgen" until 1.7.  It was a real problem.</span></text><author><a class="comment-user" href="/users/557153/avgvstvs" title="2,715 reputation">avgvstvs</a></author></comment><comment><text><span class="comment-copy">So to recap:  Until 1.7, Strings started in the heap, when they were used they were put into the <code>constant_pool</code> which was located IN permgen, and then if a string was used more than once, it would be interned.</span></text><author><a class="comment-user" href="/users/557153/avgvstvs" title="2,715 reputation">avgvstvs</a></author></comment><comment><text><span class="comment-copy">@avgvstvs: There is no “pool of previously used strings”. You are throwing entirely different things together. There is one runtime string pool containing string literals and explicitly interned string, but no other. And each class has its constant pool containing <i>compile-time</i> constants. These strings are automatically added to the runtime pool, but <i>only these</i>, not every string.</span></text><author><a class="comment-user" href="/users/2711488/holger" title="95,540 reputation">Holger</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>There is nothing that char array gives you vs String unless you clean it up manually after use, and I haven't seen anyone actually doing that. So to me the preference of char[] vs String is a little exaggerated.</p>
<p>Take a look at the <sub>widely used</sub> Spring Security library <a href="http://grepcode.com/file/repo1.maven.org/maven2/org.springframework.security/spring-security-web/3.0.1.RELEASE/org/springframework/security/web/authentication/UsernamePasswordAuthenticationFilter.java#73">here</a> and ask yourself - are Spring Security guys incompetent or char[] passwords just don't make much sense. When some nasty hacker grabs memory dumps of your RAM be sure she'll get all the passwords even if you use sophisticated ways to hide them.</p>
<p>However, Java changes all the time, and some scary features like <a href="http://stackoverflow.com/questions/27949213/string-deduplication-feature-of-java-8">String Deduplication feature of Java 8</a> might intern String objects without your knowledge. But that's different conversation.</p>
</div></text><author><a href="/users/513342/oleg-mikheev">Oleg Mikheev</a></author><comments><comment><text><span class="comment-copy">Why is String-deduplication scary? It only applies when there are at least two strings having the same contents, so what danger would arise from letting these two already identical strings share the same array? Or lets ask the other way round: if there is no string-deduplication, what advantage arises from the fact that both strings have a distinct array (of the same contents)? In either case, there will be an array of that contents being alive at least as long as the longest living String of that contents is alive…</span></text><author><a class="comment-user" href="/users/2711488/holger" title="95,540 reputation">Holger</a></author></comment><comment><text><span class="comment-copy">@Holger anything that's out of your control is a potential risk...  for instance if two users have the same password this wonderful feature will store both of them in single char[] making it evident that they are the same, not sure if that's a huge risk but still</span></text><author><a class="comment-user" href="/users/513342/oleg-mikheev" title="10,178 reputation">Oleg Mikheev</a></author></comment><comment><text><span class="comment-copy">If you have access to the heap memory and both string instances, it doesn’t matter whether the strings point to the same array or to two arrays of the same contents, each is easy to find out. Especially, as it is irrelevant anyway. If you are at this point, you grab both passwords, whether identical or not. The actual error lies in using plaintext passwords instead of salted hashes.</span></text><author><a class="comment-user" href="/users/2711488/holger" title="95,540 reputation">Holger</a></author></comment><comment><text><span class="comment-copy">@Holger to verify password it has to be in clear text in memory for some time, 10ms, even if it's just to create a salted hash out of it. Then, if it happens that there are two identical passwords kept in memory even for 10 ms, deduplication may come into play. If it really interns strings they are kept in memory for much longer time. System that doesn't restart for months will collect lots of these. Just theorizing.</span></text><author><a class="comment-user" href="/users/513342/oleg-mikheev" title="10,178 reputation">Oleg Mikheev</a></author></comment><comment><text><span class="comment-copy">It seems, you have a fundamental misunderstanding about String Deduplication. It doesn’t “intern strings”, all it does, is letting strings with the same contents point to the same array, which actually <i>reduces</i> the number of array instances containing the plaintext password, as all but one array instance can be reclaimed and overwritten by other objects immediately. These strings are still collected like any other string. Maybe it helps, if you understand that the de-duplication is actually done by the garbage collector, for strings that have survived multiple GC cycles only.</span></text><author><a class="comment-user" href="/users/2711488/holger" title="95,540 reputation">Holger</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Simple and short answer would be because <code>char[]</code> are mutable while <code>String</code> objects are not.</p>
<p><code>Strings</code> in Java are immutable objects. That is why they can't be modified once created, and therefore the only way for their contents to be removed from memory is to have them garbage collected. It will be only then, when the memory freed by the object can be overwritten and the data will be gone.</p>
<p>Now garbage collection in Java doesn't happen at any kind of guaranteed interval. The <code>String</code> can thus persist in memory for a long time, and if a process crashes during this time, the contents of the string may end up in a memory dump or some log. </p>
<p>With a <em>character array</em>, you can read the password, finish working with it as soon as you can, and then immediately change the contents.</p>
</div></text><author><a href="/users/1475228/pritam-banerjee">Pritam Banerjee</a></author><comments><comment><text><span class="comment-copy">This is just a pointless rehash of Skeet's answer.</span></text><author><a class="comment-user" href="/users/88289/fallenidol" title="664 reputation">fallenidol</a></author></comment></comments></answer></answers></post>