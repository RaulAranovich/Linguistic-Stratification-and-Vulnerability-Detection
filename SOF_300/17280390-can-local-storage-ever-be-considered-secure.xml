<?xml version="1.0" encoding="utf-8"?>
<post><title>html5 - Can local storage ever be considered secure? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I'm required to develop a web application that will function offline for long periods. In order for this to be viable I cannot avoid saving sensitive data (personal data but not the kind of data you would only store hashed) in local storage. </p>
<p>I accept that this is not recommended practice, but given little choice I'm doing the following to secure the data:</p>
<ul>
<li>encyrypting everything going into local storage using the stanford javascript crypto library and AES-256</li>
<li>the user password is the encryption key and is not stored on the device</li>
<li>serving all content (when online) from a single trusted server over ssl</li>
<li>validating all data going to and from local storage on the server using owasp antisamy project</li>
<li>in the network section of the appcache, not using *, and instead listing only the URIs required for connection with the trusted server</li>
<li>in general trying to apply the guidelines suggested in the OWASP XSS cheat sheet</li>
</ul>
<p>I appreciate that the devil is often in the detail, and know there is a lot of scepticism about local storage and javascript-based security in general. Can anyone comment on whether there are:</p>
<ul>
<li>fundamental flaws in the above approach?</li>
<li>any possible solutions for such flaws?</li>
<li>any better way to secure local storage when an html 5 application must function offline for long periods?</li>
</ul>
<p>Thanks for any help.</p>
</div></text><author><a href="/users/918959/antti-haapala">Antti Haapala</a></author><comments><comment><text><span class="comment-copy"><i>"I accept that this is not recommended practice"</i> - Is it so? Isn't it the opposite that it has been created actually for that?</span></text><author><a class="comment-user" href="/users/367456/hakre" title="140,478 reputation">hakre</a></author></comment><comment><text><span class="comment-copy">To clarify, I meant not recommended practice to store <i>sensitive</i> data in local storage.</span></text><author><a class="comment-user owner" href="/users/1173706/user1173706" title="702 reputation">user1173706</a></author></comment><comment><text><span class="comment-copy">Like that you shouldn't pass <i>sensitive</i> data over large networks?</span></text><author><a class="comment-user" href="/users/367456/hakre" title="140,478 reputation">hakre</a></author></comment><comment><text><span class="comment-copy">@user1173706 Why does the application have to function have to run for extended periods of time offline? What are the users like? What browsers do you have to support? I for one think it's possible but I need to know specifics about <i>your</i> scenario.</span></text><author><a class="comment-user" href="/users/1348195/benjamin-gruenbaum" title="140,087 reputation">Benjamin Gruenbaum</a></author></comment><comment><text><span class="comment-copy">@Benjamin i have updated the question. Thanks.</span></text><author><a class="comment-user owner" href="/users/1173706/user1173706" title="702 reputation">user1173706</a></author></comment><comment><text><span class="comment-copy">@user1173706 Seeing the updated question, if you are able to restrict users to running the browser in no-addon mode I think this is viable.</span></text><author><a class="comment-user" href="/users/1348195/benjamin-gruenbaum" title="140,087 reputation">Benjamin Gruenbaum</a></author></comment><comment><text><span class="comment-copy">your approach is fine, if you add a pbkdf into the mix and block side-channels with a CSP</span></text><author><a class="comment-user" href="/users/2317490/dandavis" title="9,345 reputation">dandavis</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Well, the basic premise here is: no, it is not secure yet.</p>
<p>Basically, you can't run crypto in JavaScript: <a href="http://www.matasano.com/articles/javascript-cryptography/" rel="noreferrer">JavaScript Crypto Considered Harmful</a>.</p>
<p>The problem is that you can't reliably get the crypto code into the browser, and even if you could, JS isn't designed to let you run it securely. So until browsers have a cryptographic container (which Encrypted Media Extensions provide, but are being rallied against for their DRM purposes), it will not be possible to do securely.</p>
<p>As far as a "Better way", there isn't one right now. Your only alternative is to store the data in plain text, and hope for the best. Or don't store the information at all. Either way.</p>
<p>Either that, or if you <em>need</em> that sort of security, and you need local storage, create a custom application...</p>
</div></text><author><a href="/users/338665/ircmaxell">ircmaxell</a></author><comments><comment><text><span class="comment-copy">Thanks for your response ircmaxell.   The article you link to is one of the first things I read when considering this and obviously raises a lot of red flags. That said many of the points made don't apply to this specific use case. Because I am interacting with only one trusted server over SSL then I would have thought this does allow for a reliable mechanism to get the crypto code into the browser?   As for js design not facilitating it to be run securely, are you referring to matasano's reference to content-controlled code?</span></text><author><a class="comment-user owner" href="/users/1173706/user1173706" title="702 reputation">user1173706</a></author></comment><comment><text><span class="comment-copy">@user1173706: partially. What I mean is that being such a dynamic language means that even defining the algorithms doesn't mean that another malicious code can't get at it. For example: Imagine a user installs a plugin into the browser. Now all of a sudden, your crypto code is vulnerable because that plugin has access to do whatever they want (including stealing keys). Check <a href="http://stackoverflow.com/questions/3622219/can-chrome-extension-content-scripts-access-window-opener">this out</a>.</span></text><author><a class="comment-user" href="/users/338665/ircmaxell" title="119,301 reputation">ircmaxell</a></author></comment><comment><text><span class="comment-copy">Downvoter: can you provide a better answer? I realize that this is a somewhat controversial issue where there's significant disagreement between security professionals (and non-professionals as well), so the alternate view-point would be worth sharing. Unless you're downvoting for another reason, in which case how can I improve this answer?</span></text><author><a class="comment-user" href="/users/338665/ircmaxell" title="119,301 reputation">ircmaxell</a></author></comment><comment><text><span class="comment-copy">Haters gonna hate. Thank you for all your answers and congrats on 1000 answers milestone!</span></text><author><a class="comment-user" href="/users/1503444/sergei-guk" title="1,555 reputation">Sergei Guk</a></author></comment><comment><text><span class="comment-copy">@ircmaxell not me, but I disagree with this answer. "The problem is that you can't reliably get the crypto code into the browser, and even if you could, JS isn't designed to let you run it securely." - Why? What's the <i>inherent</i> problem? You can use the Stanford JavaScript encryption library and encrypt/decrypt in it. You can hash, and you can do everything securely. I don't see the inherent problem here in an offline app in JS doing standard crpyto, much like an app built in any other language would.</span></text><author><a class="comment-user" href="/users/1348195/benjamin-gruenbaum" title="140,087 reputation">Benjamin Gruenbaum</a></author></comment><comment><text><span class="comment-copy">@BenjaminGruenbaum: the problem is that there's multiple places where that crypto-code would need to interact with third party code. The whole point of that article I linked to is that you can't control the execution environment. So you install the Stanford Crypto lib. Then what happens if some browser plugin overrides <code>sjcl.encrypt</code> to email the key to the attacker? In JS that's 100% possible and there's nothing you can do to stop it. And that's the underlying point. There are no "security" mechanisms in place to prevent other JS from doing nasty things to your data. And that's a <b>problem</b>.</span></text><author><a class="comment-user" href="/users/338665/ircmaxell" title="119,301 reputation">ircmaxell</a></author></comment><comment><text><span class="comment-copy">@ircmaxell If you sleep with dogs you can't expect not to wake up with fleas. If the user installs a malware add on that's just the same as the user installing a virus on their PC, it's no different from it. Your Java or C program can be as secure as it gets but as soon as the attacker has the ability to run code you're screwed. That's not different for JS. Addons don't just magically appear in the browser.  Moreover, not saving the information encrypted would not help in any way if the user has malware, since it could just hijack the data live.</span></text><author><a class="comment-user" href="/users/1348195/benjamin-gruenbaum" title="140,087 reputation">Benjamin Gruenbaum</a></author></comment><comment><text><span class="comment-copy">@BenjaminGruenbaum: disagree. In a normal application, you'd need <i>either</i> to compromise the app itself (to read memory locations), or gain root access to the box (compromise the OS). Either way, you need to compromise something deeper than just do normal behavior. JS allows this in normal behavior. Which is the problem...</span></text><author><a class="comment-user" href="/users/338665/ircmaxell" title="119,301 reputation">ircmaxell</a></author></comment><comment><text><span class="comment-copy">@ircmaxell Disagree. Like a normal application you need either compromise the app itself (read the local storage within) or gain root access to the 'box' (the browser). Either way, you're compromising something deeper than normal behavior. That's exactly the same. It's very hard to install an extension 'by mistake' in practice (you get a big box that you have to confirm when you install, just like UAC in windows or asking for admin permissions in linux). That's still not an inherent problem with web js and certainly something that can be mitigated through careful design.</span></text><author><a class="comment-user" href="/users/1348195/benjamin-gruenbaum" title="140,087 reputation">Benjamin Gruenbaum</a></author></comment><comment><text><span class="comment-copy"><a href="http://chat.stackoverflow.com/transcript/message/10185826#10185826"><b>See continued debate on the issue between me and @ircmaxell here</b></a></span></text><author><a class="comment-user" href="/users/1348195/benjamin-gruenbaum" title="140,087 reputation">Benjamin Gruenbaum</a></author></comment><comment><text><span class="comment-copy">@ircmaxell upvote from me - thanks for the info. Still not totally clear on this though - please see updated question.</span></text><author><a class="comment-user owner" href="/users/1173706/user1173706" title="702 reputation">user1173706</a></author></comment><comment><text><span class="comment-copy">Now the Encrypted Media Extensions are implemented, I still don't see how they are useful outside of encrypting media (e.g. Video)...</span></text><author><a class="comment-user" href="/users/543873/michael" title="3,040 reputation">Michael</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I presume the primary concern is someone with physical access to the computer reading the <code>localStorage</code> for your site, and you want cryptography to help prevent that access.</p>
<p>If someone has physical access you are also open to attacks other and worse than reading. These include (but are not limited to): keyloggers, offline script modification, local script injection, browser cache poisoning, and DNS redirects. Those attacks only work if the user uses the machine after it has been compromised. Nevertheless, physical access in such a scenario means you have bigger problems.</p>
<p>So keep in mind that the limited scenario where local crypto is valuable would be if the machine is stolen.</p>
<p>There are libraries that do implement the desired functionality, e.g. <a href="http://bitwiseshiftleft.github.io/sjcl/" rel="noreferrer">Stanford Javascript Crypto Library</a>. There are inherent weaknesses, though (as referred to in the link from @ircmaxell's answer):</p>
<ol>
<li>Lack of entropy / random number generation;</li>
<li>Lack of a secure keystore i.e. the private key must be password-protected if stored locally, or stored on the server (which bars offline access);</li>
<li>Lack of secure-erase;</li>
<li>Lack of timing characteristics.</li>
</ol>
<p>Each of these weaknesses corresponds with a category of cryptographic compromise. In other words, while you may have "crypto" by name, it will be well below the rigour one aspires to in practice.</p>
<p>These concerns will likely be addressed in the <a href="http://www.w3.org/TR/WebCryptoAPI/" rel="noreferrer">WebCrypto API</a>, but that is not here yet.</p>
<p>All that being said, the actuarial assessment is not as trivial as "Javascript crypto is weak, do not use it". This is not an endorsement, strictly a caveat and it requires you to completely understand the exposure of the above weaknesses, the frequency and cost of the vectors you face, and your capacity for mitigation or insurance in the event of failure: Javascript crypto, in spite of its weaknesses, may reduce your exposure but only against thieves with limited technical capacity. However, you should presume Javascript crypto has no value against a determined and capable attacker who is targeting that information. Some would consider it misleading to call the data "encrypted" when so many weaknesses are known to be inherent to the implementation. In other words, you can marginally decrease your technical exposure but you increase your financial exposure from disclosure. Each situation is different, of course - and the analysis of reducing the technical exposure to financial exposure is non-trivial. Here is an illustrative analogy: <a href="http://www.theglobeandmail.com/technology/digital-culture/why-canadas-banks-have-weaker-passwords-than-twitter-or-google/article18325257/" rel="noreferrer">Some banks require weak passwords</a>, in spite of the inherent risk, because their exposure to losses from weak passwords is less than the end-user costs of supporting strong passwords. </p>
<p>🔥 If you read the last paragraph and thought "Some guy on the Internet named Brian says I can use Javascript crypto", <strong><em>do not use Javascript crypto.</em></strong></p>
<p>For the use case described in the question it would seem to make more sense for users to encrypt their local partition or home directory and use a strong password. That type of security is generally well tested, widely trusted, and commonly available.</p>
</div></text><author><a href="/users/19212/brian-m-hunt">Brian M. Hunt</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>As an exploration of this topic, I have a presentation titled "Securing TodoMVC Using the Web Cryptography API" (<a href="http://youtu.be/kqwaZ-LzDag?list=PL-0yjdC10QYpmXI3l-PGK1od4kTWOjm_A" rel="noreferrer">video</a>, <a href="https://github.com/hakanson/todomvc-jquery-webcryptoapi" rel="noreferrer">code</a>). </p>
<p>It uses the <a href="http://www.w3.org/TR/WebCryptoAPI/" rel="noreferrer">Web Cryptography API</a> to store the todo list encrypted in localStorage by password protecting the application and using a password derived key for encryption. If you forget or lose the password, there is no recovery.  (<em>Disclaimer - it was a POC and not intended for production use.</em>)</p>
<p>As the other answers state, this is still susceptible to XSS or malware installed on the client computer.  However, any sensitive data would also be in memory when the data is stored on the server and the application is in use.  I suggest that offline support may be the compelling use case.</p>
<p>In the end, encrypting localStorage probably only protects the data from attackers that have read only access to the system or its backups.  It adds a small amount of defense in depth for OWASP Top 10 item <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure" rel="noreferrer">A6-Sensitive Data Exposure</a>, and allows you to answer "Is any of this data stored in clear text long term?" correctly.</p>
</div></text><author><a href="/users/22514/kevin-hakanson">Kevin Hakanson</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>This is a really interesting article here.  I'm considering implementing JS encryption for offering security when using local storage.  It's absolutely clear that this will only offer protection if the device is stolen (and is implemented correctly).  It won't offer protection against keyloggers etc.  However this is not a JS issue as the keylogger threat is a problem of all applications, regardless of their execution platform (browser, native).  As to the article "JavaScript Crypto Considered Harmful" referenced in the first answer, I have one criticism; it states "You could use SSL/TLS to solve this problem, but that's expensive and complicated". I think this is a very ambitious claim (and possibly rather biased).  Yes, SSL has a cost, but if you look at the cost of developing native applications for multiple OS, rather than web-based due to this issue alone, the cost of SSL becomes insignificant.</p>
<p>My conclusion - There is a place for client-side encryption code, however as with all applications the developers must recognise it's limitations and implement if suitable for their needs, and ensuring there are ways of mitigating it's risks.</p>
</div></text><author><a href="/users/5089155/paul-s">Paul S</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Not accessible to any webpage (true) but is easily accessible and easily editible via dev tools, such as chrome (ctl-shift-J).  Therefore, custom crypto required before storing the value.  </p>
<p>But, if javascript needs to decrypt (to validate) then the decrypt algorithm is exposed and can be manipulated.</p>
<p>Javascript needs a fully secure container and the ability to properly implement private variables and functions that are available only to the js interpreter.  But, this violates user security - since tracking data can be used with impunity.</p>
<p>Consequently, javascript will never be fully secure.  </p>
</div></text><author><a href="/users/5859701/rockmo">rockmo</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>No.</p>
<p>localStorage is accessible by any webpage, and if you have the key, you can change whatever data you want.</p>
<p>That being said, if you can devise a way to safely encrypt the keys, it doesn't matter how you transfer the data, if you can contain the data within a closure, then the data is (somewhat) safe.</p>
</div></text><author><a href="/users/4921344/hellol11">hellol11</a></author><comments><comment><text><span class="comment-copy">It is not acccessible to "any webpage". It is only accessible to pages in the current domain.</span></text><author><a class="comment-user" href="/users/2625248/dtabuenc" title="5,688 reputation">dtabuenc</a></author></comment><comment><text><span class="comment-copy">@dtabuenc to the contrary, I made a pen a while back that shows you <a href="http://codepen.io/hellol11/pen/jqLVjd" rel="nofollow noreferrer">every single key/value pair in your localStorage</a>, without any hacks.</span></text><author><a class="comment-user" href="/users/4921344/hellol11" title="308 reputation">hellol11</a></author></comment><comment><text><span class="comment-copy">Nope! Sorry. Local storage is isolated per-domain. Code running in one domain can not access values that were stored into local storage by another domain. For example, google.com stores a bunch of stuff in local storage. You will not be able to list any of the keys from google.com in your  pen example.</span></text><author><a class="comment-user" href="/users/2625248/dtabuenc" title="5,688 reputation">dtabuenc</a></author></comment><comment><text><span class="comment-copy">@dtabuenc tested it, you're right.</span></text><author><a class="comment-user" href="/users/4921344/hellol11" title="308 reputation">hellol11</a></author></comment></comments></answer></answers></post>