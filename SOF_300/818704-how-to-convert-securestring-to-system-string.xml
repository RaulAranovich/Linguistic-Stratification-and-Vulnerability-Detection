<?xml version="1.0" encoding="utf-8"?>
<post><title>c# - How to convert SecureString to System.String? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>All reservations about unsecuring your SecureString by creating a System.String out of it <strong>aside</strong>, how can it be done?</p>
<p>How can I convert an ordinary System.Security.SecureString to System.String?</p>
<p>I'm sure many of you who are familiar with SecureString are going to respond that one should never transform a SecureString to an ordinary .NET string because it removes all security protections.  <strong>I know</strong>.  But right now my program does everything with ordinary strings anyway, and I'm trying to enhance its security and although I'm going to be using an API that returns a SecureString to me I am <em>not</em> trying to use that to increase my security.  </p>
<p>I'm aware of Marshal.SecureStringToBSTR, but I don't know how to take that BSTR and make a System.String out of it.</p>
<p>For those who may demand to know why I would ever want to do this, well, I'm taking a password from a user and submitting it as an html form POST to log the user into a web site.  So... this really has to be done with managed, unencrypted buffers.  If I could even get access to the unmanaged, unencrypted buffer I imagine I could do byte-by-byte stream writing on the network stream and hope that that keeps the password secure the whole way.  I'm hoping for an answer to at least one of these scenarios.</p>
</div></text><author><a href="/users/271200/wonea">wonea</a></author><comments><comment><text><span class="comment-copy">+1 - exactly what I was looking for.</span></text><author><a class="comment-user" href="/users/1016343/matt" title="11,094 reputation">Matt</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Use the <a href="http://msdn.microsoft.com/en-us/library/system.runtime.interopservices.marshal.aspx" rel="noreferrer"><code>System.Runtime.InteropServices.Marshal</code></a> class:</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="typ">String</span><span class="pln"> </span><span class="typ">SecureStringToString</span><span class="pun">(</span><span class="typ">SecureString</span><span class="pln"> value</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="typ">IntPtr</span><span class="pln"> valuePtr </span><span class="pun">=</span><span class="pln"> </span><span class="typ">IntPtr</span><span class="pun">.</span><span class="typ">Zero</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">try</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    valuePtr </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Marshal</span><span class="pun">.</span><span class="typ">SecureStringToGlobalAllocUnicode</span><span class="pun">(</span><span class="pln">value</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Marshal</span><span class="pun">.</span><span class="typ">PtrToStringUni</span><span class="pun">(</span><span class="pln">valuePtr</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">finally</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="typ">Marshal</span><span class="pun">.</span><span class="typ">ZeroFreeGlobalAllocUnicode</span><span class="pun">(</span><span class="pln">valuePtr</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>If you want to avoid creating a managed string object, you can access the raw data using <a href="https://msdn.microsoft.com/en-us/library/a0zbzkx2.aspx" rel="noreferrer"><code>Marshal.ReadInt16(IntPtr, Int32)</code></a>:</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="kwd">void</span><span class="pln"> </span><span class="typ">HandleSecureString</span><span class="pun">(</span><span class="typ">SecureString</span><span class="pln"> value</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="typ">IntPtr</span><span class="pln"> valuePtr </span><span class="pun">=</span><span class="pln"> </span><span class="typ">IntPtr</span><span class="pun">.</span><span class="typ">Zero</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">try</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    valuePtr </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Marshal</span><span class="pun">.</span><span class="typ">SecureStringToGlobalAllocUnicode</span><span class="pun">(</span><span class="pln">value</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="typ">int</span><span class="pln"> i</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> value</span><span class="pun">.</span><span class="typ">Length</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">short</span><span class="pln"> unicodeChar </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Marshal</span><span class="pun">.</span><span class="typ">ReadInt16</span><span class="pun">(</span><span class="pln">valuePtr</span><span class="pun">,</span><span class="pln"> i</span><span class="pun">*</span><span class="lit">2</span><span class="pun">);</span><span class="pln">
      </span><span class="com">// handle unicodeChar</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
  </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">finally</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="typ">Marshal</span><span class="pun">.</span><span class="typ">ZeroFreeGlobalAllocUnicode</span><span class="pun">(</span><span class="pln">valuePtr</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/5542/rasmus-faber">Rasmus Faber</a></author><comments><comment><text><span class="comment-copy">Why the downvote?</span></text><author><a class="comment-user" href="/users/5542/rasmus-faber" title="33,273 reputation">Rasmus Faber</a></author></comment><comment><text><span class="comment-copy">That's a great answer, I gave you. +1</span></text><author><a class="comment-user" href="/users/1016343/matt" title="11,094 reputation">Matt</a></author></comment><comment><text><span class="comment-copy">Got my up-vote too even years later, thanks for the help! Just a quick note: this also works as a static, in its own memory.</span></text><author><a class="comment-user" href="/users/416752/john-suit" title="475 reputation">John Suit</a></author></comment><comment><text><span class="comment-copy">This looks like a good candidate as an extension... just IMO +1</span></text><author><a class="comment-user" href="/users/1165477/will" title="690 reputation">Will</a></author></comment><comment><text><span class="comment-copy">I used <code>StopWatch</code> and <code>SecureStringToString</code> took 4.6sec to run. It's to slow for me. Does anyone get the same time or something faster?</span></text><author><a class="comment-user" href="/users/306028/radbyx" title="3,540 reputation">radbyx</a></author></comment><comment><text><span class="comment-copy">@radbyx In a quick and dirty test setup, I can call it 1000 times in 76ms. The first invocation takes 0.3 ms and subsequent invocations ~0.07ms. How large is your secure string and which version of the framework are you using?</span></text><author><a class="comment-user" href="/users/5542/rasmus-faber" title="33,273 reputation">Rasmus Faber</a></author></comment><comment><text><span class="comment-copy">Length om my secureString is 168. I am using .NET Framework 3.5 if that answered your question? I have tryed 5-10 times is always around 4.5-4.65 sec~ I would love to get your time</span></text><author><a class="comment-user" href="/users/306028/radbyx" title="3,540 reputation">radbyx</a></author></comment><comment><text><span class="comment-copy">@RasmusFaber My bad, I had added a <code>Database.GetConnectionString()</code> into your code, to get my secureString, which was the evil part that took almost 5sec(and yes I should look into that! :) Your code took .00 mili seconds in my stopwatch so it's all good. Thanks for pointing me in the right direction.</span></text><author><a class="comment-user" href="/users/306028/radbyx" title="3,540 reputation">radbyx</a></author></comment><comment><text><span class="comment-copy">I used the exact code in this answer. Every time I pass in a <b>SecureString</b> value, <code>Marshal.PtrToStringUni</code> returns an Empty String. Any idea why or how to find out what is going wrong?</span></text><author><a class="comment-user" href="/users/153923/jp2code" title="14,019 reputation">jp2code</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Obviously you know how this defeats the whole purpose of a SecureString, but I'll restate it anyway.</p>
<p>If you want a one-liner, try this: (.NET 4 and above only)</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="kwd">string</span><span class="pln"> password </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Net</span><span class="pun">.</span><span class="typ">NetworkCredential</span><span class="pun">(</span><span class="kwd">string</span><span class="pun">.</span><span class="typ">Empty</span><span class="pun">,</span><span class="pln"> securePassword</span><span class="pun">).</span><span class="typ">Password</span><span class="pun">;</span></code></pre>
<p>Where securePassword is a SecureString.</p>
</div></text><author><a href="/users/3885063/steve-in-co">Steve In CO</a></author><comments><comment><text><span class="comment-copy">Although it does defeat the purpose in production, your solution is perfect for unit tests. Thanks.</span></text><author><a class="comment-user" href="/users/702419/beterthanlife" title="938 reputation">beterthanlife</a></author></comment><comment><text><span class="comment-copy">This helped me to figure out that a SecureString (System.Security.SecureString) was not being passed to my ApiController (webapi).  Thx</span></text><author><a class="comment-user" href="/users/214977/granadacoder" title="12,564 reputation">granadaCoder</a></author></comment><comment><text><span class="comment-copy">That's definitely the simplest way to get back the String from SecureString. Thank you for this answer!</span></text><author><a class="comment-user" href="/users/1016343/matt" title="11,094 reputation">Matt</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Dang.  <em>right</em> after posting this I found the answer deep in <a href="http://www.microsoft.com/indonesia/msdn/credmgmt.aspx" rel="noreferrer">this article</a>.  But if anyone knows how to access the IntPtr unmanaged, unencrypted buffer that this method exposes, one byte at a time so that I don't have to create a managed string object out of it to keep my security high, please add an answer. :)</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="kwd">static</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> </span><span class="typ">SecureStringToString</span><span class="pun">(</span><span class="typ">SecureString</span><span class="pln"> value</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="typ">IntPtr</span><span class="pln"> bstr </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Marshal</span><span class="pun">.</span><span class="typ">SecureStringToBSTR</span><span class="pun">(</span><span class="pln">value</span><span class="pun">);</span><span class="pln">

    </span><span class="kwd">try</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Marshal</span><span class="pun">.</span><span class="typ">PtrToStringBSTR</span><span class="pun">(</span><span class="pln">bstr</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">finally</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">Marshal</span><span class="pun">.</span><span class="typ">FreeBSTR</span><span class="pun">(</span><span class="pln">bstr</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/46926/andrew-arnott">Andrew Arnott</a></author><comments><comment><text><span class="comment-copy">You can certainly use the <code>unsafe</code> keyword and a <code>char*</code>, just call <code>bstr.ToPointer()</code> and cast.</span></text><author><a class="comment-user" href="/users/103167/ben-voigt" title="212,096 reputation">Ben Voigt</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I think it would be best for <code>SecureString</code> dependent functions to <em>encapsulate</em> their dependent logic in an anonymous function for better control over the decrypted string in memory (once pinned).</p>
<p>The implementation for decrypting SecureStrings in this snippet will:</p>
<ol>
<li>Pin the string in memory (which is what you want to do but appears to be missing from most answers here).</li>
<li>Pass <a href="http://stackoverflow.com/questions/10792603/how-are-strings-passed-in-net/10792823#10792823">its reference</a> to the Func/Action delegate.</li>
<li>Scrub it from memory and release the GC in the <code>finally</code> block.</li>
</ol>
<p>This obviously makes it a lot easier to "standardize" and maintain callers vs. relying on less desirable alternatives:</p>
<ul>
<li>Returning the decrypted string from a <code>string DecryptSecureString(...)</code> helper function.</li>
<li>Duplicating this code wherever it is needed.</li>
</ul>
<p>Notice here, you have two options:</p>
<ol>
<li><code>static T DecryptSecureString&lt;T&gt;</code> which allows you to access the result of the <code>Func</code> delegate from the caller (as shown in the <code>DecryptSecureStringWithFunc</code> test method).</li>
<li><code>static void DecryptSecureString</code> is simply a "void" version which employ an <code>Action</code> delegate in cases where you actually don't want/need to return anything (as demonstrated in the <code>DecryptSecureStringWithAction</code> test method).</li>
</ol>
<p>Example usage for both can be found in the <code>StringsTest</code> class included.</p>
<p><strong>Strings.cs</strong></p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="pln">using </span><span class="typ">System</span><span class="pun">;</span><span class="pln">
using </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Runtime</span><span class="pun">.</span><span class="typ">InteropServices</span><span class="pun">;</span><span class="pln">
using </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Security</span><span class="pun">;</span><span class="pln">

namespace </span><span class="typ">SecurityUtils</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">partial</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Strings</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="com">/// &lt;summary&gt;</span><span class="pln">
        </span><span class="com">/// Passes decrypted password String pinned in memory to Func delegate scrubbed on return.</span><span class="pln">
        </span><span class="com">/// &lt;/summary&gt;</span><span class="pln">
        </span><span class="com">/// &lt;typeparam name="T"&gt;Generic type returned by Func delegate&lt;/typeparam&gt;</span><span class="pln">
        </span><span class="com">/// &lt;param name="action"&gt;Func delegate which will receive the decrypted password pinned in memory as a String object&lt;/param&gt;</span><span class="pln">
        </span><span class="com">/// &lt;returns&gt;Result of Func delegate&lt;/returns&gt;</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> T </span><span class="typ">DecryptSecureString</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;(</span><span class="typ">SecureString</span><span class="pln"> secureString</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Func</span><span class="pun">&lt;</span><span class="kwd">string</span><span class="pun">,</span><span class="pln"> T</span><span class="pun">&gt;</span><span class="pln"> action</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> insecureStringPointer </span><span class="pun">=</span><span class="pln"> </span><span class="typ">IntPtr</span><span class="pun">.</span><span class="typ">Zero</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> insecureString </span><span class="pun">=</span><span class="pln"> </span><span class="typ">String</span><span class="pun">.</span><span class="typ">Empty</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> gcHandler </span><span class="pun">=</span><span class="pln"> </span><span class="typ">GCHandle</span><span class="pun">.</span><span class="typ">Alloc</span><span class="pun">(</span><span class="pln">insecureString</span><span class="pun">,</span><span class="pln"> </span><span class="typ">GCHandleType</span><span class="pun">.</span><span class="typ">Pinned</span><span class="pun">);</span><span class="pln">

            </span><span class="kwd">try</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                insecureStringPointer </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Marshal</span><span class="pun">.</span><span class="typ">SecureStringToGlobalAllocUnicode</span><span class="pun">(</span><span class="pln">secureString</span><span class="pun">);</span><span class="pln">
                insecureString </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Marshal</span><span class="pun">.</span><span class="typ">PtrToStringUni</span><span class="pun">(</span><span class="pln">insecureStringPointer</span><span class="pun">);</span><span class="pln">

                </span><span class="kwd">return</span><span class="pln"> action</span><span class="pun">(</span><span class="pln">insecureString</span><span class="pun">);</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
            </span><span class="kwd">finally</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                insecureString </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span><span class="pln">

                gcHandler</span><span class="pun">.</span><span class="typ">Free</span><span class="pun">();</span><span class="pln">
                </span><span class="typ">Marshal</span><span class="pun">.</span><span class="typ">ZeroFreeGlobalAllocUnicode</span><span class="pun">(</span><span class="pln">insecureStringPointer</span><span class="pun">);</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="com">/// &lt;summary&gt;</span><span class="pln">
        </span><span class="com">/// Runs DecryptSecureString with support for Action to leverage void return type</span><span class="pln">
        </span><span class="com">/// &lt;/summary&gt;</span><span class="pln">
        </span><span class="com">/// &lt;param name="secureString"&gt;&lt;/param&gt;</span><span class="pln">
        </span><span class="com">/// &lt;param name="action"&gt;&lt;/param&gt;</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">DecryptSecureString</span><span class="pun">(</span><span class="typ">SecureString</span><span class="pln"> secureString</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Action</span><span class="str">&lt;string&gt;</span><span class="pln"> action</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">DecryptSecureString</span><span class="str">&lt;int&gt;</span><span class="pun">(</span><span class="pln">secureString</span><span class="pun">,</span><span class="pln"> </span><span class="pun">(</span><span class="pln">s</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                action</span><span class="pun">(</span><span class="pln">s</span><span class="pun">);</span><span class="pln">
                </span><span class="kwd">return</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
            </span><span class="pun">});</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p><strong>StringsTest.cs</strong></p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="pln">using </span><span class="typ">Microsoft</span><span class="pun">.</span><span class="typ">VisualStudio</span><span class="pun">.</span><span class="typ">TestTools</span><span class="pun">.</span><span class="typ">UnitTesting</span><span class="pun">;</span><span class="pln">
using </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Security</span><span class="pun">;</span><span class="pln">

namespace </span><span class="typ">SecurityUtils</span><span class="pun">.</span><span class="typ">Test</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="pun">[</span><span class="typ">TestClass</span><span class="pun">]</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">StringsTest</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="pun">[</span><span class="typ">TestMethod</span><span class="pun">]</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">DecryptSecureStringWithFunc</span><span class="pun">()</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="com">// Arrange</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> secureString </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SecureString</span><span class="pun">();</span><span class="pln">

            </span><span class="kwd">foreach</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> c </span><span class="kwd">in</span><span class="pln"> </span><span class="str">"UserPassword123"</span><span class="pun">.</span><span class="typ">ToCharArray</span><span class="pun">())</span><span class="pln">
                secureString</span><span class="pun">.</span><span class="typ">AppendChar</span><span class="pun">(</span><span class="pln">c</span><span class="pun">);</span><span class="pln">

            secureString</span><span class="pun">.</span><span class="typ">MakeReadOnly</span><span class="pun">();</span><span class="pln">

            </span><span class="com">// Act</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Strings</span><span class="pun">.</span><span class="typ">DecryptSecureString</span><span class="str">&lt;bool&gt;</span><span class="pun">(</span><span class="pln">secureString</span><span class="pun">,</span><span class="pln"> </span><span class="pun">(</span><span class="pln">password</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">return</span><span class="pln"> password</span><span class="pun">.</span><span class="typ">Equals</span><span class="pun">(</span><span class="str">"UserPassword123"</span><span class="pun">);</span><span class="pln">
            </span><span class="pun">});</span><span class="pln">

            </span><span class="com">// Assert</span><span class="pln">
            </span><span class="typ">Assert</span><span class="pun">.</span><span class="typ">IsTrue</span><span class="pun">(</span><span class="pln">result</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="pun">[</span><span class="typ">TestMethod</span><span class="pun">]</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">DecryptSecureStringWithAction</span><span class="pun">()</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="com">// Arrange</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> secureString </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SecureString</span><span class="pun">();</span><span class="pln">

            </span><span class="kwd">foreach</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> c </span><span class="kwd">in</span><span class="pln"> </span><span class="str">"UserPassword123"</span><span class="pun">.</span><span class="typ">ToCharArray</span><span class="pun">())</span><span class="pln">
                secureString</span><span class="pun">.</span><span class="typ">AppendChar</span><span class="pun">(</span><span class="pln">c</span><span class="pun">);</span><span class="pln">

            secureString</span><span class="pun">.</span><span class="typ">MakeReadOnly</span><span class="pun">();</span><span class="pln">

            </span><span class="com">// Act</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">

            </span><span class="typ">Strings</span><span class="pun">.</span><span class="typ">DecryptSecureString</span><span class="pun">(</span><span class="pln">secureString</span><span class="pun">,</span><span class="pln"> </span><span class="pun">(</span><span class="pln">password</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                result </span><span class="pun">=</span><span class="pln"> password</span><span class="pun">.</span><span class="typ">Equals</span><span class="pun">(</span><span class="str">"UserPassword123"</span><span class="pun">);</span><span class="pln">
            </span><span class="pun">});</span><span class="pln">

            </span><span class="com">// Assert</span><span class="pln">
            </span><span class="typ">Assert</span><span class="pun">.</span><span class="typ">IsTrue</span><span class="pun">(</span><span class="pln">result</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>Obviously, this doesn't prevent abuse of this function in the following manner, so just be careful not to do this:</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="pun">[</span><span class="typ">TestMethod</span><span class="pun">]</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">DecryptSecureStringWithAction</span><span class="pun">()</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="com">// Arrange</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> secureString </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SecureString</span><span class="pun">();</span><span class="pln">

    </span><span class="kwd">foreach</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> c </span><span class="kwd">in</span><span class="pln"> </span><span class="str">"UserPassword123"</span><span class="pun">.</span><span class="typ">ToCharArray</span><span class="pun">())</span><span class="pln">
        secureString</span><span class="pun">.</span><span class="typ">AppendChar</span><span class="pun">(</span><span class="pln">c</span><span class="pun">);</span><span class="pln">

    secureString</span><span class="pun">.</span><span class="typ">MakeReadOnly</span><span class="pun">();</span><span class="pln">

    </span><span class="com">// Act</span><span class="pln">
    </span><span class="kwd">string</span><span class="pln"> copyPassword </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span><span class="pln">

    </span><span class="typ">Strings</span><span class="pun">.</span><span class="typ">DecryptSecureString</span><span class="pun">(</span><span class="pln">secureString</span><span class="pun">,</span><span class="pln"> </span><span class="pun">(</span><span class="pln">password</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        copyPassword </span><span class="pun">=</span><span class="pln"> password</span><span class="pun">;</span><span class="pln"> </span><span class="com">// Please don't do this!</span><span class="pln">
    </span><span class="pun">});</span><span class="pln">

    </span><span class="com">// Assert</span><span class="pln">
    </span><span class="typ">Assert</span><span class="pun">.</span><span class="typ">IsNull</span><span class="pun">(</span><span class="pln">copyPassword</span><span class="pun">);</span><span class="pln"> </span><span class="com">// Fails</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>Happy coding!</p>
</div></text><author><a href="/users/901156/rdev5">rdev5</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>In my opinion, extension methods are the most comfortable way to solve this. I took <a href="http://stackoverflow.com/users/3885063/steve-in-co">Steve in CO's</a> <a href="http://stackoverflow.com/a/25751722/1016343">excellent answer</a> and put it into an extension class as follows, together with a second method I added to support the other direction as well:</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Extensions</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="com">// convert a secure string into a normal plain text string</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> </span><span class="typ">ToPlainString</span><span class="pun">(</span><span class="kwd">this</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Security</span><span class="pun">.</span><span class="typ">SecureString</span><span class="pln"> secureStr</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">String</span><span class="pln"> plainStr</span><span class="pun">=</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Net</span><span class="pun">.</span><span class="typ">NetworkCredential</span><span class="pun">(</span><span class="kwd">string</span><span class="pun">.</span><span class="typ">Empty</span><span class="pun">,</span><span class="pln"> secureStr</span><span class="pun">).</span><span class="typ">Password</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> plainStr</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="com">// convert a plain text string into a secure string</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Security</span><span class="pun">.</span><span class="typ">SecureString</span><span class="pln"> </span><span class="typ">ToSecureString</span><span class="pun">(</span><span class="kwd">this</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> plainStr</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> secStr </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Security</span><span class="pun">.</span><span class="typ">SecureString</span><span class="pun">();</span><span class="pln"> secStr</span><span class="pun">.</span><span class="typ">Clear</span><span class="pun">();</span><span class="pln">
        </span><span class="kwd">foreach</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">char</span><span class="pln"> c </span><span class="kwd">in</span><span class="pln"> plainStr</span><span class="pun">.</span><span class="typ">ToCharArray</span><span class="pun">())</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            secStr</span><span class="pun">.</span><span class="typ">AppendChar</span><span class="pun">(</span><span class="pln">c</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> secStr</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>With this, you can now simply convert your strings back and forth like so:</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="com">// create a secure string</span><span class="pln">
</span><span class="typ">System</span><span class="pun">.</span><span class="typ">Security</span><span class="pun">.</span><span class="typ">SecureString</span><span class="pln"> securePassword </span><span class="pun">=</span><span class="pln"> </span><span class="str">"MyCleverPwd123"</span><span class="pun">.</span><span class="typ">ToSecureString</span><span class="pun">();</span><span class="pln"> 
</span><span class="com">// convert it back to plain text</span><span class="pln">
</span><span class="typ">String</span><span class="pln"> plainPassword </span><span class="pun">=</span><span class="pln"> securePassword</span><span class="pun">.</span><span class="typ">ToPlainString</span><span class="pun">();</span><span class="pln">  </span><span class="com">// convert back to normal string</span></code></pre>
<p>But keep in mind the decoding method should only be used for testing.</p>
</div></text><author><a href="/users/1016343/matt">Matt</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="com">// using so that Marshal doesn't have to be qualified</span><span class="pln">
using </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Runtime</span><span class="pun">.</span><span class="typ">InteropServices</span><span class="pun">;</span><span class="pln">    
</span><span class="com">//using for SecureString</span><span class="pln">
using </span><span class="typ">System</span><span class="pun">.</span><span class="typ">Security</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">DecodeSecureString</span><span class="pln"> </span><span class="pun">(</span><span class="typ">SecureString</span><span class="pln"> </span><span class="typ">Convert</span><span class="pun">)</span><span class="pln"> 
</span><span class="pun">{</span><span class="pln">
    </span><span class="com">//convert to IntPtr using Marshal</span><span class="pln">
    </span><span class="typ">IntPtr</span><span class="pln"> cvttmpst </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Marshal</span><span class="pun">.</span><span class="typ">SecureStringToBSTR</span><span class="pun">(</span><span class="typ">Convert</span><span class="pun">);</span><span class="pln">
    </span><span class="com">//convert to string using Marshal</span><span class="pln">
    </span><span class="kwd">string</span><span class="pln"> cvtPlainPassword </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Marshal</span><span class="pun">.</span><span class="typ">PtrToStringAuto</span><span class="pun">(</span><span class="pln">cvttmpst</span><span class="pun">);</span><span class="pln">
    </span><span class="com">//return the now plain string</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> cvtPlainPassword</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/4450038/jesse-motes">Jesse Motes</a></author><comments><comment><text><span class="comment-copy">This answer has a memory leak.</span></text><author><a class="comment-user" href="/users/103167/ben-voigt" title="212,096 reputation">Ben Voigt</a></author></comment><comment><text><span class="comment-copy">@BenVoigt Can you explain further please how this has a memory leak?</span></text><author><a class="comment-user" href="/users/395628/el-ronnoco" title="7,793 reputation">El Ronnoco</a></author></comment><comment><text><span class="comment-copy">@ElRonnoco: Nothing frees the <code>BSTR</code> explicitly, and it's not a .NET object so the garbage collector doesn't take care of it either.  Compare to <a href="http://stackoverflow.com/a/818709/103167">stackoverflow.com/a/818709/103167</a> which was posted 5 years earlier and doesn't leak.</span></text><author><a class="comment-user" href="/users/103167/ben-voigt" title="212,096 reputation">Ben Voigt</a></author></comment><comment><text><span class="comment-copy">@BenVoigt Thanks for the response! :)</span></text><author><a class="comment-user" href="/users/395628/el-ronnoco" title="7,793 reputation">El Ronnoco</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>If you use a <code>StringBuilder</code> instead of a <code>string</code>, you can overwrite the actual value in memory when you are done. That way the password won't hang around in memory until garbage collection picks it up.</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="typ">StringBuilder</span><span class="pun">.</span><span class="typ">Append</span><span class="pun">(</span><span class="pln">plainTextPassword</span><span class="pun">);</span><span class="pln">
</span><span class="typ">StringBuilder</span><span class="pun">.</span><span class="typ">Clear</span><span class="pun">();</span><span class="pln">
</span><span class="com">// overwrite with reasonably random characters</span><span class="pln">
</span><span class="typ">StringBuilder</span><span class="pun">.</span><span class="typ">Append</span><span class="pun">(</span><span class="typ">New</span><span class="pln"> </span><span class="typ">Guid</span><span class="pun">().</span><span class="typ">ToString</span><span class="pun">());</span></code></pre>
</div></text><author><a href="/users/6053889/michael-liben">Michael Liben</a></author><comments><comment><text><span class="comment-copy">While this is true, the garbage collector may still move the StringBuilder buffer around in memory during generational compaction, which makes the "overwrite the actual value" fail, because there is another (or more) leftover copy that isn't destroyed.</span></text><author><a class="comment-user" href="/users/103167/ben-voigt" title="212,096 reputation">Ben Voigt</a></author></comment><comment><text><span class="comment-copy">This doesn't even remotely answer the question.</span></text><author><a class="comment-user" href="/users/432294/jay-sullivan" title="6,605 reputation">Jay Sullivan</a></author></comment></comments></answer></answers></post>