<?xml version="1.0" encoding="utf-8"?>
<post><title>javascript - Secure distribution of NodeJS applications - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p><strong>What:</strong> Can NodeJS apps be distributed as binary? ie. you compile the .js app via V8 into its native binary, and distribute the binary to clients? (if you had total access to the NodeJS server)... or is minifying the code all you can do?</p>
<p><strong>Why:</strong> We build serverside applications in NodeJS for clients, that have often to be hosted on the client's servers. Distributing source code means clients can easily steal our solution and stop paying licensing fees. This opens up the possibility of easy reverse-engineering or reuse of our apps without our awareness.</p>
</div></text><author><a href="/users/41021/jarvis">Jarvis</a></author><comments><comment><text><span class="comment-copy">See <a href="http://stackoverflow.com/questions/8040423/node-js-code-protection">Node.js code protection</a> and <a href="http://stackoverflow.com/questions/6145561/is-there-a-way-to-compile-node-js-source-files">Is there a way to compile node.js source files?</a>. It's not easily possible.</span></text><author><a class="comment-user" href="/users/938089/rob-w" title="222,654 reputation">Rob W</a></author></comment><comment><text><span class="comment-copy">What you have is <a href="http://programmers.stackexchange.com/q/66616/9097">not really a technical problem</a>.</span></text><author><a class="comment-user" href="/users/201952/josh3736" title="80,691 reputation">josh3736</a></author></comment><comment><text><span class="comment-copy">More discussion here: <a href="http://groups.google.com/group/nodejs/browse_thread/thread/98f21cab99878a13" rel="nofollow noreferrer">groups.google.com/group/nodejs/browse_thread/thread/â€¦</a></span></text><author><a class="comment-user" href="/users/347353/pooria-azimi" title="6,330 reputation">Pooria Azimi</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Yes you can create a binary format. V8 allows you to pre-compile JavaScript. Note that this might have a bunch of weird side-effects on assumptions made by node core.</p>
<blockquote>
<p>Distributing source code means clients can easily steal our solution and stop paying licensing fees.</p>
</blockquote>
<p>Just because you distribute the binary doesn't protect you againsts theft. They can still steal the binary code or disassemble it. This is protection through obscurity which is no protection at all.</p>
<p>It's better to give them a thin client app that talks to your server and keep your server code secure by not giving it away.</p>
</div></text><author><a href="/users/419970/raynos">Raynos</a></author><comments><comment><text><span class="comment-copy">@James Andino: But, even if you could compile the code, what's preventing someone from taking the executable and data files and installing them on another machine? Compiling code isn't analogous to locking a car. Compiling is a performance and packaging measure, not a security measure.</span></text><author><a class="comment-user" href="/users/300213/user4815162342" title="1,103 reputation">user4815162342</a></author></comment><comment><text><span class="comment-copy">well my only defense to that logic is name calling.</span></text><author><a class="comment-user" href="/users/310678/prospero" title="6,783 reputation">Prospero</a></author></comment><comment><text><span class="comment-copy">These things are generally a losing race. However many resources you pump into "securing this" the other side will have more resources. You should simply not worry about this and ensure your business isn't dependent on the magic sauce in your code but on actual non-code value your company produces.</span></text><author><a class="comment-user" href="/users/419970/raynos" title="116,509 reputation">Raynos</a></author></comment><comment><text><span class="comment-copy">+1 for the suggestion of thin client app. Putting critical business logic server-side is more "secure" than distributing executable with the same business logic. Disassembling binaries (and patching them for nefarious purposes) is very easy to do with current tools at today's date.</span></text><author><a class="comment-user" href="/users/3713/spoike" title="51,679 reputation">Spoike</a></author></comment><comment><text><span class="comment-copy">The way Nodejs has been evolving, the best way would definitely be a thin client. I agree with @JamesAndino on the analogy though :P I mean, by obfuscating, the developer is just setting the bar <b>higher</b>, so there will be lesser people who can do the reverse engineering. Although, with nodejs, it would not be worth the effort to take so much headache. Try pitching a "thin client" approach to your client.</span></text><author><a class="comment-user" href="/users/630170/kumar-harsh" title="10,205 reputation">kumar_harsh</a></author></comment><comment><text><span class="comment-copy">Sometimes clients are so secure as prevent any internet access. I.e. there are use cases when your business logic must be on client's server. So the  problem of securing node.js server code is quite actual.</span></text><author><a class="comment-user" href="/users/4053283/dzenly" title="359 reputation">Dzenly</a></author></comment><comment><text><span class="comment-copy">Agree w @Dzenly. In addition, "protection through obscurity which is no protection at all" is false. as kumar_harsh points out, it merely raises the bar, BUT just because the bar is not insurmountable doesn't mean it doesn't provide value-- otherwise you could say the same of any security system. This is especially true for enterprise products. Also, clients that require high security are more likely to have strong controls that make it difficult, possibly a fireable offense, for employees to reverse engineer their vendors' products.</span></text><author><a class="comment-user" href="/users/3160967/mwag" title="499 reputation">mwag</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Yes it is possible, use this <a href="https://github.com/tarruda/node/tree/custom-v8-dist" rel="noreferrer">branch</a>(based on 0.8.18) and any js code you put in 'deps/v8/src/extra-snapshot.js' will be ahead-of-time compiled to machine code and embedded in v8 as part of the normal builtin object initialization. You will need to build nodejs for each platform you intend to deploy your product.</p>
<p>The snapshotted  code runs very early in the v8 initialization and you cannot access builtin objects in the 'module body'. What you can do is put all your code inside a global initialization function to be called later. Ex:</p>
<pre class="lang-js prettyprint prettyprinted" style=""><code><span class="com">// 'this' points to the same as the object referenced by </span><span class="pln">
</span><span class="com">// 'global' in normal nodejs code.</span><span class="pln">
</span><span class="com">// at this point it has nothing defined in it, so in order to use</span><span class="pln">
</span><span class="com">// global objects a reference to it is needed.</span><span class="pln">
</span><span class="kwd">var</span><span class="pln"> global </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">;</span><span class="pln">
global</span><span class="pun">.</span><span class="pln">initialize </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="com">// You have to define all global objects you use in your code here;</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> </span><span class="typ">Array</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> global</span><span class="pun">.</span><span class="typ">Array</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> </span><span class="typ">RegExp</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> global</span><span class="pun">.</span><span class="typ">RegExp</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> </span><span class="typ">Date</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> global</span><span class="pun">.</span><span class="typ">Date</span><span class="pun">;</span><span class="pln">
  </span><span class="com">// See ECMAScript v5 standard global objects for more</span><span class="pln">
  </span><span class="com">// Also define nodejs global objects:</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> console </span><span class="pun">=</span><span class="pln"> global</span><span class="pun">.</span><span class="pln">console</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> process </span><span class="pun">=</span><span class="pln"> global</span><span class="pun">.</span><span class="pln">process</span><span class="pun">;</span><span class="pln">
  </span><span class="com">// Your code goes embedded here</span><span class="pln">
</span><span class="pun">};</span></code></pre>
<p>Also, this assumes your entire code is defined in a single file, so if your project uses nodejs module system(require) you need to write a script that will combine all your files in one and wrap each file in a closure that will trick your code into thinking it is a normal nodejs module. Probably each module closure would expose a require function, and this function would have to decide when to delegate to the standard 'global.require' or return exports from your other embedded modules. See how javascript module systems are implemented for ideas(requirejs is a good example).</p>
<p>This will make your code harder to debug since you wont see stack traces for native code.</p>
<p>UPDATE:</p>
<p>Even using v8 snapshots the code gets embedded in the node.js binary because v8 prefers lazy compilation. See <a href="http://stackoverflow.com/questions/12653479/why-does-v8-saves-the-source-code-of-native-javascript-in-generated-binaries">this</a> for more information.</p>
</div></text><author><a href="/users/304141/thiago-de-arruda">Thiago de Arruda</a></author><comments><comment><text><span class="comment-copy">Thank you this is very useful I must try this.</span></text><author><a class="comment-user" href="/users/310678/prospero" title="6,783 reputation">Prospero</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p><a href="http://enclosejs.com/">EncloseJS</a>.</p>
<p>You get a fully functional binary without sources.</p>
<p>JavaScript code is transformed into native code at compile-time using V8 internal compiler. Hence, your sources are not required to execute the binary, and they are not packaged.</p>
<p>Perfectly optimized native code can be generated only at run-time based on the client's machine. Without that info EncloseJS can generate only "unoptimized" code. It runs about 2x slower than NodeJS.</p>
<p>Also, node.js runtime code is put inside the executable (along with your code) to support node API for your application at run-time.</p>
<p>Use cases:</p>
<ul>
<li>Make a commercial version of your application without sources.</li>
<li>Make a demo/evaluation/trial version of your app without sources.</li>
<li>Make some kind of self-extracting archive or installer.</li>
<li>Make a closed source GUI application using node-thrust.</li>
<li>No need to install node and npm to deploy the compiled application.</li>
<li>No need to download hundreds of files via npm install to deploy your application. Deploy it as a single independent file.</li>
<li>Put your assets inside the executable to make it even more portable.
Test your app against new node version without installing it.</li>
</ul>
</div></text><author><a href="/users/1294758/harsh-gupta">Harsh Gupta</a></author><comments><comment><text><span class="comment-copy">The license of EncloseJS doesn't allow commercial use.</span></text><author><a class="comment-user" href="/users/94148/aleung" title="3,548 reputation">aleung</a></author></comment><comment><text><span class="comment-copy">Sorry, but it does, you just have to contact the dev. Free for non commercial use does not mean you cannot use it. It means you will have to pay to use it.</span></text><author><a class="comment-user" href="/users/3540247/alexis-paques" title="841 reputation">Alexis Paques</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I'm currently investigating the same thing and am looking at <a href="https://github.com/crcn/nexe" rel="nofollow">nexe</a> which claims to be able to "create a single executable out of your node.js apps". </p>
<p>Can't tell you if it's any good just yet, but thought it'd be worth to share already.</p>
</div></text><author><a href="/users/151666/kvz">kvz</a></author><comments><comment><text><span class="comment-copy">it wants xcode in macos</span></text><author><a class="comment-user" href="/users/1347601/bruno-bg" title="2,194 reputation">Bruno BG</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>V8 generates native machine code internally and executes it. Look here: <a href="https://github.com/v8/v8-git-mirror/blob/master/src/compiler.cc#L1178" rel="nofollow">https://github.com/v8/v8-git-mirror/blob/master/src/compiler.cc#L1178</a> . This feature is used in <a href="http://enclosejs.com" rel="nofollow">EncloseJS</a>. EncloseJS parses the sources of your node.js project, bundles dependencies, and makes an executable binary. The sources are not included in the binary - only compiled machine code.</p>
</div></text><author><a href="/users/1971918/igor-klopov">Igor Klopov</a></author><comments><comment><text><span class="comment-copy">It is only the lazy compiled native code ! (2 times slower than the optimized one they say)</span></text><author><a class="comment-user" href="/users/3540247/alexis-paques" title="841 reputation">Alexis Paques</a></author></comment></comments></answer></answers></post>