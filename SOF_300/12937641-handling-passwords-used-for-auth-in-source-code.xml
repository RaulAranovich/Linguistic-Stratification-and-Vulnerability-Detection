<?xml version="1.0" encoding="utf-8"?>
<post><title>java - Handling passwords used for auth in source code - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>Assuming that I'm trying to pull from a RESTful api that uses basic authentication / basic certificates, what would be the best way to store that user name and password in my program?   Right now it's just sitting there in plaintext.</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="typ">UsernamePasswordCredentials</span><span class="pln"> creds </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">UsernamePasswordCredentials</span><span class="pun">(</span><span class="str">"myName@myserver"</span><span class="pun">,</span><span class="str">"myPassword1234"</span><span class="pun">);</span></code></pre>
<p>Is there some way of doing this that is more security minded?</p>
<p>Thanks</p>
</div></text><author><a href="/users/1146032/a-elric">A_Elric</a></author><comments><comment><text><span class="comment-copy">The answer depends on the following things: Do you want to distribute the app? Is the user/password based on the user of the application, or is it some kind of API key? Do you want to protect the user/password from the local user (some kind of DRM) ?</span></text><author><a class="comment-user" href="/users/944336/parasietje" title="990 reputation">parasietje</a></author></comment><comment><text><span class="comment-copy">It's actually a program running on a backend, but it's really more about style.   I shouldn't have the Username / Password to an account that houses classified-level information in plaintext.</span></text><author><a class="comment-user owner" href="/users/1146032/a-elric" title="851 reputation">A_Elric</a></author></comment><comment><text><span class="comment-copy">take a look at this thread <a href="http://stackoverflow.com/questions/12198228/not-decrypting-what-i-crypted" title="not decrypting what i crypted">stackoverflow.com/questions/12198228/â€¦</a> and you'll get the general idea.</span></text><author><a class="comment-user" href="/users/1101692/shark" title="4,240 reputation">Shark</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>With an inner-to-outer mindset, here are some steps to protect your process:</p>
<hr/>
<p>First step, you should change your password-handling from <code>String</code> to <code>character array</code>.</p>
<p>The reason for this is that a <code>String</code> object's data will not be cleansed immediately even if the object is set to <code>null</code>; The data is set for garbage-collection instead, and this poses security problems because malicious programs might gain access to that <code>String</code> (password) data before it is cleaned.</p>
<p>This is the main reason why <a href="http://docs.oracle.com/javase/6/docs/api/javax/swing/JPasswordField.html#getText%28%29" rel="noreferrer">Swing's JPasswordField's <code>getText()</code></a> method is deprecated, and why <a href="http://docs.oracle.com/javase/6/docs/api/javax/swing/JPasswordField.html#getPassword%28%29" rel="noreferrer"><code>getPassword()</code> uses character arrays</a>.</p>
<hr/>
<p>The second step is to encrypt your credentials, only decrypting them temporarily during the authentication process.</p>
<p>This, similarly to the first step, makes sure your vulnerability-time is as small as possible.</p>
<p>It is recommended that your credentials are not hard-coded, and that instead, you store them in a centralized, configurable and easily-maintainable manner, such as a configuration or properties file.</p>
<p>You should encrypt your credentials before saving the file, and additionally, you can apply a second encryption to the file itself (2-layer encryption to the credentials, and 1-layer to other file contents).</p>
<p>Note that each of the two encryption processes mentioned above can be multiple-layered themselves. Each encryption can be an individual application of <a href="http://en.wikipedia.org/wiki/Triple_DES" rel="noreferrer">Triple Data Encryption Standard (AKA TDES and 3DES)</a>, as a conceptual example.</p>
<hr/>
<p>After your local environment is properly protected (but remember, it's never ever "safe"!), the third step is apply basic protection to your transmission process, by using <a href="http://en.wikipedia.org/wiki/Secure_Sockets_Layer" rel="noreferrer">TLS (Transport Layer Security) or SSL (Secure Sockets Layer)</a>.</p>
<hr/>
<p>The forth step is to apply other protection methods.</p>
<p>For example, applying obfuscation techniques to your "to-use" compile, to avoid (even if shortly) the exposure of your security measures in case your program is obtained by <a href="http://en.wikipedia.org/wiki/Alice_and_Bob" rel="noreferrer">Ms. Eve, Mr. Mallory, or someone else (the bad-guys)</a> and decompiled.</p>
<hr/>
<p><strong>UPDATE 1:</strong></p>
<p>By @Damien.Bell 's request, here is an example that covers the first and second steps:</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="pln">    </span><span class="com">//These will be used as the source of the configuration file's stored attributes.</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="typ">Map</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> COMMON_ATTRIBUTES </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HashMap</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pun">&gt;();</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="typ">Map</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">[]&gt;</span><span class="pln"> SECURE_ATTRIBUTES </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HashMap</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">[]&gt;();</span><span class="pln">
    </span><span class="com">//Ciphering (encryption and decryption) password/key.</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">[]</span><span class="pln"> PASSWORD </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Unauthorized_Personel_Is_Unauthorized"</span><span class="pun">.</span><span class="pln">toCharArray</span><span class="pun">();</span><span class="pln">
    </span><span class="com">//Cipher salt.</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> SALT </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="pun">(</span><span class="kwd">byte</span><span class="pun">)</span><span class="pln"> </span><span class="lit">0xde</span><span class="pun">,</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">byte</span><span class="pun">)</span><span class="pln"> </span><span class="lit">0x33</span><span class="pun">,</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">byte</span><span class="pun">)</span><span class="pln"> </span><span class="lit">0x10</span><span class="pun">,</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">byte</span><span class="pun">)</span><span class="pln"> </span><span class="lit">0x12</span><span class="pun">,</span><span class="pln">
        </span><span class="pun">(</span><span class="kwd">byte</span><span class="pun">)</span><span class="pln"> </span><span class="lit">0xde</span><span class="pun">,</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">byte</span><span class="pun">)</span><span class="pln"> </span><span class="lit">0x33</span><span class="pun">,</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">byte</span><span class="pun">)</span><span class="pln"> </span><span class="lit">0x10</span><span class="pun">,</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">byte</span><span class="pun">)</span><span class="pln"> </span><span class="lit">0x12</span><span class="pun">,};</span><span class="pln">
    </span><span class="com">//Desktop dir:</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="typ">File</span><span class="pln"> DESKTOP </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">File</span><span class="pun">(</span><span class="typ">System</span><span class="pun">.</span><span class="pln">getProperty</span><span class="pun">(</span><span class="str">"user.home"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="str">"/Desktop"</span><span class="pun">);</span><span class="pln">
    </span><span class="com">//File names:</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> NO_ENCRYPTION </span><span class="pun">=</span><span class="pln"> </span><span class="str">"no_layers.txt"</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> SINGLE_LAYER </span><span class="pun">=</span><span class="pln"> </span><span class="str">"single_layer.txt"</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> DOUBLE_LAYER </span><span class="pun">=</span><span class="pln"> </span><span class="str">"double_layer.txt"</span><span class="pun">;</span><span class="pln">

    </span><span class="com">/**
     * @param args the command line arguments
     */</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">GeneralSecurityException</span><span class="pun">,</span><span class="pln"> </span><span class="typ">FileNotFoundException</span><span class="pun">,</span><span class="pln"> </span><span class="typ">IOException</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="com">//Set common attributes.</span><span class="pln">
        COMMON_ATTRIBUTES</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"Gender"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Male"</span><span class="pun">);</span><span class="pln">
        COMMON_ATTRIBUTES</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"Age"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"21"</span><span class="pun">);</span><span class="pln">
        COMMON_ATTRIBUTES</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"Name"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Hypot Hetical"</span><span class="pun">);</span><span class="pln">
        COMMON_ATTRIBUTES</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"Nickname"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"HH"</span><span class="pun">);</span><span class="pln">

        </span><span class="com">/*
         * Set secure attributes.
         * NOTE: Ignore the use of Strings here, it's being used for convenience only.
         * In real implementations, JPasswordField.getPassword() would send the arrays directly.
         */</span><span class="pln">
        SECURE_ATTRIBUTES</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"Username"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Hypothetical"</span><span class="pun">.</span><span class="pln">toCharArray</span><span class="pun">());</span><span class="pln">
        SECURE_ATTRIBUTES</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"Password"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"LetMePass_Word"</span><span class="pun">.</span><span class="pln">toCharArray</span><span class="pun">());</span><span class="pln">

        </span><span class="com">/*
         * For demosntration purposes, I make the three encryption layer-levels I mention.
         * To leave no doubt the code works, I use real file IO.
         */</span><span class="pln">
        </span><span class="com">//File without encryption.</span><span class="pln">
        create_EncryptedFile</span><span class="pun">(</span><span class="pln">NO_ENCRYPTION</span><span class="pun">,</span><span class="pln"> COMMON_ATTRIBUTES</span><span class="pun">,</span><span class="pln"> SECURE_ATTRIBUTES</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln">
        </span><span class="com">//File with encryption to secure attributes only.</span><span class="pln">
        create_EncryptedFile</span><span class="pun">(</span><span class="pln">SINGLE_LAYER</span><span class="pun">,</span><span class="pln"> COMMON_ATTRIBUTES</span><span class="pun">,</span><span class="pln"> SECURE_ATTRIBUTES</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span><span class="pln">
        </span><span class="com">//File completely encrypted, including re-encryption of secure attributes.</span><span class="pln">
        create_EncryptedFile</span><span class="pun">(</span><span class="pln">DOUBLE_LAYER</span><span class="pun">,</span><span class="pln"> COMMON_ATTRIBUTES</span><span class="pun">,</span><span class="pln"> SECURE_ATTRIBUTES</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">);</span><span class="pln">

        </span><span class="com">/*
         * Show contents of all three encryption levels, from file.
         */</span><span class="pln">
        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"NO ENCRYPTION: \n"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> readFile_NoDecryption</span><span class="pun">(</span><span class="pln">NO_ENCRYPTION</span><span class="pun">)</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="str">"\n\n\n"</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"SINGLE LAYER ENCRYPTION: \n"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> readFile_NoDecryption</span><span class="pun">(</span><span class="pln">SINGLE_LAYER</span><span class="pun">)</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="str">"\n\n\n"</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"DOUBLE LAYER ENCRYPTION: \n"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> readFile_NoDecryption</span><span class="pun">(</span><span class="pln">DOUBLE_LAYER</span><span class="pun">)</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="str">"\n\n\n"</span><span class="pun">);</span><span class="pln">

        </span><span class="com">/*
         * Decryption is demonstrated with the Double-Layer encryption file.
         */</span><span class="pln">
        </span><span class="com">//Descrypt first layer. (file content) (REMEMBER: Layers are in reverse order from writing).</span><span class="pln">
        </span><span class="typ">String</span><span class="pln"> decryptedContent </span><span class="pun">=</span><span class="pln"> readFile_ApplyDecryption</span><span class="pun">(</span><span class="pln">DOUBLE_LAYER</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"READ: [first layer decrypted]\n"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> decryptedContent </span><span class="pun">+</span><span class="pln"> </span><span class="str">"\n\n\n"</span><span class="pun">);</span><span class="pln">
        </span><span class="com">//Decrypt second layer (secure data).</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="typ">String</span><span class="pln"> line </span><span class="pun">:</span><span class="pln"> decryptedContent</span><span class="pun">.</span><span class="pln">split</span><span class="pun">(</span><span class="str">"\n"</span><span class="pun">))</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> pair </span><span class="pun">=</span><span class="pln"> line</span><span class="pun">.</span><span class="pln">split</span><span class="pun">(</span><span class="str">": "</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">);</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">pair</span><span class="pun">[</span><span class="lit">0</span><span class="pun">].</span><span class="pln">equalsIgnoreCase</span><span class="pun">(</span><span class="str">"Username"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> pair</span><span class="pun">[</span><span class="lit">0</span><span class="pun">].</span><span class="pln">equalsIgnoreCase</span><span class="pun">(</span><span class="str">"Password"</span><span class="pun">))</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Decrypted: "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> pair</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="str">": "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> decrypt</span><span class="pun">(</span><span class="pln">pair</span><span class="pun">[</span><span class="lit">1</span><span class="pun">]));</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> encrypt</span><span class="pun">(</span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> property</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">GeneralSecurityException</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">SecretKeyFactory</span><span class="pln"> keyFactory </span><span class="pun">=</span><span class="pln"> </span><span class="typ">SecretKeyFactory</span><span class="pun">.</span><span class="pln">getInstance</span><span class="pun">(</span><span class="str">"PBEWithMD5AndDES"</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">SecretKey</span><span class="pln"> key </span><span class="pun">=</span><span class="pln"> keyFactory</span><span class="pun">.</span><span class="pln">generateSecret</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">PBEKeySpec</span><span class="pun">(</span><span class="pln">PASSWORD</span><span class="pun">));</span><span class="pln">
        </span><span class="typ">Cipher</span><span class="pln"> pbeCipher </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Cipher</span><span class="pun">.</span><span class="pln">getInstance</span><span class="pun">(</span><span class="str">"PBEWithMD5AndDES"</span><span class="pun">);</span><span class="pln">
        pbeCipher</span><span class="pun">.</span><span class="pln">init</span><span class="pun">(</span><span class="typ">Cipher</span><span class="pun">.</span><span class="pln">ENCRYPT_MODE</span><span class="pun">,</span><span class="pln"> key</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">PBEParameterSpec</span><span class="pun">(</span><span class="pln">SALT</span><span class="pun">,</span><span class="pln"> </span><span class="lit">20</span><span class="pun">));</span><span class="pln">

        </span><span class="com">//Encrypt and save to temporary storage.</span><span class="pln">
        </span><span class="typ">String</span><span class="pln"> encrypted </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Base64</span><span class="pun">.</span><span class="pln">encodeBytes</span><span class="pun">(</span><span class="pln">pbeCipher</span><span class="pun">.</span><span class="pln">doFinal</span><span class="pun">(</span><span class="pln">property</span><span class="pun">));</span><span class="pln">

        </span><span class="com">//Cleanup data-sources - Leave no traces behind.</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> property</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            property</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        property </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span><span class="pln">
        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">gc</span><span class="pun">();</span><span class="pln">

        </span><span class="com">//Return encryption result.</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> encrypted</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> encrypt</span><span class="pun">(</span><span class="kwd">char</span><span class="pun">[]</span><span class="pln"> property</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">GeneralSecurityException</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="com">//Prepare and encrypt.</span><span class="pln">
        </span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> bytes </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">byte</span><span class="pun">[</span><span class="pln">property</span><span class="pun">.</span><span class="pln">length</span><span class="pun">];</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> property</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            bytes</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">byte</span><span class="pun">)</span><span class="pln"> property</span><span class="pun">[</span><span class="pln">i</span><span class="pun">];</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="typ">String</span><span class="pln"> encrypted </span><span class="pun">=</span><span class="pln"> encrypt</span><span class="pun">(</span><span class="pln">bytes</span><span class="pun">);</span><span class="pln">

        </span><span class="com">/*
         * Cleanup property here. (child data-source 'bytes' is cleaned inside 'encrypt(byte[])').
         * It's not being done because the sources are being used multiple times for the different layer samples.
         */</span><span class="pln">
</span><span class="com">//      for (int i = 0; i &lt; property.length; i++) { //cleanup allocated data.</span><span class="pln">
</span><span class="com">//          property[i] = 0;</span><span class="pln">
</span><span class="com">//      }</span><span class="pln">
</span><span class="com">//      property = null; //de-allocate data (set for GC).</span><span class="pln">
</span><span class="com">//      System.gc(); //Attempt triggering garbage-collection.</span><span class="pln">

        </span><span class="kwd">return</span><span class="pln"> encrypted</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> encrypt</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> property</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">GeneralSecurityException</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">String</span><span class="pln"> encrypted </span><span class="pun">=</span><span class="pln"> encrypt</span><span class="pun">(</span><span class="pln">property</span><span class="pun">.</span><span class="pln">getBytes</span><span class="pun">());</span><span class="pln">
        </span><span class="com">/*
         * Strings can't really have their allocated data cleaned before CG,
         * that's why secure data should be handled with char[] or byte[].
         * Still, don't forget to set for GC, even for data of sesser importancy;
         * You are making everything safer still, and freeing up memory as bonus.
         */</span><span class="pln">
        property </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> encrypted</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> decrypt</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> property</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">GeneralSecurityException</span><span class="pun">,</span><span class="pln"> </span><span class="typ">IOException</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">SecretKeyFactory</span><span class="pln"> keyFactory </span><span class="pun">=</span><span class="pln"> </span><span class="typ">SecretKeyFactory</span><span class="pun">.</span><span class="pln">getInstance</span><span class="pun">(</span><span class="str">"PBEWithMD5AndDES"</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">SecretKey</span><span class="pln"> key </span><span class="pun">=</span><span class="pln"> keyFactory</span><span class="pun">.</span><span class="pln">generateSecret</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">PBEKeySpec</span><span class="pun">(</span><span class="pln">PASSWORD</span><span class="pun">));</span><span class="pln">
        </span><span class="typ">Cipher</span><span class="pln"> pbeCipher </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Cipher</span><span class="pun">.</span><span class="pln">getInstance</span><span class="pun">(</span><span class="str">"PBEWithMD5AndDES"</span><span class="pun">);</span><span class="pln">
        pbeCipher</span><span class="pun">.</span><span class="pln">init</span><span class="pun">(</span><span class="typ">Cipher</span><span class="pun">.</span><span class="pln">DECRYPT_MODE</span><span class="pun">,</span><span class="pln"> key</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">PBEParameterSpec</span><span class="pun">(</span><span class="pln">SALT</span><span class="pun">,</span><span class="pln"> </span><span class="lit">20</span><span class="pun">));</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">String</span><span class="pun">(</span><span class="pln">pbeCipher</span><span class="pun">.</span><span class="pln">doFinal</span><span class="pun">(</span><span class="typ">Base64</span><span class="pun">.</span><span class="pln">decode</span><span class="pun">(</span><span class="pln">property</span><span class="pun">)));</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> create_EncryptedFile</span><span class="pun">(</span><span class="pln">
                    </span><span class="typ">String</span><span class="pln"> fileName</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">Map</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> commonAttributes</span><span class="pun">,</span><span class="pln">
                    </span><span class="typ">Map</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">[]&gt;</span><span class="pln"> secureAttributes</span><span class="pun">,</span><span class="pln">
                    </span><span class="kwd">int</span><span class="pln"> layers</span><span class="pun">)</span><span class="pln">
                    </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">GeneralSecurityException</span><span class="pun">,</span><span class="pln"> </span><span class="typ">FileNotFoundException</span><span class="pun">,</span><span class="pln"> </span><span class="typ">IOException</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">StringBuilder</span><span class="pln"> sb </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">StringBuilder</span><span class="pun">();</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="typ">String</span><span class="pln"> k </span><span class="pun">:</span><span class="pln"> commonAttributes</span><span class="pun">.</span><span class="pln">keySet</span><span class="pun">())</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            sb</span><span class="pun">.</span><span class="pln">append</span><span class="pun">(</span><span class="pln">k</span><span class="pun">).</span><span class="pln">append</span><span class="pun">(</span><span class="str">": "</span><span class="pun">).</span><span class="pln">append</span><span class="pun">(</span><span class="pln">commonAttributes</span><span class="pun">.</span><span class="pln">get</span><span class="pun">(</span><span class="pln">k</span><span class="pun">)).</span><span class="pln">append</span><span class="pun">(</span><span class="typ">System</span><span class="pun">.</span><span class="pln">lineSeparator</span><span class="pun">());</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="com">//First encryption layer. Encrypts secure attribute values only.</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="typ">String</span><span class="pln"> k </span><span class="pun">:</span><span class="pln"> secureAttributes</span><span class="pun">.</span><span class="pln">keySet</span><span class="pun">())</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">String</span><span class="pln"> encryptedValue</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">layers </span><span class="pun">&gt;=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                encryptedValue </span><span class="pun">=</span><span class="pln"> encrypt</span><span class="pun">(</span><span class="pln">secureAttributes</span><span class="pun">.</span><span class="pln">get</span><span class="pun">(</span><span class="pln">k</span><span class="pun">));</span><span class="pln">
            </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                encryptedValue </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">String</span><span class="pun">(</span><span class="pln">secureAttributes</span><span class="pun">.</span><span class="pln">get</span><span class="pun">(</span><span class="pln">k</span><span class="pun">));</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
            sb</span><span class="pun">.</span><span class="pln">append</span><span class="pun">(</span><span class="pln">k</span><span class="pun">).</span><span class="pln">append</span><span class="pun">(</span><span class="str">": "</span><span class="pun">).</span><span class="pln">append</span><span class="pun">(</span><span class="pln">encryptedValue</span><span class="pun">).</span><span class="pln">append</span><span class="pun">(</span><span class="typ">System</span><span class="pun">.</span><span class="pln">lineSeparator</span><span class="pun">());</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="com">//Prepare file and file-writing process.</span><span class="pln">
        </span><span class="typ">File</span><span class="pln"> f </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">File</span><span class="pun">(</span><span class="pln">DESKTOP</span><span class="pun">,</span><span class="pln"> fileName</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">f</span><span class="pun">.</span><span class="pln">getParentFile</span><span class="pun">().</span><span class="pln">exists</span><span class="pun">())</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            f</span><span class="pun">.</span><span class="pln">getParentFile</span><span class="pun">().</span><span class="pln">mkdirs</span><span class="pun">();</span><span class="pln">
        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">f</span><span class="pun">.</span><span class="pln">exists</span><span class="pun">())</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            f</span><span class="pun">.</span><span class="kwd">delete</span><span class="pun">();</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="typ">BufferedWriter</span><span class="pln"> bw </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">BufferedWriter</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">FileWriter</span><span class="pun">(</span><span class="pln">f</span><span class="pun">));</span><span class="pln">
        </span><span class="com">//Second encryption layer. Encrypts whole file content including previously encrypted stuff.</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">layers </span><span class="pun">&gt;=</span><span class="pln"> </span><span class="lit">2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            bw</span><span class="pun">.</span><span class="pln">append</span><span class="pun">(</span><span class="pln">encrypt</span><span class="pun">(</span><span class="pln">sb</span><span class="pun">.</span><span class="pln">toString</span><span class="pun">().</span><span class="pln">trim</span><span class="pun">()));</span><span class="pln">
        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            bw</span><span class="pun">.</span><span class="pln">append</span><span class="pun">(</span><span class="pln">sb</span><span class="pun">.</span><span class="pln">toString</span><span class="pun">().</span><span class="pln">trim</span><span class="pun">());</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        bw</span><span class="pun">.</span><span class="pln">flush</span><span class="pun">();</span><span class="pln">
        bw</span><span class="pun">.</span><span class="pln">close</span><span class="pun">();</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> readFile_NoDecryption</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> fileName</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">FileNotFoundException</span><span class="pun">,</span><span class="pln"> </span><span class="typ">IOException</span><span class="pun">,</span><span class="pln"> </span><span class="typ">GeneralSecurityException</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">File</span><span class="pln"> f </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">File</span><span class="pun">(</span><span class="pln">DESKTOP</span><span class="pun">,</span><span class="pln"> fileName</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">BufferedReader</span><span class="pln"> br </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">BufferedReader</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">FileReader</span><span class="pun">(</span><span class="pln">f</span><span class="pun">));</span><span class="pln">
        </span><span class="typ">StringBuilder</span><span class="pln"> sb </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">StringBuilder</span><span class="pun">();</span><span class="pln">
        </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">br</span><span class="pun">.</span><span class="pln">ready</span><span class="pun">())</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            sb</span><span class="pun">.</span><span class="pln">append</span><span class="pun">(</span><span class="pln">br</span><span class="pun">.</span><span class="pln">readLine</span><span class="pun">()).</span><span class="pln">append</span><span class="pun">(</span><span class="typ">System</span><span class="pun">.</span><span class="pln">lineSeparator</span><span class="pun">());</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> sb</span><span class="pun">.</span><span class="pln">toString</span><span class="pun">();</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> readFile_ApplyDecryption</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> fileName</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">FileNotFoundException</span><span class="pun">,</span><span class="pln"> </span><span class="typ">IOException</span><span class="pun">,</span><span class="pln"> </span><span class="typ">GeneralSecurityException</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">File</span><span class="pln"> f </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">File</span><span class="pun">(</span><span class="pln">DESKTOP</span><span class="pun">,</span><span class="pln"> fileName</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">BufferedReader</span><span class="pln"> br </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">BufferedReader</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">FileReader</span><span class="pun">(</span><span class="pln">f</span><span class="pun">));</span><span class="pln">
        </span><span class="typ">StringBuilder</span><span class="pln"> sb </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">StringBuilder</span><span class="pun">();</span><span class="pln">
        </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">br</span><span class="pun">.</span><span class="pln">ready</span><span class="pun">())</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            sb</span><span class="pun">.</span><span class="pln">append</span><span class="pun">(</span><span class="pln">br</span><span class="pun">.</span><span class="pln">readLine</span><span class="pun">()).</span><span class="pln">append</span><span class="pun">(</span><span class="typ">System</span><span class="pun">.</span><span class="pln">lineSeparator</span><span class="pun">());</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> decrypt</span><span class="pun">(</span><span class="pln">sb</span><span class="pun">.</span><span class="pln">toString</span><span class="pun">());</span><span class="pln">
    </span><span class="pun">}</span></code></pre>
<p>A full example, addressing every protection step, would far exceed what I think is reasonable for this question, since it's about <em>"what are the steps"</em>, not <em>"how to apply them"</em>.</p>
<p>It would far over-size my answer (at last the sampling), while other questions here on S.O. are already directed on the <em>"How to"</em> of those steps, being far more appropriate, and offering far better explanation and sampling on the implementation of each individual step.</p>
</div></text><author><a href="/users/1253136/almightyr">AlmightyR</a></author><comments><comment><text><span class="comment-copy">Nice response. There is definitely a common theme here. +1 for the char[] recommendation.</span></text><author><a class="comment-user" href="/users/176880/athens-holloway" title="1,577 reputation">Athens Holloway</a></author></comment><comment><text><span class="comment-copy">I love this answer, but at the risk of it becoming too verbose, I'd love to see an example of each step's source code implemented.</span></text><author><a class="comment-user owner" href="/users/1146032/a-elric" title="851 reputation">A_Elric</a></author></comment><comment><text><span class="comment-copy"><code>[*]</code> - @Damien.Bell For the sake of not leaving your request unattended, I've included an example that covers the first (~) and second steps. --- As for why not all steps, well, as you can see, it is not something you can sample with a tiny little snippet of code; And an example for network protection would require even more than that of the local scope, even if to be partially pseudo-coded. Obfuscation, also, has a very wide range of methods of implementation, and although it's simple in concept, the fact it is applied to the source-code itself means it's hard to explain in samples.</span></text><author><a class="comment-user" href="/users/1253136/almightyr" title="2,605 reputation">AlmightyR</a></author></comment><comment><text><span class="comment-copy">Finally, run an obfuscation tool like ProGuard on your source. Java byte code is notoriously easy to disassemble and analyse. Obfuscation is the icing on your security cake, and makes it much more difficult for someone to reverse engineer your code and potentially hack your security measures. See: <a href="http://proguard.sourceforge.net/index.html#manual/introduction.html" rel="nofollow noreferrer">proguard.sourceforge.net/index.html#manual/introduction.html</a></span></text><author><a class="comment-user" href="/users/988870/jarrod-smith" title="2,599 reputation">Jarrod Smith</a></author></comment><comment><text><span class="comment-copy">@JarrodSmith - That is exactly what I mean with the obfuscation part. +1 for the nice way of explanation and for pointing to a good tool.</span></text><author><a class="comment-user" href="/users/1253136/almightyr" title="2,605 reputation">AlmightyR</a></author></comment><comment><text><span class="comment-copy">Agree with everything except the encrypting of credentials.  You would generate a hash and compare the two, not encrypt them.</span></text><author><a class="comment-user" href="/users/205426/woot4moo" title="17,486 reputation">Woot4Moo</a></author></comment><comment><text><span class="comment-copy">@Woot4Moo - By what I understand, since he is trying to <b><i>pull from</i></b> a non-local entity (server), the scope is not that of the authentication process from the authenticator's (server's) perspective, but from the client's. --- As such, the client must protect the credentials in storage and transmission, but <b>send the credentials as they are</b>. Transmission security is handled by the 3rd step, which has encryption, hashing and message-digesting inherently. ___ The server is where such hash-comparison is applicable, and the client shouldn't do server-duty processes, for security reasons.</span></text><author><a class="comment-user" href="/users/1253136/almightyr" title="2,605 reputation">AlmightyR</a></author></comment><comment><text><span class="comment-copy">Re: obfuscation, what about open-source software? It seems like obfuscation is useless if your source is on GitHub.</span></text><author><a class="comment-user" href="/users/2093695/brian-mccutchon" title="1,054 reputation">Brian McCutchon</a></author></comment><comment><text><span class="comment-copy">@BrianMcCutchon A few options off top my head: 1-&gt;Ugly) You can release "open-source" with obfuscation applied to the source (but that goes against at least the spirit of open-source licences, and is (far) less effective than obfuscation tools to compiling code. 2-&gt;Bad?) You can simply refrain from releasing the security classes publicly, while the rest of the software remains open-source. 3-&gt;No idea) You can have security measures that are (automagically) tailored to be per-user (on install?), which self-compile + self-obfuscate (server/using reflection?), based on secure user-specific stuff.</span></text><author><a class="comment-user" href="/users/1253136/almightyr" title="2,605 reputation">AlmightyR</a></author></comment><comment><text><span class="comment-copy">@BrianMcCutchon No idea if or how much those ideas are good, other than what should be apparent to any programmer dealing with data-security. But sincerely, "just don't do open-source on stuff that needs security" would be my advice. I never did it, and I don't think I ever will; out of my own experience, I don't see a single good argument for it. But if someone knows better, this is interesting, and I would be grateful to be enlightened... One last thing: If your Q is related to having a free version-control host that allows private repositories, I use bitbucket for closed-source projects.</span></text><author><a class="comment-user" href="/users/1253136/almightyr" title="2,605 reputation">AlmightyR</a></author></comment><comment><text><span class="comment-copy">Is <a href="http://docs.oracle.com/javase/8/docs/api/java/nio/CharBuffer.html" rel="nofollow noreferrer">CharBuffer</a> ok?</span></text><author><a class="comment-user" href="/users/480894/roland" title="1,611 reputation">Roland</a></author></comment><comment><text><span class="comment-copy">@Roland I haven't programmed anything in Java for the last year or so, so I don't remember about <code>CharBuffer</code> specifically off the top of my head, but basically, if it's not immutable (can get it's internal data overwritten to <code>null</code> or zeroes without waiting for GC), then you can use it, as long as you don't forget to clean it up.</span></text><author><a class="comment-user" href="/users/1253136/almightyr" title="2,605 reputation">AlmightyR</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>If you are using basic auth, you should couple that with SSL to avoid passing your credentials in base64 encoded plain text. You don't want to make it easy for someone sniffing your packets to get your credentials. Also, don't hard code your credentials in your source code. Make them configurable. read them from a config file. You should encrypt the credentials before storing them in a config file and your app should decrypt the credentials once it reads them from the config file.</p>
</div></text><author><a href="/users/176880/athens-holloway">Athens Holloway</a></author><comments><comment><text><span class="comment-copy">Can you provide some examples on how you would do this programmatically?</span></text><author><a class="comment-user owner" href="/users/1146032/a-elric" title="851 reputation">A_Elric</a></author></comment><comment><text><span class="comment-copy">check out <a href="http://stackoverflow.com/questions/20227/how-do-i-use-3des-encryption-decryption-in-java" title="how do i use 3des encryption decryption in java">stackoverflow.com/questions/20227/â€¦</a></span></text><author><a class="comment-user" href="/users/176880/athens-holloway" title="1,577 reputation">Athens Holloway</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<ol>
<li>secure computer that initializes the request (your computer). if that machine is insecure, nothing will protect you. that's completely separate topic (up-to-date software, properly configured, strong passwords, encrypted swap, hardware sniffers, physical security etc)</li>
<li>secure your storage
the medium you use for storing your credentials should be encrypted. decrypted credentials should be stored only in ram of your secured machine</li>
<li>people that maintain that hardware must be trusted (probably the weakest link)</li>
<li>they also should know as few as possible. that's a protection from rubber-hose cryptanalysis</li>
<li>your credentials should fulfil all the security recommendation (proper length, randomness, single purpose etc)</li>
<li>your connection to remote service must be secured (SSL etc)</li>
<li>your remote service must be trusted (see points 1-4). plus it should be hacking prone (if your data/service is insecure then securing your credentials is pointless). plus it should not store your credentials</li>
</ol>
<p>plus probably thousand things i forgot about :)</p>
</div></text><author><a href="/users/1100135/piotrek">piotrek</a></author><comments><comment><text><span class="comment-copy">Your answer covers both client' and server-side protection steps in a summarized, yet very clear and <i>"followable"</i> way. I liked it very much! [+1] --- There are a few things I think should be explained just a tiny little further, and since there were a few spelling and formatting issues present too, I took the liberty to edit. --- The general structure, as well as most of the text, is unchanged. I just added what I thought was lacking, and reorganized the existing text to fit with it. I hope you don't mind.</span></text><author><a class="comment-user" href="/users/1253136/almightyr" title="2,605 reputation">AlmightyR</a></author></comment><comment><text><span class="comment-copy">i don't mind spelling, links, grammar, etc. thank you for that. however, if you want to add something plz don't change my answer. if you feel something is missing add a comment or create your own answer. i prefer to sign only under my own words</span></text><author><a class="comment-user" href="/users/1100135/piotrek" title="5,435 reputation">piotrek</a></author></comment><comment><text><span class="comment-copy">I understand. --- Well, my edit didn't really change your answer's meaning in any way. Most of it was fixing spelling and format, and the formatting that needs fixing requires slight text changes anyways. The few additional explanations were just extensions of what was already being said. --- In any case, please fix the spelling (uppercase at phrase-starts is the main problem) and format (separate "topic" from "content" correctly), applying the necessary to-fit adjustments to the text. Also, see #7's <i>"prone"</i>. --- And, of course, taking the additional into account when doing it would be nice.</span></text><author><a class="comment-user" href="/users/1253136/almightyr" title="2,605 reputation">AlmightyR</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>It's generally not good advice to encrypt credentials. Something that is encrypted can be decrypted. Common best practice is to store passwords as a <a href="http://en.wikipedia.org/wiki/Salt_%28cryptography%29" rel="nofollow">salted hash</a>.A hash cannot be decrypted. The salt is added to defeat brute force guessing with <a href="http://en.wikipedia.org/wiki/Rainbow_table" rel="nofollow">Rainbow Tables</a>. As long as every userId has its own random salt, an attacker would have to generate a set of tables for every possible value of the salt, quickly making this attack impossible within the lifespan of the universe. This is the reason why websites generally can't send you your password if you have forgotten it, but they can only 'reset' it. They don't have your password stored, only a hash of it. </p>
<p>Password hashing is not very difficult to implement yourself, but it's such a common problem to solve that countless others have done it for you. I've found <a href="http://www.mindrot.org/projects/jBCrypt/" rel="nofollow">jBcrypt</a> easy to use. </p>
<p>As an extra protection against brute force guessing of passwords, it is common best practice to force a userId or remote IP to wait a few seconds after a certain number of login attempts with the wrong password. Without this, a brute force attacker can guess as many passwords per second as your server can handle. There is a huge difference between being able to guess 100 passwords per 10 second period or a million. </p>
<p>I get the impression that you have included the username/password combination in your source code. This means that if you ever want to change the password, you'll have to recompile, stop and restart your service, and it also means that anyone who gets a hold of your source code, also has your passwords. Common best practice is never to do this, but to store the credentials (username, password hash, password salt) in your datastore</p>
</div></text><author><a href="/users/1336158/mzzl">Mzzl</a></author><comments><comment><text><span class="comment-copy">I am still unsure, but I think <i>"... I'm trying to <b>pull from</b> a RESTful api ..."</i> indicates the OP is not talking about the server-side environment. It is my belief he is talking about a client-side application that authenticates with a server. __ As such, the client-side should only protect the credentials in-storage (encryption) and securely send them to the server (TSL / SSL - Which inherently apply encryption and message-digesting) ___ The message-digest (for register or comparison) should be done server-side only, as otherwise it would be insecure. ___ It's all on my answer's comments.</span></text><author><a class="comment-user" href="/users/1253136/almightyr" title="2,605 reputation">AlmightyR</a></author></comment><comment><text><span class="comment-copy">Also, your answer is indicating the use of an possibly outdated API (jBcrypt - It's on beta v0.3, and last updated in January 2010, which is a possible indication that the project has died out). Java <a href="http://docs.oracle.com/javase/6/docs/api/java/security/MessageDigest.html" rel="nofollow noreferrer">already has it's own standard message-digesting classes</a>, and I don't think there is any essential need for 3rd party APIs.</span></text><author><a class="comment-user" href="/users/1253136/almightyr" title="2,605 reputation">AlmightyR</a></author></comment><comment><text><span class="comment-copy">It looks like you're right about the client vs server side confusion. I'd still recommend putting the credentials in a data store, not in the source code, but you're right about needing encryption rather than hashing in that case.</span></text><author><a class="comment-user" href="/users/1336158/mzzl" title="1,478 reputation">Mzzl</a></author></comment><comment><text><span class="comment-copy">Bcrypt is not a message digest, but a blowfish based key generation scheme. I use it as part of SpringSecurity, which is very much alive. Plain message digest algorithms such as SHA-1 or MD5, are not intended for password hashing, but for fast hashing. If you need to hash a chunk of video or text as fast as possible, you can use these, or their more modern replacements. If you're interested in hashing passwords, speed is your enemy. The faster the hashing algorithm used, the faster a brute force attack can succeed.</span></text><author><a class="comment-user" href="/users/1336158/mzzl" title="1,478 reputation">Mzzl</a></author></comment><comment><text><span class="comment-copy">Hmm. Some google-searching suggests me Blowfish is an encryption (decryptable) while jBcrypt's page indicates it uses a blowfish-based message-diggest (<a href="http://en.wikipedia.org/wiki/Cryptographic_hash_function" rel="nofollow noreferrer">a cryptographic hash function</a>) ... I'm confused. ___ SpringSecurity is alive, Bcrypt might not be; they are separate projects. ___ Anyway, Java 1.7 already incorporates the blowfish cipher, and the modular structure of the Security class allows for it's easy-enough implementation as a <code>security.Provider</code> even in older versions, so I still don't see the need for 3rd-party APIs.</span></text><author><a class="comment-user" href="/users/1253136/almightyr" title="2,605 reputation">AlmightyR</a></author></comment><comment><text><span class="comment-copy">Password hashing is not just about a cypher or a message digest. The aim of schemes like Bcrypt is to make brute forcing a hash computationally expensive. In this case, by running the digest function a certain number of times (default 2**10). Underneath, these schemes use a standard or a customized message digest algoritm.</span></text><author><a class="comment-user" href="/users/1336158/mzzl" title="1,478 reputation">Mzzl</a></author></comment><comment><text><span class="comment-copy">I didn't say cryptographic hash functions were just about cyphers or MD, quite the opposite: I said I don't understand how or why would Bcrypt base it's MD algorithm based on an algorithm that has a different (encryption) purpose. ___ If with <i>"running the digest function a certain number of times"</i> you mean to repeat the hashing in a layering manner as is done with encryption, that's usually <b>(if not done right)</b> a <b>bad thing to do</b>. Unless done very properly and precisely, rather than increasing security, you are increasing collision risks, and probably <b>decreasing security</b>.</span></text><author><a class="comment-user" href="/users/1253136/almightyr" title="2,605 reputation">AlmightyR</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>If you cannot trust the environment your program is running in, but need to authenticate via plain passwords or certificates, there is nothing you can do to secure your credentials. The most you can do is obfuscate them with the methods described in the other answers.</p>
<p>As a workaround, I'd run all requests to the RESTful api through a proxy that you can trust and do the cleartext password authentication from there.</p>
</div></text><author><a href="/users/532717/twilite">Twilite</a></author><comments><comment><text><span class="comment-copy"><i>"If you cannot trust the environment your program is running in, ..., there is nothing you can do to secure your credentials."</i> - If that was true, pretty much every application that has an "auto-fill" option for the credentials would be in very deep trouble. ___ Many two-ended applications (this question's?) like multiplayer games and web-based applications store the account credentials locally, and they rarely have any serious security trouble. ___ Data is never ever 100% safe, regardless of environment. A trusted environment is just another security ("safer") step.</span></text><author><a class="comment-user" href="/users/1253136/almightyr" title="2,605 reputation">AlmightyR</a></author></comment><comment><text><span class="comment-copy">Well, in the given scenario, you can obfuscate your credentials, but not reach 100% (cryptographic) security. The most you can hope for is to make it so complicated for the attacker to get the clear text passwords, that it is not worth their effort. All it takes to get the stored passwords of a typical web based application, is to go to your browser's options menu and select "show passwords".</span></text><author><a class="comment-user" href="/users/532717/twilite" title="566 reputation">Twilite</a></author></comment><comment><text><span class="comment-copy">You can never reach 100% security, be it in this or <b>in any other scenario</b>. This is because in the end, it all comes down to sequences of <code>0</code> and <code>1</code> in memory, which is achieved following an specific set of logical rules, which inherently is always somehow reversible. ___ The basis of cryptographic security is, always was, and will probably always be, <i>"to make it so difficult it isn't worth the effort."</i> ___ Lastly, you are mistaking browser's auto-fill/login (which is for websites), with application's auto-auth/login (which is saved to encrypted files and there only).</span></text><author><a class="comment-user" href="/users/1253136/almightyr" title="2,605 reputation">AlmightyR</a></author></comment><comment><text><span class="comment-copy">You should read up on cryptography. There are various methods to irreversibly encrypt data, just have a look at "one way hashes" (md5) or public key cryptography, where it's not possible to decrypt encrypted data, even if you have both the encrypted data and the encryption key. With these methods you gain factual 100% security.</span></text><author><a class="comment-user" href="/users/532717/twilite" title="566 reputation">Twilite</a></author></comment><comment><text><span class="comment-copy">Actually, no. - Like I said, the methods follow an specific set of logical rules, and those have a way to reverse. ___ In the case of cryptographic hash functions, if the hacker knows the set of rules that generated the hash, he can RE a few bits of the original data and get a fair general idea of what the original's length might be. --- It's a lot of brute-forcing and guesswork, but it's not 100% unbreakable. And it's far from the <i>infinite number of attempts</i> of 100% security ___ I don't think any hacker would bother trying tough; It's way far from worth the effort, no matter the reward.</span></text><author><a class="comment-user" href="/users/1253136/almightyr" title="2,605 reputation">AlmightyR</a></author></comment><comment><text><span class="comment-copy">In fact, theoretically, even protection that would need <i>"infinite number of attempts to break"</i> <b>is not 100% safe</b>; As it itself suggests, all that is needed is the execution of an infinite number of attempts to break it, and eventually, one of the attempts will hit the jackpot.</span></text><author><a class="comment-user" href="/users/1253136/almightyr" title="2,605 reputation">AlmightyR</a></author></comment><comment><text><span class="comment-copy">Well that's why I wrote "factual 100%". The common example is for a successful attack to likely take longer than the existence of the universe. It's a bit like coming up with the exact wording of any given novel on the first try just by guessing.</span></text><author><a class="comment-user" href="/users/532717/twilite" title="566 reputation">Twilite</a></author></comment><comment><text><span class="comment-copy">@ <i>"longer than the existence of the universe"</i> - For the narrowed possibilities of the example I used, I think a serious hacker with a few zombie-machines wouldn't take more than a few months or a couple of years at best. ___ With something as ridiculously slow as a 100 ms/attempt, a single machine can make over 315 million attempts in one year; Try that with 100 machines and your best protection is probably waving you bye-bye. ___ But if you ain't satisfied with that: One of the smallest bot-nets dismantled so far had 10,000 zombies, and the current record-holder had over 30 million zombies.</span></text><author><a class="comment-user" href="/users/1253136/almightyr" title="2,605 reputation">AlmightyR</a></author></comment><comment><text><span class="comment-copy">You don't see such things because: 1-A hacker would never receive money worth the process, as the contractors for such jobs have more direct approaches (*cough* buying someone's lips *cough*) to obtain the data; Far faster and cheaper. ___ 2-Such bot-nets already give good profit to the hackers, and buying out he/she's bot-net's processing power is not easy; No contractor would be smart in paying X millions to a hacker when he can *cough* do something else *cough* for X thousands. ___ Extra-long-story-short, it's never worth it for either parties, and it just doesn't happen.</span></text><author><a class="comment-user" href="/users/1253136/almightyr" title="2,605 reputation">AlmightyR</a></author></comment><comment><text><span class="comment-copy">Please read this article on wikipedia on strong cryptography: <a href="http://en.wikipedia.org/wiki/Strong_cryptography" rel="nofollow noreferrer">en.wikipedia.org/wiki/Strong_cryptography</a></span></text><author><a class="comment-user" href="/users/532717/twilite" title="566 reputation">Twilite</a></author></comment><comment><text><span class="comment-copy">Read. Didn't see anything against my point. So?</span></text><author><a class="comment-user" href="/users/1253136/almightyr" title="2,605 reputation">AlmightyR</a></author></comment><comment><text><span class="comment-copy">Sorry, the article is actually rather vague and more or less arguing your point. What I've been trying to explain all the time, is that there are cryptographic methods that derive their security from their exponential growth in complexity, which makes them prone to brute force attacks for the foreseeable future.</span></text><author><a class="comment-user" href="/users/532717/twilite" title="566 reputation">Twilite</a></author></comment></comments></answer></answers></post>