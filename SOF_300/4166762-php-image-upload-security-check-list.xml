<?xml version="1.0" encoding="utf-8"?>
<post><title>PHP image upload security check list - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I am programming a script to upload images  to my application. Are the following security steps  enough to make the application safe from the script side?</p>
<ul>
<li>Disable PHP from running inside the upload folder using .httaccess.</li>
<li>Do not allow upload if the file name contains string "php".</li>
<li>Allow only extensions: jpg,jpeg,gif and png.</li>
<li>Allow only image file type.</li>
<li>Disallow  image with two file type.</li>
<li>Change the image name.</li>
<li>Upload to a sub-directory not root directory.</li>
</ul>
<p>This is my script:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln"> $filename</span><span class="pun">=</span><span class="pln">$_FILES</span><span class="pun">[</span><span class="str">'my_files'</span><span class="pun">][</span><span class="str">'name'</span><span class="pun">];</span><span class="pln">
 $filetype</span><span class="pun">=</span><span class="pln">$_FILES</span><span class="pun">[</span><span class="str">'my_files'</span><span class="pun">][</span><span class="str">'type'</span><span class="pun">];</span><span class="pln">
 $filename </span><span class="pun">=</span><span class="pln"> strtolower</span><span class="pun">(</span><span class="pln">$filename</span><span class="pun">);</span><span class="pln">
 $filetype </span><span class="pun">=</span><span class="pln"> strtolower</span><span class="pun">(</span><span class="pln">$filetype</span><span class="pun">);</span><span class="pln">

 </span><span class="com">//check if contain php and kill it </span><span class="pln">
 $pos </span><span class="pun">=</span><span class="pln"> strpos</span><span class="pun">(</span><span class="pln">$filename</span><span class="pun">,</span><span class="str">'php'</span><span class="pun">);</span><span class="pln">
 </span><span class="kwd">if</span><span class="pun">(!(</span><span class="pln">$pos </span><span class="pun">===</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">))</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">die</span><span class="pun">(</span><span class="str">'error'</span><span class="pun">);</span><span class="pln">
 </span><span class="pun">}</span><span class="pln">




 </span><span class="com">//get the file ext</span><span class="pln">

 $file_ext </span><span class="pun">=</span><span class="pln"> strrchr</span><span class="pun">(</span><span class="pln">$filename</span><span class="pun">,</span><span class="pln"> </span><span class="str">'.'</span><span class="pun">);</span><span class="pln">


 </span><span class="com">//check if its allowed or not</span><span class="pln">
 $whitelist </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">(</span><span class="str">".jpg"</span><span class="pun">,</span><span class="str">".jpeg"</span><span class="pun">,</span><span class="str">".gif"</span><span class="pun">,</span><span class="str">".png"</span><span class="pun">);</span><span class="pln"> 
 </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!(</span><span class="pln">in_array</span><span class="pun">(</span><span class="pln">$file_ext</span><span class="pun">,</span><span class="pln"> $whitelist</span><span class="pun">)))</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">die</span><span class="pun">(</span><span class="str">'not allowed extension,please upload images only'</span><span class="pun">);</span><span class="pln">
 </span><span class="pun">}</span><span class="pln">


 </span><span class="com">//check upload type</span><span class="pln">
 $pos </span><span class="pun">=</span><span class="pln"> strpos</span><span class="pun">(</span><span class="pln">$filetype</span><span class="pun">,</span><span class="str">'image'</span><span class="pun">);</span><span class="pln">
 </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">$pos </span><span class="pun">===</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">die</span><span class="pun">(</span><span class="str">'error 1'</span><span class="pun">);</span><span class="pln">
 </span><span class="pun">}</span><span class="pln">
 $imageinfo </span><span class="pun">=</span><span class="pln"> getimagesize</span><span class="pun">(</span><span class="pln">$_FILES</span><span class="pun">[</span><span class="str">'my_files'</span><span class="pun">][</span><span class="str">'tmp_name'</span><span class="pun">]);</span><span class="pln">
 </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">$imageinfo</span><span class="pun">[</span><span class="str">'mime'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> </span><span class="str">'image/gif'</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> $imageinfo</span><span class="pun">[</span><span class="str">'mime'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> </span><span class="str">'image/jpeg'</span><span class="pun">&amp;&amp;</span><span class="pln"> $imageinfo</span><span class="pun">[</span><span class="str">'mime'</span><span class="pun">]</span><span class="pln">      </span><span class="pun">!=</span><span class="pln"> </span><span class="str">'image/jpg'</span><span class="pun">&amp;&amp;</span><span class="pln"> $imageinfo</span><span class="pun">[</span><span class="str">'mime'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> </span><span class="str">'image/png'</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   </span><span class="kwd">die</span><span class="pun">(</span><span class="str">'error 2'</span><span class="pun">);</span><span class="pln">
 </span><span class="pun">}</span><span class="pln">
</span><span class="com">//check double file type (image with comment)</span><span class="pln">
</span><span class="kwd">if</span><span class="pun">(</span><span class="pln">substr_count</span><span class="pun">(</span><span class="pln">$filetype</span><span class="pun">,</span><span class="pln"> </span><span class="str">'/'</span><span class="pun">)&gt;</span><span class="lit">1</span><span class="pun">){</span><span class="pln">
</span><span class="kwd">die</span><span class="pun">(</span><span class="str">'error 3'</span><span class="pun">)</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

 </span><span class="com">// upload to upload direcory </span><span class="pln">
 $uploaddir </span><span class="pun">=</span><span class="pln"> </span><span class="str">'upload/'</span><span class="pun">.</span><span class="pln">date</span><span class="pun">(</span><span class="str">"Y-m-d"</span><span class="pun">).</span><span class="str">'/'</span><span class="pln"> </span><span class="pun">;</span><span class="pln">

</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">file_exists</span><span class="pun">(</span><span class="pln">$uploaddir</span><span class="pun">))</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  
</span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  
    mkdir</span><span class="pun">(</span><span class="pln"> $uploaddir</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0777</span><span class="pun">);</span><span class="pln">  
</span><span class="pun">}</span><span class="pln">  
  </span><span class="com">//change the image name</span><span class="pln">
 $uploadfile </span><span class="pun">=</span><span class="pln"> $uploaddir </span><span class="pun">.</span><span class="pln"> md5</span><span class="pun">(</span><span class="pln">basename</span><span class="pun">(</span><span class="pln">$_FILES</span><span class="pun">[</span><span class="str">'my_files'</span><span class="pun">][</span><span class="str">'name'</span><span class="pun">])).</span><span class="pln">$file_ext</span><span class="pun">;</span><span class="pln">



  </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">move_uploaded_file</span><span class="pun">(</span><span class="pln">$_FILES</span><span class="pun">[</span><span class="str">'my_files'</span><span class="pun">][</span><span class="str">'tmp_name'</span><span class="pun">],</span><span class="pln"> $uploadfile</span><span class="pun">))</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
 echo </span><span class="str">"&lt;img id=\"upload_id\" src=\""</span><span class="pun">.</span><span class="pln">$uploadfile</span><span class="pun">.</span><span class="str">"\"&gt;&lt;br /&gt;"</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   echo </span><span class="str">"error"</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span></code></pre>
<p>Any new tips are welcome :)</p>
</div></text><author><a href="/users/239778/usef-ksa">usef_ksa</a></author><comments><comment><text><span class="comment-copy">I would remove the following rule: Do not allow upload if the file name contains string "php". It is not needed because you are renaming the file.</span></text><author><a class="comment-user" href="/users/103211/troynt" title="1,672 reputation">troynt</a></author></comment><comment><text><span class="comment-copy">You can download <a href="https://github.com/simon-eQ/ImageUploader" rel="nofollow noreferrer"><b>Secure Image upload</b></a> from github. It is the most secure PHP script alive. It supports image re-sizing/croping too.</span></text><author><a class="comment-user" href="/users/1640606/samayo" title="5,510 reputation">samayo</a></author></comment><comment><text><span class="comment-copy">@Alez From a quick glance at that class the only security I can see is an extension check. Please, PLEASE say it ain't so!</span></text><author><a class="comment-user" href="/users/2691729/sousdev" title="100 reputation">sousdev</a></author></comment><comment><text><span class="comment-copy">@Fricker It ain't so. In what sense? the <code>pathinfo(, PATHINFO_EXTENSION)</code> is a very reliable way to get the most accurate file extension, actually there is nothing more reliable than that. read where it says <a href="http://www.php.net/manual/en/splfileinfo.getextension.php" rel="nofollow noreferrer"><b>"note"</b></a></span></text><author><a class="comment-user" href="/users/1640606/samayo" title="5,510 reputation">samayo</a></author></comment><comment><text><span class="comment-copy">@Alez If I left the security of my server down to an extension check i wouldn't be able to sleep at night is what I'm saying</span></text><author><a class="comment-user" href="/users/2691729/sousdev" title="100 reputation">sousdev</a></author></comment><comment><text><span class="comment-copy">@Fricker Well, if you are not smart enough not to give your folders permission to execute files, the I agree. You should not sleep :)</span></text><author><a class="comment-user" href="/users/1640606/samayo" title="5,510 reputation">samayo</a></author></comment><comment><text><span class="comment-copy">@Alez I am smart enough however I'm not conformable leaving such a massive risk down to such a simple check that can let executable code into your server which could be a very important link in a chain that enables leakage of things such as account details, most real-world hacks do not come from one vulnerability but a few used in conjunction. EDIT: I see your Swiss, good :)</span></text><author><a class="comment-user" href="/users/2691729/sousdev" title="100 reputation">sousdev</a></author></comment><comment><text><span class="comment-copy">@Fricker I am not Swiss :). Why don't you download the classes and try your best to beat it? I am really interested to know, how it can be exploited. I'm not 100% sure, as I am PHP newbie. But, I want to use the class in future projects so, I would like to find out</span></text><author><a class="comment-user" href="/users/1640606/samayo" title="5,510 reputation">samayo</a></author></comment><comment><text><span class="comment-copy">@Alez Fair enough :) I'm actually currently developing a secure image upload, storage, and serving class in PHP so I'm very paranoid while reading how all these checks can be circumvented. If you do use the script please make sure you store the images out side of the document root and display them using PHP, just encase something gets by</span></text><author><a class="comment-user" href="/users/2691729/sousdev" title="100 reputation">sousdev</a></author></comment><comment><text><span class="comment-copy">Sure, let me check out your code when you are done. I need to learn about this as much as possible. I think my script is secure, but it can be very improved. So, I need to compare it with others</span></text><author><a class="comment-user" href="/users/1640606/samayo" title="5,510 reputation">samayo</a></author></comment><comment><text><span class="comment-copy">@Alez ofc &amp; btw I like the Luke 3:11 license :)</span></text><author><a class="comment-user" href="/users/2691729/sousdev" title="100 reputation">sousdev</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Re-process the image using GD (or Imagick) and save the processed image. All others are just <strike>fun</strike> boring for hackers.</p>
<p>Edit: And as rr pointed out, use <code>move_uploaded_file()</code> for any upload.</p>
<p>Late Edit: By the way, you'd want to be very restrictive about your upload folder. Those places are one of the dark corners where many exploits happen. This is valid for any type of upload and any programming language/server. Check <a href="https://www.owasp.org/index.php/Unrestricted_File_Upload" rel="noreferrer">https://www.owasp.org/index.php/Unrestricted_File_Upload</a></p>
</div></text><author><a href="/users/372654/halil-%c3%96zg%c3%bcr">Halil Özgür</a></author><comments><comment><text><span class="comment-copy">+1. I don't see how any of the checks from the list (in the question) can be useful, if <i>it is an image</i> and contains a valid extension.</span></text><author><a class="comment-user" href="/users/240613/arseni-mourzenko" title="24,501 reputation">Arseni Mourzenko</a></author></comment><comment><text><span class="comment-copy">+1 I think this is the most secure solution, but would image quality or size suffer? Is there a secure way GD/Imagick can validate it is an image without altering it?</span></text><author><a class="comment-user" href="/users/103211/troynt" title="1,672 reputation">troynt</a></author></comment><comment><text><span class="comment-copy">White-listing is nearly always better than black-listing. So is processing rather than checking. You will be altering it but you can have the resulting image with the exact same properties and virtually no quality loss. Of course, if you want to store the original image as exactly as possible (like flickr) you may want to dig deeper in this area.</span></text><author><a class="comment-user" href="/users/372654/halil-%c3%96zg%c3%bcr" title="10,650 reputation">Halil Özgür</a></author></comment><comment><text><span class="comment-copy">I do not add this because I think it need a lot of CPU processing.</span></text><author><a class="comment-user owner" href="/users/239778/usef-ksa" title="777 reputation">usef_ksa</a></author></comment><comment><text><span class="comment-copy">Mark my words: most of the time, CPU is the most redundant resource. Just watch the graph of any given machine/server (except Google, Facebook, etc servers maybe). You will see that it is dusting there most of the time. Projects like SETI@Home tries to use that free time. At any rate, it would be more than worth the effort for the added security.</span></text><author><a class="comment-user" href="/users/372654/halil-%c3%96zg%c3%bcr" title="10,650 reputation">Halil Özgür</a></author></comment><comment><text><span class="comment-copy">There's some interesting feedback on this question (<a href="http://stackoverflow.com/questions/7349473/php-file-upload-mime-or-extention-based-varification" title="php file upload mime or extention based varification">stackoverflow.com/questions/7349473/…</a>) about the importances of re-processing images.</span></text><author><a class="comment-user" href="/users/132164/lachlan-mcd" title="1,250 reputation">Lachlan McD.</a></author></comment><comment><text><span class="comment-copy">Would you care to give example of 're-process'? Lets say with imagick (or GD at worse) ?</span></text><author><a class="comment-user" href="/users/560972/andrew" title="383 reputation">Andrew</a></author></comment><comment><text><span class="comment-copy">@Andrew A simple "imagick php example" Google search returns many results, but at a bare minimum it would be something like: <code>try { $image = new Imagick($_FILES['my_files']['tmp_name']); $image-&gt;writeImage($outFile); } catch (ImagickException) { //invalid image or something }</code></span></text><author><a class="comment-user" href="/users/372654/halil-%c3%96zg%c3%bcr" title="10,650 reputation">Halil Özgür</a></author></comment><comment><text><span class="comment-copy">Would merely checking the result of getimagesize() be efficient for "processing the image"? getimagesize() would return false if its not a valid image correct? Just for clarity for everyone else, its pretty simple to spoof mime types and extensions by just posting a false mime type and/or extension to bypass that security check.</span></text><author><a class="comment-user" href="/users/434954/thorne51" title="388 reputation">thorne51</a></author></comment><comment><text><span class="comment-copy">@thorne51, I believe no function is enough for checking. So simply don't check, just create a new image. Example: PHP code can be hidden in EXIF, XMP etc parts of the image, and functions/programs may fail (inadvertently or through the use of an exploit code) to report that code.</span></text><author><a class="comment-user" href="/users/372654/halil-%c3%96zg%c3%bcr" title="10,650 reputation">Halil Özgür</a></author></comment><comment><text><span class="comment-copy">A note from the future: So how real is the threat? I've found a couple of articles on the issue <a href="http://ha.ckers.org/blog/20070604/passing-malicious-php-through-getimagesize/" rel="nofollow noreferrer">here</a> and <a href="http://blog.insicdesigns.com/2009/01/secure-file-upload-in-php-web-applications/" rel="nofollow noreferrer">here</a>. Especially the second one goes through securing image uploads in depth. They are quite old, but IMO still relevant today.</span></text><author><a class="comment-user" href="/users/372654/halil-%c3%96zg%c3%bcr" title="10,650 reputation">Halil Özgür</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>For security test of the image files, I can think of 4 level of securities. They would be:</p>
<ul>
<li>Level 1: Check the extension (extension file ends with)</li>
<li>Level 2: Check the MIME type <code>($file_info = getimagesize($_FILES['image_file']; $file_mime = $file_info['mime'];)</code></li>
<li>Level 3: Read first 100 bytes and check if they have any bytes in the following range: ASCII 0-8, 12-31 (decimal).</li>
<li>Level 4: Check for magic numbers in the header (first 10-20 bytes of the file). You can find some of the files header bytes from here: <a href="http://en.wikipedia.org/wiki/Magic_number_%28programming%29#Examples" rel="nofollow noreferrer">http://en.wikipedia.org/wiki/Magic_number_%28programming%29#Examples</a></li>
</ul>
<p>Note: Loading entire image would be slow. </p>
</div></text><author><a href="/users/459684">tanjir</a></author><comments><comment><text><span class="comment-copy">3 &amp; 4 will not be particularly slow. What would be slow is loading the entire image into a library to verify it.</span></text><author><a class="comment-user" href="/users/743957/james-billingham" title="558 reputation">James Billingham</a></author></comment><comment><text><span class="comment-copy">thanks.. I fixed it.</span></text><author><a class="comment-user" href="/users/459684/tanjir" title="981 reputation">tanjir</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>You might want to run "is_uploaded_file" on the $_FILES['my_files']['tmp_name'] as well. See <a href="http://php.net/manual/en/function.is-uploaded-file.php" rel="noreferrer">http://php.net/manual/en/function.is-uploaded-file.php</a></p>
</div></text><author><a href="/users/181216/rr">rr.</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Create a new .htaccess file in the uploads dir and paste this code:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">php_flag engine </span><span class="lit">0</span><span class="pln">
</span><span class="typ">RemoveHandler</span><span class="pln"> </span><span class="pun">.</span><span class="pln">phtml </span><span class="pun">.</span><span class="pln">php </span><span class="pun">.</span><span class="pln">php3 </span><span class="pun">.</span><span class="pln">php4 </span><span class="pun">.</span><span class="pln">php5 </span><span class="pun">.</span><span class="pln">php6 </span><span class="pun">.</span><span class="pln">phps </span><span class="pun">.</span><span class="pln">cgi </span><span class="pun">.</span><span class="pln">exe </span><span class="pun">.</span><span class="pln">pl </span><span class="pun">.</span><span class="pln">asp </span><span class="pun">.</span><span class="pln">aspx </span><span class="pun">.</span><span class="pln">shtml </span><span class="pun">.</span><span class="pln">shtm </span><span class="pun">.</span><span class="pln">fcgi </span><span class="pun">.</span><span class="pln">fpl </span><span class="pun">.</span><span class="pln">jsp </span><span class="pun">.</span><span class="pln">htm </span><span class="pun">.</span><span class="pln">html </span><span class="pun">.</span><span class="pln">wml
</span><span class="typ">AddType</span><span class="pln"> application</span><span class="pun">/</span><span class="pln">x</span><span class="pun">-</span><span class="pln">httpd</span><span class="pun">-</span><span class="pln">php</span><span class="pun">-</span><span class="pln">source </span><span class="pun">.</span><span class="pln">phtml </span><span class="pun">.</span><span class="pln">php </span><span class="pun">.</span><span class="pln">php3 </span><span class="pun">.</span><span class="pln">php4 </span><span class="pun">.</span><span class="pln">php5 </span><span class="pun">.</span><span class="pln">php6 </span><span class="pun">.</span><span class="pln">phps </span><span class="pun">.</span><span class="pln">cgi </span><span class="pun">.</span><span class="pln">exe </span><span class="pun">.</span><span class="pln">pl </span><span class="pun">.</span><span class="pln">asp </span><span class="pun">.</span><span class="pln">aspx </span><span class="pun">.</span><span class="pln">shtml </span><span class="pun">.</span><span class="pln">shtm </span><span class="pun">.</span><span class="pln">fcgi </span><span class="pun">.</span><span class="pln">fpl </span><span class="pun">.</span><span class="pln">jsp </span><span class="pun">.</span><span class="pln">htm </span><span class="pun">.</span><span class="pln">html </span><span class="pun">.</span><span class="pln">wml</span></code></pre>
<p>Just be sure to rename the files u upload + forget about checking types, contents etc</p>
</div></text><author><a href="/users/1575996/jloa">jloa</a></author><comments><comment><text><span class="comment-copy">are you sure of this? without another check in php script in image post data?</span></text><author><a class="comment-user" href="/users/454229/gunslinger" title="4,853 reputation">Gunslinger_</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<h1>XSS Warning</h1>
<p>One more very important remark. Do not serve/upload anything that could be interpreted as HTML in the browser.</p>
<p>Since the files are on your domain, javascript contained in that HTML document will have access to all your cookies, enabling some sort of XSS attack.</p>
<h2>Attack scenario:</h2>
<ol>
<li><p>The attacker uploads HTML file with JS code that sends all the cookies to his server.</p></li>
<li><p>The attacker sends the link to your users via mail, PM, or simply via iframe on his or any other site.</p></li>
</ol>
<h2>Most secure solution:</h2>
<p>Make uploaded content available only on the subdomain or on the another domain. This way cookies are not going to be accessible. This is also one of the google's performance tips:</p>
<p><a href="https://developers.google.com/speed/docs/best-practices/request#ServeFromCookielessDomain" rel="noreferrer">https://developers.google.com/speed/docs/best-practices/request#ServeFromCookielessDomain</a></p>
</div></text><author><a href="/users/924109/rok-kralj">Rok Kralj</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I will repeat something I posted in related question.</p>
<p>You may detect content type using <a href="http://pl1.php.net/manual/en/function.finfo-file.php">Fileinfo functions</a> (mime_content_type() in previous versions of PHP).</p>
<p>An excerpt form PHP manual on older Mimetype extension, which is now replaced by Fileinfo:</p>
<blockquote>
<p>The functions in this module try to guess the content type and
  encoding of a file by looking for certain magic byte sequences at
  specific positions within the file. While this is not a bullet proof
  approach the heuristics used do a very good job.</p>
</blockquote>
<p><code>getimagesize()</code> may also do a good job, but most of the other checks you are performing are nonsense. For example why string <code>php</code> is not allowed in filename. You are not going to include image file within PHP script, just because its name contains <code>php</code> string, are you?</p>
<hr/>
<p>When it comes to re-creating images, in most cases it will improve security... until library you use is not vulnerable.</p>
<p>So which PHP extension suits best for secure image re-creation? I've checked <a href="http://www.cvedetails.com/">CVE details</a> website. I think the applicable trio are those extensions:</p>
<ol>
<li><a href="http://www.cvedetails.com/vulnerability-list/vendor_id-2678/Gd-Graphics-Library.html">GD</a> (6 vulnerabilities)</li>
<li><a href="http://www.cvedetails.com/vulnerability-list/vendor_id-1749/Imagemagick.html">ImageMagick</a> (44 vulnerabilities)</li>
<li><a href="http://www.cvedetails.com/vulnerability-list/vendor_id-2802/Graphicsmagick.html">Gmagick</a> (12 vulnerabilities)</li>
</ol>
<p>From the comparison I think GD suits best, because it has smallest number of security issues and they are quite old. Three of them are critical, but ImagMagick and Gmagick do not perform any better... ImageMagick seems to be very buggy (at least when it comes to security), so I choose Gmagick as the second option.</p>
</div></text><author><a href="/users/205955/doc">doc</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>if security is very important use database for save file name and renamed file name and here you can change extension of file to somthing like .myfile and make a php file for send image with headers . php can be more secure and you can use it in the img tag like blow :  </p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="tag">&lt;img</span><span class="pln"> </span><span class="atn">src</span><span class="pun">=</span><span class="atv">"send_img.php?id=555"</span><span class="pln"> </span><span class="atn">alt</span><span class="pun">=</span><span class="atv">""</span><span class="tag">&gt;</span></code></pre>
<p>also check file extension with EXIF before upload. </p>
</div></text><author><a href="/users/1087547/mb-rostami">Mb Rostami</a></author><comments><comment><text><span class="comment-copy">If you use a database, then you should make sure that you sanitize the filename first.</span></text><author><a class="comment-user" href="/users/1460422/starbeamrainbowlabs" title="2,403 reputation">starbeamrainbowlabs</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The simplest answer to <a href="https://paragonie.com/blog/2015/10/how-securely-allow-users-upload-files" rel="nofollow">allow users to securely upload files in PHP</a> is: <strong>Always save files outside of your document root.</strong></p>
<p>For example: If your document root is <code>/home/example/public_html</code>, save files to <code>/home/example/uploaded</code>.</p>
<p>With your files safely out of the confines of being directly executed by your web server, there are a couple of ways you can still make them accessible to your visitors:</p>
<ol>
<li>Set up a separate virtual host for serving static content which never executes PHP, Perl, etc. scripts.</li>
<li>Upload the files to another server (e.g. a cheap VPS, Amazon S3, etc).</li>
<li>Keep them on the same server, and use a PHP script to proxy requests to ensure the file is only ever readable, not executable.</li>
</ol>
<p>However, if you go with options 1 or 3 on this list and you have a local file inclusion vulnerability in your application, your file upload form can <a href="http://blog.k3170makan.com/2012/01/ordering-remote-file-inclusion-via-e.html" rel="nofollow">still be an attack vector</a>.</p>
</div></text><author><a href="/users/2224584/scott-arciszewski">Scott Arciszewski</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p><strong>The best</strong> way to keep your website secure when user upload image is to do this steps :</p>
<ul>
<li>check the image extension</li>
<li>check the image size with this function "getimagesize()"</li>
<li>after this you can use the function "file_get_contents()"</li>
<li>In the end you should insert file_Content to your database
i think that's the best way ! nd what's your opinion ?</li>
</ul>
</div></text><author><a href="/users/4607305/hamza-ouha">Hamza Ouha</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>For an image file, you could also change file permission after renaming to be sure it never executes (rw-r--r--)</p>
</div></text><author><a href="/users/1424151/jesus">Jesus</a></author><comments><comment><text><span class="comment-copy">-1. First: The X (execute) flag is not controlled by the client, it is not set anyways. Second: The PHP engine doesn't require files to have X flag for them to get executed.</span></text><author><a class="comment-user" href="/users/924109/rok-kralj" title="23,990 reputation">Rok Kralj</a></author></comment></comments></answer></answers></post>