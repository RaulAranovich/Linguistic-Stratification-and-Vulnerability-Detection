<?xml version="1.0" encoding="utf-8"?>
<post><title>What is SQL injection? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<blockquote>
<p><strong>Possible Duplicates:</strong></p>
<p><a href="http://stackoverflow.com/questions/332365/xkcd-sql-injection-please-explain">How does the SQL injection from the "Bobby Tables" XKCD comic work?</a><br/>
<a href="http://stackoverflow.com/search?q=sql+injection">http://stackoverflow.com/search?q=sql+injection</a></p>
</blockquote>
<p>Can someone explain SQL injection?  How does it cause vulnerabilities?  Where exactly is the point where SQL is injected?</p>
</div></text><author><a href="/users/102937/robert-harvey">Robert Harvey</a></author><comments><comment><text><span class="comment-copy">Kind of a vague question, isn't it?</span></text><author><a class="comment-user" href="/users/56541/david-z" title="76,622 reputation">David Z</a></author></comment><comment><text><span class="comment-copy">read up on <a href="http://www.google.com/search?q=parameterized+queries&amp;rls=com.microsoft:%2A&amp;ie=UTF-8&amp;oe=UTF-8&amp;startIndex=&amp;startPage=1" rel="nofollow noreferrer">Parameterized Queries</a></span></text><author><a class="comment-user" href="/users/55164/neil-n" title="17,624 reputation">Neil N</a></author></comment><comment><text><span class="comment-copy">@David A bit vague...but much clearer than it was when subu originally asked it. :-)</span></text><author><a class="comment-user" href="/users/39532/mezoid" title="14,842 reputation">mezoid</a></author></comment><comment><text><span class="comment-copy">@mezoid: true, my comment was actually referring to the original. It is much better now ;-)</span></text><author><a class="comment-user" href="/users/56541/david-z" title="76,622 reputation">David Z</a></author></comment><comment><text><span class="comment-copy">LOL sorry! I should have checked the time stamp! :-)</span></text><author><a class="comment-user" href="/users/39532/mezoid" title="14,842 reputation">mezoid</a></author></comment><comment><text><span class="comment-copy"><a href="http://xkcd.com/327/" rel="nofollow noreferrer">This is SQL injection.</a></span></text><author><a class="comment-user" href="/users/60281/devsolar" title="39,429 reputation">DevSolar</a></author></comment><comment><text><span class="comment-copy">+1, one of my favorites!</span></text><author><a class="comment-user" href="/users/12716/randolpho" title="43,952 reputation">Randolpho</a></author></comment><comment><text><span class="comment-copy">I love the recent attempts SO has been doing to take crap questions and turn them into valuable resources. Kudos, editors of this post!</span></text><author><a class="comment-user" href="/users/12716/randolpho" title="43,952 reputation">Randolpho</a></author></comment><comment><text><span class="comment-copy">I don't agree that this is an exact duplicate of the question about the XKCD cartoon.</span></text><author><a class="comment-user" href="/users/20860/bill-karwin" title="305,545 reputation">Bill Karwin</a></author></comment><comment><text><span class="comment-copy">I agree with Bill Karwin. The linked question is asking for clarification of an XKCD comic. This question (the cleaned up version anyway) asks more specific questions and the answers here are better.</span></text><author><a class="comment-user" href="/users/7565/robert-s" title="17,506 reputation">Robert S.</a></author></comment><comment><text><span class="comment-copy"><a href="http://xkcd.com/327/" rel="nofollow noreferrer">xkcd.com/327</a></span></text><author><a class="comment-user" href="/users/181765/max-shawabkeh" title="26,439 reputation">Max Shawabkeh</a></author></comment><comment><text><span class="comment-copy">@Max :D my favourite xkcd so far.</span></text><author><a class="comment-user" href="/users/301525/m0s" title="2,587 reputation">m0s</a></author></comment><comment><text><span class="comment-copy">@Max - thanks, I was looking for that, trying to remember where I'd seen it.  (forgot it was XKCD).  A change request recently came down to our dev team, requiring us to add support for ' in the "name" field of our database (currently stripped), particulary for an import utility that end-users can run to import data.  This will be good to attach to the requirements doc....</span></text><author><a class="comment-user" href="/users/289135/chris-thornton" title="13,088 reputation">Chris Thornton</a></author></comment><comment><text><span class="comment-copy">@Max I <i>knew</i> someone would post that xkcd within 3 minutes :P</span></text><author><a class="comment-user" href="/users/31671/alex" title="285,218 reputation">alex</a></author></comment><comment><text><span class="comment-copy">@alex: It's a traditional obligation for any SQL injection topic.</span></text><author><a class="comment-user" href="/users/181765/max-shawabkeh" title="26,439 reputation">Max Shawabkeh</a></author></comment><comment><text><span class="comment-copy">@Chris Thornton - How is it that ya'll aren't using parameterized queries? That would obviate the need....</span></text><author><a class="comment-user" href="/users/109749/jcolebrand" title="13,669 reputation">jcolebrand</a></author></comment><comment><text><span class="comment-copy">See also: <a href="http://unixwiz.net/techtips/sql-injection.html" rel="nofollow noreferrer">unixwiz.net/techtips/sql-injection.html</a>, <a href="http://www.securiteam.com/securityreviews/5DP0N1P76E.html" rel="nofollow noreferrer">securiteam.com/securityreviews/5DP0N1P76E.html</a>, <a href="http://www.owasp.org/index.php/SQL_injection" rel="nofollow noreferrer">owasp.org/index.php/SQL_injection</a>, <a href="http://en.wikipedia.org/wiki/SQL_injection" rel="nofollow noreferrer">en.wikipedia.org/wiki/SQL_injection</a>, <a href="http://msdn.microsoft.com/en-us/library/ms161953.aspx" rel="nofollow noreferrer">msdn.microsoft.com/en-us/library/ms161953.aspx</a>, <a href="http://www.php.net/manual/en/security.database.sql-injection.php" rel="nofollow noreferrer">php.net/manual/en/security.database.sql-injection.php</a></span></text><author><a class="comment-user" href="/users/90527/outis" title="51,421 reputation">outis</a></author></comment><comment><text><span class="comment-copy">@drachenstern - Legacy app, no changes allowed without a change request from the business unit, most database logic uses an abstraction layer so the business logic still thinks it's on a BTrieve database!</span></text><author><a class="comment-user" href="/users/289135/chris-thornton" title="13,088 reputation">Chris Thornton</a></author></comment><comment><text><span class="comment-copy">@Chris Thornton - Oh $DEITY that's really gotta suck. Ah well...</span></text><author><a class="comment-user" href="/users/109749/jcolebrand" title="13,669 reputation">jcolebrand</a></author></comment><comment><text><span class="comment-copy">Hello to the person who gave me a drive-by downvote for this. You either 1) have no sense of humor, or 2) did not understand the link, i.e. do not understand what a SQL injection is or why it can be harmful.</span></text><author><a class="comment-user" href="/users/60281/devsolar" title="39,429 reputation">DevSolar</a></author></comment><comment><text><span class="comment-copy">@DevSolar: If someone did not understand the link, that's your responsibility. The question is supposed to help people who <b><i>don't know</i></b> what SQL injection is.</span></text><author><a class="comment-user" href="/users/398242/wesley-murch" title="71,427 reputation">Wesley Murch</a></author></comment><comment><text><span class="comment-copy">@Wesley Murch: I was always assuming that programming was only for people with a basic capability to <i>think</i>.</span></text><author><a class="comment-user" href="/users/60281/devsolar" title="39,429 reputation">DevSolar</a></author></comment><comment><text><span class="comment-copy">@DevSolar: The problem is that this is one of the posts I'm directing noobs to for learning the basics about SQL injection, and saw your upset comment that someone perhaps "does not understand what SQL injection is". Well, that's the whole point of this post, isn't it? This is closed as a dupe of another post <i>dedicated</i> to understanding that comic, so obviously it needs a bit more explanation.</span></text><author><a class="comment-user" href="/users/398242/wesley-murch" title="71,427 reputation">Wesley Murch</a></author></comment><comment><text><span class="comment-copy">@Wesley Murch: I still think that the "code example" given in the comic should tell anyone capable of understanding SQL what an "injection" might be. Anyone <i>not</i> capable of understanding SQL shouldn't be here in the first place.</span></text><author><a class="comment-user" href="/users/60281/devsolar" title="39,429 reputation">DevSolar</a></author></comment><comment><text><span class="comment-copy">I think the link has a pretty clear example of SQL injection - the actual injection string itself plus the outcome. I found it very helpful.</span></text><author><a class="comment-user" href="/users/345717/ebomike" title="56,708 reputation">EboMike</a></author></comment><comment><text><span class="comment-copy">@Wesley Murch: This was one-and-a-half-year old answer that people determined to be the second most helpful answer to the question, and that no-one had touched for about a year. Now a comment with no upvotes so that it doesn't even show up on the first view. Well done.</span></text><author><a class="comment-user" href="/users/60281/devsolar" title="39,429 reputation">DevSolar</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p><strong>Can someone explain SQL injecton?</strong> </p>
<p>SQL injection happens when you interpolate some content into a SQL query string, and the result modifies the syntax of your query in ways you didn't intend.</p>
<p>It doesn't have to be malicious, it can be an accident.  But accidental SQL injection is more likely to result in an error than in a vulnerability.</p>
<p>The harmful content doesn't have to come from a user, it could be content that your application gets from any source, or even generates itself in code.</p>
<p><strong>How does it cause vulnerabilities?</strong> </p>
<p>It can lead to vulnerabilities because attackers can send values to an application that they know will be interpolated into a SQL string.  By being very clever, they can manipulate the result of queries, reading data or even changing data that they shouldn't be allowed to do.</p>
<p>Example in PHP:</p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="pun">$</span><span class="pln">password </span><span class="pun">=</span><span class="pln"> </span><span class="pun">$</span><span class="pln">_POST</span><span class="pun">[</span><span class="str">'password'</span><span class="pun">];</span><span class="pln">
</span><span class="pun">$</span><span class="pln">id </span><span class="pun">=</span><span class="pln"> </span><span class="pun">$</span><span class="pln">_POST</span><span class="pun">[</span><span class="str">'id'</span><span class="pun">];</span><span class="pln">
</span><span class="pun">$</span><span class="pln">sql </span><span class="pun">=</span><span class="pln"> </span><span class="str">"UPDATE Accounts SET PASSWORD = '$password' WHERE account_id = $id"</span><span class="pun">;</span></code></pre>
<p>Now suppose the attacker sets the POST request parameters to "<code>password=xyzzy</code>" and "<code>id=account_id</code>" resulting in the following SQL:</p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="kwd">UPDATE</span><span class="pln"> Accounts </span><span class="kwd">SET</span><span class="pln"> PASSWORD </span><span class="pun">=</span><span class="pln"> </span><span class="str">'xyzzy'</span><span class="pln"> </span><span class="kwd">WHERE</span><span class="pln"> account_id </span><span class="pun">=</span><span class="pln"> account_id</span></code></pre>
<p>Although I expected <code>$id</code> to be an integer, the attacker chose a string that is the name of the column.  Of course now the condition is true on <em>every</em> row, so the attacker has just set the password for <em>every</em> account.  Now the attacker can log in to anyone's account -- including privileged users.</p>
<p><strong>Where exactly is the point where SQL is injected?</strong></p>
<p>It isn't SQL that's injected, it's content that's interpolated ("injected") into a SQL string, resulting in a different kind of query than I intended.  I trusted the dynamic content without verifying it, and executed the resulting SQL query blindly.  That's where the trouble starts.</p>
<p>SQL injection is a fault in the application code, not typically in the database or in the database access library or framework.  The remedy for SQL injection follows the <a href="http://shiflett.org/blog/2005/feb/my-top-two-php-security-practices" rel="noreferrer">FIEO</a> practices:</p>
<ul>
<li><strong>Filter Input:</strong> verify that the content is in a format you expect, instead of assuming.  For example, apply a regular expression, or use a data type coercion like the <code>intval()</code> function.</li>
<li><strong>Escape Output:</strong> in this case "output" is where the content is combined with the SQL string.  When interpolating strings, avoid imbalanced quotes by using a function that escapes literal quote characters and any other characters that may be string boundaries.</li>
</ul>
</div></text><author><a href="/users/20860/bill-karwin">Bill Karwin</a></author><comments><comment><text><span class="comment-copy">What about sql parameters. IMO it should be your first line of defense from sql injection ! Avoid injection content into sql string if possible. The content should go in parameters. This way DB knows that the content is not a part of sql and therefore you are automatically safe.</span></text><author><a class="comment-user" href="/users/21645/petar-repac" title="3,003 reputation">Petar Repac</a></author></comment><comment><text><span class="comment-copy">@Petar Repac: Yes, query parameters are good and I recommend using them.  But a parameter substitutes only for a single value.  You can't use parameters for table or column identifiers, or SQL keywords, or lists of values in an IN() predicate, or other SQL expressions or syntax.  Parameters are useful but you need other techniques for other cases.</span></text><author><a class="comment-user" href="/users/20860/bill-karwin" title="305,545 reputation">Bill Karwin</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>SQL Injection occurs when the user of an application is able to affect the meaning of database query.  This often occurs when arbitary strings from user input are concatenated to create SQL which is fed to the database.  For example lets say we had the following code (in PHP, but the same holds true for any language), which might be used to handle a user login.</p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="pun">$</span><span class="pln">sql </span><span class="pun">=</span><span class="pln"> </span><span class="str">"SELECT  FROM users WHERE username='"</span><span class="pun">.$</span><span class="pln">_GET</span><span class="pun">[</span><span class="str">'username'</span><span class="pun">].</span><span class="str">"' AND password='"</span><span class="pun">.$</span><span class="pln">_GET</span><span class="pun">[</span><span class="str">'password'</span><span class="pun">].</span><span class="str">"'"</span><span class="pun">;</span></code></pre>
<p>The harm is done when the user enters something like </p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="pln">administrator</span><span class="str">'</span><span class="pun">;</span><span class="pln"> </span><span class="com">--</span></code></pre>
<p>... for the username.  Without proper encoding the query becomes:</p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="kwd">SELECT</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="kwd">FROM</span><span class="pln"> users </span><span class="kwd">WHERE</span><span class="pln"> username</span><span class="pun">=</span><span class="str">'administrator'</span><span class="pun">;</span><span class="pln"> </span><span class="com">-- AND password=''</span></code></pre>
<p>The issue here is that the ' in the username closes out the username field then the -- starts a SQL comment causing the database server to ignore the rest of the string.  The net result is the user can now log in as the administrator without having to know the password.  SQL Inection can also be used to execute UPDATE, DELETE or DROP queries and really damage the database.</p>
<p>SQL Injection can be prevented by using parameterised queries, or applying your language/toolkit's escaping functions (such as mysql_real_escape_string() in PHP).</p>
<p>Once you understand SQL Injection you'll get the joke behind <a href="http://xkcd.com/327/" rel="noreferrer">this cartoon</a>.</p>
</div></text><author><a href="/users/38458/jim-ohalloran">Jim OHalloran</a></author><comments><comment><text><span class="comment-copy">+1 This is a nice, simpler explanation than most of the others.</span></text><author><a class="comment-user" href="/users/439898/designerguy" title="3,442 reputation">DesignerGuy</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>There are plenty of resources on the web - just google it:</p>
<p><a href="http://en.wikipedia.org/wiki/SQL_Injection" rel="noreferrer">http://en.wikipedia.org/wiki/SQL_Injection</a> is a good starting point.</p>
</div></text><author><a href="/users/14902/smashery">Smashery</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>SQL injection is when things that're supposed to be data are treated as SQL code unwillingly.</p>
<p>For instance, if you were to do</p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="pln">mysql_query</span><span class="pun">(</span><span class="str">"SELECT * FROM posts WHERE postid=$postid"</span><span class="pun">);</span></code></pre>
<p>Normally it'd get you the post with a given id, but assume that <code>$postid</code> is set to the string <code>10; DROP TABLE posts --</code>; all of a sudden, the actual query you're sending is</p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="pln">mysql_query</span><span class="pun">(</span><span class="str">"SELECT * FROM posts WHERE postid=10; DROP TABLE posts --"</span><span class="pun">);</span></code></pre>
<p>This is quite a problem, as you'd be losing your entire posts table due to a malicious user - oh dear.</p>
<p>The easiest way to prevent this is to use prepared statements, for instance through <a href="http://dk2.php.net/manual/en/pdo.prepare.php" rel="noreferrer">PDO</a> or <a href="http://dk2.php.net/manual/en/mysqli.prepare.php" rel="noreferrer">MySQLi</a>.</p>
<p>The equivalent example in PDO would then be </p>
<pre class="lang-sql prettyprint prettyprinted" style=""><code><span class="pun">$</span><span class="pln">statement </span><span class="pun">=</span><span class="pln"> </span><span class="pun">$</span><span class="pln">db-</span><span class="pun">&gt;</span><span class="pln">prepare</span><span class="pun">(</span><span class="str">'SELECT * FROM posts WHERE postid = :postid'</span><span class="pun">);</span><span class="pln">
</span><span class="pun">$</span><span class="pln">statement-</span><span class="pun">&gt;</span><span class="pln">bindValue</span><span class="pun">(</span><span class="str">':postid'</span><span class="pun">,</span><span class="pln"> </span><span class="pun">$</span><span class="pln">postid</span><span class="pun">);</span><span class="pln">
</span><span class="pun">$</span><span class="pln">statement-</span><span class="pun">&gt;</span><span class="kwd">execute</span><span class="pun">();</span></code></pre>
<p>Doing this ensures that the database system knows that $postid is to be treated as data and not code, and will thus be handled appropriately.</p>
</div></text><author><a href="/users/79061/sebastian-paaske-t%c3%b8rholm">Sebastian Paaske Tørholm</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>This question has been answered many times on StackOverflow, but it's an important topic for everyone to know about, so I'm not going to vote to close this question.</p>
<p>Here are links to some of my past answers on this topic:</p>
<ul>
<li><a href="http://stackoverflow.com/questions/601300/what-is-sql-injection/601524#601524">What is SQL Injection?</a></li>
<li><a href="http://stackoverflow.com/questions/1862036/how-do-i-protect-this-function-from-sql-injection/1862178#1862178">How do I protect this function from SQL injection?</a></li>
<li><a href="http://stackoverflow.com/questions/306668/are-parameters-really-enough-to-prevent-sql-injections/306818#306818">Are Parameters really enough to prevent Sql injections?</a></li>
<li><a href="http://stackoverflow.com/questions/1683843/is-sql-injection-a-risk-today/1684292#1684292">Is SQL injection a risk today?</a></li>
</ul>
<p>I also gave a presentation at the MySQL Conference this month, and my slides are online:</p>
<ul>
<li><a href="http://www.slideshare.net/billkarwin/sql-injection-myths-and-fallacies" rel="noreferrer">SQL Injection Myths &amp; Fallacies</a></li>
</ul>
</div></text><author><a href="/users/20860/bill-karwin">Bill Karwin</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>SQL injection is where a malicious user will put SQL into input fields to try and run the SQL on your server.</p>
<p>The #1 advice that I adhere to is to use parameterized stored procedures rather than building raw SQL in code.</p>
<p>Stored Procedure parameters don't get executed, making them safe in most cases.</p>
</div></text><author><a href="/users/102371/john-weldon">John Weldon</a></author><comments><comment><text><span class="comment-copy">Double upvote (comment, answer) to hopefully revert a portion of the damage...</span></text><author><a class="comment-user" href="/users/109749/jcolebrand" title="13,669 reputation">jcolebrand</a></author></comment><comment><text><span class="comment-copy">@drachenstern lol, thanks!</span></text><author><a class="comment-user" href="/users/102371/john-weldon" title="26,390 reputation">John Weldon</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Check these articles:</p>
<ul>
<li><a href="http://www.securiteam.com/securityreviews/5DP0N1P76E.html" rel="nofollow noreferrer">SQL Injection Walkthrough</a></li>
<li><a href="http://www.wwwcoder.com/main/parentid/258/site/2966/68/default.aspx" rel="nofollow noreferrer">Preventing SQL Injection Attacks</a></li>
<li><a href="http://ferruh.mavituna.com/sql-injection-cheatsheet-oku/#about" rel="nofollow noreferrer">SQL Injection Cheat Sheet</a></li>
</ul>
</div></text><author><a href="/users/5445/cms">CMS</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p><a href="http://msdn.microsoft.com/en-us/magazine/cc163917.aspx" rel="nofollow noreferrer">Stop SQL Injection Attacks Before They Stop You</a></p>
</div></text><author><a href="/users/4337/gulzar-nazim">Gulzar Nazim</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p><a href="http://cwe.mitre.org/top25/#CWE-89" rel="nofollow noreferrer">CWE</a></p>
<p>CWE has many other exploits to look into as well.</p>
</div></text><author><a href="/users/205426/woot4moo">Woot4Moo</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I found this paper to be an extremely good read about SQL injection techniques (link is to PDF): <a href="http://www.cgisecurity.com/lib/advanced_sql_injection.pdf" rel="nofollow noreferrer">Advanced SQL Injection In SQL Server Applications</a>.</p>
<p>Despite the title saying "Advanced", it's quite readable even if you don't have much knowledge about SQL injection.</p>
</div></text><author><a href="/users/41665/chad-birch">Chad Birch</a></author><comments><comment><text><span class="comment-copy">@johnmortal: Thanks, I replaced the link with a working one. My avatar is the main character from <a href="http://en.wikipedia.org/wiki/Persona_3" rel="nofollow noreferrer">Persona 3</a>.</span></text><author><a class="comment-user" href="/users/41665/chad-birch" title="53,616 reputation">Chad Birch</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>To get some general background check out the <a href="http://en.wikipedia.org/wiki/SQL_Injection" rel="nofollow noreferrer">Wikipedia article on SQL Injection</a>.</p>
<p>In short SQL injection attacks can leave you vulnerable to all manor of database data theft and destruction.  The exact details of what can be done to your system depend on the details of the system itself.</p>
<p>Any time you pass input from your users to your database you have a potential injection point.  Web applications are often lacking in the this regard, as new programmers often do not understand the risks of handling input from users, and web applications are attacked by very smart people you never thought would find your program.</p>
</div></text><author><a href="/users/24215/acrosman">acrosman</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>You will like <a href="http://www.codeproject.com/KB/database/SqlInjectionAttacks.aspx" rel="nofollow noreferrer">this</a> article from code project ; )</p>
<blockquote>
<p><strong>Summary</strong></p>
<ul>
<li>Encrypt sensitive data.</li>
<li>Access the database using an account with the least privileges
  necessary.</li>
<li>Install the database using an account with the least privileges
  necessary.</li>
<li>Ensure that data is valid.</li>
<li>Do a code review to check for the possibility of second-order
  attacks.</li>
<li><strong>Use parameterised queries.</strong></li>
<li><strong>Use stored procedures.</strong></li>
<li>Re-validate data in stored procedures.</li>
<li><strong>Ensure that error messages give nothing away about the internal
  architecture of the application or the
  database.</strong></li>
</ul>
</blockquote>
</div></text><author><a href="/users/201142/sdreyes">SDReyes</a></author><comments><comment><text><span class="comment-copy">lol second order attacks</span></text><author><a class="comment-user" href="/users/80243/l%cc%b2%cc%b3o%cc%b2%cc%b3%cc%b3n%cc%b2%cc%b3%cc%b3g%cc%b2%cc%b3%cc%b3p%cc%b2%cc%b3o%cc%b2%cc%b3%cc%b3k%cc%b2%cc%b3%cc%b3e%cc%b2%cc%b3%cc%b3" title="8,609 reputation">L̲̳o̲̳̳n̲̳̳g̲̳̳p̲̳o̲̳̳k̲̳̳e̲̳̳</a></author></comment><comment><text><span class="comment-copy">hahahahah yes I know. but it is a set of variables that should be considered ; )</span></text><author><a class="comment-user" href="/users/201142/sdreyes" title="5,267 reputation">SDReyes</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The point where SQL is injected is any point that your application accepts input from the user.</p>
<p>Whether this becomes a dangerous vulnerability for your web application depends on whether this input is later used as part of an SQL query without properly checking its type and escaping it if necessary.</p>
<p>Without proper escaping, some SQL code 'injected' by the user could be executed by the SQL engine as SQL code, rather than a simple string or value.</p>
</div></text><author><a href="/users/53212/thomasrutter">thomasrutter</a></author><comments/></answer></answers></post>