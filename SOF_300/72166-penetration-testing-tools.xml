<?xml version="1.0" encoding="utf-8"?>
<post><title>sql - Penetration testing tools - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>We have hundreds of websites which were developed in asp, .net and java and we are paying lot of money for an external agency to do a penetration testing for our sites to check for security loopholes. 
Are there any (good) software (paid or free) to do this? </p>
<p>or.. are there any technical articles which can help me develop this tool?</p>
</div></text><author><a href="/users/88373/rap">Rap</a></author><comments/></question><answers><answer><text><div class="post-text" itemprop="text">
<p>There are a couple different directions you can go with automated testing tools for web applications.</p>
<p>First, there are the <strong>commercial web scanners</strong>, of which HP WebInspect and Rational AppScan are the two most popular. These are "all-in-one", "fire-and-forget" tools that you download and install on an internal Windows desktop and then give a URL to spider your site, scan for well-known vulnerabilities (ie, the things that have hit Bugtraq), and probe for cross-site scripting and SQL injection vulnerabilities. </p>
<p>Second, there are the <strong>source-code scanning tools</strong>, of which Coverity and Fortify are probably the two best known. These are tools you install on a developer's desktop to process your Java or C# source code and look for well-known patterns of insecure code, like poor input validation. </p>
<p>Finally, there are the <strong>penetration test tools</strong>. By far the most popular web app penetration testing tool among security professionals is Burp Suite, which you can find at <a href="http://www.portswigger.net/proxy" rel="noreferrer">http://www.portswigger.net/proxy</a>. Others include Spike Proxy and OWASP WebScarab. Again, you'll install this on an internal Windows desktop. It will run as an HTTP proxy, and you'll point your browser at it. You'll use your applications as a normal user would, while it records your actions. You can then go back to each individual page or HTTP action and probe it for security problems.</p>
<p>In a complex environment, and especially if you're considering anything DIY, <strong>I strongly recommend the penetration testing tools</strong>. Here's why:</p>
<p>Commercial web scanners provide a lot of "breadth", along with excellent reporting. However:</p>
<ul>
<li><p>They tend to miss things, because every application is different.</p></li>
<li><p>They're expensive (WebInspect starts in the 10's of thousands).</p></li>
<li><p>You're paying for stuff you don't need (like databases of known bad CGIs from the '90s).</p></li>
<li><p>They're hard to customize.</p></li>
<li><p>They can produce noisy results.</p></li>
</ul>
<p>Source code scanners are more thorough than web scanners. However:</p>
<ul>
<li><p>They're even more expensive than the web scanners.</p></li>
<li><p>They require source code to operate.</p></li>
<li><p>To be effective, they often require you to annotate your source code (for instance, to pick out input pathways).</p></li>
<li><p>They have a tendency to produce false positives.</p></li>
</ul>
<p>Both commercial scanners and source code scanners have a bad habit of becoming shelfware. Worse, even if they work, their cost is comparable to getting 1 or 2 entire applications audited by a consultancy; if you trust your consultants, you're guaranteed to get better results from them than from the tools. </p>
<p>Penetration testing tools have downsides too:</p>
<ul>
<li><p>They're much harder to use than fire-and-forget commercial scanners.</p></li>
<li><p>They assume some expertise in web application vulnerabilities --- you have to know what you're looking for.</p></li>
<li><p>They produce little or no formal reporting.</p></li>
</ul>
<p>On the other hand:</p>
<ul>
<li><p>They're much, much cheaper --- the best of the lot, Burp Suite, costs only 99EU, and has a free version.</p></li>
<li><p>They're easy to customize and add to a testing workflow.</p></li>
<li><p>They're much better at helping you "get to know" your applications from the inside.</p></li>
</ul>
<p>Here's something you'd do with a pen-test tool for a basic web application:</p>
<ol>
<li><p>Log into the application through the proxy</p></li>
<li><p>Create a "hit list" of the major functional areas of the application, and exercise each once.</p></li>
<li><p>Use the "spider" tool in your pen-test application to find all the pages and actions and handlers in the application.</p></li>
<li><p>For each dynamic page and each HTML form the spider uncovers, use the "fuzzer" tool (Burp calls it an "intruder") to exercise every parameter with invalid inputs. Most fuzzers come with basic test strings that include:</p>
<ul>
<li><p>SQL metacharacters</p></li>
<li><p>HTML/Javascript escapes and metacharacters</p></li>
<li><p>Internationalized variants of these to evade input filters</p></li>
<li><p>Well-known default form field names and values</p></li>
<li><p>Well-known directory names, file names, and handler verbs</p></li>
</ul></li>
<li><p>Spend several hours filtering the resulting errors (a typical fuzz run for one form might generate 1000 of them) looking for suspicious responses.</p></li>
</ol>
<p>This is a labor-intensive, "bare-metal" approach. But when your company owns the actual applications, the bare-metal approach pays off, because you can use it to build regression test suites that will run like clockwork at each dev cycle for each app. This is a win for a bunch of reasons:</p>
<ul>
<li><p>Your security testing will take a predictable amount of time and resources per application, which allows you to budget and triage.</p></li>
<li><p>Your team will get maximally accurate and thorough results, since your testing is going to be tuned to your applications.</p></li>
<li><p>It's going to cost less than commercial scanners and less than consultants.</p></li>
</ul>
<p>Of course, if you go this route, you're basically turning yourself into a security consultant for your company. I don't think that's a bad thing; if you don't want that expertise, WebInspect or Fortify isn't going to help you much anyways. </p>
</div></text><author><a href="/users/5674/tqbf">tqbf</a></author><comments><comment><text><span class="comment-copy">Excellent reply.</span></text><author><a class="comment-user" href="/users/15667/xan" title="5,981 reputation">xan</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I know you asked specifically about pentesting tools, but since those have been amply answered (I usually go with a mix of AppScan and trained pentester), I think it's important to point out that <em>pentesting is not the only way to "check for security loopholes", and is often <strong>not the most effective</strong>.</em> </p>
<p>Source code review tools can provide you with much better visibility into your codebase, and find many flaws that pentesting won't. </p>
<p>These include Fortify and OunceLabs (expensive and for many languages), VisualStudio.NET CodeAnalysis (for .NET and C++, free with VSTS, decent but not great), OWASP's LAPSE for Java (free, decent not great), CheckMarx (not cheap, fanTASTic tool for .NET and Java, but high overhead), and many more.</p>
<p>An important point you must note - (most of) the automated tools do not find all the vulnerabilities, not even close. You can expect the automated tools to find approximately 35-40% of the secbugs that would be found by a professional pentester; the same goes for automated vs. manual source code review.</p>
<p>And of course a proper SDLC (Security Development Lifecycle), including Threat Modeling, Design Review, etc, will help even more...</p>
</div></text><author><a href="/users/10080/avid">AviD</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>You could consider <a href="https://chorizo-scanner.com/" rel="nofollow noreferrer">chorizo</a></p>
</div></text><author><a href="/users/6563/marc-gear">Marc Gear</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>McAfee Secure is not a solution. The service they provide is a joke.</p>
<p>See below:</p>
<p><a href="http://blogs.zdnet.com/security/?p=1092&amp;tag=rbxccnbzd1" rel="nofollow noreferrer">http://blogs.zdnet.com/security/?p=1092&amp;tag=rbxccnbzd1</a><br/>
<a href="http://blogs.zdnet.com/security/?p=1068&amp;tag=rbxccnbzd1" rel="nofollow noreferrer">http://blogs.zdnet.com/security/?p=1068&amp;tag=rbxccnbzd1</a><br/>
<a href="http://blogs.zdnet.com/security/?p=1114&amp;tag=rbxccnbzd1" rel="nofollow noreferrer">http://blogs.zdnet.com/security/?p=1114&amp;tag=rbxccnbzd1</a></p>
</div></text><author><a href="/users/15623/woany">woany</a></author><comments><comment><text><span class="comment-copy">these articles are a year and a half old now? are they still valid?</span></text><author><a class="comment-user" href="/users/16940/simon-weaver" title="56,004 reputation">Simon_Weaver</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I've heard good things about SpiDynamics WebInspect as far as paid solutions go, as well as Nikto (for a free solution) and other open source tools. Nessus is an excellent tool for infrastructure in case you need to check that layer as well. You can pick up a live cd with several tools on it called Nubuntu (Auditor, Helix, or any other security based distribution works too) and then Google up some tutorials for the specific tool. Always, always make sure to scan from the local network though. You run the risk of having yourself blocked by the data center if you scan a box from the WAN without authorization. Lesson learned the hard way. ;)</p>
</div></text><author><a href="/users/12234/willasaywhat">willasaywhat</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Skipfish, w3af, arachni, ratproxy, ZAP, WebScarab : all free and very good IMO</p>
</div></text><author><a href="/users/867462/lisa1987">lisa1987</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p><a href="http://www.nessus.org/nessus/" rel="nofollow noreferrer">http://www.nessus.org/nessus/</a> -- Nessus will help suggests ways to make your servers better.  It can't really test custom apps by itself, though I think the plugins are relatively easy to create on your own.</p>
</div></text><author><a href="/users/12092/steve-g">Steve g</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Take a look at <a href="http://www-01.ibm.com/software/awdtools/appscan/" rel="nofollow noreferrer">Rational App Scan</a> (used to be called Watchfire).  Its not free, but has a nice UI, is dead powerful, generates reports (bespoke and against standard compliance frameworks such as Basel2) and I believe you can script it into your CI build.</p>
</div></text><author><a href="/users/2455/andrew-harmel-law">Andrew Harmel-Law</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>How about <a href="http://www.cirt.net/nikto2" rel="nofollow noreferrer">nikto</a> ?</p>
</div></text><author><a href="/users/38515/mhd">mhd</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>For this type of testing you really want to be looking at some type of fuzz tester. <a href="http://www.immunitysec.com/resources-freesoftware.shtml" rel="nofollow noreferrer">SPIKE Proxy</a> is one of a couple of fuzz testers for web apps. It is open source and written in Python. I believe there are a couple of videos from BlackHat or DefCON on using SPIKE out there somewhere, but I'm having difficulty locating them.</p>
<p>There are a couple of high end professional software packages that will do the web app testing and much more. One of the more popular tools would be <a href="http://www.coresecurity.com/content/security-testing-and-penetration-testing-products-and-services" rel="nofollow noreferrer">CoreImpact</a></p>
<p>If you do plan on going through with the Pen Testing on your own I highly recommend you read through much of the <a href="http://www.owasp.org/index.php/Category:OWASP_Project" rel="nofollow noreferrer">OWASP Project's documentation</a>. Specifically the OWASP Application Security Verification and Testing/Development guides. The mindset you need to thoroughly test your application is a little different than your normal development mindset (not that it SHOULD be different, but it usually is).</p>
</div></text><author><a href="/users/129751/marco0009">marco0009</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>what about <a href="http://code.google.com/p/ratproxy/" rel="nofollow noreferrer" title="ratproxy">rat proxy</a>? </p>
<blockquote>
<p>A semi-automated, largely passive web
  application security audit tool,
  optimized for an accurate and
  sensitive detection, and automatic
  annotation, of potential problems and
  security-relevant design patterns
  based on the observation of existing,
  user-initiated traffic in complex web
  2.0 environments.</p>
<p>Detects and prioritizes broad classes
  of security problems, such as dynamic
  cross-site trust model considerations,
  script inclusion issues, content
  serving problems, insufficient XSRF
  and XSS defenses, and much more</p>
<p>Ratproxy is currently believed to support Linux, FreeBSD, MacOS X, and Windows (Cygwin) environments.</p>
</blockquote>
</div></text><author><a href="/users/24176/justin-lawrence">Justin Lawrence</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I know you asked specifically about pentesting tools, but since those have been amply answered (I usually go with a mix of AppScan and trained pentester), I think it's important to point out that pentesting is not the only way to "check for security loopholes", and is often not the most effective.</p>
<p>Source code review tools can provide you with much better visibility into your codebase, and find many flaws that pentesting won't.</p>
<p>These include Fortify and OunceLabs (expensive and for many languages), VisualStudio.NET CodeAnalysis (for .NET and C++, free with VSTS, decent but not great), OWASP's LAPSE for Java (free, decent not great), CheckMarx (not cheap, fanTASTic tool for .NET and Java, but high overhead), and many more.</p>
<p>An important point you must note - (most of) the automated tools do not find all the vulnerabilities, not even close. You can expect the automated tools to find approximately 35-40% of the secbugs that would be found by a professional pentester; the same goes for automated vs. manual source code review.</p>
<p>And of course a proper SDLC (Security Development Lifecycle), including Threat Modeling, Design Review, etc, will help even more...</p>
</div></text><author><a href="/users/419175/user419175">user419175</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p><a href="https://www.mcafeesecure.com/" rel="nofollow noreferrer">formerly hackersafe McAfee Secure.</a></p>
</div></text><author><a href="/users/2017/greg-ogle">Greg Ogle</a></author><comments><comment><text><span class="comment-copy">SO completely and trivially bypassable. Don't bother wasting your time.</span></text><author><a class="comment-user" href="/users/10080/avid" title="10,324 reputation">AviD</a></author></comment></comments></answer></answers></post>