<?xml version="1.0" encoding="utf-8"?>
<post><title>web services - How does Google Maps secure their API Key? How to make something similar? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>Currently Google requires you to create an API Key that is specific to the domain of where the map will be served from. How does Google enforce this? I want to do the same thing.</p>
<p>I expose an API for my service but want to allow clients to embed calls to the API via javascript and not just from the server. I could secure it with just a random token but of course this could be easily spoofed by anyone looking at the code on the client machine.</p>
<p>I always understood this concept to not be possible but somehow Google does a good job at enforcing it.</p>
<p>Edit - It sounds like Google really hasn't done anything amazing after all. Their API is most likely just for tracking and not really to guarantee that their API is used by the person with the key.</p>
</div></text><author><a href="/users/527702/hippietrail">hippietrail</a></author><comments><comment><text><span class="comment-copy">I believe I found the answer.</span></text><author><a class="comment-user" href="/users/58088/tyler-carter" title="42,111 reputation">Tyler Carter</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>I'm quite certain they use the REFERER URL to determine where the call is coming from. If the domain doesn't match what's assigned to the key, it's an invalid request.</p>
<p>For a practical example, using PHP you can check the domain using <code>$_SERVER['HTTP_REFERER']</code> to check the referer. If the domain matches, return a valid response. If it doesn't, you can return a 401 Unauthorized or other response.</p>
</div></text><author><a href="/users/190108/trevor">Trevor</a></author><comments><comment><text><span class="comment-copy">So if a client were to make an AJAX call to our API via JavaScript I can depend on the Referer Domain to be accurate and non-spoofable?</span></text><author><a class="comment-user owner" href="/users/10941/vyrotek" title="3,187 reputation">Vyrotek</a></author></comment><comment><text><span class="comment-copy">Nope. It is spoofable. I think Google more likely relies on the IP Address (can't be spoofed easily), and a DNS lookup.</span></text><author><a class="comment-user" href="/users/58088/tyler-carter" title="42,111 reputation">Tyler Carter</a></author></comment><comment><text><span class="comment-copy">Ah, so they take the domain URL and look up it's IP and lookup the DNS to make sure its a match. Although, you say this is technically spoofable as well?</span></text><author><a class="comment-user owner" href="/users/10941/vyrotek" title="3,187 reputation">Vyrotek</a></author></comment><comment><text><span class="comment-copy">The referer sent in the request can be spoofed (<a href="http://en.wikipedia.org/wiki/Referrer_spoofing" rel="nofollow noreferrer">en.wikipedia.org/wiki/Referrer_spoofing</a>).</span></text><author><a class="comment-user" href="/users/190108/trevor" title="5,034 reputation">Trevor</a></author></comment><comment><text><span class="comment-copy">It might be. Not 'completely' sure about its spoof-ability. But my guess is its more likely that Google us using the IP Address than using the REFERER.</span></text><author><a class="comment-user" href="/users/58088/tyler-carter" title="42,111 reputation">Tyler Carter</a></author></comment><comment><text><span class="comment-copy">The API address for an Ajax call is the IP address of the user agent of the client, that parses the document and executes the javascript. As such, the IP address of the Ajax request is unrelated to the document originating domain. The only information in the request that relates to the document domain is the referrer.  Of course, the referrer can be spoofed. However, in the case of the Google API, it would be the website that wants to spoof the referrer; however, the actual spoofing can happen only on the client side in the browser. Thus, spoofing is not that big of a threat.</span></text><author><a class="comment-user" href="/users/17028/franci-penov" title="59,266 reputation">Franci Penov</a></author></comment><comment><text><span class="comment-copy">The check is made by the GMaps Javascript code, <b>at the client side</b>. No need to check/spoof the referrer in this case...</span></text><author><a class="comment-user" href="/users/199554/wim" title="8,515 reputation">Wim</a></author></comment><comment><text><span class="comment-copy">@Wim - this is interesting.  So to clarify, when you embed the GMaps javascript on your site, it is <i>custom</i> JS just for your site?  That would mean Google returns a modified version of the JS for each website?  Or do you think the js is doing 2 calls: one to figure out what site it should be on and one to send the data?</span></text><author><a class="comment-user" href="/users/76486/brian-armstrong" title="11,611 reputation">Brian Armstrong</a></author></comment><comment><text><span class="comment-copy">@Brian: have a look at the main JS file you include for GMaps: <a href="http://maps.google.com/maps?file=api&amp;amp;v=2&amp;amp;key=%3Cyourkey%3E" rel="nofollow noreferrer">maps.google.com/â€¦</a>; Your key is somewhere in there, so you do get a (slightly) customized JS for your site (and I'm assuming that the key in some way contains an encoded value of the domain it's supposed to run on)</span></text><author><a class="comment-user" href="/users/199554/wim" title="8,515 reputation">Wim</a></author></comment><comment><text><span class="comment-copy">Very cool, thanks...</span></text><author><a class="comment-user" href="/users/76486/brian-armstrong" title="11,611 reputation">Brian Armstrong</a></author></comment><comment><text><span class="comment-copy">based on php documentation about $_SERVER['HTTP_REFERER'] is "The address of the page (if any) which referred the user agent to the current page. This is set by the user agent. Not all user agents will set this, and some provide the ability to modify HTTP_REFERER as a feature. In short, it cannot really be trusted."  so how we can depend on something that can be trusted ?. Thanks</span></text><author><a class="comment-user" href="/users/800816/ahmad" title="2,378 reputation">Ahmad</a></author></comment><comment><text><span class="comment-copy">many 'popular security solutions' strip or replace the referer by default. Do those users get blocked from seeing the service?</span></text><author><a class="comment-user" href="/users/230685/instine" title="1,332 reputation">Instine</a></author></comment><comment><text><span class="comment-copy">Up until a few months ago I thought I knew the answer to that. The fact that requests from <i>some</i> browsers come in without a referrer doesn't actually matter. Google lets it through. Google can block invalid referrers, and that is enough to make it hopeless for a bad person to <i>build a website</i> with a stolen API key. However...  In a move I find surprising, as of this year, newer browsers are now supporting a meta tag, which allows people to make a website which instructs it to send no referrer header. <a href="http://stackoverflow.com/a/28836003/338265">stackoverflow.com/a/28836003/338265</a> So I guess that blows that idea</span></text><author><a class="comment-user" href="/users/338265/harry-wood" title="1,243 reputation">Harry Wood</a></author></comment><comment><text><span class="comment-copy">An abuser can spoof the API key and use a modified referer to steal the quota of a company from his web browser. It is limited to the web browser (client). Do you think that google is limiting in some ways the number of requests an identified client (unique IP address) can make in a given time frame? That could limit the impact of the quota theft.</span></text><author><a class="comment-user" href="/users/2383627/nitseg" title="303 reputation">Nitseg</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The API key itself is most probably a one way hash of the domain the key is associated with and a secret only the Google API server knows about. It may contain some other pieces of well-known (to Google of course) information. When you make a request from that domain, the API server takes the domain the request comes from and makes that same one way hash calculation and compares the two values.</p>
<p>For Ajax calls, they most probably use the referrer to get the domain of the document host. While the referrer can be spoofed, ultimately in order to use the API, you need to get Google javascript to execute in the document. At this point, this javascript can verify that indeed the document that invoked the Ajax API call originated from the target server. This is also spoofable of course, provided you have your own DOM implementation or on the fly modification of the script. However, this spoofing needs to happen on the client side and the chances that the website that wants to use Google API will be able to spoof the client software are quite small.</p>
<p>Note that since the API is essentially free, they could've offered anonymous access to their API as well. Apparently Google's intent is not to protect unauthorized access to it, but to ensure that they can gather as much data as possible about that data usage and be able to associate that usage with other data they've collected about the target domain. As such, I wouldn't expect the API key verification to be much more complex than what I described above - the ROI on more advanced approach is too low.</p>
<p>And of course there's also the concern of possible XSS attacks through their API. But I don't believe their API key is tied too much into any anti-XSS code they have.</p>
</div></text><author><a href="/users/17028/franci-penov">Franci Penov</a></author><comments><comment><text><span class="comment-copy">Unfortunately this sounds like the most reasonable answer. Thanks for your input.</span></text><author><a class="comment-user owner" href="/users/10941/vyrotek" title="3,187 reputation">Vyrotek</a></author></comment><comment><text><span class="comment-copy">"they could've offered anonymous access" - Note that some functions are limited by number of requests per day and API key (and have been when this was posted), e.g. reverse geolocation.</span></text><author><a class="comment-user" href="/users/19746/piskvor" title="64,494 reputation">Piskvor</a></author></comment><comment><text><span class="comment-copy">Also note that usage on HTTPS is not free.</span></text><author><a class="comment-user" href="/users/84237/arjan" title="12,438 reputation">Arjan</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>As my comment says:</p>
<blockquote>
<p>The REFERER is spoofable, so it is probably unlikely that Google will use it as a means of verification. See <a href="http://en.wikipedia.org/wiki/Referrer_spoofing" rel="nofollow noreferrer">this wikipedia entry.</a></p>
</blockquote>
<p>My guess is that Google probably uses the IP address of the caller along with a DNS lookup. DNS is not really spoofable, as your DNS entries have to be correct for the website to even get to you.</p>
<p>But, even that has its problems, because if a server uses a Round-Robin IP Address DNS setup, Google will be redirected to a different IP address when doing a DNS lookup.</p>
<p>From the FAQ</p>
<blockquote>
<p>Note that a key for <a href="http://www.mygooglemapssite.com/" rel="nofollow noreferrer">http://www.mygooglemapssite.com/</a> will only be accepted when the site is accessed using this address. It will not be accepted if the site is accessed by IP address (eg. <a href="http://10.1.2.3/" rel="nofollow noreferrer">http://10.1.2.3/</a>) or by a hostname that is aliased to www.mygooglemapssite.com using a DNS CNAME record.</p>
</blockquote>
<p>My guess is that it might be using the <code>Host</code> header that is sent when requesting the page, which would work as normally Google asks you to include it's API script directly into the page. Then that script has access to the headers for the current page and can use that to check.</p>
<p>My guess is backed up with the fact that it does not work for IP addresses or Aliases, which means it isn't doing a DNS check. </p>
<p>THIS method cannot be spoofed, as it must be the correct header to access the page. However, this means that any aliases to the domain will not work.</p>
<p>However, this also means that you MUST provide a Javascript library to access the code, as you can't check this server side, I believe.</p>
</div></text><author><a href="/users/58088/tyler-carter">Tyler Carter</a></author><comments><comment><text><span class="comment-copy">The 'Host' header may contain the address when requesting the page, but how would I guarantee that value is also passed into the new AJAX request made by that page to my API? I thought this is basically what 'Referrer' contains which we know can be spoofed.</span></text><author><a class="comment-user owner" href="/users/10941/vyrotek" title="3,187 reputation">Vyrotek</a></author></comment><comment><text><span class="comment-copy">Well, because YOU are writing the AJAX call (because you provided the Javascript library), YOU can make sure it gets sent.</span></text><author><a class="comment-user" href="/users/58088/tyler-carter" title="42,111 reputation">Tyler Carter</a></author></comment><comment><text><span class="comment-copy">The Reason Google can require an API Key is because they provide the Javascript library, and can then run Javascript on the page.</span></text><author><a class="comment-user" href="/users/58088/tyler-carter" title="42,111 reputation">Tyler Carter</a></author></comment><comment><text><span class="comment-copy">Right, but anyone can see the code loaded onto the client and make modifications to send any domain url they want. So its still not secure.</span></text><author><a class="comment-user owner" href="/users/10941/vyrotek" title="3,187 reputation">Vyrotek</a></author></comment><comment><text><span class="comment-copy">So this method works or not? Can it be spoofed?</span></text><author><a class="comment-user" href="/users/726312/zechdc" title="1,682 reputation">zechdc</a></author></comment><comment><text><span class="comment-copy">How is the IP address of the caller (being the web browser) related to the website that the browser is showing? Also, <code>Host</code> is set to a Google domain (to which the request is made), not to the domain of the site that includes the Google script (from which the request is made)?</span></text><author><a class="comment-user" href="/users/84237/arjan" title="12,438 reputation">Arjan</a></author></comment><comment><text><span class="comment-copy">This answer is incorrect. As Arjan just said, the Host header for a call to a google API would be set to "google.com" so no use whatsoever. The IP address, is the IP address of the client (the computer where the web browser is running). Also no use. The only useful header coming from the browsers, is the referrer, which gives the website the browser is looking at. Do browsers always send this 100% reliably? No. Can a bad person break a single browser to send different referrer? Yes. Can a bad person make a website which instructs <i>all</i> the browsers to do this? No. So it works as tracking info.</span></text><author><a class="comment-user" href="/users/338265/harry-wood" title="1,243 reputation">Harry Wood</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I agree with all the points that Franci Penov has listed.I would like to elaborate a little bit on using someone else's API key. Let us assume you register key1 with <a href="http://mysite.com" rel="nofollow noreferrer">http://mysite.com</a>.</p>
<p>1) First attempt - If anothersite.com has script src=<a href="http://www.google.com/jsapi?key=key1" rel="nofollow noreferrer">http://www.google.com/jsapi?key=key1</a>, google could check referrer (hash scheme mentioned) and in this case there is a mismatch. How does evil attacker overcome this - a lot of people have mentioned that referrer can be spoofed. This does not really apply here. Sure you could send arbitrary headers if you make the request but how does evil hacker spoof referrer for users on anothersite.com - this is in general not easy. There have been old versions of flash on IE 6 that allowed attacker to set arbitrary headers when making cross domain requests but in general this is not workable for script src. I am not sure if the included js does any validation of document.location to prevent this (probably not).</p>
<p>2) Second attempt - evil attacker copies google javascript for the API key from mysite.com page source and then embeds modified javascript on anothersite.com. Now google can't check anything (the remote IP will be the user's computer and there isn't a whole lot you or google can do).</p>
<p>So, if you want to for some reason keep your API key secret (one reason, malicious person can get your key blacklisted/blocked), then don't embed key in client and proxy requests via your server (your application code now has the key). </p>
</div></text><author><a href="/users/271355/mar">mar</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>The reason it works is that you cannot make API calls with javascript. Browser security prevents javascript from making requests anywhere except to the domain that the javascript originated from. Because of this, any API calls from javascript need to be bounced through your server where the API key is stored (the api key is never seen by javascript).</p>
</div></text><author><a href="/users/166792/jeffrey-aylesworth">Jeffrey Aylesworth</a></author><comments><comment><text><span class="comment-copy">There are ways around this though (JSONP). I don't think its that you can't make the call, you just normally can't process the return.</span></text><author><a class="comment-user" href="/users/180516/ryan-elkins" title="3,469 reputation">Ryan Elkins</a></author></comment><comment><text><span class="comment-copy">Looking at a few examples and especially <a href="http://econym.org.uk/gmap/example_map12.htm" rel="nofollow noreferrer">econym.org.uk/gmap/example_map12.htm</a> (listed as a good tutorial) it appears that typical user expose key when they script src maps api. The sourced js overwrites the page (map is a set of img). Markers are placed by downloading json data using GDownloadUrl() - this just makes a XMLHttpRequest and so is back to his server. JSONP requires support from google server, right?</span></text><author><a class="comment-user" href="/users/271355/mar" title="296 reputation">mar</a></author></comment><comment><text><span class="comment-copy">If this were true, then for example CDN hosted jQuery could not make Ajax calls to any other domain than the CDN.</span></text><author><a class="comment-user" href="/users/84237/arjan" title="12,438 reputation">Arjan</a></author></comment></comments></answer></answers></post>