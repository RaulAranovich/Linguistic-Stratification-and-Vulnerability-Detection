<?xml version="1.0" encoding="utf-8"?>
<post><title>security - Android In App Billing: securing application public key - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>From Android In App Billing version 3 (TrivialDrive)sample application coming with sdk</p>
<h3>MainActivity.java</h3>
<pre class="default prettyprint prettyprinted" style=""><code><span class="com">/* base64EncodedPublicKey should be YOUR APPLICATION'S PUBLIC KEY
 * (that you got from the Google Play developer console). This is not your
 * developer public key, it's the *app-specific* public key.
 *
 * Instead of just storing the entire literal string here embedded in the
 * program,  construct the key at runtime from pieces or
 * use bit manipulation (for example, XOR with some other string) to hide
 * the actual key.  The key itself is not secret information, but we don't
 * want to make it easy for an attacker to replace the public key with one
 * of their own and then fake messages from the server.
 */</span><span class="pln">
</span><span class="typ">String</span><span class="pln"> base64EncodedPublicKey </span><span class="pun">=</span><span class="pln"> </span><span class="str">"CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE"</span><span class="pun">;</span></code></pre>
<p>Well I am not sure I understand this security measure. I know how to get the application public key (which is already base 64 encoded) from Google Play Developer Console. </p>
<p>What I am not understanding is this part</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln"> </span><span class="com">/* Instead of just storing the entire literal string here embedded in the
 * program,  construct the key at runtime from pieces or
 * use bit manipulation (for example, XOR with some other string) to hide
 * the actual key
 */</span></code></pre>
<p>As far as I know, this public key is a constant string, which is given from Google during application upload process. </p>
<p>How can we create the same key programmatically using any bit manipulation process? Has someone done it before? Is there any sample code on how to do this?</p>
</div></text><author><a href="/users/640731/krishnabhadra">Krishnabhadra</a></author><comments><comment><text><span class="comment-copy">Why would one hide a <i>public</i> key, because, well it's public?</span></text><author><a class="comment-user" href="/users/808723/gamescripting" title="6,722 reputation">GameScripting</a></author></comment><comment><text><span class="comment-copy">@GameScripting well it is the first question I asked myself.. But I think we are not talking about public key in a key pair (private key/public key pair).. Application public key may be different.. Too bad Google doesn't have much documentation about it especially after they themselves think that it is a security threat..</span></text><author><a class="comment-user owner" href="/users/640731/krishnabhadra" title="25,327 reputation">Krishnabhadra</a></author></comment><comment><text><span class="comment-copy">'A string' XOR 'secret' becomes 'Another string'. 'Another string' XOR the same 'secret' again, it becomes back to 'A string'. That's one XOR use case.</span></text><author><a class="comment-user" href="/users/1078792/%e6%ad%a3%e5%ae%97%e7%99%bd%e5%b8%83%e9%9e%8b" title="874 reputation">正宗白布鞋</a></author></comment><comment><text><span class="comment-copy">@Krishnabhadra it helps prevent the attacker from easily replacing your public key with his own and verifying the purchase with his own server (with his private key of course), so performing such tricks makes the attacker work just a little harder. Of course to really mitigate this problem, secondary verification on your own servers is encouraged...</span></text><author><a class="comment-user" href="/users/2669960/kevin-lee" title="760 reputation">Kevin Lee</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Something like this:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="typ">String</span><span class="pln"> </span><span class="typ">Base64EncodedPublicKey</span><span class="pln"> key </span><span class="pun">=</span><span class="pln"> </span><span class="str">"Ak3jfkd"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="typ">GetMiddleBit</span><span class="pun">()</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="str">"D349824"</span><span class="pun">;</span></code></pre>
<p>or </p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="typ">String</span><span class="pln"> </span><span class="typ">Base64EncodedPublicKey</span><span class="pln"> key </span><span class="pun">=</span><span class="pln"> 
         </span><span class="typ">DecrementEachletter</span><span class="pun">(</span><span class="str">"Bl4kgle"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="typ">GetMiddleBit</span><span class="pun">()</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="typ">ReverseString</span><span class="pun">(</span><span class="str">"D349824"</span><span class="pun">);</span></code></pre>
<p>or anything that doesn't put the key in base64 plaintext in a single string. Probably also something that doesn't store the key in base64 would be a good idea too, since raw base64 text fragments are pretty easy to spot.</p>
<p>It's not a particularly GOOD way to protect the key. But it protects against a trivial attack where somebody just searches through literal strings in you APK looking for something that looks like a base64-encoded public key. At least you make the #$<em>#</em>$ers work a little bit.</p>
<p>Presumably evil people can do bad things if they identify your public key. Google seems to think so, apparently. I can guess what this step does, but I'm not sure I really want to speculate on that in an open forum, and give anyone any ideas.  You want to do it though.</p>
<p>The basic plot summary would be that you're making it more difficult for somebody to write an application that programmatically de-LVLs an applciation.</p>
<p>One assumes that anyone who's doing this makes a living cracking 20 or 30,000 android apps and republishing them. Chances are, I suppose that they're not going to take the extra ten minutes to add your app to the list of 20,000 Android apps that have already been broken by a program, if they actually have to do a little bit of manual work. Unless you have a top tier application. And then the battle is potentially endless, and probably ultimately futile.</p>
<p>Splitting the key into consecutive chunks (as proposed in another answer) probably isn't good enough. Because the key will end up in consecutive strings in the string constant tables in the APK. Too easy to find that with a program.</p>
</div></text><author><a href="/users/1232937/robin-davies">Robin Davies</a></author><comments><comment><text><span class="comment-copy">What if the app is open source? Is this really worth it? Is there some other way to "secure" the public key?</span></text><author><a class="comment-user" href="/users/4275029/ibgib" title="487 reputation">ibgib</a></author></comment><comment><text><span class="comment-copy">There really is not any way to "secure" the public key. If your software can reconstruct the key from data stored in the APK, then so can software that just reads the APK. Chances are pretty good that it's not really worth it to do anything much more than trivial obscuring of the key. Kiddie hackers have broken stronger  software protection schemes than you're ever likely to come up with. If you prevent use of automated software that extracts the keys from any APK that copied the SDK code verbatim, you've probably done your duty.</span></text><author><a class="comment-user" href="/users/1232937/robin-davies" title="4,671 reputation">Robin Davies</a></author></comment><comment><text><span class="comment-copy">One more helpful answer on the security stackexchange! <a href="https://security.stackexchange.com/questions/33686/strong-encryption-for-base64-encoded-public-key-in-android/33696#33696" title="strong encryption for base64 encoded public key in android">security.stackexchange.com/questions/33686/…</a></span></text><author><a class="comment-user" href="/users/2669960/kevin-lee" title="760 reputation">Kevin Lee</a></author></comment><comment><text><span class="comment-copy">@ibgib: If your app is open source, then you won't be able to make purchases on Google play, for this and whole slew of other reasons as well, like (for example) the APK not being marked as having been installed by the Google Play installer. IF you want donations from an open source app, then you're probably better off using PayPal-hosted credit card payments. They can do micro-transactions for a significantly lower fee as well. (Google Play apps are forbidden from using alternate forms of payment by the terms of service, in case you though there was a germ of a great idea there. Don't do it!)</span></text><author><a class="comment-user" href="/users/1232937/robin-davies" title="4,671 reputation">Robin Davies</a></author></comment><comment><text><span class="comment-copy">@RobinDavies We've moved away from anything involving in-app purchases. Thanks for the heads up though.</span></text><author><a class="comment-user" href="/users/4275029/ibgib" title="487 reputation">ibgib</a></author></comment><comment><text><span class="comment-copy">@RobinDavies it's easier for evil people to bypass signature checking if it can replace public key. in this scenario those guys don't even make signature with their private key. public key is PUBLIC. hiding public key can be called anything but security.</span></text><author><a class="comment-user" href="/users/4617571/mojtaba-asg" title="420 reputation">Mojtaba Asg</a></author></comment><comment><text><span class="comment-copy">But can't the hacker just look at the string value regardless of the fact that it is split up into parts?</span></text><author><a class="comment-user" href="/users/5144855/ruchir-baronia" title="2,129 reputation">Ruchir Baronia</a></author></comment><comment><text><span class="comment-copy">The issue is whether hackers can write automated tools to crack thousands of apps in bulk, or whether they have to manually do each one using a debugger. If each app assembles their license string using eccentric methods, it becomes harder (but not impossible) for a hacker to write an automated to tool to crack a paid app.</span></text><author><a class="comment-user" href="/users/1232937/robin-davies" title="4,671 reputation">Robin Davies</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>An alternative is to do some basic transforms on the key.</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="com">// Replace this with your encoded key.</span><span class="pln">
</span><span class="typ">String</span><span class="pln"> base64EncodedPublicKey </span><span class="pun">=</span><span class="pln"> </span><span class="str">""</span><span class="pun">;</span><span class="pln">

</span><span class="com">// Get byte sequence to play with.</span><span class="pln">
</span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> bytes </span><span class="pun">=</span><span class="pln"> base64EncodedPublicKey</span><span class="pun">.</span><span class="pln">getBytes</span><span class="pun">();</span><span class="pln">

</span><span class="com">// Swap upper and lower case letters.</span><span class="pln">
</span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> bytes</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">bytes</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&gt;=</span><span class="pln"> </span><span class="str">'A'</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> bytes</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="str">'Z'</span><span class="pun">)</span><span class="pln">
        bytes</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">byte</span><span class="pun">)(</span><span class="pln"> </span><span class="str">'a'</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="pun">(</span><span class="pln">bytes</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="str">'A'</span><span class="pun">));</span><span class="pln">
    </span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">bytes</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&gt;=</span><span class="pln"> </span><span class="str">'a'</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> bytes</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="str">'z'</span><span class="pun">)</span><span class="pln">
        bytes</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">byte</span><span class="pun">)(</span><span class="pln"> </span><span class="str">'A'</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="pun">(</span><span class="pln">bytes</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="str">'a'</span><span class="pun">));</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="com">// Assign back to string.</span><span class="pln">
base64EncodedPublicKey </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">String</span><span class="pun">(</span><span class="pln"> bytes </span><span class="pun">);</span></code></pre>
<p>So the idea would be to put your original key in as <code>base64EncodedPublicKey</code> and run the above code, it would swap lower and uppercase letters and put the result back in <code>base64EncodedPublicKey</code>. You can then copy the result from the debugger and paste it into code as the original <code>base64EncodedPublicKey</code> value. At this point your key will be transformed (upper and lower case switched) and at runtime it'll fix it back to the correct casing, and continue to work.</p>
<p>The above is obviously quite a basic transcode, but you can be more creative, reverse the ordering of A-Z, swap odd and even numbers, swap vowels for even numbers. The issue here is that if I put code in the above snippet that does a bunch of more interesting transcodes, and then everyone copy and pastes that into their projects, a cracker will easily be able to see and use the transcode themselves (from looking at this post)! So you just have to come up with a few transforms yourself.</p>
<p>I've purposely made the above work in both direction (so if you run it twice, you'll get your original value back) as it makes it easy to run the algorithm on your original key. I think it is kind of neat it looks like the real key is sitting there as plain text, a casual cracker may try to switch this and then be confused when it doesn't work.</p>
</div></text><author><a href="/users/312000/steven-craft">Steven Craft</a></author><comments><comment><text><span class="comment-copy">~"<b>copy the result from the debugger and paste it into code</b>".  Why the manual step?  Can't you do this in Java?</span></text><author><a class="comment-user" href="/users/238937/igor-ganapolsky" title="9,595 reputation">Igor Ganapolsky</a></author></comment><comment><text><span class="comment-copy">The whole point is you don't want to have your real public key in plain text; so in the above it starts off in plain text; the debugger tells you what the encoded version is; then you paste the encoded version over the plain text version.</span></text><author><a class="comment-user" href="/users/312000/steven-craft" title="991 reputation">Steven Craft</a></author></comment><comment><text><span class="comment-copy">But when you pass your public key into <b>IabHelper</b>'s constructor, that key is your original public key anyway.  And as such, that specific call stack can be reverse-engineered.</span></text><author><a class="comment-user" href="/users/238937/igor-ganapolsky" title="9,595 reputation">Igor Ganapolsky</a></author></comment><comment><text><span class="comment-copy">Correct: if your goal is to make it impossible to gain access to the key, you will never succeed. It is called a public key for a reason. The recommendation Google give is to avoid leaving your key in plain text, so doing a simple transform, as above, achieves this. It does <i>not</i> stop anyone who is determined, but it avoids the key coming up as a string literal and some of the more basic attack vectors.</span></text><author><a class="comment-user" href="/users/312000/steven-craft" title="991 reputation">Steven Craft</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>You can split it into pieces like this</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="typ">String</span><span class="pln"> piece1 </span><span class="pun">=</span><span class="pln"> </span><span class="str">"SDFGJKGB4UIH234WE/FRT23RSDF/3DFUISDFVWE"</span><span class="pun">;</span><span class="pln">
</span><span class="typ">String</span><span class="pln"> piece2 </span><span class="pun">=</span><span class="pln"> </span><span class="str">"SDFGJKGB4UIHUISDFVWE"</span><span class="pun">;</span><span class="pln">
</span><span class="typ">String</span><span class="pln"> piece3 </span><span class="pun">=</span><span class="pln"> </span><span class="str">"BDYASGBDNAWGRET24IYE23das4saGBENWKD"</span><span class="pun">;</span><span class="pln">
</span><span class="typ">String</span><span class="pln"> piece4 </span><span class="pun">=</span><span class="pln"> </span><span class="str">"432423SDF23R/+SDDS"</span><span class="pun">;</span><span class="pln">

mHelper </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">IabHelper</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">,</span><span class="pln"> piece1 </span><span class="pun">+</span><span class="pln"> piece2 </span><span class="pun">+</span><span class="pln"> piece3 </span><span class="pun">+</span><span class="pln"> piece4</span><span class="pun">);</span></code></pre>
<p>Any kind of manipulations will do.</p>
<p>You can't hide the public key perfectly from the attacker, you just need to manipulate the string to confuse a attacker a little bit</p>
<p>You can add some strings and remove it when it's needed or split it into chunks.</p>
</div></text><author><a href="/users/1605727/naviramyle">NaviRamyle</a></author><comments><comment><text><span class="comment-copy">IF you are using <code>ProGuard</code> to obfuscate your app, then this trick will be useless. <code>ProGuard</code> will re-factor them to be one String again.</span></text><author><a class="comment-user" href="/users/1364896/sami-el-tamawy" title="5,089 reputation">Sami El-Tamawy</a></author></comment><comment><text><span class="comment-copy">Indeed. In addition, I would caution against using IabHelper as is.. passing the key (regardless of how it was generally dynamically) via the constructor means that if the attacker can identify the IabHelper class (even if it may be obfuscated), then he knows exactly where to insert his own malicious key (just seems a bit too easy)</span></text><author><a class="comment-user" href="/users/2669960/kevin-lee" title="760 reputation">Kevin Lee</a></author></comment><comment><text><span class="comment-copy">@KevinLee How would you modify the IabHelper then?</span></text><author><a class="comment-user" href="/users/238937/igor-ganapolsky" title="9,595 reputation">Igor Ganapolsky</a></author></comment><comment><text><span class="comment-copy">@IgorGanapolsky hardcode the key within IabHelper as a class variable, or put it exactly where it is it will be used. Or split the key into byte arrays. As for the methods and callbacks, you do have to spend some time understanding them and reimplementing the stuff that is needed. Take note of hardcoded string values as they tend to give away a lot of information; make them less descriptive, or use error codes. Possibly invert simple booleans or replace them with a comparison to some encoded value, etc. The idea is to make your code somewhat different.</span></text><author><a class="comment-user" href="/users/2669960/kevin-lee" title="760 reputation">Kevin Lee</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>What I did was to transform the key into a char array, split it in two and then reconstruct it when needed like this:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="lit">@Override</span><span class="pln">
</span><span class="kwd">protected</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> onCreate</span><span class="pun">(</span><span class="typ">Bundle</span><span class="pln"> savedInstanceState</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">super</span><span class="pun">.</span><span class="pln">onCreate</span><span class="pun">(</span><span class="pln">savedInstanceState</span><span class="pun">);</span><span class="pln">
    setContentView</span><span class="pun">(</span><span class="pln">R</span><span class="pun">.</span><span class="pln">layout</span><span class="pun">.</span><span class="pln">activity_shop</span><span class="pun">);</span><span class="pln">

    </span><span class="kwd">char</span><span class="pun">[]</span><span class="pln"> base64KeyByteArray </span><span class="pun">=</span><span class="pln"> </span><span class="typ">ArrayUtils</span><span class="pun">.</span><span class="pln">addAll</span><span class="pun">(</span><span class="pln">getPublicKeyChunk1</span><span class="pun">(),</span><span class="pln"> getPublicKeyChunk2</span><span class="pun">());</span><span class="pln">

    </span><span class="typ">Log</span><span class="pun">.</span><span class="pln">d</span><span class="pun">(</span><span class="pln">TAG</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pun">.</span><span class="pln">valueOf</span><span class="pun">(</span><span class="pln">base64KeyByteArray</span><span class="pun">));</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">[]</span><span class="pln"> getPublicKeyChunk1</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">[]{</span><span class="lit">82</span><span class="pun">,</span><span class="pln"> </span><span class="lit">73</span><span class="pun">,</span><span class="pln"> </span><span class="lit">67</span><span class="pun">,</span><span class="pln"> </span><span class="lit">66</span><span class="pun">,</span><span class="pln"> </span><span class="lit">73</span><span class="pun">,</span><span class="pln"> </span><span class="lit">106</span><span class="pun">,</span><span class="pln"> </span><span class="lit">65</span><span class="pun">,</span><span class="pln"> </span><span class="lit">78</span><span class="pun">,</span><span class="pln"> </span><span class="lit">66</span><span class="pun">,</span><span class="pln"> </span><span class="lit">103</span><span class="pun">,</span><span class="pln"> </span><span class="lit">107</span><span class="pun">,</span><span class="pln"> </span><span class="lit">113</span><span class="pun">,</span><span class="pln"> </span><span class="lit">104</span><span class="pun">,</span><span class="pln"> </span><span class="lit">107</span><span class="pun">,</span><span class="pln">
            </span><span class="lit">105</span><span class="pun">,</span><span class="pln"> </span><span class="lit">71</span><span class="pun">,</span><span class="pln"> </span><span class="lit">57</span><span class="pun">,</span><span class="pln"> </span><span class="lit">119</span><span class="pun">,</span><span class="pln"> </span><span class="lit">79</span><span class="pun">,</span><span class="pln"> </span><span class="lit">66</span><span class="pun">,</span><span class="pln"> </span><span class="lit">65</span><span class="pun">,</span><span class="pln"> </span><span class="lit">81</span><span class="pun">,</span><span class="pln"> </span><span class="lit">69</span><span class="pun">,</span><span class="pln"> </span><span class="lit">70</span><span class="pun">,</span><span class="pln"> </span><span class="lit">65</span><span class="pun">,</span><span class="pln"> </span><span class="lit">65</span><span class="pun">,</span><span class="pln"> </span><span class="lit">79</span><span class="pun">,</span><span class="pln"> </span><span class="lit">67</span><span class="pun">,</span><span class="pln"> </span><span class="lit">65</span><span class="pun">,</span><span class="pln"> </span><span class="lit">81</span><span class="pun">,</span><span class="pln"> </span><span class="lit">56</span><span class="pun">,</span><span class="pln"> </span><span class="lit">65</span><span class="pun">,</span><span class="pln"> </span><span class="lit">77</span><span class="pun">,</span><span class="pln"> </span><span class="lit">73</span><span class="pun">,</span><span class="pln">
            </span><span class="lit">73</span><span class="pun">,</span><span class="pln"> </span><span class="lit">66</span><span class="pun">,</span><span class="pln"> </span><span class="lit">67</span><span class="pun">,</span><span class="pln"> </span><span class="lit">103</span><span class="pun">,</span><span class="pln"> </span><span class="lit">75</span><span class="pun">,</span><span class="pln"> </span><span class="lit">67</span><span class="pun">,</span><span class="pln"> </span><span class="lit">65</span><span class="pun">,</span><span class="pln"> </span><span class="lit">81</span><span class="pun">,</span><span class="pln"> </span><span class="lit">69</span><span class="pun">,</span><span class="pln"> </span><span class="lit">65</span><span class="pun">,</span><span class="pln"> </span><span class="lit">121</span><span class="pun">,</span><span class="pln"> </span><span class="lit">55</span><span class="pun">,</span><span class="pln"> </span><span class="lit">81</span><span class="pun">,</span><span class="pln"> </span><span class="lit">76</span><span class="pun">,</span><span class="pln"> </span><span class="lit">122</span><span class="pun">,</span><span class="pln"> </span><span class="lit">67</span><span class="pun">,</span><span class="pln"> </span><span class="lit">105</span><span class="pun">,</span><span class="pln"> </span><span class="lit">80</span><span class="pun">,</span><span class="pln"> </span><span class="lit">65</span><span class="pun">,</span><span class="pln">
            </span><span class="lit">110</span><span class="pun">,</span><span class="pln"> </span><span class="lit">105</span><span class="pun">,</span><span class="pln"> </span><span class="lit">101</span><span class="pun">,</span><span class="pln"> </span><span class="lit">72</span><span class="pun">,</span><span class="pln"> </span><span class="lit">66</span><span class="pun">,</span><span class="pln"> </span><span class="lit">53</span><span class="pun">,</span><span class="pln"> </span><span class="lit">57</span><span class="pun">};</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">[]</span><span class="pln"> getPublicKeyChunk2</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">[]{</span><span class="lit">82</span><span class="pun">,</span><span class="pln"> </span><span class="lit">43</span><span class="pun">,</span><span class="pln"> </span><span class="lit">68</span><span class="pun">,</span><span class="pln"> </span><span class="lit">47</span><span class="pun">,</span><span class="pln"> </span><span class="lit">79</span><span class="pun">,</span><span class="pln"> </span><span class="lit">121</span><span class="pun">,</span><span class="pln"> </span><span class="lit">122</span><span class="pun">,</span><span class="pln"> </span><span class="lit">110</span><span class="pun">,</span><span class="pln"> </span><span class="lit">85</span><span class="pun">,</span><span class="pln"> </span><span class="lit">67</span><span class="pun">,</span><span class="pln"> </span><span class="lit">118</span><span class="pun">,</span><span class="pln"> </span><span class="lit">89</span><span class="pun">,</span><span class="pln"> </span><span class="lit">108</span><span class="pun">,</span><span class="pln"> </span><span class="lit">120</span><span class="pun">,</span><span class="pln"> </span><span class="lit">43</span><span class="pun">,</span><span class="pln"> </span><span class="lit">49</span><span class="pun">,</span><span class="pln">
            </span><span class="lit">80</span><span class="pun">,</span><span class="pln"> </span><span class="lit">100</span><span class="pun">,</span><span class="pln"> </span><span class="lit">67</span><span class="pun">,</span><span class="pln"> </span><span class="lit">108</span><span class="pun">,</span><span class="pln"> </span><span class="lit">55</span><span class="pun">,</span><span class="pln"> </span><span class="lit">90</span><span class="pun">,</span><span class="pln"> </span><span class="lit">57</span><span class="pun">,</span><span class="pln"> </span><span class="lit">103</span><span class="pun">,</span><span class="pln"> </span><span class="lit">119</span><span class="pun">,</span><span class="pln"> </span><span class="lit">57</span><span class="pun">,</span><span class="pln"> </span><span class="lit">87</span><span class="pun">,</span><span class="pln"> </span><span class="lit">78</span><span class="pun">,</span><span class="pln"> </span><span class="lit">79</span><span class="pun">,</span><span class="pln"> </span><span class="lit">111</span><span class="pun">,</span><span class="pln"> </span><span class="lit">53</span><span class="pun">,</span><span class="pln"> </span><span class="lit">101</span><span class="pun">,</span><span class="pln"> </span><span class="lit">80</span><span class="pun">,</span><span class="pln"> </span><span class="lit">71</span><span class="pun">,</span><span class="pln">
            </span><span class="lit">117</span><span class="pun">,</span><span class="pln"> </span><span class="lit">74</span><span class="pun">,</span><span class="pln"> </span><span class="lit">104</span><span class="pun">,</span><span class="pln"> </span><span class="lit">82</span><span class="pun">,</span><span class="pln"> </span><span class="lit">87</span><span class="pun">,</span><span class="pln"> </span><span class="lit">97</span><span class="pun">,</span><span class="pln"> </span><span class="lit">100</span><span class="pun">};</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/1102276/adrian">Adrian</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Is someone is really need you private key? I think the whole idea is <strong>replace</strong> it. IMHO any manipulations are useless. The only thing to do by evil person is just initialize variable with correct (his own key) value one line begore google API call.</p>
</div></text><author><a href="/users/5243721/timur-mannapov">Timur Mannapov</a></author><comments/></answer></answers></post>