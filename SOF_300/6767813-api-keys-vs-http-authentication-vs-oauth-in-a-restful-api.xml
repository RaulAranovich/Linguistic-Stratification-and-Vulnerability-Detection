<?xml version="1.0" encoding="utf-8"?>
<post><title>security - API Keys vs HTTP Authentication vs OAuth in a RESTful API - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I'm working on building a RESTful API for one of the applications I maintain. We're currently looking to build various things into it that require more controlled access and security. While researching how to go about securing the API, I found a few different opinions on what form to use. I've seen some resources say HTTP-Auth is the way to go, while others prefer API keys, and even others (including the questions I found here on SO) swear by OAuth. </p>
<p>Then, of course, the ones that prefer, say, API keys, say that OAuth is designed for applications getting access on behalf of a user (as I understand it, such as signing into a non-Facebook site using your Facebook account), and not for a user directly accessing resources on a site they've specifically signed up for (such as the official Twitter client accessing the Twitter servers). However, the recommendations for OAuth seem to be even for the most basic of authentication needs.</p>
<p>My question, then, is - assuming it's all done over HTTPS, what are some of the practical differences between the three? When should one be considered over the others?</p>
</div></text><author><a href="/users/570040/shauna">Shauna</a></author><comments><comment><text><span class="comment-copy">what did you end up going with?</span></text><author><a class="comment-user" href="/users/27483/irwin" title="5,514 reputation">Irwin</a></author></comment><comment><text><span class="comment-copy">@Irwin - I asked this question quite some time ago and have since moved on from the project requiring it, but I ended up using a combination of API keys and generated password (that users never see), which are sent using HTTP authentication.</span></text><author><a class="comment-user owner" href="/users/570040/shauna" title="6,842 reputation">Shauna</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>It depends on your needs. Do you need:</p>
<ul>
<li>Identity – who claims to be making an API request?</li>
<li>Authentication – are they really who they say they are?</li>
<li>Authorization – are they allowed to do what they are trying to do?</li>
</ul>
<p>or all three? </p>
<p>If you just need to identify the caller to keep track of volume or number of API Calls, use a simple API Key. Bear in mind that if the user you have issued the API key shares it with someone else, they will be able to call your API as well.</p>
<p>But, if you need Authorization as well, that is you need to provide access only to certain resources based on the caller of the API, then use oAuth.</p>
<p>Here's a good description: <a href="http://www.srimax.com/index.php/do-you-need-api-keys-api-identity-vs-authorization/" rel="nofollow noreferrer">http://www.srimax.com/index.php/do-you-need-api-keys-api-identity-vs-authorization/</a></p>
</div></text><author><a href="/users/559095/sid">Sid</a></author><comments><comment><text><span class="comment-copy">I've already come up with a solution to this matter, but in it's case, I needed all three.</span></text><author><a class="comment-user owner" href="/users/570040/shauna" title="6,842 reputation">Shauna</a></author></comment><comment><text><span class="comment-copy">That link was really helpful. cheers!</span></text><author><a class="comment-user" href="/users/30674/pure-krome" title="39,396 reputation">Pure.Krome</a></author></comment><comment><text><span class="comment-copy">with "certain resources" do you mean "certain api calls" or "certain database records", or both?</span></text><author><a class="comment-user" href="/users/380607/magne" title="8,223 reputation">Magne</a></author></comment><comment><text><span class="comment-copy">Mostly DB records (or anything that reveals protected state or modifies state). But it could also be something like a premium feature (such as running an algorithm on a cloud) which doesn't really change anything on the db but uses system resources and should only be available to authorized individuals.</span></text><author><a class="comment-user" href="/users/559095/sid" title="5,497 reputation">Sid</a></author></comment><comment><text><span class="comment-copy">Ironically the linked blog now shows a not authorised error page</span></text><author><a class="comment-user" href="/users/574632/steve" title="16,358 reputation">Steve</a></author></comment><comment><text><span class="comment-copy">@Steve Ironical indeed. I have pasted another link which uses the original article as a reference. That may be somewhat helpful.</span></text><author><a class="comment-user" href="/users/559095/sid" title="5,497 reputation">Sid</a></author></comment><comment><text><span class="comment-copy">@Sid I'm working on an app that uses OAuth for registering users who sign up with Facebook or LinkedIn. Additionally we are opening up our API for other services to manage data. In that case, would you recommend OAuth for user auth, and an api key or combination of username &amp; password (like in the article you linked to) for services accessing the API? OAuth and api key are both used for different purposes, right?</span></text><author><a class="comment-user" href="/users/560686/tom-doe" title="430 reputation">Tom Doe</a></author></comment><comment><text><span class="comment-copy">@TomDoe Hi Tom - Yes that makes sense. You probably want to use OAuth2 now. If your server is in Python (Django or Flask) take a look at <a href="https://github.com/omab/python-social-auth" rel="nofollow noreferrer">github.com/omab/python-social-auth</a></span></text><author><a class="comment-user" href="/users/559095/sid" title="5,497 reputation">Sid</a></author></comment><comment><text><span class="comment-copy">I don't understand how an API key cannot provide these three things. Identity and Authentication are both based on "do you know a particular secret?" (unless you introduce 2FA, which is a separate topic). If I give User 5's very long API key, that claims and proves I'm User 5, at least as well as a username/password would.  And there is no reason why one couldn't assign different permissions to different API keys. Right? What am I missing here?</span></text><author><a class="comment-user" href="/users/4376/nathan-long" title="58,846 reputation">Nathan Long</a></author></comment></comments></answer></answers></post>