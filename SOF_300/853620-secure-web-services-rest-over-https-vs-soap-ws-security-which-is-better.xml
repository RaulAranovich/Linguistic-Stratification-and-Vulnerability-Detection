<?xml version="1.0" encoding="utf-8"?>
<post><title>Secure Web Services: REST over HTTPS vs SOAP + WS-Security. Which is better? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I'm not a security expert by any means, but I favor creating REST-style web services.  </p>
<p>In creating a new service which needs to have the data it transmits secure.  We've entered a debate over which approach is more secure - REST with HTTPS or a SOAP WS with WS-Security.</p>
<p>I am under the impression we could use HTTPS for all the web service calls and this approach would be secure.  The way I look at it is, "if HTTPS is good enough for bank and financial web sites, it's good enough for me".  Again, I'm not expert in this space, but I'd think that these people have thought considerably hard about this problem and are comfortable with HTTPS.</p>
<p>A coworker disagrees and says SOAP and WS-Security is the only way to go.</p>
<p>The web seems all over the board on this.</p>
<p>Maybe the community here could weigh in on the pros and cons of each?  Thanks!</p>
</div></text><author><a href="/users/2890/vinnie">Vinnie</a></author><comments><comment><text><span class="comment-copy">its basically a choice of Transport level security and Message level security</span></text><author><a class="comment-user" href="/users/220041/flash" title="691 reputation">flash</a></author></comment><comment><text><span class="comment-copy">Just to add.. <a href="http://www.iseebug.com/category/web-service/" rel="nofollow noreferrer">iseebug.com/category/web-service</a></span></text><author><a class="comment-user" href="/users/1881738/vaibs" title="767 reputation">Vaibs</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>HTTPS secures the transmission of the message over the network and provides some assurance to the client about the identity of the server. This is what's important to your bank or online stock broker. Their interest in authenticating the client is not in the identity of the computer, but in your identity. So card numbers, user names, passwords etc. are used to authenticate you. Some precautions are then usually taken to ensure that submissions haven't been tampered with, but on the whole whatever happens over in the session is regarded as having been initiated by you.</p>
<p>WS-Security offers confidentiality and integrity protection from the creation of the message to it's consumption. So instead of ensuring that the content of the communications can only be read by the right server it ensures that it can only be read by the right process on the server. Instead of assuming that all the communications in the securely initiated session are from the authenticated user each one has to be signed.</p>
<p>There's an amusing explanation involving naked motorcyclists here:</p>
<p><a href="http://blogs.msdn.com/vbertocci/archive/2005/04/25/end-to-end-security-or-why-you-shouldn-t-drive-your-motorcycle-naked.aspx" rel="noreferrer">http://blogs.msdn.com/vbertocci/archive/2005/04/25/end-to-end-security-or-why-you-shouldn-t-drive-your-motorcycle-naked.aspx</a></p>
<p>So WS-Security offers more protection than HTTPS would, and SOAP offers a richer API than REST. My opinion is that unless you really need the additional features or protection you should skip the overhead of SOAP and WS-Security. I know it's a bit of a cop-out but the decisions about how much protection is actually justified (not just what would be cool to build) need to be made by those who know the problem intimately.</p>
</div></text><author><a href="/users/28158/bell">Bell</a></author><comments><comment><text><span class="comment-copy">An extra point - Transmission security requires authentication of transmission initiator. For example, no good having SSH if everyone knows the password. Multi-layer security is vital in distributed applications. Think Identity, Integrity, Accountability</span></text><author><a class="comment-user" href="/users/104040/aiden-bell" title="23,155 reputation">Aiden Bell</a></author></comment><comment><text><span class="comment-copy">I saw an interesting mix the other day.  A large, F500 customer of ours is using a mix of REST and SOAP (REST for read-only data access, SOAP for the rest) and in order to avoid using different security schemes has decided to use WS-Sec for both.  They are doing this by putting the WS-Sec header information into the HTTP headers for the REST calls.  Their security intermediary knows how to pull them out of either location to do the checks.  First time I had seen this approach.</span></text><author><a class="comment-user" href="/users/101052/sfitts" title="691 reputation">sfitts</a></author></comment><comment><text><span class="comment-copy">+1 for the naked motorcyclists. :)</span></text><author><a class="comment-user" href="/users/1456887/jesse-chisholm" title="1,719 reputation">Jesse Chisholm</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>REST security is transport dependent while SOAP security is not.</p>
<p>REST inherits security measures from the underlying transport while SOAP defines its own via WS-Security.</p>
<p>When we talk about REST, over HTTP - all security measures applied HTTP are inherited and this is known as transport level security.</p>
<p>Transport level security, secures your message only while its on the wire - as soon as it leaves the wire, the message is no more secured.</p>
<p>But, with WS-Security, its message level security - even though the message leaves the transport channel it will be still protected. Also - with message level security you can partly encrypt the message [not the entire message, but only the parts you want] - but with transport level security you can't do it.</p>
<p>WS-Security has measures for authentication, integrity, confidentiality and non-repudiation while SSL doesn't support non repudiation [with 2-legged OAuth it does].</p>
<p>In performance-wise SSL is very much faster than WS-Security.</p>
<p>Thanks...</p>
</div></text><author><a href="/users/804637/prabath-siriwardena">Prabath Siriwardena</a></author><comments><comment><text><span class="comment-copy">My apologies but I need to correct this. Look at the Wiki for <a href="http://en.wikipedia.org/wiki/Representational_state_transfer" rel="nofollow noreferrer">REST</a>: REST was initially described in the context of HTTP, but it is not limited to that protocol. SOAP has nothing to do with WS-Security and both REST/SOAP implementations to some extent rely on the underlying transport in any case. SOAP is XML-based and therein WS-Security was later layered in as an application-data security implementation. Otherwise good information.</span></text><author><a class="comment-user" href="/users/1679516/darrell-teague" title="1,569 reputation">Darrell Teague</a></author></comment><comment><text><span class="comment-copy">As I mentioned above REST doesn't depend on a particular transport - although in most of the time it was explained under the context of HTTP. But, REST does not talk about any security.It totally relies on the underlying transport for security - let it be HTTP or anything. In SOAP - it clearly defines a security standard which does not depend on the transport. WS-Security is designed for SOAP. If you want to use transport level security with SOAP there is no issue, you can use it. REST is an architectural pattern, it does not talk about security.</span></text><author><a class="comment-user" href="/users/804637/prabath-siriwardena" title="4,373 reputation">Prabath Siriwardena</a></author></comment><comment><text><span class="comment-copy">Super Prabath! Thanks it was useful</span></text><author><a class="comment-user" href="/users/1755242/sunleo" title="3,921 reputation">sunleo</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Technically, the way you have it worded, neither is correct, because the SOAP method's communication isn't secure, and the REST method didn't say anything about authenticating legitimate users.  </p>
<p>HTTPS prevents attackers from <a href="http://en.wikipedia.org/wiki/Eavesdropping" rel="noreferrer">eavesdropping</a> on the communication between two systems.  It also verifies that the host system (server) is actually the host system the user intends to access.  </p>
<p>WS-Security prevents unauthorized applications (users) from accessing the system.   </p>
<p>If a RESTful system has a way of authenticating users and a SOAP application with WS-Security is using HTTPS, then really both are secure.  It's just a different way of presenting and accessing data. </p>
</div></text><author><a href="/users/1942/kevin">Kevin</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>See the <a href="http://en.wikipedia.org/wiki/WS-Security" rel="noreferrer">wiki</a> article:</p>
<blockquote>
<p>In point-to-point situations confidentiality and data integrity can also be enforced on Web services through the use of Transport Layer Security (TLS), for example, by sending messages over https. </p>
<p>WS-Security however addresses the wider problem of maintaining integrity and confidentiality of messages until after a message was sent from the originating node, providing so called end to end security.</p>
</blockquote>
<p>That is:</p>
<ul>
<li>HTTPS is a transport layer (point-to-point) security mechanism</li>
<li>WS-Security is an application layer (end-to-end) security mechanism.</li>
</ul>
</div></text><author><a href="/users/3295/toolkit">toolkit</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>As you say, REST is good enough for banks so should be good enough for you.</p>
<p>There are two main aspects to security: 1) encryption and 2) identity.</p>
<p>Transmitting in SSL/HTTPS provides encryption over the wire. But you'll also need to make sure that both servers can confirm that they know who they are speaking to. This can be via SSL client certificates, shares secrets, etc.</p>
<p>I'm sure one could make the case that SOAP is "more secure" but probably not in any significant way. The nude motorcyclist analogy is cute but if accurate would imply that the whole internet is insecure.</p>
</div></text><author><a href="/users/42048/pbreitenbach">pbreitenbach</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I don't yet have the rep needed to add a comment or I would have just added this to Bell's answer.  I think Bell did a very good job of summing up the top level pros and cons of the two approaches.  Just a few other factors that you might want to consider:</p>
<p>1) Do the requests between your clients and your service need to go through intermediaries that require access to the payload?  If so then WS-Security might be a better fit.</p>
<p>2) It is actually possible to use SSL to provide the server with assurance as to the clients identity using a feature called mutual authentication.  However, this doesn't get much use outside of some very specialized scenarios due to the complexity of configuring it.  So Bell is right that WS-Sec is a much better fit here.</p>
<p>3) SSL in general can be a bit of a bear to setup and maintain (even in the simpler configuration) due largely to certificate management issues.  Having someone who knows how to do this for your platform will be a big plus.</p>
<p>4) If you might need to do some form of credential mapping or identity federation then WS-Sec might be worth the overhead.  Not that you can't do this with REST, you just have less structure to help you.</p>
<p>5) Getting all the WS-Security goop into the right places on the client side of things can be more of a pain than you would think it should.</p>
<p>In the end though it really does depend on a lot of things we're not likely to know.  For most situations I would say that either approach will be "secure enough" and so that shouldn't be the main deciding factor.</p>
</div></text><author><a href="/users/101052/sfitts">sfitts</a></author><comments><comment><text><span class="comment-copy">Banking being one of those that is not "most" situations.</span></text><author><a class="comment-user" href="/users/2238023/bryan-bryce" title="481 reputation">Bryan Bryce</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<pre class="default prettyprint prettyprinted" style=""><code><span class="typ">Brace</span><span class="pln"> yourself</span><span class="pun">,</span><span class="pln"> here there</span><span class="str">'s another coming :-)</span></code></pre>
<p>Today I had to explain to my girlfriend the difference between the expressive power of WS-Security as opposed to HTTPS. She's a computer scientist, so even if she doesn't know all the XML mumbo jumbo she understands (maybe better than me) what encryption or signature means. However I wanted a strong image, which could make her really understand what things are useful for, rather than how they are implemented (that came a bit later, she didn't escape it :-)).</p>
<p>So it goes like this. Suppose you are naked, and you have to drive your motorcycle to a certain destination.
In the (A) case you go through a transparent tunnel: your only hope of not being arrested for obscene behaviour is that nobody is looking. That is not exactly the most secure strategy you can come out with... (notice the sweat drop from the guy forehead :-)). That is equivalent to a POST in clear, and when I say "equivalent" I mean it.
In the (B) case, you are in a better situation. The tunnel is opaque, so as long as you travel into it your public record is safe. However, this is still not the best situation. You still have to leave home and reach the tunnel entrance, and once outside the tunnel probably you'll have to get off and walk somewhere... and that goes for HTTPS. True, your message is safe while it crosses the biggest chasm: but once you delivered it on the other side you don't really know how many stages it will have to go through before reaching the real point where the data will be processed. And of course all those stages could use something different than HTTP: a classical MSMQ which buffers requests which can't be served right away, for example. What happens if somebody lurks your data while they are in that preprocessing limbo? Hm. (read this "hm" as the one uttered by Morpheus at the end of the sentence "do you think it's air you are breathing?").
The complete solution (c) in this metaphor is painfully trivial: get some darn clothes on yourself, and especially the helmet while on the motorcycle!!! So you can safely go around without having to rely on opaqueness of the environments. The metaphor is hopefully clear: the clothes come with you regardless of the mean or the surrounding infrastructure, as the messsage level security does. Furthermore, you can decide to cover one part but reveal another (and you can do that on personal basis: airport security can get your jacket and shoes off, while your doctor may have a higher access level), but remember that short sleeves shirts are bad practice even if you are proud of your biceps :-) (better a polo, or a t-shirt).</p>
<p>I'm happy to say that she got the point! I have to say that the clothes metaphor is very powerful: I was tempted to use it for introducing the concept of policy (disco clubs won't let you in sport shoes; you can't go to withdraw money in a bank in your underwear, while this is perfectly acceptable look while balancing yourself on a surf; and so on) but I thought that for one afternoon it was enough ;-)</p>
<p>Architecture - WS, Wild Ideas</p>
<p>Courtesy : <a href="http://blogs.msdn.com/b/vbertocci/archive/2005/04/25/end-to-end-security-or-why-you-shouldn-t-drive-your-motorcycle-naked.aspx">http://blogs.msdn.com/b/vbertocci/archive/2005/04/25/end-to-end-security-or-why-you-shouldn-t-drive-your-motorcycle-naked.aspx</a></p>
</div></text><author><a href="/users/1230843/taus-ideveloper">taus-iDeveloper</a></author><comments><comment><text><span class="comment-copy">Nice and simple analogy you gave to make difference between https and ws-security. But in real internet, actually most of the time we are in driving our motorcycle naked :D and applying WS-secuirty everywhere would be an overkill in terms of performance and cost. So we can improvise this analogy by taking into account those situation where we need to put on clothes and where putting on clothes would be unneccessary.</span></text><author><a class="comment-user" href="/users/1285589/shashankaholic" title="3,211 reputation">shashankaholic</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I work in this space every day so I want to summarize the good comments on this in an effort to close this out:</p>
<p>SSL (HTTP/s) is only one layer ensuring:</p>
<ol>
<li>The server being connected to presents a certificate proving its
identity (though this can be spoofed through DNS poisoning).</li>
<li>The communications layer is encrypted (no eavesdropping).</li>
</ol>
<p>WS-Security and related standards/implementations use PKI that:</p>
<ol>
<li>Prove the identity of the client.</li>
<li>Prove the message was not modified
in-transit (MITM).</li>
<li>Allows the server to authenticate/authorize the
client.</li>
</ol>
<p>The last point is important for service requests when the identity of the client (caller) is paramount to knowing IF they should be authorized to receive such data from the service.
Standard SSL is one-way (server) authentication and does nothing to identify the client.</p>
</div></text><author><a href="/users/1679516/darrell-teague">Darrell Teague</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>The answer actually depends on your specific requirements.</p>
<p>For instance, do you need to protect your web messages or confidentiality is not required and all you need is to authenticate end parties and ensure message integrity? If this is the case - and it often is with web services - HTTPS is probably the wrong hammer.</p>
<p>However - from my experience - do not overlook the complexity of the system you're building.  Not only HTTPS is easier to deploy correctly, but an application that relies on the transport layer security is easier to debug (over plain HTTP).</p>
<p>Good luck.</p>
</div></text><author><a href="/users/105991/user105991">user105991</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>If your RESTFul call sends XML Messages back and forth embedded in the Html Body of the HTTP request, you should be able to have all the benefits of WS-Security such as XML encryption, Cerificates, etc in your XML messages while using whatever security features are available from http such as SSL/TLS encryption.</p>
</div></text><author><a href="/users/1238834/lrj">LRJ</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>REST Over HTTPS Should be a secure method as long as API provider implements authorization a server end. In a case of web application as well what we do is accessing a web application via HTTPS and some authentication/authorization, traditionally web applications did not have security issues then Restful API would also counter security issues without problem !</p>
</div></text><author><a href="/users/861454/rakesh-waghela">Rakesh Waghela</a></author><comments/></answer></answers></post>