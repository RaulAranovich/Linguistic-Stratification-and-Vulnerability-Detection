<?xml version="1.0" encoding="utf-8"?>
<post><title>javascript - Sanitize/Rewrite HTML on the Client Side - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I need to display external resources loaded via cross domain requests and make sure to only display "<em>safe</em>" content. </p>
<p>Could use Prototype's <a href="http://www.prototypejs.org/api/string/stripScripts" rel="noreferrer">String#stripScripts</a> to remove script blocks. But handlers such as <code>onclick</code> or <code>onerror</code> are still there.</p>
<p>Is there any library which can at least</p>
<ul>
<li>strip script blocks,</li>
<li>kill DOM handlers,</li>
<li>remove black listed tags (eg: <code>embed</code> or <code>object</code>).</li>
</ul>
<p>So are any JavaScript related links and examples out there?</p>
</div></text><author><a href="/users/187676/erik-aigner">Erik Aigner</a></author><comments><comment><text><span class="comment-copy">Don't trust answers which might do this by regular expressions <a href="http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags" title="regex match open tags except xhtml self contained tags">stackoverflow.com/questions/1732348/â€¦</a></span></text><author><a class="comment-user" href="/users/315168/mikko-ohtamaa" title="38,905 reputation">Mikko Ohtamaa</a></author></comment><comment><text><span class="comment-copy"><a href="http://blog.codinghorror.com/parsing-html-the-cthulhu-way/" rel="nofollow noreferrer">blog.codinghorror.com/parsing-html-the-cthulhu-way</a></span></text><author><a class="comment-user" href="/users/432424/jortizromo" title="522 reputation">jortizromo</a></author></comment><comment><text><span class="comment-copy">How is this safe? Can't users edit the javascript of a page?</span></text><author><a class="comment-user" href="/users/546476/daniel-pendergast" title="3,918 reputation">Daniel Pendergast</a></author></comment><comment><text><span class="comment-copy">yeah, it's not 'safe' unless you are simply trying to prevent mistakes by trusted users.</span></text><author><a class="comment-user" href="/users/821674/scott" title="6,956 reputation">Scott</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Update 2016: There is now a <a href="https://github.com/google/closure-library/blob/master/closure/goog/html/sanitizer/htmlsanitizer.js" rel="noreferrer">Google Closure</a> package based on the Caja sanitizer.</p>
<p>It has a cleaner API, was rewritten to take into account APIs available on modern browsers, and interacts better with Closure Compiler.</p>
<hr/>
<p>Shameless plug: see <a href="https://github.com/google/caja/blob/master/src/com/google/caja/plugin/html-sanitizer.js" rel="noreferrer">caja/plugin/html-sanitizer.js</a> for a client side html sanitizer that has been thoroughly reviewed.</p>
<p>It is white-listed, not black-listed, but the whitelists are configurable as per <a href="https://github.com/google/caja/wiki/CajaWhitelists" rel="noreferrer">CajaWhitelists</a></p>
<hr/>
<p>If you want to remove all tags, then do the following:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">var</span><span class="pln"> tagBody </span><span class="pun">=</span><span class="pln"> </span><span class="str">'(?:[^"\'&gt;]|"[^"]*"|\'[^\']*\')*'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">var</span><span class="pln"> tagOrComment </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">RegExp</span><span class="pun">(</span><span class="pln">
    </span><span class="str">'&lt;(?:'</span><span class="pln">
    </span><span class="com">// Comment body.</span><span class="pln">
    </span><span class="pun">+</span><span class="pln"> </span><span class="str">'!--(?:(?:-*[^-&gt;])*--+|-?)'</span><span class="pln">
    </span><span class="com">// Special "raw text" elements whose content should be elided.</span><span class="pln">
    </span><span class="pun">+</span><span class="pln"> </span><span class="str">'|script\\b'</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> tagBody </span><span class="pun">+</span><span class="pln"> </span><span class="str">'&gt;[\\s\\S]*?&lt;/script\\s*'</span><span class="pln">
    </span><span class="pun">+</span><span class="pln"> </span><span class="str">'|style\\b'</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> tagBody </span><span class="pun">+</span><span class="pln"> </span><span class="str">'&gt;[\\s\\S]*?&lt;/style\\s*'</span><span class="pln">
    </span><span class="com">// Regular name</span><span class="pln">
    </span><span class="pun">+</span><span class="pln"> </span><span class="str">'|/?[a-z]'</span><span class="pln">
    </span><span class="pun">+</span><span class="pln"> tagBody
    </span><span class="pun">+</span><span class="pln"> </span><span class="str">')&gt;'</span><span class="pun">,</span><span class="pln">
    </span><span class="str">'gi'</span><span class="pun">);</span><span class="pln">
</span><span class="kwd">function</span><span class="pln"> removeTags</span><span class="pun">(</span><span class="pln">html</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> oldHtml</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">do</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    oldHtml </span><span class="pun">=</span><span class="pln"> html</span><span class="pun">;</span><span class="pln">
    html </span><span class="pun">=</span><span class="pln"> html</span><span class="pun">.</span><span class="pln">replace</span><span class="pun">(</span><span class="pln">tagOrComment</span><span class="pun">,</span><span class="pln"> </span><span class="str">''</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">html </span><span class="pun">!==</span><span class="pln"> oldHtml</span><span class="pun">);</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> html</span><span class="pun">.</span><span class="pln">replace</span><span class="pun">(</span><span class="str">/&lt;/</span><span class="pln">g</span><span class="pun">,</span><span class="pln"> </span><span class="str">'&amp;lt;'</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>People will tell you that you can create an element, and assign <code>innerHTML</code> and then get the <code>innerText</code> or <code>textContent</code>, and then escape entities in that.  Do not do that.  It is vulnerable to XSS injection since <code>&lt;img src=bogus onerror=alert(1337)&gt;</code> will run the <code>onerror</code> handler even if the node is never attached to the DOM.</p>
</div></text><author><a href="/users/20394/mike-samuel">Mike Samuel</a></author><comments><comment><text><span class="comment-copy">Great, looks like there's a little documentation here: <a href="http://code.google.com/p/google-caja/wiki/JsHtmlSanitizer" rel="nofollow noreferrer">code.google.com/p/google-caja/wiki/JsHtmlSanitizer</a></span></text><author><a class="comment-user" href="/users/229001/tmcw" title="6,722 reputation">tmcw</a></author></comment><comment><text><span class="comment-copy">Is it possible to the sanitizer on the client side without any HTML tag whitelisted whatsoever? Even when I modified JSONs, it still acts as defaults are whitelisted...</span></text><author><a class="comment-user" href="/users/123558/almad" title="3,310 reputation">Almad</a></author></comment><comment><text><span class="comment-copy">@Almad, if you want to remove all tags, please see my edit.</span></text><author><a class="comment-user" href="/users/20394/mike-samuel" title="79,660 reputation">Mike Samuel</a></author></comment><comment><text><span class="comment-copy">@Almad, maybe I misunderstood your question.  If you modify the white-lists, you need to regenerate html4-defs.js which is a JavaScript file generated from the JSON.  That involves running ant.</span></text><author><a class="comment-user" href="/users/20394/mike-samuel" title="79,660 reputation">Mike Samuel</a></author></comment><comment><text><span class="comment-copy">The Caja HTML sanitizer code looks great, but requires some glue code (neighbouring <code>cssparser.js</code>, but more importantly, the <code>html4</code> object). Additionally, it pollutes the global <code>window</code> property. Is there a for-the-web version of this code? If not, do you see a better way to produce and maintain one than to create a separate project for it?</span></text><author><a class="comment-user" href="/users/35070/phihag" title="150,282 reputation">phihag</a></author></comment><comment><text><span class="comment-copy">@phihag, Ask at <a href="https://groups.google.com/forum/?fromgroups#%21forum/google-caja-discuss" rel="nofollow noreferrer">google-caja-discuss</a> and they might point you at a packaged one.  I believe the window object pollution is for backwards compatibility, and so any new package version might not need that.</span></text><author><a class="comment-user" href="/users/20394/mike-samuel" title="79,660 reputation">Mike Samuel</a></author></comment><comment><text><span class="comment-copy">Turns out there already <a href="https://github.com/theSmaw/Caja-HTML-Sanitizer" rel="nofollow noreferrer">is a package</a> for webbrowsers.</span></text><author><a class="comment-user" href="/users/35070/phihag" title="150,282 reputation">phihag</a></author></comment><comment><text><span class="comment-copy">@phihag That package is for nodejs, not browsers.</span></text><author><a class="comment-user" href="/users/311572/jeffery-to" title="10,554 reputation">Jeffery To</a></author></comment><comment><text><span class="comment-copy">@MikeSamuel I think <code>while(html !== (html = html.replace(tagOrComment, ''))){}</code> can be used instead of <code>var oldHtml; do {oldHtml = html; html = html.replace(tagOrComment, ''); } while (html !== oldHtml);</code></span></text><author><a class="comment-user" href="/users/1529630/oriol" title="111,532 reputation">Oriol</a></author></comment><comment><text><span class="comment-copy">What do you think of the idea of using a sandboxed iframe (with js disabled, of course) to parse HTML, then copying that DOM tree and leaving out insecure elements? See the code in my new answer to this question, for example.</span></text><author><a class="comment-user" href="/users/2501624/aldel" title="2,184 reputation">aldel</a></author></comment><comment><text><span class="comment-copy">@aldel, Doesn't <code>allow-same-origin</code> still allow scripts in attributes?  What about meta redirects of parent frames?  Maybe the <code>display:none</code> prevents leakage via image loads and CSS tricks, but not via stylesheet loads.  Embedded iframes would still allow drive by downloads.</span></text><author><a class="comment-user" href="/users/20394/mike-samuel" title="79,660 reputation">Mike Samuel</a></author></comment><comment><text><span class="comment-copy">@MikeSamuel, no, you would need <code>allow-scripts</code> to have any scripts run, including in attributes. <code>allow-same-origin</code> is required in order to have access to the DOM of the document in the iframe. I think the other issues you mentioned shouldn't be a problem, since the whole point of sandboxing is to allow display of untrusted HTML within your page. For example, meta redirects of parent pages (unless I misunderstand what you mean) wouldn't be possible without the allow-top-navigation permission.</span></text><author><a class="comment-user" href="/users/2501624/aldel" title="2,184 reputation">aldel</a></author></comment><comment><text><span class="comment-copy">I'm more worried about (1) my sandbox detection code giving a false positive; that is, it thinks the browser fully supports sandboxing when it doesn't; or (2) something is copied into the sanitized DOM tree that isn't actually safe, such as an image tag that exploits a vulnerability in a GIF decoder or something.</span></text><author><a class="comment-user" href="/users/2501624/aldel" title="2,184 reputation">aldel</a></author></comment><comment><text><span class="comment-copy">@MikeSamuel this script is the best I've see. Is there a way to do this that will also string "My Link" in the following example? &lt;a href='#'&gt;My Link&lt;/a&gt;</span></text><author><a class="comment-user" href="/users/2646455/chris-nesbit1" title="326 reputation">chris.nesbit1</a></author></comment><comment><text><span class="comment-copy">@MikeSamuel I tried using the aforementioned img tag and escaping html using the create elm, assign innerHTML, and return it's innerHTML to an element here: <a href="http://jsbin.com/butofezipi/edit?html,css,js,output" rel="nofollow noreferrer">jsbin.com/butofezipi/edit?html,css,js,output</a>   I don't know if I did it wrong...but looks like the encoding method does work for that instance?  Just trying to play devil's advocate. Looking for a good method myself :b  Just wanted to point out that the method that you suggest does fit my needs so thanks!</span></text><author><a class="comment-user" href="/users/3596980/dustin" title="76 reputation">Dustin</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The Google Caja <a href="https://code.google.com/p/google-caja/source/browse/trunk/src/com/google/caja/plugin/html-sanitizer.js" rel="noreferrer">HTML sanitizer</a> can be made "web-ready" by embedding it in a <a href="https://developer.mozilla.org/en/Using_web_workers" rel="noreferrer">web worker</a>. Any global variables introduced by the sanitizer will be contained within the worker, plus processing takes place in its own thread.</p>
<p>For browsers that do not support Web Workers, we can use an iframe as a separate environment for the sanitizer to work in. Timothy Chien has a <a href="https://github.com/timdream/simworker" rel="noreferrer">polyfill</a> that does just this, using iframes to simulate Web Workers, so that part is done for us.</p>
<p>The Caja project has a wiki page on <a href="https://code.google.com/p/google-caja/wiki/JsHtmlSanitizer" rel="noreferrer">how to use Caja as a standalone client-side sanitizer</a>:</p>
<ul>
<li>Checkout the source, then build by running <code>ant</code></li>
<li>Include <code>html-sanitizer-minified.js</code> or <code>html-css-sanitizer-minified.js</code> in your page</li>
<li>Call <code>html_sanitize(...)</code></li>
</ul>
<p>The worker script only needs to follow those instructions:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">importScripts</span><span class="pun">(</span><span class="str">'html-css-sanitizer-minified.js'</span><span class="pun">);</span><span class="pln"> </span><span class="com">// or 'html-sanitizer-minified.js'</span><span class="pln">

</span><span class="kwd">var</span><span class="pln"> urlTransformer</span><span class="pun">,</span><span class="pln"> nameIdClassTransformer</span><span class="pun">;</span><span class="pln">

</span><span class="com">// customize if you need to filter URLs and/or ids/names/classes</span><span class="pln">
urlTransformer </span><span class="pun">=</span><span class="pln"> nameIdClassTransformer </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(</span><span class="pln">s</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> s</span><span class="pun">;</span><span class="pln"> </span><span class="pun">};</span><span class="pln">

</span><span class="com">// when we receive some HTML</span><span class="pln">
</span><span class="kwd">self</span><span class="pun">.</span><span class="pln">onmessage </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(</span><span class="kwd">event</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="com">// sanitize, then send the result back</span><span class="pln">
    postMessage</span><span class="pun">(</span><span class="pln">html_sanitize</span><span class="pun">(</span><span class="kwd">event</span><span class="pun">.</span><span class="pln">data</span><span class="pun">,</span><span class="pln"> urlTransformer</span><span class="pun">,</span><span class="pln"> nameIdClassTransformer</span><span class="pun">));</span><span class="pln">
</span><span class="pun">};</span></code></pre>
<p>(A bit more code is needed to get the simworker library working, but it's not important to this discussion.)</p>
<p>Demo: <a href="https://dl.dropbox.com/u/291406/html-sanitize/demo.html" rel="noreferrer">https://dl.dropbox.com/u/291406/html-sanitize/demo.html</a></p>
</div></text><author><a href="/users/311572/jeffery-to">Jeffery To</a></author><comments><comment><text><span class="comment-copy">Great answer. Jeffrey, can you explain why the sanitization needs to be done by a web worker at all?</span></text><author><a class="comment-user" href="/users/1572824/austin-wang" title="559 reputation">Austin Wang</a></author></comment><comment><text><span class="comment-copy">@AustinWang Web workers aren't strictly necessary, but since sanitization can potentially be computationally expensive and requires no user interaction, it is well suited for the task. (I also mentioned containing global variables in the main answer.)</span></text><author><a class="comment-user" href="/users/311572/jeffery-to" title="10,554 reputation">Jeffery To</a></author></comment><comment><text><span class="comment-copy">I cannot find decent documentation for this library. Where/how do I specify my whitelist of elements and attributes?</span></text><author><a class="comment-user" href="/users/134120/asgoodasitgets" title="831 reputation">AsGoodAsItGets</a></author></comment><comment><text><span class="comment-copy">@AsGoodAsItGets As described by <a href="https://github.com/google/caja/blob/39729bf532029d0a47a8a78bdf3a110eb97388c1/src/com/google/caja/plugin/html-sanitizer.js#L885" rel="nofollow noreferrer">a comment in the current version</a>, <code>nameIdClassTransformer</code> is called for every HTML name, element ID and list of classes; returning <code>null</code> will delete the attribute. By editing the JSON files in <a href="https://github.com/google/caja/tree/master/src/com/google/caja/lang/html" rel="nofollow noreferrer">src/com/google/caja/lang/html</a> you can also customize which elements and attributes are whitelisted.</span></text><author><a class="comment-user" href="/users/311572/jeffery-to" title="10,554 reputation">Jeffery To</a></author></comment><comment><text><span class="comment-copy">@JefferyTo I am sorry, maybe I am too dumb, but I don't get it. The JSON files you refer to are not used in your example and demo above. I want to use the library in a browser, so I looked at your demo. Can you modify the <code>nameIdClassTranformer</code> function above e.g. to reject all <code>&lt;script&gt;</code> tags and accept <code>&lt;b&gt;</code> and <code>&lt;i&gt;</code> tags?</span></text><author><a class="comment-user" href="/users/134120/asgoodasitgets" title="831 reputation">AsGoodAsItGets</a></author></comment><comment><text><span class="comment-copy">@AsGoodAsItGets You need to check out the source code, edit the JSON files, then run <code>ant</code> to build the JS files appropriate for your use case.</span></text><author><a class="comment-user" href="/users/311572/jeffery-to" title="10,554 reputation">Jeffery To</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Never trust the client. If you're writing a server application, assume that the client will always submit unsanitary, malicious data. It's a rule of thumb that will keep you out of trouble. If you can, I would advise doing all validation and sanitation in server code, which you know (to a reasonable degree) won't be fiddled with. Perhaps you could use a serverside web application as a proxy for your clientside code, which fetches from the 3rd party and does sanitation before sending it to the client itself?</p>
<p>[edit] I'm sorry, I misunderstood the question. However, I stand by my advice. Your users will probably be safer if you sanitize on the server before sending it to them.</p>
</div></text><author><a href="/users/53315/sean-edwards">Sean Edwards</a></author><comments><comment><text><span class="comment-copy">Actually, with the popularity of node.js rising, a javascript solution might also be a serverside solution. That's how I ended up here at least. Still, this is excellent advice to live by.</span></text><author><a class="comment-user" href="/users/19521/nicholas-flynt" title="3,632 reputation">Nicholas Flynt</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>You can't anticipate every possible weird type of malformed markup that some browser somewhere might trip over to escape blacklisting, so don't blacklist. There are <em>many</em> more structures you might need to remove than just script/embed/object and handlers.</p>
<p>Instead attempt to parse the HTML into elements and attributes in a hierarchy, then run all element and attribute names against an as-minimal-as-possible whitelist. Also check any URL attributes you let through against a whitelist (remember there are more dangerous protocols than just javascript:).</p>
<p>If the input is well-formed XHTML the first part of the above is much easier.</p>
<p>As always with HTML sanitisation, if you can find any other way to avoid doing it, do that instead. There are many, many potential holes. If the major webmail services are still finding exploits after this many years, what makes you think you can do better?</p>
</div></text><author><a href="/users/18936/bobince">bobince</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Now that all major browsers support sandboxed iframes, there is a much simpler way that I <em>think</em> can be secure. I'd love it if this answer could be reviewed by people who are more familiar with this kind of security issue.</p>
<p><strong>NOTE: This method definitely will not work in IE 9 and earlier. See <a href="http://caniuse.com/#feat=iframe-sandbox" rel="nofollow noreferrer">this table</a> for browser versions that support sandboxing.</strong></p>
<p>The idea is to create a hidden iframe with JavaScript disabled, paste your untrusted HTML into it, and let it parse it. Then you can walk the DOM tree and copy out the tags and attributes that are considered safe.</p>
<p>The whitelists shown here are just examples. What's best to whitelist would depend on the application. If you need a more sophisticated policy than just whitelists of tags and attributes, that can be accommodated by this method, though not by this example code.</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">var</span><span class="pln"> tagWhitelist_ </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="str">'A'</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">,</span><span class="pln">
  </span><span class="str">'B'</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">,</span><span class="pln">
  </span><span class="str">'BODY'</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">,</span><span class="pln">
  </span><span class="str">'BR'</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">,</span><span class="pln">
  </span><span class="str">'DIV'</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">,</span><span class="pln">
  </span><span class="str">'EM'</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">,</span><span class="pln">
  </span><span class="str">'HR'</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">,</span><span class="pln">
  </span><span class="str">'I'</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">,</span><span class="pln">
  </span><span class="str">'IMG'</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">,</span><span class="pln">
  </span><span class="str">'P'</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">,</span><span class="pln">
  </span><span class="str">'SPAN'</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">,</span><span class="pln">
  </span><span class="str">'STRONG'</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pln">
</span><span class="pun">};</span><span class="pln">

</span><span class="kwd">var</span><span class="pln"> attributeWhitelist_ </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="str">'href'</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">,</span><span class="pln">
  </span><span class="str">'src'</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pln">
</span><span class="pun">};</span><span class="pln">

</span><span class="kwd">function</span><span class="pln"> sanitizeHtml</span><span class="pun">(</span><span class="pln">input</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> iframe </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">createElement</span><span class="pun">(</span><span class="str">'iframe'</span><span class="pun">);</span><span class="pln">
  </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">iframe</span><span class="pun">[</span><span class="str">'sandbox'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">===</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    alert</span><span class="pun">(</span><span class="str">'Your browser does not support sandboxed iframes. Please upgrade to a modern browser.'</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="str">''</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
  iframe</span><span class="pun">[</span><span class="str">'sandbox'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">'allow-same-origin'</span><span class="pun">;</span><span class="pln">
  iframe</span><span class="pun">.</span><span class="pln">style</span><span class="pun">.</span><span class="pln">display </span><span class="pun">=</span><span class="pln"> </span><span class="str">'none'</span><span class="pun">;</span><span class="pln">
  document</span><span class="pun">.</span><span class="pln">body</span><span class="pun">.</span><span class="pln">appendChild</span><span class="pun">(</span><span class="pln">iframe</span><span class="pun">);</span><span class="pln"> </span><span class="com">// necessary so the iframe contains a document</span><span class="pln">
  iframe</span><span class="pun">.</span><span class="pln">contentDocument</span><span class="pun">.</span><span class="pln">body</span><span class="pun">.</span><span class="pln">innerHTML </span><span class="pun">=</span><span class="pln"> input</span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">function</span><span class="pln"> makeSanitizedCopy</span><span class="pun">(</span><span class="pln">node</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">node</span><span class="pun">.</span><span class="pln">nodeType </span><span class="pun">==</span><span class="pln"> </span><span class="typ">Node</span><span class="pun">.</span><span class="pln">TEXT_NODE</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">var</span><span class="pln"> newNode </span><span class="pun">=</span><span class="pln"> node</span><span class="pun">.</span><span class="pln">cloneNode</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">node</span><span class="pun">.</span><span class="pln">nodeType </span><span class="pun">==</span><span class="pln"> </span><span class="typ">Node</span><span class="pun">.</span><span class="pln">ELEMENT_NODE </span><span class="pun">&amp;&amp;</span><span class="pln"> tagWhitelist_</span><span class="pun">[</span><span class="pln">node</span><span class="pun">.</span><span class="pln">tagName</span><span class="pun">])</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      newNode </span><span class="pun">=</span><span class="pln"> iframe</span><span class="pun">.</span><span class="pln">contentDocument</span><span class="pun">.</span><span class="pln">createElement</span><span class="pun">(</span><span class="pln">node</span><span class="pun">.</span><span class="pln">tagName</span><span class="pun">);</span><span class="pln">
      </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> node</span><span class="pun">.</span><span class="pln">attributes</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> attr </span><span class="pun">=</span><span class="pln"> node</span><span class="pun">.</span><span class="pln">attributes</span><span class="pun">[</span><span class="pln">i</span><span class="pun">];</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">attributeWhitelist_</span><span class="pun">[</span><span class="pln">attr</span><span class="pun">.</span><span class="pln">name</span><span class="pun">])</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
          newNode</span><span class="pun">.</span><span class="pln">setAttribute</span><span class="pun">(</span><span class="pln">attr</span><span class="pun">.</span><span class="pln">name</span><span class="pun">,</span><span class="pln"> attr</span><span class="pun">.</span><span class="pln">value</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
      </span><span class="pun">}</span><span class="pln">
      </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> node</span><span class="pun">.</span><span class="pln">childNodes</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> subCopy </span><span class="pun">=</span><span class="pln"> makeSanitizedCopy</span><span class="pun">(</span><span class="pln">node</span><span class="pun">.</span><span class="pln">childNodes</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]);</span><span class="pln">
        newNode</span><span class="pun">.</span><span class="pln">appendChild</span><span class="pun">(</span><span class="pln">subCopy</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">);</span><span class="pln">
      </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      newNode </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">createDocumentFragment</span><span class="pun">();</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> newNode</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">};</span><span class="pln">

  </span><span class="kwd">var</span><span class="pln"> resultElement </span><span class="pun">=</span><span class="pln"> makeSanitizedCopy</span><span class="pun">(</span><span class="pln">iframe</span><span class="pun">.</span><span class="pln">contentDocument</span><span class="pun">.</span><span class="pln">body</span><span class="pun">);</span><span class="pln">
  document</span><span class="pun">.</span><span class="pln">body</span><span class="pun">.</span><span class="pln">removeChild</span><span class="pun">(</span><span class="pln">iframe</span><span class="pun">);</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> resultElement</span><span class="pun">.</span><span class="pln">innerHTML</span><span class="pun">;</span><span class="pln">
</span><span class="pun">};</span></code></pre>
<p>You can try it out <a href="http://aldel.com/htmlsanitize.html" rel="nofollow noreferrer">here</a>.</p>
<p>Note that I'm disallowing style attributes and tags in this example. If you allowed them, you'd probably want to parse the CSS and make sure it's safe for your purposes.</p>
<p>I've tested this on several modern browsers (Chrome 40, Firefox 36 Beta, IE 11, Chrome for Android), and on one old one (IE 8) to make sure it bailed before executing any scripts. I'd be interested to know if there are any browsers that have trouble with it, or any edge cases that I'm overlooking.</p>
</div></text><author><a href="/users/2501624/aldel">aldel</a></author><comments><comment><text><span class="comment-copy">This post deserves some attention from the experts, as it seems to be the obvious and simplest solution. Is it truly secure?</span></text><author><a class="comment-user" href="/users/894410/pwray" title="115 reputation">pwray</a></author></comment><comment><text><span class="comment-copy">How can you programmatically create a hidden iframe "with JavaScript disabled"? To my best knowledge this is impossible. The minute you do <code>iframe.contentDocument.body.innerHTML = input</code>, whatever script tags in there will be executed.</span></text><author><a class="comment-user" href="/users/134120/asgoodasitgets" title="831 reputation">AsGoodAsItGets</a></author></comment><comment><text><span class="comment-copy">@AsGoodAsItGets - look up the sandbox attribute on iframes.</span></text><author><a class="comment-user" href="/users/2501624/aldel" title="2,184 reputation">aldel</a></author></comment><comment><text><span class="comment-copy">@aldel Indeed, I didn't know about it. For us it's still a no-go because of the lack of support in IE9. I guess your solution could work, but I think you should clarify in your response that you depend on the <code>sandbox</code> attribute.</span></text><author><a class="comment-user" href="/users/134120/asgoodasitgets" title="831 reputation">AsGoodAsItGets</a></author></comment><comment><text><span class="comment-copy">Sorry, I thought that was clear from my opening "Now that all major browsers support sandboxed iframes". I'll add a less subtle note.</span></text><author><a class="comment-user" href="/users/2501624/aldel" title="2,184 reputation">aldel</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<pre class="default prettyprint prettyprinted" style=""><code><span class="typ">String</span><span class="pun">.</span><span class="pln">prototype</span><span class="pun">.</span><span class="pln">sanitizeHTML</span><span class="pun">=</span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">white</span><span class="pun">,</span><span class="pln">black</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">white</span><span class="pun">)</span><span class="pln"> white</span><span class="pun">=</span><span class="str">"b|i|p|br"</span><span class="pun">;</span><span class="com">//allowed tags</span><span class="pln">
   </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">black</span><span class="pun">)</span><span class="pln"> black</span><span class="pun">=</span><span class="str">"script|object|embed"</span><span class="pun">;</span><span class="com">//complete remove tags</span><span class="pln">
   </span><span class="kwd">var</span><span class="pln"> e</span><span class="pun">=</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">RegExp</span><span class="pun">(</span><span class="str">"(&lt;("</span><span class="pun">+</span><span class="pln">black</span><span class="pun">+</span><span class="str">")[^&gt;]*&gt;.*&lt;/\\2&gt;|(?!&lt;[/]?("</span><span class="pun">+</span><span class="pln">white</span><span class="pun">+</span><span class="str">")(\\s[^&lt;]*&gt;|[/]&gt;|&gt;))&lt;[^&lt;&gt;]*&gt;|(?!&lt;[^&lt;&gt;\\s]+)\\s[^&lt;/&gt;]+(?=[/&gt;]))"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"gi"</span><span class="pun">);</span><span class="pln">
   </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">replace</span><span class="pun">(</span><span class="pln">e</span><span class="pun">,</span><span class="str">""</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>-black list -&gt; complete remove tag and content</p>
<p>-white list -&gt; retain tags </p>
<p>-other tags are removed but tag content is retained</p>
<p>-all attributes of white list tag's (the remaining ones) are removed</p>
</div></text><author><a href="/users/1329075/neu-rah">neu-rah</a></author><comments><comment><text><span class="comment-copy">What happens when you do <code>&lt;scr&lt;script&gt;ipt&gt;</code>? Removal can actually be worse. Sometimes it's worth it to just log that user out entirely and not try to fix it.</span></text><author><a class="comment-user" href="/users/203731/chuck-vose" title="3,852 reputation">Chuck Vose</a></author></comment><comment><text><span class="comment-copy">very good point.. can we rule out if it still sanitizes after first try? (intrusion detection)</span></text><author><a class="comment-user" href="/users/1329075/neu-rah" title="1,394 reputation">neu-rah</a></author></comment><comment><text><span class="comment-copy">For the &lt;scr&lt;script&gt;ipt&gt; and permutations thereof, I would have this function execute in a WHILE loop.</span></text><author><a class="comment-user" href="/users/1299659/fredthewebguy" title="1,627 reputation">FredTheWebGuy</a></author></comment><comment><text><span class="comment-copy">well in a pratical way if it still obtains sanitization after the first pass then we have some form of injection and we can discard the input instead of using long runs</span></text><author><a class="comment-user" href="/users/1329075/neu-rah" title="1,394 reputation">neu-rah</a></author></comment><comment><text><span class="comment-copy">That <code>e</code> variable looks like it's an unintentional global. Otherwise this works for my needs.</span></text><author><a class="comment-user" href="/users/1397311/ccnokes" title="2,031 reputation">ccnokes</a></author></comment><comment><text><span class="comment-copy">yes, it is, thanks.  corrected that</span></text><author><a class="comment-user" href="/users/1329075/neu-rah" title="1,394 reputation">neu-rah</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>So, it's 2016, and I think many of us are using <code>npm</code> modules in our code now. <a href="https://www.npmjs.com/package/sanitize-html" rel="nofollow"><code>sanitize-html</code></a> seems like the leading option on npm, though there are <a href="https://www.npmjs.com/browse/keyword/sanitize" rel="nofollow">others</a>.</p>
<p>Other answers to this question provide great input in how to roll your own, but this is a tricky enough problem that well-tested community solutions are probably the best answer.</p>
<p>Run this on the command line to install:
<code>
npm install --save sanitize-html
</code></p>
<p>ES5:
<code>
var sanitizeHtml = require('sanitize-html');
// ...
var sanitized = sanitizeHtml(htmlInput);
</code></p>
<p>ES6:
<code>
import sanitizeHtml from 'sanitize-html';
// ...
let sanitized = sanitizeHtml(htmlInput);
</code></p>
</div></text><author><a href="/users/222356/ericsoco">ericsoco</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I recommend cutting frameworks out of your life, it would make things excessively easier for you in the long term.</p>
<p>cloneNode: Cloning a node copies all of its attributes and their values but <strong>does <em>NOT</em> copy event listeners</strong>.</p>
<p><a href="https://developer.mozilla.org/en/DOM/Node.cloneNode" rel="nofollow">https://developer.mozilla.org/en/DOM/Node.cloneNode</a></p>
<p>The following is not tested though I have using treewalkers for some time now and they are one of the most undervalued parts of JavaScript. Here is a list of the node types you can crawl, usually I use <strong>SHOW_ELEMENT</strong> or <strong>SHOW_TEXT</strong>.</p>
<p><a href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html#Traversal-NodeFilter" rel="nofollow">http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html#Traversal-NodeFilter</a></p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">function</span><span class="pln"> xhtml_cleaner</span><span class="pun">(</span><span class="pln">id</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
 </span><span class="kwd">var</span><span class="pln"> e </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">getElementById</span><span class="pun">(</span><span class="pln">id</span><span class="pun">);</span><span class="pln">
 </span><span class="kwd">var</span><span class="pln"> f </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">createDocumentFragment</span><span class="pun">();</span><span class="pln">
 f</span><span class="pun">.</span><span class="pln">appendChild</span><span class="pun">(</span><span class="pln">e</span><span class="pun">.</span><span class="pln">cloneNode</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">));</span><span class="pln">

 </span><span class="kwd">var</span><span class="pln"> walker </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">createTreeWalker</span><span class="pun">(</span><span class="pln">f</span><span class="pun">,</span><span class="typ">NodeFilter</span><span class="pun">.</span><span class="pln">SHOW_ELEMENT</span><span class="pun">,</span><span class="kwd">null</span><span class="pun">,</span><span class="kwd">false</span><span class="pun">);</span><span class="pln">

 </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">walker</span><span class="pun">.</span><span class="pln">nextNode</span><span class="pun">())</span><span class="pln">
 </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> c </span><span class="pun">=</span><span class="pln"> walker</span><span class="pun">.</span><span class="pln">currentNode</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">c</span><span class="pun">.</span><span class="pln">hasAttribute</span><span class="pun">(</span><span class="str">'contentEditable'</span><span class="pun">))</span><span class="pln"> </span><span class="pun">{</span><span class="pln">c</span><span class="pun">.</span><span class="pln">removeAttribute</span><span class="pun">(</span><span class="str">'contentEditable'</span><span class="pun">);}</span><span class="pln">
  </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">c</span><span class="pun">.</span><span class="pln">hasAttribute</span><span class="pun">(</span><span class="str">'style'</span><span class="pun">))</span><span class="pln"> </span><span class="pun">{</span><span class="pln">c</span><span class="pun">.</span><span class="pln">removeAttribute</span><span class="pun">(</span><span class="str">'style'</span><span class="pun">);}</span><span class="pln">

  </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">c</span><span class="pun">.</span><span class="pln">nodeName</span><span class="pun">.</span><span class="pln">toLowerCase</span><span class="pun">()==</span><span class="str">'script'</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">element_del</span><span class="pun">(</span><span class="pln">c</span><span class="pun">);}</span><span class="pln">
 </span><span class="pun">}</span><span class="pln">

 alert</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">XMLSerializer</span><span class="pun">().</span><span class="pln">serializeToString</span><span class="pun">(</span><span class="pln">f</span><span class="pun">));</span><span class="pln">
 </span><span class="kwd">return</span><span class="pln"> f</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">


</span><span class="kwd">function</span><span class="pln"> element_del</span><span class="pun">(</span><span class="pln">element_id</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
 </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">document</span><span class="pun">.</span><span class="pln">getElementById</span><span class="pun">(</span><span class="pln">element_id</span><span class="pun">))</span><span class="pln">
 </span><span class="pun">{</span><span class="pln">
  document</span><span class="pun">.</span><span class="pln">getElementById</span><span class="pun">(</span><span class="pln">element_id</span><span class="pun">).</span><span class="pln">parentNode</span><span class="pun">.</span><span class="pln">removeChild</span><span class="pun">(</span><span class="pln">document</span><span class="pun">.</span><span class="pln">getElementById</span><span class="pun">(</span><span class="pln">element_id</span><span class="pun">));</span><span class="pln">
 </span><span class="pun">}</span><span class="pln">
 </span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">element_id</span><span class="pun">)</span><span class="pln">
 </span><span class="pun">{</span><span class="pln">
  element_id</span><span class="pun">.</span><span class="pln">parentNode</span><span class="pun">.</span><span class="pln">removeChild</span><span class="pun">(</span><span class="pln">element_id</span><span class="pun">);</span><span class="pln">
 </span><span class="pun">}</span><span class="pln">
 </span><span class="kwd">else</span><span class="pln">
 </span><span class="pun">{</span><span class="pln">
  alert</span><span class="pun">(</span><span class="str">'Error: the object or element \''</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> element_id </span><span class="pun">+</span><span class="pln"> </span><span class="str">'\' was not found and therefore could not be deleted.'</span><span class="pun">);</span><span class="pln">
 </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/606371/john">John</a></author><comments><comment><text><span class="comment-copy">This code assumes that the input to clean has already been parsed and even inserted into the document tree. If that's the case, the malicious scripts have already been executed. The input should be a string.</span></text><author><a class="comment-user" href="/users/35070/phihag" title="150,282 reputation">phihag</a></author></comment><comment><text><span class="comment-copy">Then send a DOM fragment to it, just because it's in the DOM in a given shape or form does not actually imply that it has been executed. Presuming he's loading it via AJAX he can use this in conjunction with importNode.</span></text><author><a class="comment-user" href="/users/606371/john" title="3,670 reputation">John</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The Google Caja library suggested above was way too complex to configure and include in my project for a Web application (so, running on the browser). What I resorted to instead, since we already use the CKEditor component, is to use it's built-in HTML sanitizing and whitelisting function, which is far more easier to configure. So, you can load a CKEditor instance in a hidden iframe and do something like:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">CKEDITOR</span><span class="pun">.</span><span class="pln">instances</span><span class="pun">[</span><span class="str">'myCKEInstance'</span><span class="pun">].</span><span class="pln">dataProcessor</span><span class="pun">.</span><span class="pln">toHtml</span><span class="pun">(</span><span class="pln">myHTMLstring</span><span class="pun">)</span></code></pre>
<p>Now, granted, if you're not using CKEditor in your project this may be a bit of an overkill, since the component itself is around half a megabyte (minimized), but if you have the sources, maybe you can isolate the code doing the whitelisting (<code>CKEDITOR.htmlParser</code>?) and make it much shorter.</p>
<p><a href="http://docs.ckeditor.com/#%21/api" rel="nofollow">http://docs.ckeditor.com/#!/api</a></p>
<p><a href="http://docs.ckeditor.com/#%21/api/CKEDITOR.htmlDataProcessor" rel="nofollow">http://docs.ckeditor.com/#!/api/CKEDITOR.htmlDataProcessor</a></p>
</div></text><author><a href="/users/134120/asgoodasitgets">AsGoodAsItGets</a></author><comments/></answer></answers></post>