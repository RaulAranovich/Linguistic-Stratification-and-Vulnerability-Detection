<?xml version="1.0" encoding="utf-8"?>
<post><title>security - client secret in OAuth 2.0 - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>To use google drive api, I have to play with the authentication using OAuth2.0. And I got a few question about this.</p>
<ol>
<li><p>Client id and  client secret are used to identify what my app is. But they must be hardcoded if it is a client application. So, everyone can decompile my app and extract them from source code. <strong>Does it mean that a bad app can pretend to be a good app by using the good app's client id and secret?</strong> So user would be showing a screen that asking for granting permission to a good app even though it is actually asked by a bad app? If yes, what should I do?  Or actually I should not worry about this?</p></li>
<li><p>In mobile application, we can embedded a webview to our app. And it is easy to extract the password field in the webview because the app that asking for permission is actually a "browser". <strong>So, OAuth in mobile application does not have the benefit that client application has not access to the user credential of service provider?</strong> </p></li>
</ol>
</div></text><author><a href="/users/809565/bear">Bear</a></author><comments><comment><text><span class="comment-copy">Also I guess people are usually suspicions when app asks them for their Facebook, Twitter, Dropbox or other credentials. I doubt many ordinary people read OAuth spec and say "Now I am safe" but instead use common sense and generally not use apps they don't trust.</span></text><author><a class="comment-user" href="/users/2161029/psixo" title="1,987 reputation">PSIXO</a></author></comment><comment><text><span class="comment-copy">Really a great question definitely should have more points</span></text><author><a class="comment-user" href="/users/3742271/shravan" title="434 reputation">Shravan</a></author></comment><comment><text><span class="comment-copy">you could just download the ClientId and secret from your server and save it in a keychain on first successful login that's it</span></text><author><a class="comment-user" href="/users/3742271/shravan" title="434 reputation">Shravan</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>I started writing a comment to your question but then found out there is too much to say so here are my views on the subject in the answer.</p>
<p>1) Yes there is a real possibility for this and there were some exploits based on this. Suggestion is not to keep the app secret in your app, there is even part in the spec that distributed apps should not use this token. Now you might ask, but XYZ requires it in order to work. In that case they are not implementing the spec properly and you should A not use that service (not likely) or B try to secure token using some obfuscating methods to make it harder to find or use your server as a proxy.</p>
<p>For example there were some bugs in Facebook library for Android where it was leaking tokens to Logs, you can find out more about it here
<a href="http://attack-secure.com/all-your-facebook-access-tokens-are-belong-to-us" rel="nofollow">http://attack-secure.com/all-your-facebook-access-tokens-are-belong-to-us</a>
and here <a href="https://www.youtube.com/watch?v=twyL7Uxe6sk" rel="nofollow">https://www.youtube.com/watch?v=twyL7Uxe6sk</a>.
All in all be extra cautious of your usage of third party libraries (common sense actually but if token hijacking is your big concern add another extra to cautious).</p>
<p>2) I have been ranting about the point 2 for quite some time. I have even done some workarounds in my apps in order to modify the consent pages (for example changing zoom and design to fit the app) but there was nothing stopping me from reading values from fields inside the web view with username and password. Therefore I totally agree with your second point and find it a big "bug" in OAuth spec. Point being "App doesn't get access to users credentials" in the spec is just a dream and gives users false sense of security...
Also I guess people are usually suspicions when app asks them for their Facebook, Twitter, Dropbox or other credentials. I doubt many ordinary people read OAuth spec and say "Now I am safe" but instead use common sense and generally not use apps they don't trust. </p>
</div></text><author><a href="/users/2161029/psixo">PSIXO</a></author><comments><comment><text><span class="comment-copy">Your client id and client secret won't be secure just because you post them in an SSL tunnel. Yes, they are more secure from man in the middle attacks.  If a user proxies your HTTPs call they can accept the bad certificate and see everything you post. By the way, this is the easiest way to steal someones client secret on mobile devices.</span></text><author><a class="comment-user" href="/users/1087034/epicthreedev" title="121 reputation">EpicThreeDev</a></author></comment><comment><text><span class="comment-copy">I appreciate your comment but can't connect it with my answer in any way... Could you please elaborate why you commented on my answer because I explicitly stated that Client secret shouldn't be used in distributed apps and the other point was that there are workarounds to get user credentials in the apps even if using OAuth so users should have trust in app provider and not the OAuth.</span></text><author><a class="comment-user" href="/users/2161029/psixo" title="1,987 reputation">PSIXO</a></author></comment><comment><text><span class="comment-copy">Also I don't understand what you mean by  "If a user proxies your HTTPs call" yes users get access to data they sent using HTTPs and they are free to proxy calls however they like. As I understood you are suggesting this as quite a nice alternative to disassembling the apk to get the secret but then again you shouldn't sent app secret in the first place.</span></text><author><a class="comment-user" href="/users/2161029/psixo" title="1,987 reputation">PSIXO</a></author></comment><comment><text><span class="comment-copy">So for point 1) the bad app needs to have access to the same system and retrieve the access/refresh token from the <i>same</i> device?</span></text><author><a class="comment-user" href="/users/377927/gauteh" title="7,464 reputation">gauteh</a></author></comment><comment><text><span class="comment-copy">It is not clear what you regard as "same system " in this context. App creates a webview in which confirmation page is shown and can access all data in that view (including cookies or url params hosting the access token). Cross app access is also possible in some cases, for example if one app can access other app logs it could find the token there as mentioned with fb lib bug.</span></text><author><a class="comment-user" href="/users/2161029/psixo" title="1,987 reputation">PSIXO</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I had the same question as the question 1 here, and did some research myself recently, and my conclusion is that it is ok to not keep "client secret" a secret.
The type of clients that do not keep confidentiality of client secret is called "public client" in the OAuth2 spec.
The possibility of someone malicious being able to get authorization code, and then access token, is prevented by the following facts.</p>
<h2>1. Client need to get authorization code directly from the user, not from the service</h2>
<p>Even if user indicates the service that he/she trusts the client, the client cannot get authorization code from the service just by showing client id and client secret.
Instead, the client has to get the authorization code directly from the user. (This is usually done by URL redirection, which I will talk about later.)
So, for the malicious client, it is not enough to know client id/secret trusted by the user. It has to somehow involve or spoof user to give it the authorization code,
which should be harder than just knowing client id/secret.</p>
<h2>2. Redirect URL is registered with client id/secret</h2>
<p>Let’s assume that the malicious client somehow managed to involve the user and make her/him click "Authorize this app" button on the service page.
This will trigger the URL redirect response from the service to user’s browser with the authorization code with it.
Then the authorization code will be sent from user’s browser to the redirect URL, and the client is supposed to be listening at the redirect URL to receive the authorization code.
(The redirect URL can be localhost too, and I figured that this is a typical way that a “public client” receives authorization code.)
Since this redirect URL is registered at the service with the client id/secret, the malicious client does not have a way to control where the authorization code is given to.
This means the malicious client with your client id/secret has another obstacle to obtain the user’s authorization code.</p>
</div></text><author><a href="/users/6249112/hideaki">hideaki</a></author><comments><comment><text><span class="comment-copy">This is promising, do you have any references for this? It would be reassuring to know.</span></text><author><a class="comment-user" href="/users/377927/gauteh" title="7,464 reputation">gauteh</a></author></comment></comments></answer></answers></post>