<?xml version="1.0" encoding="utf-8"?>
<post><title>c# - Why is JsonRequestBehavior needed? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>Why is <code>Json Request Behavior</code> needed?</p>
<p>If I want to restrict the <code>HttpGet</code> requests to my action I can decorate the action with the <code>[HttpPost]</code> attribute</p>
<p>Example:</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="pun">[</span><span class="typ">HttpPost</span><span class="pun">]</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="typ">JsonResult</span><span class="pln"> </span><span class="typ">Foo</span><span class="pun">()</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Json</span><span class="pun">(</span><span class="str">"Secrets"</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="com">// Instead of:</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="typ">JsonResult</span><span class="pln"> </span><span class="typ">Foo</span><span class="pun">()</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Json</span><span class="pun">(</span><span class="str">"Secrets"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">JsonRequestBehavior</span><span class="pun">.</span><span class="typ">AllowGet</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>Why isn't <code>[HttpPost]</code>sufficient?<br/>
Why the framework "bugs" us with the <code>JsonRequestBehavior.AllowGet</code> for every <code>JsonResult</code> that we have. If I want to deny get requests I'll add the <code>HttpPost</code> attribute.</p>
</div></text><author><a href="/users/601179/gdoron">gdoron</a></author><comments><comment><text><span class="comment-copy">Very similar to <a href="http://stackoverflow.com/questions/1625671/why-are-get-requests-returning-json-disallowed-by-default" title="why are get requests returning json disallowed by default">stackoverflow.com/questions/1625671/…</a> (although I found this one searching for my own question :))</span></text><author><a class="comment-user" href="/users/9913/jedidja" title="8,391 reputation">Jedidja</a></author></comment><comment><text><span class="comment-copy">Because GET is supposed to be idempotent whereas POST is not. By making GETs -&gt; POSTs, you change the semantics of the interface.</span></text><author><a class="comment-user" href="/users/70149/rism" title="6,581 reputation">rism</a></author></comment><comment><text><span class="comment-copy">Because your code would look too clean if you didn't have to add crufty args everywhere.</span></text><author><a class="comment-user" href="/users/409020/john-shedletsky" title="1,856 reputation">John Shedletsky</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>This is to protect against a very specific attack with JSON requests that return data using HTTP GET.</p>
<p>Basically, if your action method does not return sensitive data, then it should be safe to allow the get. </p>
<p>However, MVC puts this in with DenyGet as the default to protect you against this attack. <strong>It makes you consider the implications of what data you are exposing, <em>before you decide</em> to expose it over HTTP GET</strong>.</p>
<p>Update</p>
<p>From my Wrox ASP.NET MVC3 book:</p>
<blockquote>
<p>By default, the ASP.NET MVC framework does not allow you to respond to
  an HTTP GET request with a JSON payload. If you need to send JSON in
  response to a GET, you'll need to explicitly allow the behavior by
  using JsonRequestBehavior.AllowGet as the second parameter to the Json
  method. However, there is a chance a malicious user can gain access to
  the JSON payload through a process known as JSON Hijacking. You do not
  want to return sensitive information using JSON in a GET request. For
  more details, see Phil's post at
  <a href="http://haacked.com/archive/2009/06/24/json-hijacking.aspx/">http://haacked.com/archive/2009/06/24/json-hijacking.aspx/</a>. </p>
<p>Haack, Phil (2011). Professional ASP.NET MVC 3 (Wrox Programmer to
  Programmer) (Kindle Locations 6014-6020). Wrox. Kindle Edition.    </p>
</blockquote>
</div></text><author><a href="/users/304832/danludwig">danludwig</a></author><comments><comment><text><span class="comment-copy">But the question remains: Why isn't [HttpPost] sufficient?</span></text><author><a class="comment-user owner" href="/users/601179/gdoron" title="91,437 reputation">gdoron</a></author></comment><comment><text><span class="comment-copy">I think it is sufficient. You only need AllowGet when you want to allow the data to pass as the result of a HttpGet. DenyGet is the default, if you invoke Json(data) with 1 parameter.</span></text><author><a class="comment-user" href="/users/304832/danludwig" title="33,109 reputation">danludwig</a></author></comment><comment><text><span class="comment-copy">This is my question. Why the framework "bugs" us with the <code>JsonRequestBehavior.AllowGet</code> for every JsonResult that I have. If I want to deny get request I'll add the <code>HttpPost</code> attribute.</span></text><author><a class="comment-user owner" href="/users/601179/gdoron" title="91,437 reputation">gdoron</a></author></comment><comment><text><span class="comment-copy">I think it's because not a lot of people are aware of this obscure vulnerability. You say if you want to deny the request, you will do it with [HttpPost]. However the MVC authors are giving you a layer of protection out of the box against this kind of attack. Since you need to make effort to add the 2nd argument, you should take that time to consider what data you are exposing, and how sensitive it is.</span></text><author><a class="comment-user" href="/users/304832/danludwig" title="33,109 reputation">danludwig</a></author></comment><comment><text><span class="comment-copy">So now we clutter up our API and add verb confusion to "RESTful" interfaces to get around a potential CLIENT driven vulnerability?  This seems terrible...but I appreciate the discussion.</span></text><author><a class="comment-user" href="/users/77329/norman-h" title="1,758 reputation">Norman H</a></author></comment><comment><text><span class="comment-copy">How is GET more vulnerable than POST?</span></text><author><a class="comment-user" href="/users/1427758/anders-lind%c3%a9n" title="2,690 reputation">Anders Lindén</a></author></comment><comment><text><span class="comment-copy">@AndersLindén because script tags that point to a URL don't load those remote scripts via POST, so the attack would not succeed because the server only accepts POST requests for that data.</span></text><author><a class="comment-user" href="/users/1313143/mariods" title="6,552 reputation">MarioDS</a></author></comment><comment><text><span class="comment-copy">I think the fact that Microsoft protects programmers this way out of the box is certainly not a bad thing, but the <i>way</i> they've done it is rather annoying. The second argument is a rather lengthy enum member and it clutters code. They could easily have made an overload that accepts a <code>bool</code>, or even another method like <code>JsonGet(...)</code> for example. People would still wonder why it's there and learn about the vulnerability / risk. Sure, you can make those yourself on a BaseController, but I don't like having a BaseController at all personally.</span></text><author><a class="comment-user" href="/users/1313143/mariods" title="6,552 reputation">MarioDS</a></author></comment><comment><text><span class="comment-copy">If you're annoyed just subclass it</span></text><author><a class="comment-user" href="/users/3638471/bj%c3%b6rn-ali-g%c3%b6ransson" title="666 reputation">Björn Ali Göransson</a></author></comment><comment><text><span class="comment-copy">Ironically, modern browsers are not longer vulnerable to the JSON hijacking issue that prompted the MVC team to include that safeguard. See <a href="http://stackoverflow.com/questions/16289894/is-json-hijacking-still-an-issue-in-modern-browsers" title="is json hijacking still an issue in modern browsers">stackoverflow.com/questions/16289894/…</a>.</span></text><author><a class="comment-user" href="/users/284704/jordan-rieger" title="1,389 reputation">Jordan Rieger</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>To make it easier for yourself you could also create an actionfilterattribute</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AllowJsonGetAttribute</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">ActionFilterAttribute</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">override</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">OnResultExecuting</span><span class="pun">(</span><span class="typ">ResultExecutingContext</span><span class="pln"> filterContext</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> jsonResult </span><span class="pun">=</span><span class="pln"> filterContext</span><span class="pun">.</span><span class="typ">Result</span><span class="pln"> </span><span class="kwd">as</span><span class="pln"> </span><span class="typ">JsonResult</span><span class="pun">;</span><span class="pln">

        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">jsonResult </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
            </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ArgumentException</span><span class="pun">(</span><span class="str">"Action does not return a JsonResult, attribute AllowJsonGet is not allowed"</span><span class="pun">);</span><span class="pln">

        jsonResult</span><span class="pun">.</span><span class="typ">JsonRequestBehavior</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">JsonRequestBehavior</span><span class="pun">.</span><span class="typ">AllowGet</span><span class="pun">;</span><span class="pln">            

        </span><span class="kwd">base</span><span class="pun">.</span><span class="typ">OnResultExecuting</span><span class="pun">(</span><span class="pln">filterContext</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>and use it on your action</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="pln">    </span><span class="pun">[</span><span class="typ">AllowJsonGet</span><span class="pun">]</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">JsonResult</span><span class="pln"> </span><span class="typ">MyAjaxAction</span><span class="pun">()</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Json</span><span class="pun">(</span><span class="str">"this is my test"</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/852813/arjen-de-mooij">Arjen de Mooij</a></author><comments><comment><text><span class="comment-copy">Absolutely perfect solution</span></text><author><a class="comment-user" href="/users/315049/netfed" title="187 reputation">netfed</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>By default Jsonresult "Deny get"</p>
<p>Suppose if we  have method like below</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="pln">  </span><span class="pun">[</span><span class="typ">HttpPost</span><span class="pun">]</span><span class="pln">
 </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">JsonResult</span><span class="pln"> amc</span><span class="pun">(){}</span></code></pre>
<p>By default it "Deny Get".</p>
<p>In the below method </p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="kwd">public</span><span class="pln"> </span><span class="typ">JsonResult</span><span class="pln"> amc</span><span class="pun">(){}</span></code></pre>
<p>When you need to allowget or use get ,we have to use JsonRequestBehavior.AllowGet.</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="kwd">public</span><span class="pln"> </span><span class="typ">JsonResult</span><span class="pln"> amc</span><span class="pun">()</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
 </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Json</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Modle</span><span class="pun">.</span><span class="typ">JsonResponseData</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Status</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> flag</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Message</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> msg</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Html</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> html </span><span class="pun">},</span><span class="pln"> </span><span class="typ">JsonRequestBehavior</span><span class="pun">.</span><span class="typ">AllowGet</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/579860/deepakmahajan">Deepakmahajan</a></author><comments><comment><text><span class="comment-copy">I'm sorry it doesn't answer the question...</span></text><author><a class="comment-user owner" href="/users/601179/gdoron" title="91,437 reputation">gdoron</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Improving upon the answer of @Arjen de Mooij a bit by making the 
AllowJsonGetAttribute applicable to mvc-controllers (not just individual action-methods):</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="kwd">public</span><span class="pln"> </span><span class="kwd">sealed</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AllowJsonGetAttribute</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">ActionFilterAttribute</span><span class="pun">,</span><span class="pln"> </span><span class="typ">IActionFilter</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">IActionFilter</span><span class="pun">.</span><span class="typ">OnActionExecuted</span><span class="pun">(</span><span class="typ">ActionExecutedContext</span><span class="pln"> context</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> jsonResult </span><span class="pun">=</span><span class="pln"> context</span><span class="pun">.</span><span class="typ">Result</span><span class="pln"> </span><span class="kwd">as</span><span class="pln"> </span><span class="typ">JsonResult</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">jsonResult </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">return</span><span class="pun">;</span><span class="pln">

        jsonResult</span><span class="pun">.</span><span class="typ">JsonRequestBehavior</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">JsonRequestBehavior</span><span class="pun">.</span><span class="typ">AllowGet</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">override</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">OnResultExecuting</span><span class="pun">(</span><span class="typ">ResultExecutingContext</span><span class="pln"> filterContext</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> jsonResult </span><span class="pun">=</span><span class="pln"> filterContext</span><span class="pun">.</span><span class="typ">Result</span><span class="pln"> </span><span class="kwd">as</span><span class="pln"> </span><span class="typ">JsonResult</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">jsonResult </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">return</span><span class="pun">;</span><span class="pln">

        jsonResult</span><span class="pun">.</span><span class="typ">JsonRequestBehavior</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">JsonRequestBehavior</span><span class="pun">.</span><span class="typ">AllowGet</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">base</span><span class="pun">.</span><span class="typ">OnResultExecuting</span><span class="pun">(</span><span class="pln">filterContext</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/863651/xdisruptor">xDisruptor</a></author><comments/></answer></answers></post>