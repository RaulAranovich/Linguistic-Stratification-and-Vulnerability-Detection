<?xml version="1.0" encoding="utf-8"?>
<post><title>java - Unit testing with Spring Security - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>My company has been evaluating Spring MVC to determine if we should use it in one of our next projects. So far I love what I've seen, and right now I'm taking a look at the Spring Security module to determine if it's something we can/should use. </p>
<p>Our security requirements are pretty basic; a user just needs to be able to provide a username and password to be able to access certain parts of the site (such as to get info about their account); and there are a handful of pages on the site (FAQs, Support, etc) where an anonymous user should be given access.</p>
<p>In the prototype I've been creating, I have been storing a "LoginCredentials" object (which just contains username and password) in Session for an authenticated user; some of the controllers check to see if this object is in session to get a reference to the logged-in username, for example. I'm looking to replace this home-grown logic with Spring Security instead, which would have the nice benefit of removing any sort of "how do we track logged in users?" and "how do we authenticate users?" from my controller/business code. </p>
<p>It seems like Spring Security provides a (per-thread) "context" object to be able to access the username/principal info from anywhere in your app...</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="typ">Object</span><span class="pln"> principal </span><span class="pun">=</span><span class="pln"> </span><span class="typ">SecurityContextHolder</span><span class="pun">.</span><span class="pln">getContext</span><span class="pun">().</span><span class="pln">getAuthentication</span><span class="pun">().</span><span class="pln">getPrincipal</span><span class="pun">();</span></code></pre>
<p>... which seems very un-Spring like as this object is a (global) singleton, in a way.</p>
<p>My question is this: if this is the standard way to access information about the authenticated user in Spring Security, what is the accepted way to inject an Authentication object into the SecurityContext so that it is available for my unit tests when the unit tests require an authenticated user?</p>
<p>Do I need to wire this up in the initialization method of each test case?</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="kwd">protected</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setUp</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="pun">...</span><span class="pln">
    </span><span class="typ">SecurityContextHolder</span><span class="pun">.</span><span class="pln">getContext</span><span class="pun">().</span><span class="pln">setAuthentication</span><span class="pun">(</span><span class="pln">
        </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">UsernamePasswordAuthenticationToken</span><span class="pun">(</span><span class="pln">testUser</span><span class="pun">.</span><span class="pln">getLogin</span><span class="pun">(),</span><span class="pln"> testUser</span><span class="pun">.</span><span class="pln">getPassword</span><span class="pun">()));</span><span class="pln">
    </span><span class="pun">...</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>This seems overly verbose. Is there an easier way? </p>
<p>The <code>SecurityContextHolder</code> object itself seems very un-Spring-like...</p>
</div></text><author><a href="/users/2495576/scott-bale">Scott Bale</a></author><comments/></question><answers><answer><text><div class="post-text" itemprop="text">
<p>The problem is that Spring Security does not make the Authentication object available as a bean in the container, so there is no way to easily inject or autowire it out of the box.</p>
<p>Before we started to use Spring Security, we would create a session-scoped bean in the container to store the Principal, inject this into an "AuthenticationService" (singleton) and then inject this bean into other services that needed knowledge of the current Principal.</p>
<p>If you are implementing your own authentication service, you could basically do the same thing: create a session-scoped bean with a "principal" property, inject this into your authentication service, have the auth service set the property on successful auth, and then make the auth service available to other beans as you need it.</p>
<p>I wouldn't feel too bad about using SecurityContextHolder. though.  I know that it's a static / Singleton and that Spring discourages using such things but their implementation takes care to behave appropriately depending on the environment: session-scoped in a Servlet container, thread-scoped in a JUnit test, etc.  The real limiting factor of a Singleton is when it provides an implementation that is inflexible to different environments.</p>
</div></text><author><a href="/users/41754/cliff-meyers">cliff.meyers</a></author><comments><comment><text><span class="comment-copy">Thanks, this is useful advice. What I've done so far is basically to proceed with calling SecurityContextHolder.getContext() (thru a few wrapper methods of my own, so at least it's only called from one class).</span></text><author><a class="comment-user owner" href="/users/4249/matt-b" title="98,628 reputation">matt b</a></author></comment><comment><text><span class="comment-copy">Although just one note - I don't think ServletContextHolder has any concept of HttpSession or a way of knowing if it's operating in a web server environment - it uses ThreadLocal unless you configure it to use something else (the only other two builtin modes are InheritableThreadLocal and Global)</span></text><author><a class="comment-user owner" href="/users/4249/matt-b" title="98,628 reputation">matt b</a></author></comment><comment><text><span class="comment-copy">The only drawback to using session/request-scoped beans in Spring is that they will fail in a JUnit test.  What you can do is implement a custom scope that will use session/request if available and fall back to thread is necessary.  My guess is that Spring Security is doing something similar...</span></text><author><a class="comment-user" href="/users/41754/cliff-meyers" title="14,564 reputation">cliff.meyers</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Just do it the usual way and then insert it using <code>SecurityContextHolder.setContext()</code> in your test class, for example:</p>
<p>Controller:</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="typ">Authentication</span><span class="pln"> a </span><span class="pun">=</span><span class="pln"> </span><span class="typ">SecurityContextHolder</span><span class="pun">.</span><span class="pln">getContext</span><span class="pun">().</span><span class="pln">getAuthentication</span><span class="pun">();</span></code></pre>
<p>Test:</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="typ">Authentication</span><span class="pln"> authentication </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Mockito</span><span class="pun">.</span><span class="pln">mock</span><span class="pun">(</span><span class="typ">Authentication</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span><span class="pln">
</span><span class="com">// Mockito.whens() for your authorization object</span><span class="pln">
</span><span class="typ">SecurityContext</span><span class="pln"> securityContext </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Mockito</span><span class="pun">.</span><span class="pln">mock</span><span class="pun">(</span><span class="typ">SecurityContext</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span><span class="pln">
</span><span class="typ">Mockito</span><span class="pun">.</span><span class="pln">when</span><span class="pun">(</span><span class="pln">securityContext</span><span class="pun">.</span><span class="pln">getAuthentication</span><span class="pun">()).</span><span class="pln">thenReturn</span><span class="pun">(</span><span class="pln">authentication</span><span class="pun">);</span><span class="pln">
</span><span class="typ">SecurityContextHolder</span><span class="pun">.</span><span class="pln">setContext</span><span class="pun">(</span><span class="pln">securityContext</span><span class="pun">);</span></code></pre>
</div></text><author><a href="/users/1464825/leonardo-eloy">Leonardo Eloy</a></author><comments><comment><text><span class="comment-copy">Thanks, this worked very well for me.</span></text><author><a class="comment-user" href="/users/687840/sockmonk" title="3,224 reputation">sockmonk</a></author></comment><comment><text><span class="comment-copy">Thanks, nice one :)</span></text><author><a class="comment-user" href="/users/512155/jan-groth" title="7,540 reputation">jan groth</a></author></comment><comment><text><span class="comment-copy">@Leonardo where should this <code>Authentication a</code> be added in the controller? As I can understand in each method invocation? Is it okay for "spring way" just to add it, instead of  injecting?</span></text><author><a class="comment-user" href="/users/4526235/oleg-kuts" title="190 reputation">Oleg Kuts</a></author></comment><comment><text><span class="comment-copy">But remember its not going to work with TestNG because SecurityContextHolder hold local thread variable so then you share this variable between tests ...</span></text><author><a class="comment-user" href="/users/1568605/%c5%81ukasz-wo%c5%baniczka" title="521 reputation">≈Åukasz Wo≈∫niczka</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>You are quite right to be concerned - static method calls are particularly problematic for unit testing as you cannot easily mock your dependencies. What I am going to show you is how to let the Spring IoC container do the dirty work for you, leaving you with neat, testable code. SecurityContextHolder is a framework class and while it may be ok for your low-level security code to be tied to it, you probably want to expose a neater interface to your UI components (i.e. controllers).</p>
<p>cliff.meyers mentioned one way around it - create your own "principal" type and inject an instance into consumers. The Spring &lt;<a href="http://static.springframework.org/spring/docs/2.5.x/reference/beans.html#beans-factory-scopes-other-injection" rel="nofollow noreferrer">aop:scoped-proxy</a>/&gt; tag introduced in 2.x combined with a request scope bean definition, and the factory-method support may be the ticket to the most readable code.</p>
<p>It could work like following:</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">MyUserDetails</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">UserDetails</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="com">// this is your custom UserDetails implementation to serve as a principal</span><span class="pln">
    </span><span class="com">// implement the Spring methods and add your own methods as appropriate</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">MyUserHolder</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">MyUserDetails</span><span class="pln"> getUserDetails</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">Authentication</span><span class="pln"> a </span><span class="pun">=</span><span class="pln"> </span><span class="typ">SecurityContextHolder</span><span class="pun">.</span><span class="pln">getContext</span><span class="pun">().</span><span class="pln">getAuthentication</span><span class="pun">();</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">a </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="typ">MyUserDetails</span><span class="pun">)</span><span class="pln"> a</span><span class="pun">.</span><span class="pln">getPrincipal</span><span class="pun">();</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">MyUserAwareController</span><span class="pln"> </span><span class="pun">{</span><span class="pln">        
    </span><span class="typ">MyUserDetails</span><span class="pln"> currentUser</span><span class="pun">;</span><span class="pln">

    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setCurrentUser</span><span class="pun">(</span><span class="typ">MyUserDetails</span><span class="pln"> currentUser</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
        </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">currentUser </span><span class="pun">=</span><span class="pln"> currentUser</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="com">// controller code</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>Nothing complicated so far, right? In fact you probably had to do most of this already. Next, in your bean context define a request-scoped bean to hold the principal:</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="pun">&lt;</span><span class="pln">bean id</span><span class="pun">=</span><span class="str">"userDetails"</span><span class="pln"> </span><span class="kwd">class</span><span class="pun">=</span><span class="str">"MyUserHolder"</span><span class="pln"> factory</span><span class="pun">-</span><span class="pln">method</span><span class="pun">=</span><span class="str">"getUserDetails"</span><span class="pln"> scope</span><span class="pun">=</span><span class="str">"request"</span><span class="pun">&gt;</span><span class="pln">
    </span><span class="pun">&lt;</span><span class="pln">aop</span><span class="pun">:</span><span class="pln">scoped</span><span class="pun">-</span><span class="pln">proxy</span><span class="pun">/&gt;</span><span class="pln">
</span><span class="pun">&lt;/</span><span class="pln">bean</span><span class="pun">&gt;</span><span class="pln">

</span><span class="pun">&lt;</span><span class="pln">bean id</span><span class="pun">=</span><span class="str">"controller"</span><span class="pln"> </span><span class="kwd">class</span><span class="pun">=</span><span class="str">"MyUserAwareController"</span><span class="pun">&gt;</span><span class="pln">
    </span><span class="pun">&lt;</span><span class="pln">property name</span><span class="pun">=</span><span class="str">"currentUser"</span><span class="pln"> ref</span><span class="pun">=</span><span class="str">"userDetails"</span><span class="pun">/&gt;</span><span class="pln">
    </span><span class="pun">&lt;!--</span><span class="pln"> other props </span><span class="pun">--&gt;</span><span class="pln">
</span><span class="pun">&lt;/</span><span class="pln">bean</span><span class="pun">&gt;</span></code></pre>
<p>Thanks to the magic of the aop:scoped-proxy tag, the static method getUserDetails will be called every time a new HTTP request comes in and any references to the currentUser property will be resolved correctly. Now unit testing becomes trivial:</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="kwd">protected</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setUp</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="com">// existing init code</span><span class="pln">

    </span><span class="typ">MyUserDetails</span><span class="pln"> user </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">MyUserDetails</span><span class="pun">();</span><span class="pln">
    </span><span class="com">// set up user as you wish</span><span class="pln">
    controller</span><span class="pun">.</span><span class="pln">setCurrentUser</span><span class="pun">(</span><span class="pln">user</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>Hope this helps!</p>
</div></text><author><a href="/users/48340">Pavel</a></author><comments><comment><text><span class="comment-copy">This is the best suggestion I've seen to tackle this issue, I can't believe Spring hasn't built something like this in.</span></text><author><a class="comment-user" href="/users/2495576/scott-bale" title="6,555 reputation">Scott Bale</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Personally I would just use Powermock along with Mockito or Easymock to mock the static SecurityContextHolder.getSecurityContext() in your unit/integration test e.g.</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="lit">@RunWith</span><span class="pun">(</span><span class="typ">PowerMockRunner</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">)</span><span class="pln">
</span><span class="lit">@PrepareForTest</span><span class="pun">(</span><span class="typ">SecurityContextHolder</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">)</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">YourTestCase</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="lit">@Mock</span><span class="pln"> </span><span class="typ">SecurityContext</span><span class="pln"> mockSecurityContext</span><span class="pun">;</span><span class="pln">

    </span><span class="lit">@Test</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> testMethodThatCallsStaticMethod</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="com">// Set mock behaviour/expectations on the mockSecurityContext</span><span class="pln">
        when</span><span class="pun">(</span><span class="pln">mockSecurityContext</span><span class="pun">.</span><span class="pln">getAuthentication</span><span class="pun">()).</span><span class="pln">thenReturn</span><span class="pun">(...)</span><span class="pln">
        </span><span class="pun">...</span><span class="pln">
        </span><span class="com">// Tell mockito to use Powermock to mock the SecurityContextHolder</span><span class="pln">
        </span><span class="typ">PowerMockito</span><span class="pun">.</span><span class="pln">mockStatic</span><span class="pun">(</span><span class="typ">SecurityContextHolder</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span><span class="pln">

        </span><span class="com">// use Mockito to set up your expectation on SecurityContextHolder.getSecurityContext()</span><span class="pln">
        </span><span class="typ">Mockito</span><span class="pun">.</span><span class="pln">when</span><span class="pun">(</span><span class="typ">SecurityContextHolder</span><span class="pun">.</span><span class="pln">getSecurityContext</span><span class="pun">()).</span><span class="pln">thenReturn</span><span class="pun">(</span><span class="pln">mockSecurityContext</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">...</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>Admittedly there is quite a bit of boiler plate code here i.e. mock an Authentication object, mock a SecurityContext to return the Authentication and finally mock the SecurityContextHolder to get the SecurityContext, however its very flexible and allows you to unit test for scenarios like null Authentication objects etc. without having to change your (non test) code</p>
</div></text><author><a href="/users/404345/toby-hobson">Toby Hobson</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Using a static in this case is the best way to write secure code.</p>
<p>Yes, statics are generally bad - generally, but in this case, the static is what you want.  Since the security context associates a Principal with the currently running thread, the most secure code would access the static from the thread as directly as possible.  Hiding the access behind a wrapper class that is injected provides an attacker with more points to attack.  They wouldn't need access to the code (which they would have a hard time changing if the jar was signed), they just need a way to override the configuration, which can be done at runtime or slipping some XML onto the classpath.  Even using annotation injection would be overridable with external XML.  Such XML could inject the running system with a rogue principal.</p>
</div></text><author><a href="/users/256312/michael-bushe">Michael Bushe</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Without answering the question about how to create and inject Authentication objects, Spring Security 4.0 provides some welcome alternatives when it comes to testing. The <code>@WithMockUser</code> annotation enables the developer to specify a mock user (with optional authorities, username, password and roles) in a neat way:</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="lit">@Test</span><span class="pln">
</span><span class="lit">@WithMockUser</span><span class="pun">(</span><span class="pln">username </span><span class="pun">=</span><span class="pln"> </span><span class="str">"admin"</span><span class="pun">,</span><span class="pln"> authorities </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">"ADMIN"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"USER"</span><span class="pln"> </span><span class="pun">})</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> getMessageWithMockUserCustomAuthorities</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="typ">String</span><span class="pln"> message </span><span class="pun">=</span><span class="pln"> messageService</span><span class="pun">.</span><span class="pln">getMessage</span><span class="pun">();</span><span class="pln">
    </span><span class="pun">...</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>There is also the option to use <code>@WithUserDetails</code> to emulate a <code>UserDetails</code> returned from the <code>UserDetailsService</code>, e.g.</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="lit">@Test</span><span class="pln">
</span><span class="lit">@WithUserDetails</span><span class="pun">(</span><span class="str">"customUsername"</span><span class="pun">)</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> getMessageWithUserDetailsCustomUsername</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="typ">String</span><span class="pln"> message </span><span class="pun">=</span><span class="pln"> messageService</span><span class="pun">.</span><span class="pln">getMessage</span><span class="pun">();</span><span class="pln">
    </span><span class="pun">...</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>More details can be found in the <a href="http://docs.spring.io/spring-security/site/docs/4.0.x/reference/htmlsingle/#test-method-withmockuser" rel="nofollow">@WithMockUser</a> and the <a href="http://docs.spring.io/spring-security/site/docs/4.0.x/reference/htmlsingle/#test-method-withuserdetails" rel="nofollow">@WithUserDetails</a> chapters in the Spring Security reference docs (from which the above examples where copied)</p>
</div></text><author><a href="/users/303598/matsev">matsev</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I asked the same question myself over <a href="http://stackoverflow.com/questions/248562/when-using-spring-security-what-is-the-proper-way-to-obtain-current-username-i">here</a>, and just posted an answer that I recently found.  Short answer is: inject a <code>SecurityContext</code>, and refer to <code>SecurityContextHolder</code> only in your Spring config to obtain the <code>SecurityContext</code></p>
</div></text><author><a href="/users/2495576/scott-bale">Scott Bale</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I would take a look at Spring's abstract test classes and mock objects which are talked about <a href="http://static.springframework.org/spring/docs/2.5.x/reference/testing.html" rel="nofollow noreferrer">here</a>. They provide a powerful way of auto-wiring your Spring managed objects making unit and integration testing easier.</p>
</div></text><author><a href="/users/22436/digitalsanctum">digitalsanctum</a></author><comments><comment><text><span class="comment-copy">While those test classes are helpful, I'm not sure if they apply here. My tests have no concept of the ApplicationContext - they don't need one. All I need is to make sure that the SecurityContext is populated before the test method runs - it just feels dirty to have to set it in a ThreadLocal first</span></text><author><a class="comment-user owner" href="/users/4249/matt-b" title="98,628 reputation">matt b</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Authentication is a property of a thread in server environment in the same way as it is a property of a process in OS. Having a bean instance for accessing authentication information would be inconvenient configuration and wiring overhead without any benefit. </p>
<p>Regarding test authentication there are several ways how you can make your life easier. My favourite is to make a custom annotation <code>@Authenticated</code> and test execution listener, which manages it. Check <code>DirtiesContextTestExecutionListener</code> for inspiration.</p>
</div></text><author><a href="/users/865403/pavel-horal">Pavel Horal</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<h1>General</h1>
<p>In the meantime (since version 3.2, in the year 2013, thanks to <a href="https://jira.spring.io/browse/SEC-2298?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel" rel="nofollow">SEC-2298</a>) the authentication can be injected into MVC methods using the annotation <a href="http://docs.spring.io/spring-security/site/docs/3.2.3.RELEASE/reference/htmlsingle/#mvc-authentication-principal" rel="nofollow">@AuthenticationPrincipal</a>:</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="lit">@Controller</span><span class="pln">
</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Controller</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="lit">@RequestMapping</span><span class="pun">(</span><span class="str">"/somewhere"</span><span class="pun">)</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> doStuff</span><span class="pun">(</span><span class="lit">@AuthenticationPrincipal</span><span class="pln"> </span><span class="typ">UserDetails</span><span class="pln"> myUser</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<h1>Tests</h1>
<p>In your unit test you can obviously call this Method directly. In integration tests using <code>org.springframework.test.web.servlet.MockMvc</code> you can use <code>org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user()</code> to inject the user like this:</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="pln">mockMvc</span><span class="pun">.</span><span class="pln">perform</span><span class="pun">(</span><span class="pln">get</span><span class="pun">(</span><span class="str">"/somewhere"</span><span class="pun">).</span><span class="pln">with</span><span class="pun">(</span><span class="pln">user</span><span class="pun">(</span><span class="pln">myUserDetails</span><span class="pun">)));</span></code></pre>
<p>This will however just directly fill the SecurityContext. If you want to make sure that the user is loaded from a session in your test, you can use this:</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="pln">mockMvc</span><span class="pun">.</span><span class="pln">perform</span><span class="pun">(</span><span class="pln">get</span><span class="pun">(</span><span class="str">"/somewhere"</span><span class="pun">).</span><span class="pln">with</span><span class="pun">(</span><span class="pln">sessionUser</span><span class="pun">(</span><span class="pln">myUserDetails</span><span class="pun">)));</span><span class="pln">
</span><span class="com">/* ... */</span><span class="pln">
</span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">RequestPostProcessor</span><span class="pln"> sessionUser</span><span class="pun">(</span><span class="kwd">final</span><span class="pln"> </span><span class="typ">UserDetails</span><span class="pln"> userDetails</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">RequestPostProcessor</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="lit">@Override</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">MockHttpServletRequest</span><span class="pln"> postProcessRequest</span><span class="pun">(</span><span class="kwd">final</span><span class="pln"> </span><span class="typ">MockHttpServletRequest</span><span class="pln"> request</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">final</span><span class="pln"> </span><span class="typ">SecurityContext</span><span class="pln"> securityContext </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SecurityContextImpl</span><span class="pun">();</span><span class="pln">
            securityContext</span><span class="pun">.</span><span class="pln">setAuthentication</span><span class="pun">(</span><span class="pln">
                </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">UsernamePasswordAuthenticationToken</span><span class="pun">(</span><span class="pln">userDetails</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">,</span><span class="pln"> userDetails</span><span class="pun">.</span><span class="pln">getAuthorities</span><span class="pun">())</span><span class="pln">
            </span><span class="pun">);</span><span class="pln">
            request</span><span class="pun">.</span><span class="pln">getSession</span><span class="pun">().</span><span class="pln">setAttribute</span><span class="pun">(</span><span class="pln">
                </span><span class="typ">HttpSessionSecurityContextRepository</span><span class="pun">.</span><span class="pln">SPRING_SECURITY_CONTEXT_KEY</span><span class="pun">,</span><span class="pln"> securityContext
            </span><span class="pun">);</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> request</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">};</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/327301/yankee">yankee</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Add in pom.xml</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="pun">&lt;</span><span class="pln">repository</span><span class="pun">&gt;</span><span class="pln">
    </span><span class="pun">&lt;</span><span class="pln">id</span><span class="pun">&gt;</span><span class="pln">spring</span><span class="pun">-</span><span class="pln">snaspho</span><span class="pun">&lt;/</span><span class="pln">id</span><span class="pun">&gt;</span><span class="pln">
    </span><span class="pun">&lt;</span><span class="pln">url</span><span class="pun">&gt;</span><span class="pln">http</span><span class="pun">:</span><span class="com">//repo.springsource.org/libs-milestone/&lt;/url&gt;</span><span class="pln">
</span><span class="pun">&lt;/</span><span class="pln">repository</span><span class="pun">&gt;</span><span class="pln">

</span><span class="pun">&lt;</span><span class="pln">dependency</span><span class="pun">&gt;</span><span class="pln">
    </span><span class="pun">&lt;</span><span class="pln">groupId</span><span class="pun">&gt;</span><span class="pln">org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">security</span><span class="pun">&lt;/</span><span class="pln">groupId</span><span class="pun">&gt;</span><span class="pln">
    </span><span class="pun">&lt;</span><span class="pln">artifactId</span><span class="pun">&gt;</span><span class="pln">spring</span><span class="pun">-</span><span class="pln">security</span><span class="pun">-</span><span class="pln">test</span><span class="pun">&lt;/</span><span class="pln">artifactId</span><span class="pun">&gt;</span><span class="pln">
    </span><span class="pun">&lt;</span><span class="pln">version</span><span class="pun">&gt;</span><span class="lit">4.0</span><span class="pun">.</span><span class="lit">0.M1</span><span class="pun">&lt;/</span><span class="pln">version</span><span class="pun">&gt;</span><span class="pln">
</span><span class="pun">&lt;/</span><span class="pln">dependency</span><span class="pun">&gt;</span></code></pre>
<p>and use org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors for authorization request. See the sample usage at <a href="https://github.com/rwinch/spring-security-test-blog" rel="nofollow">https://github.com/rwinch/spring-security-test-blog</a> (<a href="https://jira.spring.io/browse/SEC-2592" rel="nofollow">https://jira.spring.io/browse/SEC-2592</a>)</p>
</div></text><author><a href="/users/548473/gkislin">GKislin</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>After quite a lot of work I was able to reproduce the desired behavior. I had emulated the login through  MockMvc. It is too heavy for most unit tests but helpful for integration tests. </p>
<p>Of course I am willing to see those new features in Spring Security 4.0 that will make our testing easier.</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="kwd">package</span><span class="pln"> </span><span class="pun">[</span><span class="pln">myPackage</span><span class="pun">]</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">junit</span><span class="pun">.</span><span class="typ">Assert</span><span class="pun">.*;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> javax</span><span class="pun">.</span><span class="pln">inject</span><span class="pun">.</span><span class="typ">Inject</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> javax</span><span class="pun">.</span><span class="pln">servlet</span><span class="pun">.</span><span class="pln">http</span><span class="pun">.</span><span class="typ">HttpSession</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">junit</span><span class="pun">.</span><span class="typ">Before</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">junit</span><span class="pun">.</span><span class="typ">Test</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">junit</span><span class="pun">.</span><span class="pln">experimental</span><span class="pun">.</span><span class="pln">runners</span><span class="pun">.</span><span class="typ">Enclosed</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">junit</span><span class="pun">.</span><span class="pln">runner</span><span class="pun">.</span><span class="typ">RunWith</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">beans</span><span class="pun">.</span><span class="pln">factory</span><span class="pun">.</span><span class="pln">annotation</span><span class="pun">.</span><span class="typ">Autowired</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">mock</span><span class="pun">.</span><span class="pln">web</span><span class="pun">.</span><span class="typ">MockHttpServletRequest</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">security</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="pln">context</span><span class="pun">.</span><span class="typ">SecurityContext</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">security</span><span class="pun">.</span><span class="pln">core</span><span class="pun">.</span><span class="pln">context</span><span class="pun">.</span><span class="typ">SecurityContextHolder</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">security</span><span class="pun">.</span><span class="pln">web</span><span class="pun">.</span><span class="typ">FilterChainProxy</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">security</span><span class="pun">.</span><span class="pln">web</span><span class="pun">.</span><span class="pln">context</span><span class="pun">.</span><span class="typ">HttpSessionSecurityContextRepository</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">test</span><span class="pun">.</span><span class="pln">context</span><span class="pun">.</span><span class="typ">ContextConfiguration</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">test</span><span class="pun">.</span><span class="pln">context</span><span class="pun">.</span><span class="pln">junit4</span><span class="pun">.</span><span class="typ">SpringJUnit4ClassRunner</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">test</span><span class="pun">.</span><span class="pln">context</span><span class="pun">.</span><span class="pln">web</span><span class="pun">.</span><span class="typ">WebAppConfiguration</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">test</span><span class="pun">.</span><span class="pln">web</span><span class="pun">.</span><span class="pln">servlet</span><span class="pun">.</span><span class="typ">MockMvc</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">test</span><span class="pun">.</span><span class="pln">web</span><span class="pun">.</span><span class="pln">servlet</span><span class="pun">.</span><span class="pln">setup</span><span class="pun">.</span><span class="typ">MockMvcBuilders</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">web</span><span class="pun">.</span><span class="pln">context</span><span class="pun">.</span><span class="typ">WebApplicationContext</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">test</span><span class="pun">.</span><span class="pln">web</span><span class="pun">.</span><span class="pln">servlet</span><span class="pun">.</span><span class="pln">request</span><span class="pun">.</span><span class="typ">MockMvcRequestBuilders</span><span class="pun">.*;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">test</span><span class="pun">.</span><span class="pln">web</span><span class="pun">.</span><span class="pln">servlet</span><span class="pun">.</span><span class="pln">result</span><span class="pun">.</span><span class="typ">MockMvcResultMatchers</span><span class="pun">.*;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> org</span><span class="pun">.</span><span class="pln">springframework</span><span class="pun">.</span><span class="pln">test</span><span class="pun">.</span><span class="pln">web</span><span class="pun">.</span><span class="pln">servlet</span><span class="pun">.</span><span class="pln">result</span><span class="pun">.</span><span class="typ">MockMvcResultHandlers</span><span class="pun">.</span><span class="pln">print</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@ContextConfiguration</span><span class="pun">(</span><span class="pln">locations</span><span class="pun">={[</span><span class="pln">my config file locations</span><span class="pun">]})</span><span class="pln">
</span><span class="lit">@WebAppConfiguration</span><span class="pln">
</span><span class="lit">@RunWith</span><span class="pun">(</span><span class="typ">SpringJUnit4ClassRunner</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">)</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> getUserConfigurationTester</span><span class="pun">{</span><span class="pln">

    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">MockMvc</span><span class="pln"> mockMvc</span><span class="pun">;</span><span class="pln">

    </span><span class="lit">@Autowired</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">FilterChainProxy</span><span class="pln"> springSecurityFilterChain</span><span class="pun">;</span><span class="pln">

    </span><span class="lit">@Autowired</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">MockHttpServletRequest</span><span class="pln"> request</span><span class="pun">;</span><span class="pln">

    </span><span class="lit">@Autowired</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">WebApplicationContext</span><span class="pln"> webappContext</span><span class="pun">;</span><span class="pln">

    </span><span class="lit">@Before</span><span class="pln">  
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> init</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  
        mockMvc </span><span class="pun">=</span><span class="pln"> </span><span class="typ">MockMvcBuilders</span><span class="pun">.</span><span class="pln">webAppContextSetup</span><span class="pun">(</span><span class="pln">webappContext</span><span class="pun">)</span><span class="pln">
                    </span><span class="pun">.</span><span class="pln">addFilters</span><span class="pun">(</span><span class="pln">springSecurityFilterChain</span><span class="pun">)</span><span class="pln">
                    </span><span class="pun">.</span><span class="pln">build</span><span class="pun">();</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">  


    </span><span class="lit">@Test</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> testTwoReads</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">Exception</span><span class="pun">{</span><span class="pln">                        

    </span><span class="typ">HttpSession</span><span class="pln"> session  </span><span class="pun">=</span><span class="pln"> mockMvc</span><span class="pun">.</span><span class="pln">perform</span><span class="pun">(</span><span class="pln">post</span><span class="pun">(</span><span class="str">"/j_spring_security_check"</span><span class="pun">)</span><span class="pln">
                        </span><span class="pun">.</span><span class="pln">param</span><span class="pun">(</span><span class="str">"j_username"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"admin_001"</span><span class="pun">)</span><span class="pln">
                        </span><span class="pun">.</span><span class="pln">param</span><span class="pun">(</span><span class="str">"j_password"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"secret007"</span><span class="pun">))</span><span class="pln">
                        </span><span class="pun">.</span><span class="pln">andDo</span><span class="pun">(</span><span class="pln">print</span><span class="pun">())</span><span class="pln">
                        </span><span class="pun">.</span><span class="pln">andExpect</span><span class="pun">(</span><span class="pln">status</span><span class="pun">().</span><span class="pln">isMovedTemporarily</span><span class="pun">())</span><span class="pln">
                        </span><span class="pun">.</span><span class="pln">andExpect</span><span class="pun">(</span><span class="pln">redirectedUrl</span><span class="pun">(</span><span class="str">"/index"</span><span class="pun">))</span><span class="pln">
                        </span><span class="pun">.</span><span class="pln">andReturn</span><span class="pun">()</span><span class="pln">
                        </span><span class="pun">.</span><span class="pln">getRequest</span><span class="pun">()</span><span class="pln">
                        </span><span class="pun">.</span><span class="pln">getSession</span><span class="pun">();</span><span class="pln">

    request</span><span class="pun">.</span><span class="pln">setSession</span><span class="pun">(</span><span class="pln">session</span><span class="pun">);</span><span class="pln">

    </span><span class="typ">SecurityContext</span><span class="pln"> securityContext </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">SecurityContext</span><span class="pun">)</span><span class="pln">   session</span><span class="pun">.</span><span class="pln">getAttribute</span><span class="pun">(</span><span class="typ">HttpSessionSecurityContextRepository</span><span class="pun">.</span><span class="pln">SPRING_SECURITY_CONTEXT_KEY</span><span class="pun">);</span><span class="pln">

    </span><span class="typ">SecurityContextHolder</span><span class="pun">.</span><span class="pln">setContext</span><span class="pun">(</span><span class="pln">securityContext</span><span class="pun">);</span><span class="pln">

        </span><span class="com">// Your test goes here. User is logged with </span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/16206/borjab">borjab</a></author><comments/></answer></answers></post>