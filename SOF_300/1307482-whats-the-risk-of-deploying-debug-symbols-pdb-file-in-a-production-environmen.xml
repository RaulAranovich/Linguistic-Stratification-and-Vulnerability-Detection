<?xml version="1.0" encoding="utf-8"?>
<post><title>.net - What's the risk of deploying debug symbols (pdb file) in a production environment? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I have an application that logs exception strack traces and I wanted those stack traces to include file names and line numbers when deployed in production.  I figured out how to deploy the debug symbols w/ the assembly, but in the process of researching the issue I ran accross <a href="http://stackoverflow.com/questions/628565/display-lines-number-in-stack-trace-for-net-assembly-in-release-mode">this question</a>, which implies that it's not a good idea to include pdb files in a production environment.  A comment to the accepted answer says "...debugging information can give away sensitive data and be an attack vector. Depending on what your app is."</p>
<p>So what sort of sensitive data might be exposed?  How can debug symbols be used to compromise an application?  I'm curious about the technical details, but what I'm really looking for is a practical way to evaluate the risk of including debug symbols for any given application and production environment.  Or to put it another way: what's the worst that could happen?</p>
<p><strong>EDIT:</strong> follow-up question/clarification</p>
<p>So based on everyone's answers so far, it seems like this question can be simplified a bit for .NET applications.  This bit from the <a href="http://www.wintellect.com/CS/blogs/jrobbins/archive/2009/05/11/pdb-files-what-every-developer-must-know.aspx" rel="noreferrer">John Robbins blog</a> linked in <a href="http://stackoverflow.com/questions/1307482/whats-the-risk-of-deploying-debug-symbols-pdb-file-in-a-production-environment/1307544#1307544">Michael Maddox's answer</a> kind of leaped out at me:</p>
<blockquote>
<p>A .NET PDB only contains two pieces of
  information, the source file names and
  their lines and the local variable
  names. All the other information is
  already in the .NET metadata so there
  is no need to duplicate the same
  information in a PDB file.</p>
</blockquote>
<p>To me, this reiterates what others have been saying about Reflector, with the implication being that the real issue is access to the assemblies.  Once that's been determined, the only decision to make with respect to PDBs is whether or not you care about exposing file names, line numbers, and local variable names (assuming that you're not showing stack traces to end users to begin with).  Or have I oversimplified this too much?</p>
</div></text><author><a href="/users/4154/matt">Matt</a></author><comments><comment><text><span class="comment-copy">@Matt: Is this a Desktop application, web, compact or...?</span></text><author><a class="comment-user" href="/users/49544/kb" title="3,996 reputation">Kb.</a></author></comment><comment><text><span class="comment-copy">@Kb - in this particular case, it's a console app that we run with a scheduler.  It was develpoped in-house for internal use, so anyone who can see the pdb file would also be able to see the source code, so I'm not too worried about this particular app.  I'm more interested in the general/practical case so I can decide whether or not to risk it with other apps, like, e.g. a desktop app installed on laptops that are occasionally connected to sensitive data on our network.</span></text><author><a class="comment-user owner" href="/users/4154/matt" title="3,155 reputation">Matt</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Here is another question to look at:</p>
<p><a href="http://stackoverflow.com/questions/933883/are-there-any-security-issues-leaving-the-pdb-debug-files-on-the-live-servers">Are there any security issues leaving the PDB debug files on the live servers?</a></p>
<p>And more info on PDB files:</p>
<p><a href="http://www.wintellect.com/devcenter/jrobbins/pdb-files-what-every-developer-must-know" rel="noreferrer">PDB Files: What Every Developer Must Know</a></p>
<p>In general, I always include pdb files in my deployments, the gains are too huge to ignore.</p>
<p>If you never expose a stack trace to your users (and generally you shouldn't), there isn't really any additional security risk of deploying PDB files.</p>
<p>When a user visible stack trace happens, the user can see the full stack trace including your file name and file line numbers.  This could give them some idea of how your app is architected which would potentially help them if hacking.</p>
<p>A bigger security threat is something like <a href="http://www.red-gate.com/products/reflector/" rel="noreferrer">Reflector</a> which when used on your DLLs will allow them to view your source code, with or without pdb files.</p>
</div></text><author><a href="/users/12712/michael-maddox">Michael Maddox</a></author><comments><comment><text><span class="comment-copy">Thanks for links.  So it looks like at least part of the equation is <i>where</i> the application is deployed (i.e. desktop v. web server).</span></text><author><a class="comment-user owner" href="/users/4154/matt" title="3,155 reputation">Matt</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>If you're deploying to a production environement in your own organization, then it's not a security problem.</p>
<p>If you're selling your software to other entities, then .pdb file can give someone interested in reverse engineering a leg up - that may or may not be a problem for you.</p>
<p>However (to be clear), you don't want your stack traces being displayed to the client - whether or not the .pdbs are available.  But if you're just logging the traces and presenting a 'pretty' error page to the client, it's not an issue.</p>
</div></text><author><a href="/users/12711/michael-burr">Michael Burr</a></author><comments><comment><text><span class="comment-copy">I beleive Matt is talking about .Net. What extra information could one get from a PDB that not also is already available through a tool like Lutz' Reflector?</span></text><author><a class="comment-user" href="/users/1242/lars-truijens" title="32,953 reputation">Lars Truijens</a></author></comment><comment><text><span class="comment-copy">Source &amp; line information immediately jumps to mind.  I don't believe local variable names are present in the metadata.</span></text><author><a class="comment-user" href="/users/67132/michael" title="42,370 reputation">Michael</a></author></comment><comment><text><span class="comment-copy">@Lars - I never said it would help :)  I think this whole fear around PDB's and reverse engineering is very misplaced.  The sort of person who can use PDB's to reverse engineer can use a decent disassembler that supports annotations.</span></text><author><a class="comment-user" href="/users/67132/michael" title="42,370 reputation">Michael</a></author></comment><comment><text><span class="comment-copy">I can see how local variable names in very long methods might help reverse engineering, but source file names and line information? Not real a risk compared to tools like Reflector if you ask me :)</span></text><author><a class="comment-user" href="/users/1242/lars-truijens" title="32,953 reputation">Lars Truijens</a></author></comment><comment><text><span class="comment-copy">@Lars - I think that another way to express what Michael Maddox and I are saying is that giving the .pdbs to someone who has the assemblies often isn't really a security risk.  Making a stack trace available to someone who doesn't have the assmeblies might be.</span></text><author><a class="comment-user" href="/users/12711/michael-burr" title="252,148 reputation">Michael Burr</a></author></comment><comment><text><span class="comment-copy">So, if I'm understanding this, it's worse (more risky) to display a stack trace in a web application than it is to include PDBs w/ a desktop application (because of access to assemblies).  Is the larger lesson simply that you shouldn't include anything sensitive in source code?</span></text><author><a class="comment-user owner" href="/users/4154/matt" title="3,155 reputation">Matt</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>By having debugging symbols, an attacker can determine global variables, function offsets, etc., of interest.</p>
<p>So he could see your system has a function like:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="typ">AddAdminUser</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> name</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> password</span><span class="pun">);</span></code></pre>
<p>And know its offset.  If your program is compromised, he could call this function to give himself admin privileges.</p>
<p>Or something like:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">typedef</span><span class="pln"> </span><span class="kwd">enum</span><span class="pln"> </span><span class="pun">{</span><span class="typ">Basic</span><span class="pun">,</span><span class="pln"> NTLM</span><span class="pun">}</span><span class="pln"> </span><span class="typ">AuthenticationMode</span><span class="pun">;</span><span class="pln">
</span><span class="typ">AuthenticationMode</span><span class="pln"> g_authenticationMode</span><span class="pun">;</span></code></pre>
<p>And knows what bit to flip to switch your application into an insecure mode.</p>
<p>Alternatively, this would take quite a bit of reverse engineering time to figure out.  Not an insurmountable amount of time, however.</p>
<p>But . . . this all implies your attacker is already in a position where he can compromise your program.  If that's the case, you already lost.</p>
<p>If you have a good business reason to deploy pdb symbols, go ahead.  Deploying PDB's won't make you insecure.  If you don't have a good reason to deploy, you shouldn't do this as it will make attacks slightly easier.</p>
<p>You can also create public PDB files - these strip certain pieces of information, but give you enough symbols to generate a stack trace and do basic debugging.  Details are <a href="http://msdn.microsoft.com/en-us/library/y87kw2fd.aspx" rel="noreferrer">here</a>. Microsoft deploys public PDB's on its symbol server for all to use.</p>
<p>EDIT: Most of what I said applies to the concerns around deploying PDB's for native code - I think a lot of these concerns people carry over to .NET as well, even though assembly metadata conveys quite a bit of this already.</p>
</div></text><author><a href="/users/67132/michael">Michael</a></author><comments><comment><text><span class="comment-copy">I believe Matt is talking about .Net. You can already get all the source from a tool like Lutz' Reflector even without a PDB.</span></text><author><a class="comment-user" href="/users/1242/lars-truijens" title="32,953 reputation">Lars Truijens</a></author></comment><comment><text><span class="comment-copy">@Lars - Updated my comment to call out that most of this is native code.  I think a lot of people just have an irrational fear that PDB's make reverse engineering possible, and believe  that attackers don't know how to use disassemblers like IDA Pro.  I believe these fears get incorrectly brought into managed code as well.</span></text><author><a class="comment-user" href="/users/67132/michael" title="42,370 reputation">Michael</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Somebody can "restore" the complete source code of your application. If it is Open Source you do not need to worry. If it has some IP (algorithms, protection, licenses), it is probably  not a good idea.  </p>
<p>It is true that tools like Reflector can reconstruct parts of your code even without PDB files, but obfuscations can help (well, just a little bit).</p>
</div></text><author><a href="/users/132012/db">db_</a></author><comments><comment><text><span class="comment-copy">I believe Matt is talking about .Net. You can already get all the source from a tool like Lutz Reflector even without a PDB.</span></text><author><a class="comment-user" href="/users/1242/lars-truijens" title="32,953 reputation">Lars Truijens</a></author></comment><comment><text><span class="comment-copy">Lars, I completely agree, Reflector is great tool for reverse engineering. But sometimes the result code is not very readable, especially if source was obfuscated. PDB files will make life even better.</span></text><author><a class="comment-user" href="/users/132012/db" title="629 reputation">db_</a></author></comment></comments></answer></answers></post>