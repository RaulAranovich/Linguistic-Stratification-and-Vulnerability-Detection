<?xml version="1.0" encoding="utf-8"?>
<post><title>security - How to keep the client credentials confidential, while using OAuth2's Resource Owner Password Credentials grant type - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>We are building a rest service and we want to use OAauth 2 for authorization. The <a href="http://tools.ietf.org/html/draft-ietf-oauth-v2-16">current draft</a> (v2-16 from May 19th) describes <a href="http://tools.ietf.org/html/draft-ietf-oauth-v2-16#section-4">four grant types</a>. They are mechanisms or flows for obtaining authorization (an access token).  </p>
<ol>
<li>Authorization Code</li>
<li>Implicit Grant</li>
<li>Resource Owner Credentials</li>
<li>Client Credentials</li>
</ol>
<p>It seems we need to support all four of them, since they serve different purposes. The first two (and possibly the last one) can be used from third-party apps that need access to the API. The authorization code is the standard way to authorize a web application that is lucky enough to reside on a secure server, while the implicit grant flow would be the choice for a client application that can’t quite keep its credentials confidential (e.g. mobile/desktop application, JavaScript client, etc.).<br/>
We want to use the third mechanism ourselves to provide a better user experience on mobile devices – instead of taking the user to a login dialog in a web browser and so on, the user will simply enter his or her username and password directly in the application and login.
We also want to use the Client Credentials grant type to obtain an access token that can be used to view public data, not associated with any user. In this case this is not so much authorization, but rather something similar to an API key that we use to give access only to applications that have registered with us, giving us an option to revoke access if needed.  </p>
<p>So my questions are:</p>
<ol>
<li>Do you think I have understood the purpose of the different grant types correctly?</li>
<li>How can you keep your client credentials confidential? In both the third and fourth case, we need to have the client id and client secret somewhere on the client, which doesn't sound like a good idea.</li>
<li>Even if you use the implicit grant type and you don’t expose your client secret, what stops another application from impersonating your app using the same authorization mechanism and your client id?</li>
</ol>
<p>To summarize, we want to be able to use the client credentials and resource owner credentials flow from a client application. Both of these flows require you to store the client secret somehow, but the client is a mobile or JavaScript application, so these could easily be stolen.</p>
</div></text><author><a href="/users/777748/georgi-stoyanov">Georgi Stoyanov</a></author><comments/></question><answers><answer><text><div class="post-text" itemprop="text">
<p>I'm facing similar issues, and am also relatively new to OAuth. I've implemented "Resource Owner Password Credentials" in our API for our official mobile app to use -- the web flows just seem like they'd be so horrible to use on a mobile platform, and once the user installs an app and trusts that it's our official app, they should feel comfortable typing username/password directly into the app.</p>
<p>The problem is, as you point out, there is no way for my API server to securely verify the client_id of the app. If I include a client_secret in the app code/package, then it's exposed to anyone who installs the app, so requiring a client_secret wouldn't make the process any more secure. So basically, any other app can impersonate my app by copying the client_id.</p>
<p>Just to direct answers at each of your points:</p>
<ol>
<li><p>I keep re-reading different drafts of the spec to see if anything's changed, and am focused mostly on the Resource Owner Password Credentials section, but I think you're correct on these. Client Credentials(4) I think could also be used by an in-house or third-party service that might need access to more than just "public" information, like maybe you have analytics or something that need to get information across all users.</p></li>
<li><p>I don't think you can keep anything confidential on the client.</p></li>
<li><p>Nothing stops someone else from using your client id. This is my issue too. Once your code leaves the server and is either installed as an app or is running as Javascript in a browser, you can't assume anything is secret.</p></li>
</ol>
<p>For our website, we had a similar issue to what you describe with the Client Credentials flow. What I ended up doing is moving the authentication to the server side. The user can authenticate using our web app, but the OAuth token to our API is stored on the server side, and associated with the user's web session. All API requests that the Javascript code makes are actually AJAX calls to the web server. So the browser isn't directly authenticated with the API, but instead has an authenticated web session.</p>
<p>It seems like your use-case for Client Credentials is different, in that you're talking about third-party apps, and are only serving public data through this method. I think your concerns are valid (anyone can steal and use anyone else's API key), but if you only require a free registration to get an API key, I don't see why anyone would really want to steal one.</p>
<p>You could monitor/analyze the usage of each API key to try to detect abuse, at which point you could invalidate one API key and give the legitimate user a new one. This might be the best option, but it's in no way secure.</p>
<p>You could also use a Refresh Token-like scheme for this if you wanted to lock it up a bit tighter, although I don't know how much you would really gain. If you expired the Javascript-exposed api tokens once a day and required the third-party to do some sort of server-side refresh using a (secret) refresh token, then stolen api tokens would never be good for more than a day. Might encourage potential token thieves to just register instead. But sort of a pain for everyone else, so not sure if this is worth it.</p>
</div></text><author><a href="/users/504090/heavi5ide">heavi5ide</a></author><comments><comment><text><span class="comment-copy">I’ve done a bit more research and I think you are right – there is no way to keep anything secret on the client. It seems that, as you suggest, our best option to protect the API from abuse is to implement some sort of usage monitoring. Thanks for your answer!</span></text><author><a class="comment-user owner" href="/users/777748/georgi-stoyanov" title="713 reputation">Georgi Stoyanov</a></author></comment><comment><text><span class="comment-copy">Let me know if you come across any better solutions in the future!</span></text><author><a class="comment-user" href="/users/504090/heavi5ide" title="1,479 reputation">heavi5ide</a></author></comment><comment><text><span class="comment-copy">Just for understanding, is the following claim correct? * There is no more security when you use a authenticated web session (via a cookie or so) and doing the authentication on the server "the old way" than using OAuth2's Resource Owner Password Credentials grant type, because also a classical web session/cookie could be pass over to other actors/could be stolen.</span></text><author><a class="comment-user" href="/users/567126/spaudanjo" title="610 reputation">spaudanjo</a></author></comment><comment><text><span class="comment-copy">Did any of you ever find a solution to these problems? It seems as soon as I open up the "Resource Owner Credentials" (best mobile ux) flow, any application could use the flow, and my authentication server would have no way of knowing the difference between a first-party and third-party app.</span></text><author><a class="comment-user" href="/users/998352/jarrod" title="186 reputation">Jarrod</a></author></comment><comment><text><span class="comment-copy">@heavi5ide I am trying to secure my API using Client Credentials grant but I am new to OAuth and have worked on Core php only. Can you guide me how can I do this using existing library.</span></text><author><a class="comment-user" href="/users/1029059/scorpion" title="2,957 reputation">Scorpion</a></author></comment><comment><text><span class="comment-copy">I wonder how Facebook, Twitter and other smaller-yet-very-big social network companies deal with this problem in their mobile applications...</span></text><author><a class="comment-user" href="/users/1297717/stefano-mondino" title="1,069 reputation">Stefano Mondino</a></author></comment><comment><text><span class="comment-copy">A possible workaround could be using Implicit flow: <a href="http://stackoverflow.com/a/16341985/257442">stackoverflow.com/a/16341985/257442</a></span></text><author><a class="comment-user" href="/users/257442/dimitri" title="4,958 reputation">Dimitri</a></author></comment></comments></answer></answers></post>