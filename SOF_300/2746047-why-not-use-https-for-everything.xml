<?xml version="1.0" encoding="utf-8"?>
<post><title>security - Why not use HTTPS for everything? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>If I was setting up a server, and had the SSL certificate(s), why wouldn't I use HTTPS for the entire site instead of just for purchases/logins? I would think it would make more sense just to encrypt the entire site, and protect the user entirely. It would prevent problems such as deciding what has to be secured because everything would be, and it's not really an inconvenience to the user.</p>
<p>If I was already using an HTTPS for part of the site, why wouldn't I want to use it for the entire site?</p>
<p>This is a related question: <a href="http://stackoverflow.com/questions/1361531/why-is-https-only-used-for-login">Why is https only used for login?</a>, but the answers are not satisfactory. The answers assume you've not been able to apply https to the entire site.</p>
</div></text><author><a href="/users/12243/malfist">Malfist</a></author><comments><comment><text><span class="comment-copy">It amazes me that financial services companies still use http.</span></text><author><a class="comment-user" href="/users/4725/tom-hawtin-tackline" title="113,096 reputation">Tom Hawtin - tackline</a></author></comment><comment><text><span class="comment-copy">@Tom I wish some of the sites that send me phishing messages would use https for their forged sites, so I know I am giving my data to the right phisher.</span></text><author><a class="comment-user" href="/users/301023/whirlwind" title="10,714 reputation">WhirlWind</a></author></comment><comment><text><span class="comment-copy">Thanks for asking this question. I was assuming performance was <i>the</i> reason and it would be much worse than http. Seeing the answers, it seems the performance is not terribly bad, which makes me too wonder.</span></text><author><a class="comment-user" href="/users/8127/sundar" title="3,161 reputation">sundar</a></author></comment><comment><text><span class="comment-copy">@WhirlWind Yeah, it's like phishers never use https even for login!</span></text><author><a class="comment-user" href="/users/4725/tom-hawtin-tackline" title="113,096 reputation">Tom Hawtin - tackline</a></author></comment><comment><text><span class="comment-copy">One reason: performance. Also, sometimes encrypted communication blindly gets throttled by ISPS.</span></text><author><a class="comment-user" href="/users/76673/wadih-m" title="7,516 reputation">Wadih M.</a></author></comment><comment><text><span class="comment-copy">See also <a href="http://security.stackexchange.com/q/258/33">this question on ITsec</a>.</span></text><author><a class="comment-user" href="/users/10080/avid" title="10,324 reputation">AviD</a></author></comment><comment><text><span class="comment-copy">https traffic cannot be cached, so you will see more requests and more data being downloaded.. this also affects user experience (depending on how your site is contructed) as browser cache will not cache script, images  etc so every site navigation may end up pulling all assets for every click.</span></text><author><a class="comment-user" href="/users/668501/soren" title="11,072 reputation">Soren</a></author></comment><comment><text><span class="comment-copy">I think you picked the worst answer on the page,  with currenlty 11 down votes.   The answer you chose has a total disregard for security and best practices.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">This question really deserves an educated modern answer.</span></text><author><a class="comment-user" href="/users/1993919/old-badman-grey" title="349 reputation">Old Badman Grey</a></author></comment><comment><text><span class="comment-copy">It's interesting how the general mood of things can change in only 7 years. This is truly an amazing industry.</span></text><author><a class="comment-user" href="/users/671092/gd1" title="7,669 reputation">gd1</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>I can think of a couple reasons.</p>
<ul>
<li>Some browsers may not support SSL. </li>
<li>SSL may decrease performance somewhat.  If users are downloading large, public files, there may be a system burden to encrypt these each time. </li>
</ul>
</div></text><author><a href="/users/301023/whirlwind">WhirlWind</a></author><comments><comment><text><span class="comment-copy">What browsers do not support SSL?</span></text><author><a class="comment-user owner" href="/users/12243/malfist" title="14,149 reputation">Malfist</a></author></comment><comment><text><span class="comment-copy">Some compiles of lynx will not support it.  If you are only supporting newer browsers, you should be fine.</span></text><author><a class="comment-user" href="/users/301023/whirlwind" title="10,714 reputation">WhirlWind</a></author></comment><comment><text><span class="comment-copy">I believe SSL main performance problem comes from establishing the connection. / https can redirect to http.</span></text><author><a class="comment-user" href="/users/4725/tom-hawtin-tackline" title="113,096 reputation">Tom Hawtin - tackline</a></author></comment><comment><text><span class="comment-copy">The SSL performance burden is highly dependent on the characteristics of the site.  AES can be fairly CPU-intensive to perform, for example.</span></text><author><a class="comment-user" href="/users/301023/whirlwind" title="10,714 reputation">WhirlWind</a></author></comment><comment><text><span class="comment-copy">Do you have benchmarks for the performance hit?</span></text><author><a class="comment-user owner" href="/users/12243/malfist" title="14,149 reputation">Malfist</a></author></comment><comment><text><span class="comment-copy">I was looking through this: <a href="http://iweb.tntech.edu/hexb/publications/https-STAR-03122003.pdf" rel="nofollow noreferrer">iweb.tntech.edu/hexb/publications/https-STAR-03122003.pdf</a> "Once the server is saturated, the system performance of HTTPS achieves around 67% of HTTP in terms of throughput."</span></text><author><a class="comment-user" href="/users/301023/whirlwind" title="10,714 reputation">WhirlWind</a></author></comment><comment><text><span class="comment-copy">lynx and w3m work fine with ssl on my system.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">@The Rook That's why I used the adjective "some."  Saying "all browsers support SSL" would be incorrect.</span></text><author><a class="comment-user" href="/users/301023/whirlwind" title="10,714 reputation">WhirlWind</a></author></comment><comment><text><span class="comment-copy">@WhirlWind yeah I respectfully disagree with almost everything you have said.  My main concern is that the cookie value will be leaked when you are not using https for some pages.  Make sure to read A3: "Broken authentication and session management" in the owasp top 10: <a href="http://www.owasp.org/index.php/Category%3aOWASP_Top_Ten_Project" rel="nofollow noreferrer">owasp.org/index.php/Category%3aOWASP_Top_Ten_Project</a></span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">Is the third point re. hoe page legitimate?  I type gmail.com and it automagically goes to https.  What browsers can't do this?</span></text><author><a class="comment-user" href="/users/1339987/djechlin" title="34,253 reputation">djechlin</a></author></comment><comment><text><span class="comment-copy">I don<code>t buy this explanation. 1) Don</code>t use a browser that doesn`t support SSL in 2013. 2) even google uses SSL right now 3) properly setup, you can redirect http traffic to the right https link.</span></text><author><a class="comment-user" href="/users/1744980/jfyelle" title="101 reputation">jfyelle</a></author></comment><comment><text><span class="comment-copy">Bad answer, why so manu upvotes? What browser on earth doesnt support ssl and users don't have to remember typing https, can be handled with redirects</span></text><author><a class="comment-user" href="/users/930883/sanne" title="694 reputation">Sanne</a></author></comment><comment><text><span class="comment-copy">Interesting article about stackoverflow itself not using https <a href="http://nickcraver.com/blog/2013/04/23/stackoverflow-com-the-road-to-ssl/" rel="nofollow noreferrer">nickcraver.com/blog/2013/04/23/…</a></span></text><author><a class="comment-user" href="/users/930883/sanne" title="694 reputation">Sanne</a></author></comment><comment><text><span class="comment-copy">Its quite easy though to redirect a http:// to https://, easy being mod_url_rewrite. Otherwise a simple header redirect.  For example, ( bare in mind this is quick and untested )  $current_url = $_SERVER["SERVER_NAME"].$_SERVER["REQUEST_URI"];  if (!strpos($current_url,'https://')) {    $url = str_replace('http','https',$current_url);    header("Location: {$url}"); }</span></text><author><a class="comment-user" href="/users/3126952/christopher-shaw" title="160 reputation">Christopher Shaw</a></author></comment><comment><text><span class="comment-copy">It is answers like this that make me which i had two down votes. This is terrible!</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">–1. Comments above already explain the problems of this answer.</span></text><author><a class="comment-user" href="/users/674976/texnic" title="1,335 reputation">texnic</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>In addition to the other reasons (especially performance related) you can only host a single domain per IP address* when using HTTPS.</p>
<p>A single server can support multiple domains in HTTP because the <em>Server</em> HTTP header lets the server know which domain to respond with.</p>
<p>With HTTPS, the server must offer its certificate to the client during the initial TLS handshake (which is before HTTP starts).  This means that the <em>Server</em> header hasn't been sent yet so there is no way for the server to know which domain is being requested and which certificate (www.foo.com, or www.bar.com) to respond with.</p>
<hr/>
<p>*Footnote: Technically, you can host multiple domains if you host them on different ports, but that is generally not an option.  You can also host multiple domains if your SSL certificate is has a wild-card.  For example, you could host both foo.example.com and bar.example.com with the certificate  * .example.com</p>
</div></text><author><a href="/users/330177/eadwacer">Eadwacer</a></author><comments><comment><text><span class="comment-copy">Wouldn't having a wildcard SSL certificate solve this problem?</span></text><author><a class="comment-user" href="/users/13436/rob" title="2,360 reputation">Rob</a></author></comment><comment><text><span class="comment-copy">+1 For the nice explanation.</span></text><author><a class="comment-user" href="/users/13778/echo" title="1,917 reputation">Echo</a></author></comment><comment><text><span class="comment-copy">The footnote contradicts the answer :/ you can use wildcard certs and host any domains.<a href="http://en.wikipedia.org/wiki/Wildcard_certificate" rel="nofollow noreferrer">en.wikipedia.org/wiki/Wildcard_certificate</a></span></text><author><a class="comment-user" href="/users/428486/lucascaro" title="1,554 reputation">lucascaro</a></author></comment><comment><text><span class="comment-copy">This issue has long been solved by Server Name Indication, which is supported by all major browsers nowadays. <a href="http://en.wikipedia.org/wiki/Server_Name_Indication" rel="nofollow noreferrer">en.wikipedia.org/wiki/Server_Name_Indication</a></span></text><author><a class="comment-user" href="/users/397807/tia" title="7,376 reputation">tia</a></author></comment><comment><text><span class="comment-copy">@tia except not all web servers support it</span></text><author><a class="comment-user" href="/users/1572465/meffect" title="882 reputation">meffect</a></author></comment><comment><text><span class="comment-copy">@meffect ...But plenty do, including apache2, nginx, lighttpd, and nodejs. Besides which, the developer gets to choose what reverse proxy they use for HTTPS tunneling. Saying "no clients support it" would be a valid point if it were true because it's something the developer has no control over and must account for. However, saying "some servers don't support it" is largely irrelevant, precisely because it doesn't need to be accounted for. Especially when all the mainstream servers <b>do</b> actually have support.</span></text><author><a class="comment-user" href="/users/3680301/parthian-shot" title="747 reputation">Parthian Shot</a></author></comment><comment><text><span class="comment-copy">It is correct, that with SNI you could host multiple sites on HTTPS on the same server / IP address. But there might be a larger annual fee for such multisite certificates than for a single site or wildcard certificate</span></text><author><a class="comment-user" href="/users/1782309/vering" title="353 reputation">Vering</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The biggest reason, beyond system load, is that it breaks name-based virtual hosting. With SSL, it's one site - one IP address. This is pretty expensive, as well as harder to administer.</p>
</div></text><author><a href="/users/1200/adam-wright">Adam Wright</a></author><comments><comment><text><span class="comment-copy">+1 Its <i>the</i> reason why Google App Engine doesn't support https on custom domains. Waiting for TLS-SNI to be more widely supported.</span></text><author><a class="comment-user" href="/users/242940/sripathi-krishnan" title="22,613 reputation">Sripathi Krishnan</a></author></comment><comment><text><span class="comment-copy">You could get this back with SSL terminating hardware.  And if system load is a problem (it is for a lot of people!) then hardware SSL may be the way to go anyway.</span></text><author><a class="comment-user" href="/users/328304/jason" title="1,190 reputation">Jason</a></author></comment><comment><text><span class="comment-copy">except you can have multiple domains in the same cert.</span></text><author><a class="comment-user" href="/users/428486/lucascaro" title="1,554 reputation">lucascaro</a></author></comment><comment><text><span class="comment-copy"><a href="https://en.wikipedia.org/wiki/Server_Name_Indication" rel="nofollow noreferrer">Not true at all.</a> (Not anymore, anyway.)</span></text><author><a class="comment-user" href="/users/3680301/parthian-shot" title="747 reputation">Parthian Shot</a></author></comment><comment><text><span class="comment-copy">Downvoting because the information in the post is obsolete. SNI is now supported by all major browsers.</span></text><author><a class="comment-user" href="/users/443265/martin-t%c3%b6rnwall" title="5,295 reputation">Martin Törnwall</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Why not send every snail-mail post in a tamper-proof opaque envelope by Registered Mail?  Someone from the Post Office would always have personal custody of it, so you could be pretty sure that no one is snooping on your mail.  Obviously, the answer is that while some mail is worth the expense, most mail isn't.  I don't care if anyone reads my "Glad you got out of jail!" postcard to Uncle Joe.</p>
<p>Encryption isn't free, and it doesn't always help.</p>
<p>If a session (such as shopping, banking, etc.) is going to wind up using HTTPS, there's no good reason not to make the whole session HTTPS as early as possible.</p>
<p>My opinion is that HTTPS should be used only when unavoidably necessary, either because the request or the response needs to be safeguarded from intermediate snooping.  As an example, go look at the Yahoo! homepage.  Even though you're logged in, most of your interaction will be over HTTP.  You authenticate over HTTPS and get cookies that prove your identity, so you don't need HTTPS to read news stories.</p>
</div></text><author><a href="/users/182811/david-m">David M</a></author><comments><comment><text><span class="comment-copy">Nice mail analogy.</span></text><author><a class="comment-user" href="/users/288341/ubiquibacon" title="4,837 reputation">ubiquibacon</a></author></comment><comment><text><span class="comment-copy">LOL!!! Great! I bet the rogue postman opening the envelope with "Glad you got out of jail" will freak his pants a bit and reseal it perfectly..</span></text><author><a class="comment-user" href="/users/1796/andrei-r%c3%aenea" title="10,855 reputation">Andrei Rînea</a></author></comment><comment><text><span class="comment-copy">If registered mail cost 1% more instead of 300% more, I <i>would</i> use it for everything.</span></text><author><a class="comment-user" href="/users/251199/solublefish" title="857 reputation">solublefish</a></author></comment><comment><text><span class="comment-copy"><code>You authenticate over HTTPS and get cookies that prove your identity, so you don't need HTTPS to read news stories.</code> That's not the proper way to handle session auth. Cookies should be set with the SECURE flag. But disregarding that horrible security advice for a second... Your mail analogy isn't really accurate for a few reasons. One being that you can't usually inject exploits into return mail, or impersonate someone to someone else with impunity, or pop a "Your Session Expired" message into return mail so they re-enter the credentials they use for both Yahoo! and their bank.</span></text><author><a class="comment-user" href="/users/3680301/parthian-shot" title="747 reputation">Parthian Shot</a></author></comment><comment><text><span class="comment-copy">Password reuse and session fixation, among other things, aren't problems in snail mail.</span></text><author><a class="comment-user" href="/users/3680301/parthian-shot" title="747 reputation">Parthian Shot</a></author></comment><comment><text><span class="comment-copy">Those are good points, but you're applying 2016 analysis to a discussion in 2010.</span></text><author><a class="comment-user" href="/users/182811/david-m" title="3,147 reputation">David M</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>SSL/TLS isn't used nearly often enough.  HTTPS must be used for the <strong>entire session</strong>,  at no point can a Session ID be sent over HTTP.  If you are only useing https for logging in then you are in clear violation of <a href="http://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project" rel="nofollow noreferrer">The OWASP top 10 for 2010</a> "A3: Broken Authentication and Session Management".</p>
</div></text><author><a href="/users/183528/rook">rook</a></author><comments><comment><text><span class="comment-copy">This may be too broad of an assumption.  There is no reason session state can't be managed separatly for http and https via single https login operation.  Its likely to be more work than its worth and invite security related bugs but would not seem to automatically constitute a clear violation.</span></text><author><a class="comment-user" href="/users/41898/einstein" title="3,664 reputation">Einstein</a></author></comment><comment><text><span class="comment-copy">@Einstein please read the OWASP A3, it is very clearly worded.  Keep in mind that the attacker doesn't need the username/password if he has the cookie from an authenticated session.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">Site provides mixed https/http. https login provides separate low and high security session tokens.  Low security tokens assigned only to http session would not work for operations requiring high security.  From my read OWASP A3 is mearly illuminating the basic problem of possibility of high security access via low security transport.</span></text><author><a class="comment-user" href="/users/41898/einstein" title="3,664 reputation">Einstein</a></author></comment><comment><text><span class="comment-copy">@Einstein So then you disagree that Session id's are used to authenticate web browsers?  Take into consideration this attack pattern, in xss attacks you are trying to obtain the value of <code>document.cookie</code> so that the attacker can use this to authenticate.  This value can also be obtained by sniffing traffic, which https stops.   I'm not exactly sure what your point is.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">In your scenario the session id for http would be worthless for https protected resources if a system were to create two separate sessions for a single authentication action to allow both protocols to be used without https session and associated resources exposed by the http session cookie.  For example http session might be used for identification of access to public resources for reporting purposes or access to public message boards but they would not be valid for secure resources.</span></text><author><a class="comment-user" href="/users/41898/einstein" title="3,664 reputation">Einstein</a></author></comment><comment><text><span class="comment-copy">@Einstein See the <a href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security" rel="nofollow noreferrer">HSTS flag</a>. It's part of why there's no excuse for using insecure channels. Because if you set that flag when the user's browsing your site from home, they can safely browse your site at the airport with the knowledge that exploit-laden HTTP resources can't be injected into their browser, since when they navigate to the domain the browser will start the session HTTPS, rather than getting a redirect to HTTPS after trying HTTP. <code>sslstrip</code> is harder to use when someone accesses HSTS sites.</span></text><author><a class="comment-user" href="/users/3680301/parthian-shot" title="747 reputation">Parthian Shot</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>For high latency links the initial TLS handshake requires additional round trips to validate the certificate chain (including sending any intermediate certificates), agree on cipher suites and establish a session.  Once a session is established subsequent requests may utilize session caching to reduce the number of round trips but even in this best case there is still more round trips than a normal HTTP connection requires.  Even if encryption operations were free round trips are not and can be quite noticable over slower network links especially if the site does not leverage http pipelining.  For broadband users within a well connected segment of the network this is not an issue.  If you do business internationally requring https can easily cause noticable delays.</p>
<p>There are additional considerations such as server maintenance of session state requiring potentially significantly more memory and of course data encryption operations.  Any small sites practically need not worry about either given server capability vs cost of todays hardware.  Any large site would easily be able to afford CPU /w AES offload or add-on cards to provide similar functionality.</p>
<p>All of these issues are becoming more and more of a non-issue as time marches on and the capabilities of hardware and the network improve.  In most cases I doubt there is any tangable difference today.</p>
<p>There may be operational considerations such as administrative restrictions on https traffic (think intermediate content filters..et al) possibly some corporate or governmental regulations. Some corporate environment require data decryption at the perimeter to prevent information leakage ... interference with hotspot and similiar web based access systems not capable of injecting messages in https transactions.  At the end of the day in my view reasons for not going https by default are likely to be quite small.</p>
</div></text><author><a href="/users/41898/einstein">Einstein</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>https is more resource-hungry than the normal http.</p>
<p>It demands more from both the servers and the clients.</p>
</div></text><author><a href="/users/51425/johan">Johan</a></author><comments><comment><text><span class="comment-copy">How much more? Can you provide benchmarks?</span></text><author><a class="comment-user owner" href="/users/12243/malfist" title="14,149 reputation">Malfist</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>If whole session is encrypted then you won't be able to use caching for static resources like images and js on proxy level eg ISP.</p>
</div></text><author><a href="/users/45508/alexei-tenitski">Alexei Tenitski</a></author><comments><comment><text><span class="comment-copy">Well, except fro SSL-terminating proxies, or if you're using an HTTPS-capable CDN.</span></text><author><a class="comment-user" href="/users/3680301/parthian-shot" title="747 reputation">Parthian Shot</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>You should use HTTPS everywhere, but you will lose the following:</p>
<ol>
<li><p>You should definitely not use SSL Compression or HTTP Compression over SSL, due to BREACH and CRIME attacks. So no compression if your response contains session or csrf identifiers. You can mitigate this by putting your static resources (images, js, css) on a cookie-less domain, and use compression there. You can also use HTML minification. </p></li>
<li><p>One SSL cert, one IP address, unless using SNI, which doesn't work on all browsers (old android, blackberry 6, etc).</p></li>
<li><p>You shouldn't host any external content on your pages that don't come over SSL.</p></li>
<li><p>You lose the outbound HTTP Referer header when browser goes to an HTTP page, which may or may not be a problem for you. </p></li>
</ol>
</div></text><author><a href="/users/223478/neil-mcguigan">Neil McGuigan</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Well, the obvious reason is performance: all of the data will have to be encrypted by the server before transmission and then decrypted by the client upon receipt, which is a waste of time if there's no sensitive data. It may also affect how much of your site is cached.</p>
<p>It's also potentially confusing for end users if all the addresses use <code>https://</code> rather than the familiar <code>http://</code>. Also, see this answer:</p>
<p><a href="http://stackoverflow.com/questions/2745895/why-not-always-use-https-when-including-a-js-file/2745920#2745920">Why not always use https when including a js file?</a></p>
</div></text><author><a href="/users/58635/will-vousden">Will Vousden</a></author><comments><comment><text><span class="comment-copy">why would it confuse the users? How many actually look at the protocol of the uri?</span></text><author><a class="comment-user owner" href="/users/12243/malfist" title="14,149 reputation">Malfist</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>https requires the server to encrypt and decrypt client requests and responses. The performance impact will add up if the server is serving lots of clients. That's why most current implementations of https is limited to password authentication only. But with increasing computing power this may change, after all Gmail is using SSL for the entire site.</p>
</div></text><author><a href="/users/69783/futureelite7">futureelite7</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>In addition to WhirlWind's response, you should consider the cost and applicability of SSL certificates, access issues (it's possible, though unlikely, that a client may not be able to communicate via the SSL port), etc. </p>
<p>Using SSL isn't a guaranteed blanket of security. This type of protection needs to be built into the architecture of the application, rather than trying to rely on some magic bullet.</p>
</div></text><author><a href="/users/135769/david-lively">David Lively</a></author><comments><comment><text><span class="comment-copy">Since the user's already protecting part of the site, the cost of the cert is more or less moot.</span></text><author><a class="comment-user" href="/users/69783/futureelite7" title="8,001 reputation">futureelite7</a></author></comment><comment><text><span class="comment-copy">@futureelite7 good point, but probably relevant to others that may be researching this topic in the future.</span></text><author><a class="comment-user" href="/users/135769/david-lively" title="19,325 reputation">David Lively</a></author></comment><comment><text><span class="comment-copy">Featurism is the enemy of security. The majority of the weaknesses in my own stuff, have roots in some ill-advised feature that myself or a predecessor accepted into the product plan.  I find that getting a feature kicked off because it causes a security vulnerability doesn't make you any more popular than declining it in the first place.  Popularity SHOULDN'T matter, but sadly it can and does.    In your shoes, I would ask myself how much I really want to deal with unsecured users, or whether the app is even suitable for users who can't use encryption (think: banking, politics, activism).</span></text><author><a class="comment-user" href="/users/328304/jason" title="1,190 reputation">Jason</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I was told that on one project at our company, they found that the bandwidth taken up by SSL messages was significantly more than for plain messages. I believe someone told me it was an astounding 12 times as much data. I have not verified this myself and it sounds very high, but if there is some sort of header added to each page and most pages have a small amount of content, that may not be so far out.</p>
<p>That said, the hassle of going back and forth between http and https and keeping track of which pages are which seems like too much effort to me. I only once tried to build a site that mixed them and we ended up abandoning the plan when we got tripped up by complex things like pop-up windows created by Javascript getting the wrong protocol attached to them and that sort of thing. We ended up just making the whole site https as less trouble. I guess in simple cases where you just have a login screen and a payment screen that need to be protected and they're simple pages, it wouldn't be a big deal to mix-and-match.</p>
<p>I wouldn't worry much about the burden on the client to decrypt. Normally the client is going to be spending a lot more time waiting for data to come over the wire than it takes to process it. Until users routinely have gigabit/sec internet connections, client processing power is probably pretty irrelevant. The CPU power requried by the server to encrypt pages is a different issue. There might well be issues of it not being able to keep up with hundreds or thousands of users.</p>
</div></text><author><a href="/users/103206/jay">Jay</a></author><comments><comment><text><span class="comment-copy">The extra bandwidth is small even in the worst case.</span></text><author><a class="comment-user" href="/users/238704/james-k-polk" title="22,870 reputation">James K Polk</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>One other small point (maybe someone can verify), If a user types data into a form item such as a text box and then for some reason refreshes the page or the server crashes out for a second, the data the user entered is lost using HTTPS but is preserved using HTTP.</p>
<p>Note: I'm not sure if this is browser specific but it certainly happens with my Firefox browser. </p>
</div></text><author><a href="/users/312381/toc777">toc777</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>windows Server 2012 with IIS 8.0 now offers SNI which is Server Name Indication which allows multiple SSL Web Applications in IIS to be hosted on one IP Address.</p>
</div></text><author><a href="/users/3010638/webmaister">Webmaister</a></author><comments><comment><text><span class="comment-copy">What does that have to do with the question? It's an interesting feature, but I don't see the relevance.</span></text><author><a class="comment-user" href="/users/1618143/user1618143" title="1,485 reputation">user1618143</a></author></comment></comments></answer></answers></post>