<?xml version="1.0" encoding="utf-8"?>
<post><title>security - How to properly do private key management - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>Has anyone got practical experience or a reference for a scheme that implements a key management scheme that would comply with the <a href="https://www.pcisecuritystandards.org/security_standards/pci_dss_download.html" rel="noreferrer">PCI DSS</a> security standard? </p>
<p>There are obviously quite a few implementations around given the number of companies compliant with PCI DSS but trying to find details of them is tough. When it gets down to storing private data the discussion normally stops at which encryption algorithm to use. After that there's normally a statement about appropriately storing the private key but no discussion about practical ways to do it or things like periodically changing the key or providing the key to applications etc.</p>
<p>Specificlly I'm interested in thee requirements from sections 3.5 and 3.6 of the PCI DSS standard.</p>
<blockquote>
<p>3.5.2 Store cryptographic keys securely in the fewest possible locations and forms.</p>
<p>3.6.a Verify the existence of key-management procedures for keys used for encryption of cardholder data. Note: Numerous industry standards for key management are available from various resources including NIST, which can be found at <a href="http://csrc.nist.gov" rel="noreferrer">http://csrc.nist.gov</a>.</p>
<p>3.6.4 Verify that key-management procedures are implemented to require periodic key changes at least annually.</p>
</blockquote>
<p>I've had a look at the <a href="http://csrc.nist.gov/publications/PubsTC.html#Cryptography" rel="noreferrer">NIST Cryptographic publications</a> as the PCI DSS requirements document suggests but apart from recent notes of a <a href="http://csrc.nist.gov/publications/drafts/ir7609/draft-nistir-7609.pdf" rel="noreferrer">Cryptographic Key Management Workshop</a> there doesn't appear to be much there in the way of real implementable schemes or standards.</p>
<p>As to what I'm trying to do it's not:</p>
<ol>
<li>Store passwords + salts as one way hashes for authentication,</li>
<li>Choose a strong symmteric algorithm for data encryption,</li>
<li>Avoid needing to store private data in the first place.</li>
<li>Avoid the need for key management with other mechanisms: physical security, database security, dragons and wizards etc.</li>
</ol>
<p>All of which are valid concerns but in this case are not the answer. The nuts and bolts of my requirements are in a different SO question <a href="http://stackoverflow.com/questions/1581814/net-design-pattern-for-storing-and-retrieving-sensitive-per-user-data">.Net Design pattern for storing and retrieving sensitive per user data</a> but it all boils down to key management hence this more refined question.</p>
</div></text><author><a href="/users/342473/mariusz-jamro">Mariusz Jamro</a></author><comments><comment><text><span class="comment-copy">Curious to know what did you end up doing? I have been searching on this but cannot find a valid key or sample code for NIST SP 800-22. My webapp is in php and even a commercial implementation would help.</span></text><author><a class="comment-user" href="/users/172637/3zzy" title="20,891 reputation">3zzy</a></author></comment><comment><text><span class="comment-copy">I didn't end up needing to store card holder data but did still need a level of application encryption. For Windows I've used a certificate and RSA key stored in the Windows certificate store as the master key for an encrypted application key stored in a config file. For some Linux MySQL databases I've used a LUKS where the file system can only be mounted after the pass phrase is manually entered.</span></text><author><a class="comment-user owner" href="/users/75658/sipwiz" title="20,780 reputation">sipwiz</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>I'm familiar with the pain you're going through. We struggled to update an old EFT system towards PCI compliance. Key management was certainly (from my software point of view) the most challenging part.</p>
<p>I think I also stumbled into the <a href="http://csrc.nist.gov/groups/ST/toolkit/key_management.html" rel="noreferrer">NIST Recommendations for Key Management</a> that Martin posted, and got incredibly frustrated with the lack of concrete examples.</p>
<p><a href="http://www.cerberussystems.com/INFOSEC/stds/fips171.htm" rel="noreferrer">ANSI X9.17 - Financial Institution Key Management</a> is probably the most relevant to your needs, with PCI-DSS.  Good luck reading it though, the document is a massive collection of TLA's which I know I certainly struggled to read.</p>
<p>When frustration turned to desperation I stumbled into <a href="http://www.msen.com/fievel/mmill/index.html" rel="noreferrer">The Electronic Money Mill</a> which is a fictional tale, with a good number of relevant technical references. <a href="http://www.msen.com/fievel/mmill/book_html/doc017.html" rel="noreferrer">Chapter 17</a> discusses X9.17 and may help with the understanding.</p>
<p>From all this reference material I designed a key management system that our auditor was pleased with. The design documents are fairly lengthy, but in summary the idea is that you have your Data Encrypying Key protected by a Key Encrypting Key, and the Key Encrypting Key is stored on a physically separate box, itself protected by a Master Key.</p>
<p>My implementation was to have a Key Server application running on a windows box. This application required entry of two separate 'key server master keys' before it could be used. These keys would be known only to the key server administrators.  These keys are xor'd together to generate the Master Key, which is stored only in protected memory whilst the application is running.  Application can then automatically generate cryptographically strong Key Encrypting Keys, which are stored in encrypted form using the Master Key.</p>
<p>Applications that have a need for encryption will request a Key Encrypting Key from the Key Server. The KEK is used by the application to encrypt/decrypt the Data Encrypting Key, which can be stored securely with the application data.</p>
<p>Good luck. I hope you also find it an interesting challenge!</p>
</div></text><author><a href="/users/141661/paulg">PaulG</a></author><comments><comment><text><span class="comment-copy">Luckily I don't have to implement the PCI DSS standard, it was just an example in my question so that I'd get answers with robust key management schemes. The trick does seem to be how to get the key encrypting key into the application. I don't want to have a separate server for it so am thinking of either getting the application to generate a prompt for it or being able to ssh to the application to set it.</span></text><author><a class="comment-user owner" href="/users/75658/sipwiz" title="20,780 reputation">sipwiz</a></author></comment><comment><text><span class="comment-copy">Sounds good. The separate box is only a requirement if you want to persist the KEK, and intended to protect from a situation where someone takes a copy of the entire application + data (such as literally walking away with the box)</span></text><author><a class="comment-user" href="/users/141661/paulg" title="10,202 reputation">PaulG</a></author></comment><comment><text><span class="comment-copy">The Electronic Money Mill does not appear available at the original link any longer.  FWIW, I found a PDF copy of it in the Wayback Machine:  <a href="http://web.archive.org/web/20070712172633/http://www.msen.com/fievel/mmill/book.e1.pdf" rel="nofollow noreferrer">web.archive.org/web/20070712172633/http://www.msen.com/fieve‌​l/…</a></span></text><author><a class="comment-user" href="/users/321414/jason-vasquez" title="140 reputation">Jason Vasquez</a></author></comment><comment><text><span class="comment-copy">" will request a Key Encrypting Key from the Key Server." could you please elaborate how does the server send securely key to the client? Also does the user save the key received from server in RAM?</span></text><author><a class="comment-user" href="/users/3963067/giorgi-moniava" title="12,819 reputation">giorgi moniava</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Have you seen NIST <a href="http://csrc.nist.gov/groups/ST/toolkit/key_management.html" rel="noreferrer">SP 800-57</a>, Recommendation for Key Management?</p>
</div></text><author><a href="/users/33006/martin-v-l%c3%b6wis">Martin v. Löwis</a></author><comments><comment><text><span class="comment-copy">Good link, thx, that's the refence standard I was after. Now where could I find an example of how key parts are implemented...</span></text><author><a class="comment-user owner" href="/users/75658/sipwiz" title="20,780 reputation">sipwiz</a></author></comment><comment><text><span class="comment-copy">@sipwiz: I have no idea. My guess would be that somebody would sell you these key parts for a lot of money; you might ask NIST whether they have a list of companies that would do so.</span></text><author><a class="comment-user" href="/users/33006/martin-v-l%c3%b6wis" title="84,033 reputation">Martin v. Löwis</a></author></comment><comment><text><span class="comment-copy">I have been searching on this but cannot find a valid key or sample code for NIST SP 800-22. My webapp is in php and even a commercial implementation would help.</span></text><author><a class="comment-user" href="/users/172637/3zzy" title="20,891 reputation">3zzy</a></author></comment></comments></answer></answers></post>