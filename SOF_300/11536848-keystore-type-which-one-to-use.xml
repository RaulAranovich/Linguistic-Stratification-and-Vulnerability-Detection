<?xml version="1.0" encoding="utf-8"?>
<post><title>java - Keystore type: which one to use? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>By looking at the file <code>java.security</code> of my <code>JRE</code>, I see that the keystore type to use by default is set to <code>JKS</code>. <a href="http://docs.oracle.com/javase/6/docs/technotes/guides/security/StandardNames.html#KeyStore" rel="noreferrer">Here</a>, there is a list of the keystore types that can be used.</p>
<p>Is there a recommended keystore type? What are the pros/cons of the different keystore types?</p>
</div></text><author><a href="/users/3885376/ro-engineer">RO_engineer</a></author><comments/></question><answers><answer><text><div class="post-text" itemprop="text">
<p>There are a few more types than what's listed in the standard name list you've linked to. You can find more in the <a href="http://docs.oracle.com/javase/7/docs/technotes/guides/security/SunProviders.html">cryptographic providers documentation</a>. The most common are certainly <code>JKS</code> (the default) and <code>PKCS12</code> (for PKCS#12 files, often with extension <code>.p12</code> or sometimes <code>.pfx</code>).</p>
<p>JKS is the most common if you stay within the Java world. PKCS#12 isn't Java-specific, it's particularly convenient to use certificates (with private keys) backed up from a browser or coming from OpenSSL-based tools (<code>keytool</code> wasn't able to convert a keystore and import its private keys before Java 6, so you had to use other tools).</p>
<p>If you already have a PKCS#12 file, it's often easier to use the <code>PKCS12</code> type directly. It's possible to convert formats, but it's rarely necessary if you can choose the keystore type directly.</p>
<p>In Java 7, <code>PKCS12</code> was mainly useful as a <em>keystore</em> but less for a <em>truststore</em> (see the <a href="http://stackoverflow.com/a/6341566/372643">difference between a keystore and a truststore</a>), because you couldn't store certificate entries without a private key. In contrast, <code>JKS</code> doesn't require each entry to be a private key entry, so you can have entries that contain only certificates, which is useful for trust stores, where you store the list of certificates you trust (but you don't have the private key for them).</p>
<p>This has changed in Java 8, so you can now have certificate-only entries in <code>PKCS12</code> stores too. (More details about these changes and further plans can be found in <a href="http://openjdk.java.net/jeps/229">JEP 229: Create PKCS12 Keystores by Default</a>.)</p>
<p>There are a few other keystore types, perhaps less frequently used (depending on the context), those include:</p>
<ul>
<li><code>PKCS11</code>, for PKCS#11 libraries, typically for accessing hardware cryptographic tokens, but the Sun provider implementation also supports NSS stores (from Mozilla) through this.</li>
<li><code>BKS</code>, using the BouncyCastle provider (commonly used for Android).</li>
<li><code>Windows-MY</code>/<code>Windows-ROOT</code>, if you want to access the Windows certificate store directly.</li>
<li><code>KeychainStore</code>, if you want to use the OSX keychain directly.</li>
</ul>
</div></text><author><a href="/users/372643/bruno">Bruno</a></author><comments><comment><text><span class="comment-copy">What about PEM?</span></text><author><a class="comment-user" href="/users/15461/husayt" title="5,574 reputation">husayt</a></author></comment><comment><text><span class="comment-copy">@husayt, PEM certificates are not directly supported as keystore types (I suppose one could write a <code>KeyStore</code> implementation to that effect). You can however, load them on the fly into a keystore instance (typically JKS, the default type) in memory using a <code>CertificateFactory</code> (as shown in <a href="http://stackoverflow.com/a/18514628/372643">this answer</a>).</span></text><author><a class="comment-user" href="/users/372643/bruno" title="78,944 reputation">Bruno</a></author></comment><comment><text><span class="comment-copy">i think the <code>JKS</code> has changed to <code>JCEKS</code></span></text><author><a class="comment-user" href="/users/1312080/amphibient" title="8,657 reputation">amphibient</a></author></comment><comment><text><span class="comment-copy">@amphibient both types exist indeed, but JKS is still the default AFAIK.</span></text><author><a class="comment-user" href="/users/372643/bruno" title="78,944 reputation">Bruno</a></author></comment><comment><text><span class="comment-copy">Rather critically, a JKS key store cannot store secret keys. For this use case, JCEKS is appropriate. It may be worth mentioning this in your answer.</span></text><author><a class="comment-user" href="/users/474189/duncan" title="39,185 reputation">Duncan</a></author></comment><comment><text><span class="comment-copy">@Bruno so we can't store a plain keyfile that has 32 char random string which is used to encrypt the data to <code>PKCS12</code> ?</span></text><author><a class="comment-user" href="/users/2479558/gurkha" title="276 reputation">Gurkha</a></author></comment><comment><text><span class="comment-copy">PKCS#12 will be the default from Java 9 onwards. PKCS#12 <b>can</b> store secret keys and should also be useable as trust store.</span></text><author><a class="comment-user" href="/users/589259/maarten-bodewes" title="47,652 reputation">Maarten Bodewes</a></author></comment><comment><text><span class="comment-copy">@MaartenBodewes Indeed, PKCS#12 can already be used as a trust store, but only if it also has a private key with the cert at the moment. It could probably be used more generally without private keys, but last time I checked (probably Java 7), the Java implementation didn't allow for such PKCS#12 stores. I can't remember what the PKCS#12 spec says exactly about this, but I think it was a Java implementation limitation, so it's quite possible that further versions of Java let you use PKCS#12 stores more broadly.</span></text><author><a class="comment-user" href="/users/372643/bruno" title="78,944 reputation">Bruno</a></author></comment><comment><text><span class="comment-copy">Ok. In Java 8 I can create a PKCS#12 keystore with a single certificate without any issue. Note that for P12 certificate entries are implicitly trusted. If you need untrusted certs you may have to revert to a scheme with multiple key stores.</span></text><author><a class="comment-user" href="/users/589259/maarten-bodewes" title="47,652 reputation">Maarten Bodewes</a></author></comment><comment><text><span class="comment-copy">@MaartenBodewes You're right. I've just tried with <code>keytool</code> from the Oracle JDK 1.7.0_71, and importing a cert on its own (without private key) didn't work, but it works with the one from Oracle JDK 1.8.0_25 (and newer).</span></text><author><a class="comment-user" href="/users/372643/bruno" title="78,944 reputation">Bruno</a></author></comment><comment><text><span class="comment-copy">OK at least for Java 8 PKCS#12 key stores <b>still cannot store secret key entries</b>. You'll get a null pointer exception when storing such a key store (ugh), probably because it cannot find associated certificates. Somebody seemingly skipped the teachings of Joshua about fail fast code.</span></text><author><a class="comment-user" href="/users/589259/maarten-bodewes" title="47,652 reputation">Maarten Bodewes</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Here is a post which introduces different types of keystore in Java and the differences among different types of keystore. <a href="http://www.pixelstech.net/article/1408345768-Different-types-of-keystore-in-Java----Overview" rel="nofollow noreferrer">http://www.pixelstech.net/article/1408345768-Different-types-of-keystore-in-Java----Overview</a></p>
<p>Below are the descriptions of different keystores from the post:</p>
<blockquote>
<p>JKS, Java Key Store. You can find this file at
  sun.security.provider.JavaKeyStore. This keystore is Java specific, it
  usually has an extension of jks. This type of keystore can contain
  private keys and certificates, but it cannot be used to store secret
  keys. Since it's a Java specific keystore, so it cannot be used in
  other programming languages.</p>
<p>JCEKS, JCE key store. You can find this file at
  com.sun.crypto.provider.JceKeyStore. This keystore has an extension of
  jceks. The entries which can be put in the JCEKS keystore are private
  keys, secret keys and certificates.</p>
<p>PKCS12, this is a standard keystore type which can be used in Java and
  other languages. You can find this keystore implementation at
  sun.security.pkcs12.PKCS12KeyStore. It usually has an extension of p12
  or pfx. You can store private keys, secret keys and certificates on
  this type.</p>
<p>PKCS11, this is a hardware keystore type. It servers an interface for
  the Java library to connect with hardware keystore devices such as
  Luna, nCipher. You can find this implementation at
  sun.security.pkcs11.P11KeyStore. When you load the keystore, you no
  need to create a specific provider with specific configuration. This
  keystore can store private keys, secret keys and cetrificates. When
  loading the keystore, the entries will be retrieved from the keystore
  and then converted into software entries.</p>
</blockquote>
</div></text><author><a href="/users/558032/pixelstech">PixelsTech</a></author><comments><comment><text><span class="comment-copy">Do you know of a good tutorial on using all of these?</span></text><author><a class="comment-user" href="/users/1076564/peci1" title="530 reputation">peci1</a></author></comment><comment><text><span class="comment-copy">@peci1 I have planned to write some tutorials on how to use these keystores. So far I have written one post for JKS, please find it at <a href="http://www.pixelstech.net/article/1409966488-Different-types-of-keystore-in-Java----JKS" rel="nofollow noreferrer">pixelstech.net/article/…</a></span></text><author><a class="comment-user" href="/users/558032/pixelstech" title="1,106 reputation">PixelsTech</a></author></comment><comment><text><span class="comment-copy">@PixelsTech I've found this one and was wondering where's the rest of them :) So I'll stay tuned ;) Thanks</span></text><author><a class="comment-user" href="/users/1076564/peci1" title="530 reputation">peci1</a></author></comment><comment><text><span class="comment-copy">@peci1 I have covered JCEKS and PKCS12 today. For PKCS11, it involves hardware and extra configuration, need more time to compose it. <a href="http://www.pixelstech.net/article/1420427307-Different-types-of-keystore-in-Java----PKCS12" rel="nofollow noreferrer">pixelstech.net/article/…</a> and <a href="http://www.pixelstech.net/article/1420439432-Different-types-of-keystore-in-Java----JCEKS" rel="nofollow noreferrer">pixelstech.net/article/…</a></span></text><author><a class="comment-user" href="/users/558032/pixelstech" title="1,106 reputation">PixelsTech</a></author></comment><comment><text><span class="comment-copy">Wow, that's a lightning speed! Thanks very much.</span></text><author><a class="comment-user" href="/users/1076564/peci1" title="530 reputation">peci1</a></author></comment></comments></answer></answers></post>