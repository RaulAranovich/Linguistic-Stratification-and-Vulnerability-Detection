<?xml version="1.0" encoding="utf-8"?>
<post><title>security - Are querystring parameters secure in HTTPS (HTTP + SSL)?  - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>Do querystring parameters get encrypted in HTTPS when sent with a request?</p>
</div></text><author><a href="/users/521757/jnm2">jnm2</a></author><comments><comment><text><span class="comment-copy">Duplicate of <a href="http://stackoverflow.com/questions/893959/if-you-use-https-will-your-url-params-will-be-safe-from-sniffing" title="if you use https will your url params will be safe from sniffing">stackoverflow.com/questions/893959/…</a></span></text><author><a class="comment-user" href="/users/52277/michael-freidgeim" title="7,893 reputation">Michael Freidgeim</a></author></comment><comment><text><span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/323200/is-an-https-query-string-secure">Is an HTTPS query string secure?</a></span></text><author><a class="comment-user" href="/users/248123/andand" title="10,165 reputation">andand</a></author></comment><comment><text><span class="comment-copy"><a href="http://www.securityweek.com/hackers-can-intercept-https-urls-proxy-attacks" rel="nofollow noreferrer">securityweek.com/hackers-can-intercept-https-urls-proxy-atta‌​cks</a></span></text><author><a class="comment-user" href="/users/2195875/tom" title="2,439 reputation">Tom</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Yes. The querystring is also encrypted with SSL. As <a href="http://blog.httpwatch.com/2009/02/20/how-secure-are-query-strings-over-https/" rel="noreferrer">this article</a> shows, it isn't a good idea to put sensitive information in the URL. For example:</p>
<blockquote>
<p>URLs are stored in web server logs -
  typically the whole URL of each
  request is stored in a server log.
  This means that any sensitive data in
  the URL (e.g. a password) is being
  saved in clear text on the server</p>
</blockquote>
</div></text><author><a href="/users/4092/joe-ratzer">Joe Ratzer</a></author><comments><comment><text><span class="comment-copy">So that does mean that, when DigitalOcean, Google or others ask you to put your API key in the query parameter, anyone who can have a read-only access to the logs can forge your ID? Say if anyone at Loggly leaks any info, lots of services would be compromised?</span></text><author><a class="comment-user" href="/users/965134/adrien" title="461 reputation">Adrien</a></author></comment><comment><text><span class="comment-copy">The API key is a short-lived token, typically valid for either one hour or one month (for oauth and similar services) - but if there were a breach of that magnitude, they'd just invalidate ALL outstanding tokens. Everyone has to re-authenticate, using their (presumably) still secure passwords.</span></text><author><a class="comment-user" href="/users/240358/david-souther" title="6,756 reputation">David Souther</a></author></comment><comment><text><span class="comment-copy">FYI for Rails users... query strings are filtered in addition to POST params when you specify <code>config.filter_parameters</code> <a href="http://stackoverflow.com/questions/2062405/filtering-parts-or-all-of-request-url-from-rails-logs" title="filtering parts or all of request url from rails logs">stackoverflow.com/questions/2062405/…</a></span></text><author><a class="comment-user" href="/users/361609/colllin" title="4,686 reputation">colllin</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>remember, SSL/TLS operates at the Transport Layer, so all the crypto goo happens under the application-layer HTTP stuff. </p>
<p><a href="http://en.wikipedia.org/wiki/File:IP_stack_connections.svg">http://en.wikipedia.org/wiki/File:IP_stack_connections.svg</a></p>
<p>that's the long way of saying, "Yes!"</p>
</div></text><author><a href="/users/271424/michael-howard-msft">Michael Howard-MSFT</a></author><comments><comment><text><span class="comment-copy">+1 for "crypto goo'</span></text><author><a class="comment-user" href="/users/825386/andrew-neely" title="653 reputation">Andrew Neely</a></author></comment><comment><text><span class="comment-copy">+1 for explaining the difference between transport and application layer.</span></text><author><a class="comment-user" href="/users/166240/steve" title="93 reputation">Steve</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The entire transmission, including the query string, the whole URL, and even the type of request (GET, POST, etc.) is encrypted when using HTTPS.</p>
</div></text><author><a href="/users/9990/marcelo-cantos">Marcelo Cantos</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I disagree with the advice given here - even the reference for the accepted answer concludes:</p>
<blockquote>
<p>You can of course use query string parameters with HTTPS, but don’t use them for anything 
  that could present a security problem. For example, you could safely use them to identity
  part numbers or types of display like ‘accountview’ or ‘printpage’, but don’t use them for
  passwords, credit card numbers or other pieces of information that should not be publicly
  available.</p>
</blockquote>
<p>So, no they aren't really safe...!</p>
</div></text><author><a href="/users/3191858/steve-winter">Steve Winter</a></author><comments><comment><text><span class="comment-copy">All of the answers agree on how safe they are, and the question wasn't about whether they're "safe". It was whether GET parameters are encrypted in HTTPS. Which is answered, along with caveats that you quote. I don't know what your answer is trying to add here in relation to the question, as it's vague and derivative.</span></text><author><a class="comment-user" href="/users/61938/robert-grant" title="5,051 reputation">Robert Grant</a></author></comment></comments></answer></answers></post>