<?xml version="1.0" encoding="utf-8"?>
<post><title>security - Is JSONP safe to use? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>Are there any security issues that should be considered when using JSONP?</p>
</div></text><author><a href="/users/3161093/mattingly890">mattingly890</a></author><comments><comment><text><span class="comment-copy">the site is truly a secure site..i just want to know that whether any security problem with the cookie stored by my server.</span></text><author><span class="comment-user">dits59</span></author></comment><comment><text><span class="comment-copy">The link below by naugtur gives a nice solution and an insightful explanation of how it could be broken and how the solution works. Please do take a look.</span></text><author><a class="comment-user" href="/users/362754/minghua" title="1,555 reputation">minghua</a></author></comment><comment><text><span class="comment-copy">related question for fixing the issues: <a href="http://stackoverflow.com/q/16660145/1048572">Is it possible to make a secure JSONP request?</a></span></text><author><a class="comment-user" href="/users/1048572/bergi" title="252,844 reputation">Bergi</a></author></comment><comment><text><span class="comment-copy">Is it a problem that whatever data is being submitted appears as query parameters on a GET request and therefore likely be logged, etc?</span></text><author><a class="comment-user" href="/users/14663/ww" title="15,663 reputation">WW.</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p><strong>Update</strong>: JSONP is a common hack to do cross-domain requests. Modern browsers now have Cross Origin Resource Sharing, and IE8+ have XDomainRequest which is similar. See <a href="http://enable-cors.org/" rel="noreferrer">http://enable-cors.org/</a> for more info.</p>
<p>JSONP is just a script include that allows you to use a callback. You should however be aware of <a href="http://www.squarefree.com/securitytips/web-developers.html#CSRF" rel="noreferrer">Cross-site request forgery (CSRF)</a>.</p>
<p>As long as you control the script and the server, JSONP isn't anymore insecure than a script include. Unless you have a JSONP-service that returns sensitive data to logged in users. A malicious site can send a request to the service (hoping that the user is logged in on your site), and retreive the data. The service can check the referrer of the request, but it is possible to spoof the referrer using flash (thanks Chris Moschini).</p>
<p>Imagine this senario:
 - A user logs into his internet banking account. Storing a session cookie in the users browser. This site has a jsonp service with sensitive info about the user and his accounts.
 - Other sites won't know that the user is logged in, but they could do a wild guess and try to access the jsonp service. Since the user has a session cookie, the browser will get a response, and there's nothing stopping the site from doing an ajax post to save the sensitive data on their server.</p>
<p><strong>Update June 28th 2012</strong>: If you want to protect against CSRF attacks you should read this in depth blog post by a security expert: <a href="http://erlend.oftedal.no/blog/?blogid=130" rel="noreferrer">http://erlend.oftedal.no/blog/?blogid=130</a></p>
</div></text><author><a href="/users/44643/gregers">gregers</a></author><comments><comment><text><span class="comment-copy">It's been pointed out elsewhere that HTTP_REFERER can be spoofed with Flash, so any sensitive data a server offers over jsonp is vulnerable.</span></text><author><a class="comment-user" href="/users/176877/chris-moschini" title="19,816 reputation">Chris Moschini</a></author></comment><comment><text><span class="comment-copy">This is only one side of the risk. The link by naugtur shows the other side of the risk, and better a solution to that part.</span></text><author><a class="comment-user" href="/users/362754/minghua" title="1,555 reputation">minghua</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Yes, you need to be careful, but when used properly with trusted services it's relatively safe.</p>
<p>Here's a summary of the security issues with JSONP, as I understand it:</p>
<p>From the consumer's perspective:</p>
<ul>
<li>You must trust the provider to not return malicious JavaScript instead of the expected JSON wrapped in the JSONP callback you specify.</li>
<li>The same is also true of any third party JavaScript embedded add-ons, such as Google Analytics.</li>
<li>It's only similar to XSS attacks in that it allows a 3rd party to execute arbitrary JavaScript in your application, however, you must first choose to trust that 3rd party by making the request in the first place.</li>
</ul>
<p>From the provider's perspective:</p>
<ul>
<li>You must not assume that even though the clients' cookie(s) are present in the request that the consumer is a webpage under your control. Check the Referer header against a whitelist of authorized URLs, and/or don't rely on cookie-based authentication.</li>
<li>Analogous to a CSRF / confused deputy attack.</li>
</ul>
</div></text><author><a href="/users/113/tlrobinson">tlrobinson</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>There are security issues for both sides. The most serious one is for the site including JSONP.</p>
<p>If you are including a  from another domain (which you do not control), that domain can change up the script at any time. They can make the javascript do anything in the context of your webpage, that your own javascript could do. There is no way around this if you use JSONP. You should look into cross-domain communication using iframes, which is best done by the excellent EasyDXM library.</p>
<p>If you are offering a webservice that handles JSONP, you have to protect from Cross-Site Request Forgery (CSRF). This is where your webservice returns sensitive information to logged-in users. If a user has logged into your site, any other site can generate a GET request to the JSONP service, and YOUR domain's cookies are submitted with the request -- in essence, authenticating the logged-in user -- except that now, the remote domain gets the response and is able to read the sensitive data!</p>
<p>The best way to protect against CSRF is to generate a nonce (a hard-to-guess, randomly generated number) and store it in the session. Output this nonce in all your forms on YOUR webpages, and include it in all JSONP requests on YOUR pages. On the server, make sure that the nonce is present and correct in the request (whether it be a GET, POST, etc.) Other domains will be unable to guess this nonce, and thus unable to get the sensitive information, despite the cookies being sent.</p>
<p>Finally, there is another sort of security issue: JSONP simply does not support user authentication in the browser, of the kind that is possible with OAuth. You can, of course, have the server get some kind of access token (like with OAuth) and use that. However, if you want to do authentication entirely in the browser, you have to use cross-domain communication with iFrames. I think this is how OAuth 2.0 does it. Here's how you set it up: pages hosted on your site have full access to your server. Have a javascript library which loads EasyDXM and uses it to set up a hidden iframe to your site, and talk to it using that.</p>
</div></text><author><a href="/users/467460/gregory-magarshak">Gregory Magarshak</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p><strong>solution! solution!</strong></p>
<p>I got this thought that there's an iframe crossdomain hack that doesn't execute the code that comes, but lets you pass a variable. Why not use it to wrap around for safety? ...</p>
<p>And yes, somebody got this idea first, as usual :)</p>
<p><a href="http://beebole.com/blog/general/sandbox-your-cross-domain-jsonp-to-improve-mashup-security/" rel="nofollow">http://beebole.com/blog/general/sandbox-your-cross-domain-jsonp-to-improve-mashup-security/</a></p>
<p>And there's also window.postMessage, which is safe and not hacky</p>
</div></text><author><a href="/users/173077/naugtur">naugtur</a></author><comments/></answer></answers></post>