<?xml version="1.0" encoding="utf-8"?>
<post><title>security - JavaScript: client-side vs. server-side validation - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>Which is better to do client side or server side validation?</p>
<p>In our situation we are using </p>
<ul>
<li>jQuery and MVC.  </li>
<li>JSON data to pass between our View and Controller.  </li>
</ul>
<p>A lot of the validation I do is validating data as users enter it.
For example I use the the <code>keypress</code> event to prevent letters in a text box, set a max number of characters and that a number is with in a range. </p>
<p>I guess the better question would be, Are there any benefits to doing server side validation over client side?</p>
<hr/>
<p>Awesome answers everyone. The website that we have is password protected and for a small user base(&lt;50). If they are not running JavaScript we will send ninjas. But if we were designing a site for everyone one I'd agree to do validation on both sides.</p>
</div></text><author><a href="/users/313758/yi-jiang">Yi Jiang</a></author><comments><comment><text><span class="comment-copy">javascript can be disabled</span></text><author><a class="comment-user" href="/users/68336/enrico-murru" title="1,535 reputation">Enrico Murru</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>As others have said, you should do both. Here's why:</p>
<h2>Client Side</h2>
<p>You want to validate input on the client side first because you can give <strong>better feedback to the average user</strong>. For example, if they enter an invalid email address and move to the next field, you can show an error message immediately. That way the user can correct every field <strong>before</strong> they submit the form.</p>
<p>If you only validate on the server, they have to submit the form, get an error message, and try to hunt down the problem. </p>
<p>(This pain can be eased by having the server re-render the form with the user's original input filled in, but client-side validation is still faster.)</p>
<h2>Server Side</h2>
<p>You want to validate on the server side because you can <strong>protect against the malicious user</strong>, who can easily bypass your JavaScript and submit dangerous input to the server. </p>
<p>It is very dangerous to trust your UI. <strong>Not only can they abuse your UI, but they may not be using your UI at all, or even a browser</strong>. What if the user manually edits the URL, or runs their own Javascript, or tweaks their HTTP requests with another tool? What if they send custom HTTP requests from <code>curl</code> or from a script, for example?</p>
<p>(<em>This is not theoretical; eg, I worked on a travel search engine that re-submitted the user's search to many airlines, bus companies, etc, by sending <code>POST</code> requests as if the user had filled each company's search form, then gathered and sorted all the results. Those companies' form JS was never executed, and it was crucial for us that they provide error messages in the returned HTML. Of course, an API would have been nice, but this was what we had to do.</em>)</p>
<p>Not allowing for that is not only naive from a security standpoint, but also non-standard: a client should be allowed to send HTTP by whatever means they wish, and you should respond correctly. That includes validation.</p>
<p>Server side validation is also important for <strong>compatibility</strong> - not all users, even if they're using a browser, will have JavaScript enabled.</p>
<h2>Addendum - December 2016</h2>
<p>There are some validations that <strong>can't even be properly done in server-side application code, and are utterly impossible in client-side code</strong>, because they depend on the current state of the database. For example, "nobody else has registered that username", or "the blog post you're commenting on still exists", or "no existing reservation overlaps the dates you requested", or "your account balance still has enough to cover that purchase." <strong>Only the database can reliably validate data which depends on related data.</strong> Developers <a href="http://www.bailis.org/papers/feral-sigmod2015.pdf" rel="noreferrer">regularly screw this up</a>, but <a href="http://nathanmlong.com/2016/01/protect-your-data-with-postgresql-constraints/" rel="noreferrer">PostgreSQL provides some good solutions</a>.</p>
</div></text><author><a href="/users/4376/nathan-long">Nathan Long</a></author><comments><comment><text><span class="comment-copy">This should be the accepted answer, even 6 years later :P</span></text><author><a class="comment-user" href="/users/3304034/jacob-mckay" title="1,176 reputation">Jacob McKay</a></author></comment><comment><text><span class="comment-copy">@JacobMcKay Brad8118 still waits for better answer...</span></text><author><a class="comment-user" href="/users/2047418/filip-bartuzi" title="2,198 reputation">Filip Bartuzi</a></author></comment><comment><text><span class="comment-copy">Bueller... Bueller...</span></text><author><a class="comment-user" href="/users/3304034/jacob-mckay" title="1,176 reputation">Jacob McKay</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Yes, client side validation can be totally bypassed, always. You need to do both, client side to provide a better user experience, and server side to be sure that the input you get is actually validated and not just supposedly validated by the client.</p>
</div></text><author><a href="/users/5190/vinko-vrsalovic">Vinko Vrsalovic</a></author><comments><comment><text><span class="comment-copy">Both!  Dagnabbit the work never ends...</span></text><author><a class="comment-user" href="/users/1179593/squirrl" title="1,135 reputation">Squirrl</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I am just going to repeat it, because it is quite important:</p>
<blockquote>
<p><strong>Always validate on the server</strong></p>
</blockquote>
<p>and add JavaScript for user-responsiveness.</p>
</div></text><author><a href="/users/14971/toby-hede">Toby Hede</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>The benefit of doing server side validation over client side validation is that client side validation can be bypassed/manipulated:</p>
<ul>
<li>The end user could have javascript switched off</li>
<li>The data could be sent directly to your server by someone who's not even using your site, with a custom app designed to do so</li>
<li>A Javascript error on your page (caused by any number of things) could result in some, but not all, of your validation running</li>
</ul>
<p>In short - always, always validate server-side and then consider client-side validation as an added "extra" to enhance the end user experience.</p>
</div></text><author><a href="/users/7872/rob">Rob</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p><strong>You <em>must always</em> validate on the server.</strong></p>
<p>Also having validation on the client is nice for users, but is utterly insecure.</p>
</div></text><author><a href="/users/9360/peter-boughton">Peter Boughton</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>You can do Server side validation and send back a JSON object with the validation results for each field, keeping client Javascript to a minimum (just displaying results) and still having a user friendly experience without having to repeat yourself on both client and server.</p>
</div></text><author><a href="/users/2327708/jonathan">Jonathan</a></author><comments><comment><text><span class="comment-copy">User friendly? Maybe. Almost instantaneous and buttery smooth? Probably not.</span></text><author><a class="comment-user" href="/users/3747942/quadrupleslap" title="151 reputation">quadrupleslap</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Well, I still find some room to answer.</p>
<p>In addition to answers from Rob and Nathan, I would add that having client-side validations matters. When you are applying validations on your webforms you must follow these guidelines:</p>
<h3>Client-Side</h3>
<ol>
<li>Must use client-side validations in order to filter genuine requests coming from genuine users at your website.</li>
<li>The client-side validation should be used to reduce the errors that might occure during server side processing.</li>
<li>Client-side validation should be used to minimize the server-side round-trips so that you save bandwidth and the requests per user. </li>
</ol>
<h3>Server-Side</h3>
<ol>
<li>You SHOULD NOT assume the validation successfully done at client side is 100% perfect. No matter even if it serves less than 50 users. You never know which of your user/emplyee turn into an "evil" and do some harmful  activity knowing you dont have proper validations in place.</li>
<li>Even if its perfect in terms of validating email address, phone numbers or checking some valid inputs it might contain very harmful data. Which needs to be filtered at server-side no matter if its correct or incorrect.</li>
<li>If client-side validation is bypassed, your server-side validations comes to rescue you from any potential damage to your server-side processing. In recent times, we have already heard lot of stories of SQL Injections and other sort of techniques that might be applied in order to gain some evil benefits.</li>
</ol>
<p>Both types of validations play important roles in their respective scope but the most strongest is the server-side. If you receive 10k users at a single point of time then you would definitely end up filtering the number of requests coming to your webserver. If you find there was a single mistake like invalid email address then they post back the form again and ask your user to correct it which will definitely eat your server resources and bandwidth. So better you apply javascript validation. If javascript is disabled then your server side validation will come to rescue and i bet only a few users might have accidentlly disable it since 99.99% of websites use javascript and its already enabled by default in all modern browsers.</p>
</div></text><author><a href="/users/1150916/kmx">KMX</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Client side should use a basic validation via <a href="http://www.w3schools.com/html/html5_form_input_types.asp" rel="nofollow">HTML5 input types</a> and <a href="http://www.w3schools.com/tags/att_input_pattern.asp" rel="nofollow">pattern attributes</a> and as these are only used for progressive enhancements for better user experience (Even if they are not supported on &lt; IE9 and safari, but we don't rely on them). But the main validation should happen on the server side..</p>
</div></text><author><a href="/users/56449/adardesign">adardesign</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I will suggest to implement both client and server validation it keeps project more secure......if i have  to choose one i will go with server side validation.</p>
<p>You can find some relevant information here 
<a href="http://www.webexpertlabs.com/server-side-form-validation-using-regular-expression/" rel="nofollow">http://www.webexpertlabs.com/server-side-form-validation-using-regular-expression/</a></p>
</div></text><author><a href="/users/2984793/gaurav-vashisht">gaurav vashisht</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>JavaScript can be modified at runtime.</p>
<p>I suggest a pattern of creating a validation structure on the server, and sharing this with the client. </p>
<p>You'll need separate validation logic on both ends, ex:</p>
<p><code>"required"</code> attributes on <code>inputs</code> client-side</p>
<p><code>field.length &gt; 0</code> server-side.</p>
<p>But using the same validation specification will eliminate some redundancy (and mistakes) of mirroring validation on both ends.</p>
</div></text><author><a href="/users/720785/taylormac">TaylorMac</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I came across an interesting link that make a distinction between <strong>gross, systematic, random errors.</strong></p>
<p><code>Client-Side validation</code> suits perfectly for preventing gross and random errors. Typically a max length for texture and input. Do not mimic the server-side validation rule; provide your own gross, rule of thumb validation rule (ex. 200 characters on client-side; <code>n</code> on server-side dictated by a strong business rule).</p>
<p><code>Server-side validation</code> suits perfectly for preventing systematic errors; it will enforce business rules.</p>
<p>In a project I'm involved in, the validation is done on the server through ajax requests. On the client I display error messages accordingly.</p>
<p>Further reading: gross, systematic, random errors:</p>
<p><a href="https://answers.yahoo.com/question/index?qid=20080918203131AAEt6GO" rel="nofollow">https://answers.yahoo.com/question/index?qid=20080918203131AAEt6GO</a></p>
</div></text><author><a href="/users/313353/roland">roland</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>If you are doing light validation, it is best to do it on the client.  It will save the network traffic which will help your server perform better.  If if it complicated validation that involves pulling data from a database or something, like passwords, then it best to do it on the server where the data can be securely checked.</p>
</div></text><author><a href="/users/24227/tom">Tom</a></author><comments><comment><text><span class="comment-copy">What You're adivicing is not the best idea. User can always bypass the client-side validation and submit whatever they want to the database.</span></text><author><a class="comment-user" href="/users/478458/kremuwa" title="142 reputation">kremuwa</a></author></comment></comments></answer></answers></post>