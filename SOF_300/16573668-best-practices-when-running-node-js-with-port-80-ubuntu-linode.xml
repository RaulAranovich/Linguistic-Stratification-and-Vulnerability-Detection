<?xml version="1.0" encoding="utf-8"?>
<post><title>linux - Best practices when running Node.js with port 80 (Ubuntu / Linode) - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I am setting up my first <code>Node.js</code> server on a <code>cloud Linux node</code> and I am fairly new to the details of <code>Linux admin</code>. (BTW I am not trying to use Apache at the same time.) </p>
<p>Everything is installed correctly, but I found that unless I use the <code>root login</code>, I am not able to listen on <code>port 80</code> with node. However I would rather not run it as root for security reason. </p>
<p>What is the best practice to:</p>
<ol>
<li>Set good permissions / user for node so that it is secure / sandboxed?</li>
<li>Allow port 80 to be used within these constraints.</li>
<li>Start up node and run it automatically.</li>
<li>Handle log information sent to console.</li>
<li>Any other general maintenance and security concerns.</li>
</ol>
<p>Should I be forwarding port 80 traffic to a different listening port?</p>
<p>Thanks</p>
</div></text><author><a href="/users/2520185/mujaffars">mujaffars</a></author><comments/></question><answers><answer><text><div class="post-text" itemprop="text">
<h1>Port 80</h1>
<p>What I do on my cloud instances is I redirect port 80 to port 3000 with this command:</p>
<pre class="lang-js prettyprint prettyprinted" style=""><code><span class="pln">sudo iptables </span><span class="pun">-</span><span class="pln">t nat </span><span class="pun">-</span><span class="pln">A PREROUTING </span><span class="pun">-</span><span class="pln">i eth0 </span><span class="pun">-</span><span class="pln">p tcp </span><span class="pun">--</span><span class="pln">dport </span><span class="lit">80</span><span class="pln"> </span><span class="pun">-</span><span class="pln">j REDIRECT </span><span class="pun">--</span><span class="pln">to</span><span class="pun">-</span><span class="pln">port </span><span class="lit">3000</span></code></pre>
<p>Then I launch my Node.js on port 3000. Requests to port 80 will get mapped to port 3000.</p>
<p>You should also edit your <code>/etc/rc.local</code> file and add that line minus the <code>sudo</code>.  That will add the redirect when the machine boots up. You don't need <code>sudo</code> in <code>/etc/rc.local</code> because the commands there are run as <code>root</code> when the system boots.</p>
<h1>Logs</h1>
<p>Use the <a href="https://npmjs.org/package/forever">forever</a> module to launch your Node.js with.  It will make sure that it restarts if it ever crashes and it will redirect console logs to a file.</p>
<h1>Launch on Boot</h1>
<p>Add your Node.js start script to the file you edited for port redirection, <code>/etc/rc.local</code>.  That will run your Node.js launch script when the system starts.</p>
<h1>Digital Ocean &amp; other VPS</h1>
<p>This not only applies to Linode, but Digital Ocean, AWS EC2 and other VPS providers as well. However, on RedHat based systems <code>/etc/rc.local</code> is <code>/ect/rc.d/local</code>.</p>
</div></text><author><a href="/users/1305696/daniel">Daniel</a></author><comments><comment><text><span class="comment-copy">Thanks for that answer, nice and to the point.</span></text><author><a class="comment-user owner" href="/users/986059/robotbugs" title="1,387 reputation">Robotbugs</a></author></comment><comment><text><span class="comment-copy">BTW, on Ubuntu, it is /etc/rc.local</span></text><author><a class="comment-user" href="/users/1283489/kehers" title="1,849 reputation">kehers</a></author></comment><comment><text><span class="comment-copy">You are awesome, works like a charm.</span></text><author><a class="comment-user" href="/users/713528/victor" title="121 reputation">Victor</a></author></comment><comment><text><span class="comment-copy">Often the "-i eth0" flag will be an issue for virtual private servers.  Replace eth0 as needed.</span></text><author><a class="comment-user" href="/users/1724287/jhawn" title="193 reputation">JHAWN</a></author></comment><comment><text><span class="comment-copy">If I add my Node.js start script to <code>/etc/rc.local</code>, won't it be executed as <code>root</code> on system boot? That would defeat the purpose of the port 80 redirect.</span></text><author><a class="comment-user" href="/users/1712145/jamix" title="2,298 reputation">jamix</a></author></comment><comment><text><span class="comment-copy">Yes, this is true.  If you start your node.js script from <code>/etc/rc.local</code> it will run as <code>root</code>.  However, security best practices are to never run a server as <code>root</code>.</span></text><author><a class="comment-user" href="/users/1305696/daniel" title="21,345 reputation">Daniel</a></author></comment><comment><text><span class="comment-copy">But I run webserver on port 80, so the webserver wont work in this case. Please advise.</span></text><author><a class="comment-user" href="/users/990192/moderns" title="403 reputation">moderns</a></author></comment><comment><text><span class="comment-copy">If you have a web server already running on port 80 then you'll need to configure it to be a reverse proxy for the Node.js backend server.</span></text><author><a class="comment-user" href="/users/1305696/daniel" title="21,345 reputation">Daniel</a></author></comment><comment><text><span class="comment-copy">This works but not alongside my VPN (which I host on the same VPS).</span></text><author><a class="comment-user" href="/users/1191286/davey-dev" title="152 reputation">davey_dev</a></author></comment><comment><text><span class="comment-copy">What do you mean by <code>add Node.js script to /etc/rc.local</code> ? Do I simply need to add a line that calls the script, i.e. line : <code>node server.js</code> ?</span></text><author><a class="comment-user" href="/users/2272048/sprout-coder" title="677 reputation">Sprout Coder</a></author></comment><comment><text><span class="comment-copy">Note that for the port redirect to work, the destination port needs to be opne on your firewall as well.  WRT starting a node instance on boot, we simply make use of the distributions's init scripts/systemd files that allow you to specify a user.</span></text><author><a class="comment-user" href="/users/361413/bk138" title="1,876 reputation">bk138</a></author></comment><comment><text><span class="comment-copy">Let's say that I have two ip available, one which is bound to apache on port 80, how would I add the other one to the command above?</span></text><author><a class="comment-user" href="/users/710693/jcm" title="3,510 reputation">JCM</a></author></comment><comment><text><span class="comment-copy">@JCM you would change <code>-i eth0</code> to <code>-i eth1</code>.  That would target the second interface instead of the first interface.</span></text><author><a class="comment-user" href="/users/1305696/daniel" title="21,345 reputation">Daniel</a></author></comment><comment><text><span class="comment-copy">@Daniel what if the ip is inside a sub interface (eth0:cp1)?</span></text><author><a class="comment-user" href="/users/710693/jcm" title="3,510 reputation">JCM</a></author></comment><comment><text><span class="comment-copy">@JCM I haven't actually used it with a sub interface, but I suspect it would work the same way.</span></text><author><a class="comment-user" href="/users/1305696/daniel" title="21,345 reputation">Daniel</a></author></comment><comment><text><span class="comment-copy">@jamix &amp; OP: Is there a solve for the rc.local command running as root?</span></text><author><a class="comment-user" href="/users/726402/ndmweb" title="1,000 reputation">ndmweb</a></author></comment><comment><text><span class="comment-copy">@ndmweb Before we switched our Node.js app to Elastic Beanstalk where this is taken care of for us, we used <code>process.setgid()</code> and <code>process.setuid()</code> in the app itself to downgrade its permissions to those of a specially created <code>nodejs</code> system user.</span></text><author><a class="comment-user" href="/users/1712145/jamix" title="2,298 reputation">jamix</a></author></comment><comment><text><span class="comment-copy">@Daniel, The sockets sent to :80 does not seems to get forwarded to :3000 ? Can you help please ?</span></text><author><a class="comment-user" href="/users/3656084/sahan" title="641 reputation">Sahan</a></author></comment><comment><text><span class="comment-copy">Thanks! -from the Phoenix/Elixir world</span></text><author><a class="comment-user" href="/users/761427/arthur-coll%c3%a9" title="954 reputation">Arthur Coll√©</a></author></comment><comment><text><span class="comment-copy">Make sure you get the <code>-i</code> correct, or remove it</span></text><author><a class="comment-user" href="/users/1117300/mfarid" title="362 reputation">MFARID</a></author></comment><comment><text><span class="comment-copy">what do you mean by add Node.js script to /etc/rc.local can you please tell me what should i wriye and also i i am using forever also ??</span></text><author><a class="comment-user" href="/users/4062630/sudhanshu-gaur" title="1,066 reputation">Sudhanshu Gaur</a></author></comment><comment><text><span class="comment-copy">@Daniel when rerouting, does <i>ufw</i> also need to allow the specificed port?  Given your example, I've noticed this only works when 3000 is allowed via the firewall (<code>ufw allow 3000/tcp</code>), but that also allows anyone to access via that port; so an external person could get to the page by domainname.com (defaults to 80), domainname.com:80,  domainname.com:3000, and ip address (e.g, 123.456.789.012:80/3000).  I thought the desire was to allow TCP traffic on 80 to be served internally by port 3000; so all ports closed to external users except 80.</span></text><author><a class="comment-user" href="/users/183181/vol7ron" title="18,420 reputation">vol7ron</a></author></comment><comment><text><span class="comment-copy">@bk138 I think I just repeated what you previously stated -- is that correct?  Is it possible to do port forwarding internally?</span></text><author><a class="comment-user" href="/users/183181/vol7ron" title="18,420 reputation">vol7ron</a></author></comment><comment><text><span class="comment-copy">If I use this solution and later I want to remove this redirection of traffic, then how to do it?</span></text><author><a class="comment-user" href="/users/5615866/naveen-attri" title="73 reputation">Naveen Attri</a></author></comment><comment><text><span class="comment-copy">fantastic, seccond line of the solution worked like a charm on one of my servers. Thanks!</span></text><author><a class="comment-user" href="/users/6011542/pedro-emilio-borrego-rached" title="110 reputation">Pedro Emilio Borrego Rached</a></author></comment><comment><text><span class="comment-copy">Instead of adding the iptables changes to rc.local, how about editing <code>/etc/network/interfaces</code>, adding these two lines: <code>pre-up iptables-restore &lt; /etc/iptables.rules post-down iptables-save &gt; /etc/iptables.rules</code></span></text><author><a class="comment-user" href="/users/938281/atomox" title="390 reputation">Atomox</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Give Safe User Permission To Use Port 80</p>
<p>Remember, we do NOT want to run your applications as the root user, but there is a hitch: your safe user does not have permission to use the default HTTP port (80). You goal is to be able to publish a website that visitors can use by navigating to an easy to use URL like <code>http://ip:port/</code></p>
<p>Unfortunately, unless you sign on as root, you‚Äôll normally have to use a URL like <code>http://ip:port</code> - where port number &gt; 1024.</p>
<p>A lot of people get stuck here, but the solution is easy. There a few options but this is the one I like. Type the following commands:</p>
<pre class="lang-js prettyprint prettyprinted" style=""><code><span class="pln">sudo apt</span><span class="pun">-</span><span class="kwd">get</span><span class="pln"> install libcap2</span><span class="pun">-</span><span class="pln">bin
sudo setcap cap_net_bind_service</span><span class="pun">=+</span><span class="pln">ep </span><span class="pun">`</span><span class="pln">readlink </span><span class="pun">-</span><span class="pln">f \`which node\`</span><span class="pun">`</span></code></pre>
<p>Now, when you tell a Node application that you want it to run on port 80, it will not complain.</p>
<p>Check this <a href="https://www.digitalocean.com/community/articles/how-to-use-pm2-to-setup-a-node-js-production-environment-on-an-ubuntu-vps">reference link</a></p>
</div></text><author><a href="/users/2209631/meet-mehta">Meet Mehta</a></author><comments><comment><text><span class="comment-copy">This is the better, simpler answer.</span></text><author><a class="comment-user" href="/users/3081480/kyle-chadha" title="1,151 reputation">Kyle Chadha</a></author></comment><comment><text><span class="comment-copy">Also, added detailed answer here <a href="http://stackoverflow.com/questions/23281895/node-js-eacces-error-when-listening-on-http-80-port-permission-denied/23281904#23281904" title="node js eacces error when listening on http 80 port permission denied">stackoverflow.com/questions/23281895/‚Ä¶</a></span></text><author><a class="comment-user" href="/users/2209631/meet-mehta" title="2,169 reputation">Meet Mehta</a></author></comment><comment><text><span class="comment-copy">Best answer. :)</span></text><author><a class="comment-user" href="/users/3062017/luca-steeb" title="783 reputation">Luca Steeb</a></author></comment><comment><text><span class="comment-copy">How does a web server like NGINX run on port 80? Does it do something similar?</span></text><author><a class="comment-user" href="/users/1104036/eric-andrew-lewis" title="193 reputation">Eric Andrew Lewis</a></author></comment><comment><text><span class="comment-copy">@EricAndrewLewis: I will say it depends. This error will show up when you are running the server in non-root mode. What if you are running the Nginx server as root user!  Also, if running as normal user and getting error. Run above commands to give safe permissions to access the port. Also refer to <a href="http://stackoverflow.com/questions/31369480/vagrant-and-nginx-only-works-on-ports-other-than-80" title="vagrant and nginx only works on ports other than 80">stackoverflow.com/questions/31369480/‚Ä¶</a></span></text><author><a class="comment-user" href="/users/2209631/meet-mehta" title="2,169 reputation">Meet Mehta</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p><strong>Drop root privileges after you bind to port 80 (or 443).</strong></p>
<p>This allows port 80/443 to remain protected, while still preventing you from serving requests as root:</p>
<pre class="lang-js prettyprint prettyprinted" style=""><code><span class="kwd">function</span><span class="pln"> drop_root</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    process</span><span class="pun">.</span><span class="pln">setgid</span><span class="pun">(</span><span class="str">'nobody'</span><span class="pun">);</span><span class="pln">
    process</span><span class="pun">.</span><span class="pln">setuid</span><span class="pun">(</span><span class="str">'nobody'</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>A full working example using the above function:</p>
<pre class="lang-js prettyprint prettyprinted" style=""><code><span class="kwd">var</span><span class="pln"> process </span><span class="pun">=</span><span class="pln"> require</span><span class="pun">(</span><span class="str">'process'</span><span class="pun">);</span><span class="pln">
</span><span class="kwd">var</span><span class="pln"> http </span><span class="pun">=</span><span class="pln"> require</span><span class="pun">(</span><span class="str">'http'</span><span class="pun">);</span><span class="pln">
</span><span class="kwd">var</span><span class="pln"> server </span><span class="pun">=</span><span class="pln"> http</span><span class="pun">.</span><span class="pln">createServer</span><span class="pun">(</span><span class="kwd">function</span><span class="pun">(</span><span class="pln">req</span><span class="pun">,</span><span class="pln"> res</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    res</span><span class="pun">.</span><span class="pln">write</span><span class="pun">(</span><span class="str">"Success!"</span><span class="pun">);</span><span class="pln">
    res</span><span class="pun">.</span><span class="pln">end</span><span class="pun">();</span><span class="pln">
</span><span class="pun">});</span><span class="pln">

server</span><span class="pun">.</span><span class="pln">listen</span><span class="pun">(</span><span class="lit">80</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'User ID:'</span><span class="pun">,</span><span class="pln">process</span><span class="pun">.</span><span class="pln">getuid</span><span class="pun">()+</span><span class="str">', Group ID:'</span><span class="pun">,</span><span class="pln">process</span><span class="pun">.</span><span class="pln">getgid</span><span class="pun">());</span><span class="pln">
    drop_root</span><span class="pun">();</span><span class="pln">
    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'User ID:'</span><span class="pun">,</span><span class="pln">process</span><span class="pun">.</span><span class="pln">getuid</span><span class="pun">()+</span><span class="str">', Group ID:'</span><span class="pun">,</span><span class="pln">process</span><span class="pun">.</span><span class="pln">getgid</span><span class="pun">());</span><span class="pln">
</span><span class="pun">});</span></code></pre>
<p>See more details at this <a href="https://thomashunter.name/blog/drop-root-privileges-in-node-js/" rel="noreferrer" title="full reference">full reference</a>.</p>
</div></text><author><a href="/users/2044109/slund">slund</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>For port 80 (which was the original question), Daniel is exactly right.  I recently moved to <code>https</code> and had to switch from <code>iptables</code> to a light nginx proxy managing the SSL certs. I found a useful <a href="http://stackoverflow.com/a/17027443/2669596">answer</a> along with a <a href="https://gist.github.com/gabrielhpugliese/5759232" rel="noreferrer">gist</a> by <a href="http://stackoverflow.com/users/1164249/gabrielhpugliese">gabrielhpugliese</a> on how to handle that. Basically I</p>
<ul>
<li><p><a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/InstallCert.html" rel="noreferrer">Created an SSL Certificate Signing Request (CSR)</a> via <a href="http://www.openssl.org/" rel="noreferrer">OpenSSL</a></p>
<pre class="lang-js prettyprint prettyprinted" style=""><code><span class="pln">openssl genrsa </span><span class="lit">2048</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> </span><span class="kwd">private</span><span class="pun">-</span><span class="pln">key</span><span class="pun">.</span><span class="pln">pem
openssl req </span><span class="pun">-</span><span class="kwd">new</span><span class="pln"> </span><span class="pun">-</span><span class="pln">key </span><span class="kwd">private</span><span class="pun">-</span><span class="pln">key</span><span class="pun">.</span><span class="pln">pem </span><span class="pun">-</span><span class="pln">out csr</span><span class="pun">.</span><span class="pln">pem</span></code></pre></li>
<li>Got the actual cert from <a href="http://www.dmoz.org/Computers/Security/Public_Key_Infrastructure/PKIX/Tools_and_Services/Third_Party_Certificate_Authorities/" rel="noreferrer">one of these places</a> (I happened to use <a href="http://www.comodo.com" rel="noreferrer">Comodo</a>)</li>
<li><a href="http://nginx.org/en/linux_packages.html" rel="noreferrer">Installed nginx</a></li>
<li><p><a href="https://gist.github.com/gabrielhpugliese/5759232" rel="noreferrer">Changed the <code>location</code> in <code>/etc/nginx/conf.d/example_ssl.conf</code> to</a></p>
<pre class="lang-js prettyprint prettyprinted" style=""><code><span class="pln">location </span><span class="pun">/</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    proxy_pass http</span><span class="pun">:</span><span class="com">//localhost:3000;</span><span class="pln">
    proxy_set_header X</span><span class="pun">-</span><span class="typ">Real</span><span class="pun">-</span><span class="pln">IP $remote_addr</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre></li>
<li><p><a href="https://support.comodo.com/index.php?_m=knowledgebase&amp;_a=viewarticle&amp;kbarticleid=1365&amp;nav=0,1,95" rel="noreferrer">Formatted the cert for nginx by <code>cat</code>-ing the individual certs together</a> and linked to it in my nginx <code>example_ssl.conf</code> file (and uncommented stuff, got rid of 'example' in the name,...)</p>
<pre class="lang-js prettyprint prettyprinted" style=""><code><span class="pln">ssl_certificate </span><span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="pln">nginx</span><span class="pun">/</span><span class="pln">ssl</span><span class="pun">/</span><span class="pln">cert_bundle</span><span class="pun">.</span><span class="pln">cert</span><span class="pun">;</span><span class="pln">
ssl_certificate_key </span><span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="pln">nginx</span><span class="pun">/</span><span class="pln">ssl</span><span class="pun">/</span><span class="kwd">private</span><span class="pun">-</span><span class="pln">key</span><span class="pun">.</span><span class="pln">pem</span><span class="pun">;</span></code></pre></li>
</ul>
<p>Hopefully that can save someone else some headaches. I'm sure there's a pure-node way of doing this, but nginx was quick and it worked.</p>
</div></text><author><a href="/users/2669596/nick-benes">Nick Benes</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Does Linode provide some "front wall" or firewall where You must open port for machine? Maybe it will be good place to find better solution than routing on every machine? When I'm deploying server on Azure, I must define so called endpoints. Endpoint contains public port, private port (on machine) and protocol (TCP/UDP). So if You are running app on port 3000 on server, it is reachable on port 80 and routing is made by platform, not machine. I can also set ACLs on endpoints.</p>
</div></text><author><a href="/users/2864428/micha%c5%82-smereczy%c5%84ski">Micha≈Ç Smereczy≈Ñski</a></author><comments/></answer></answers></post>