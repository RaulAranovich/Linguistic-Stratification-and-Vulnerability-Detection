<?xml version="1.0" encoding="utf-8"?>
<post><title>javascript - CSRF protection with CORS Origin header vs. CSRF token - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>This question is about protecting against Cross Site Request Forgery attacks only.</p>
<p>It is specifically about: Is protection via the Origin header (CORS) as good as the protection via a CSRF token?</p>
<p>Example:</p>
<ul>
<li>Alice is logged in (using a cookie) with her browser to "<a href="https://example.com">https://example.com</a>". I assume, that she uses a modern browser.</li>
<li>Alice visits "<a href="https://evil.com">https://evil.com</a>", and evil.com's client side code performs some kind of request to "<a href="https://example.com">https://example.com</a>" (classic CSRF scenario).</li>
</ul>
<p>So:</p>
<ul>
<li>If we don't check the Origin header (server-side), and no CSRF token, we have a CSRF security hole.</li>
<li>If we check a CSRF token, we're safe (but it's a bit tedious).</li>
<li>If we do check the Origin header, the request from evil.com's client side code should be blocked just as well as it would when using a CSRF token - except, if it is possible somehow for evil.com's code to set the Origin header.</li>
</ul>
<p>I know, that this should not be possible with XHR (see e.g. <a href="http://stackoverflow.com/questions/13242049/security-for-cross-origin-resource-sharing">Security for cross-origin resource sharing</a>), at least not, if we trust the W3C spec to be implemented correctly in all modern browsers (can we?)</p>
<p>But what about other kinds of requests - e.g. form submit? Loading a script/img/... tag? Or any other way a page can use to (legally) create a request? Or maybe some known JS hack?</p>
<p>Note: I am not talking about</p>
<ul>
<li>native applications, </li>
<li>manipulated browsers, </li>
<li>cross site scripting bugs in example.com's page, </li>
<li>...</li>
</ul>
</div></text><author><a href="/users/291741/chris-lercher">Chris Lercher</a></author><comments><comment><text><span class="comment-copy">I believe many proxies strip the origin header.</span></text><author><a class="comment-user" href="/users/1903116/thefourtheye" title="129,213 reputation">thefourtheye</a></author></comment><comment><text><span class="comment-copy">And for form submit and img/script tags, we should rely on CSPs, not sure about the old browsers though.</span></text><author><a class="comment-user" href="/users/1903116/thefourtheye" title="129,213 reputation">thefourtheye</a></author></comment><comment><text><span class="comment-copy">@thefourtheye: Since the connection is initiated over TLS the user has a far more pressing issue than CSRF if a proxy can man-in-the-middle him/her.</span></text><author><a class="comment-user" href="/users/371137/perseids" title="5,020 reputation">Perseids</a></author></comment><comment><text><span class="comment-copy">It also can't hurt to use both.  They don't influence each other.</span></text><author><a class="comment-user" href="/users/916657/niklas-b" title="59,161 reputation">Niklas B.</a></author></comment><comment><text><span class="comment-copy">I believe this question belongs in <a href="http://security.stackexchange.com/">security.stackexchange.com</a></span></text><author><a class="comment-user" href="/users/1903116/thefourtheye" title="129,213 reputation">thefourtheye</a></author></comment><comment><text><span class="comment-copy">@thefourtheye, why would they strip <code>Origin</code>? That would negate CORS protection.</span></text><author><a class="comment-user" href="/users/1212596/paul-draper" title="30,541 reputation">Paul Draper</a></author></comment><comment><text><span class="comment-copy">I like this question and its answers because they are about something specific, but they also remind me of the difference between CSRF and CORS. (I admit those are <b>not easily confusable</b> concepts... But I still manage to confuse them.)</span></text><author><a class="comment-user" href="/users/1175496/the-red-pea" title="2,417 reputation">The Red Pea</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<blockquote>
<p>know, that this should not be possible with XHR (see e.g. Security for cross-origin resource sharing), at least not, if we trust the W3C spec to be implemented correctly in all modern browsers (can we?)</p>
</blockquote>
<p>At the end of the day you have to "trust" the client browser to safely store user's data and protect the client-side of the session. If you don't trust the client browser, then you should stop using the web at all for anything other than static content. Even with using CSRF tokens, you are trusting the client browser to correctly obey the <a href="https://www.w3.org/Security/wiki/Same_Origin_Policy">Same Origin Policy</a>.</p>
<p>While there have been previous browser vulnerabilities such as those in <a href="http://www.securityfocus.com/bid/3721/discuss">IE 5.5/6.0</a> where it has been possible for attackers to bypass the Same Origin Policy and execute attacks, you can typically expect these to be patched as soon as discovered and with most browsers automatically updating, this risk will be mostly mitigated.</p>
<blockquote>
<p>But what about other kinds of requests - e.g. form submit? Loading a script/img/... tag? Or any other way a page can use to (legally) create a request? Or maybe some known JS hack?</p>
</blockquote>
<p>The <code>Origin</code> header is normally only sent for XHR cross-domain requests. Image requests do not contain the header.</p>
<blockquote>
<p>Note: I am not talking about</p>
<ul>
<li><p>native applications,</p></li>
<li><p>manipulated browsers,</p></li>
<li><p>cross site scripting bugs in example.com's page,</p></li>
</ul>
</blockquote>
<p>I'm not sure whether this falls under manipulated browsers or not, but <a href="http://ha.ckers.org/blog/20060725/forging-http-request-headers-with-flash/">old versions of Flash</a> allowed arbitrary headers to be set which would enable an attacker to send a request with a spoofed <code>referer</code> header from the victim's machine in order to execute an attack.</p>
</div></text><author><a href="/users/413180/silverlightfox">SilverlightFox</a></author><comments><comment><text><span class="comment-copy">The Flash example is a good one - and maybe other plugins may have a similar vulnerability. I can (unfortunately) only protect Alice from CSRF, if she uses a modern browser etc, that's clear. But it is not unreasonable, that even as a security-aware user, she might have installed 3rd party plugins - especially when they are from large (trustworthy) companies. Even though they may write safe plugins, I'm not 100% convinced, if they also think about CSRF! So unless browser sandboxes restrict the plugins from violating SOP (do they maybe?), I'd rather recommend to stick with the CSRF token.</span></text><author><a class="comment-user owner" href="/users/291741/chris-lercher" title="27,957 reputation">Chris Lercher</a></author></comment><comment><text><span class="comment-copy">@ChrisLercher: Yes modern day plugins appear to be a bit more robust. However, at any moment a new version could be released that allows an attacker to leverage it in such a way to bypass browser protections. The best way to handle it (e.g. token/header) will depend on the sensitivity of your data and whether such a risk is acceptable. Flash does obey a SOP, but the origin of a Flash plugin is the site it was loaded from (rather than the calling site like JavaScript). There is a <code>crossdomain.xml</code> that can enable cross-domain communication.</span></text><author><a class="comment-user" href="/users/413180/silverlightfox" title="17,301 reputation">SilverlightFox</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Web content can't tamper with the Origin header. Furthermore, under the same origin policy, one origin can't even send custom headers to other origins. <a href="https://www.w3.org/Security/wiki/Same_Origin_Policy">[1]</a></p>
<p>Thus, checking the Origin header is just as good at <em>blocking attacks</em> as using a CSRF token.</p>
<p>The main concern with relying on this is whether it it lets all legitimate requests work. The asker knows about this issue, and has set up the question to rule out the major cases (no old browsers, HTTPS only).</p>
<p>Browser vendors follow these rules, but what about plugins? They might not, but the question disregards "manipulated browsers." What about bugs in the browser that let an attacker forge the Origin header? There can be bugs that allow the CSRF token to leak across origins too, so it would take more work to argue that one is better than the other.</p>
</div></text><author><a href="/users/1864688/guest">guest</a></author><comments><comment><text><span class="comment-copy">I've just tested Firefox 47 and it does not send an origin header for a cross-origin form post (a common way of attacking REST services that don't enable CORS for XHR), so I don't think an origin header check would be effective if the user is using Firefox.</span></text><author><a class="comment-user" href="/users/457392/andy" title="2,072 reputation">Andy</a></author></comment><comment><text><span class="comment-copy">For reference, the issue of Firefox not sending an "Origin" header is tracked at Bugzilla: <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=446344" rel="nofollow noreferrer">bugzilla.mozilla.org/show_bug.cgi?id=446344</a> You could fallback to checking the "Referer" header in this case but in my experience some Firefox users block the "Referer" header because of privacy concerns (although IMHO it would be enough to strip the path and query).</span></text><author><a class="comment-user" href="/users/444959/steffen" title="103 reputation">Steffen</a></author></comment></comments></answer></answers></post>