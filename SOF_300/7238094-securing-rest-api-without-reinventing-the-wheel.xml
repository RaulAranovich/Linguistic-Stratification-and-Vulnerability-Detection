<?xml version="1.0" encoding="utf-8"?>
<post><title>web services - Securing REST API without reinventing the wheel - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>When designing REST API is it common to authenticate a user first?</p>
<p>The typical use case I am looking for is:</p>
<ul>
<li>User wants to get data.  Sure cool we like to share! Get a public API key and read away!</li>
<li>User wants to store/update data... woah wait up! who are you, can you do this?</li>
</ul>
<p>I would like to build it once and allow say a web-app, an android application or an iPhone application to use it.</p>
<p>A REST API appears to be a logical choice with requirements like this</p>
<p>To illustrate my question I'll use a simple example.</p>
<p>I have an item in a database, which has a <strong>rating</strong> attribute (integer 1 to 5).</p>
<p>If I understand REST correctly I would implement a GET request using the language of my choice that returns csv, xml or json like this:</p>
<pre><code>http://example.com/product/getrating/{id}/
</code></pre>
<p>Say we pick JSON we return:</p>
<pre><code>{
  "id": "1",
  "name": "widget1",
  "attributes": { "rating": {"type":"int", "value":4} }
}
</code></pre>
<p>This is fine for public facing APIs. I get that part.</p>
<p>Where I have tons of question is how do I combine this with a security model? I'm used to web-app security where I have a session state identifying my user at all time so I can control what they can do no matter what they decide to send me.  As I understand it this isn't RESTful so would be a bad solution in this case.</p>
<p>I'll try to use another example using the same item/rating.</p>
<p>If user "JOE" wants to add a <strong>rating</strong> to an <strong>item</strong></p>
<p>This could be done using:</p>
<pre><code>http://example.com/product/addrating/{id}/{givenRating}/
</code></pre>
<p>At this point I want to store the data saying that "JOE" gave product {id} a rating of {givenRating}.</p>
<p>Question: How do I know the request came from "JOE" and not "BOB".</p>
<p>Furthermore, what if it was for more sensible data like a user's phone number?</p>
<p>What I've got so far is:</p>
<p>1) Use the built-in feature of HTTP to authenticate at every request, either plain HTTP or HTTPS.</p>
<p>This means that every request now take the form of:</p>
<pre><code>https://joe:joepassword@example.com/product/addrating/{id}/{givenRating}/
</code></pre>
<p>2) Use an approach like Amazon's S3 with private and public key: <a href="http://www.thebuzzmedia.com/designing-a-secure-rest-api-without-oauth-authentication/">http://www.thebuzzmedia.com/designing-a-secure-rest-api-without-oauth-authentication/</a></p>
<p>3) Use a cookie anyway and break the stateless part of REST.</p>
<p>The second approach appears better to me, but I am left wondering do I really have to re-invent this whole thing? Hashing, storing, generating the keys, etc all by myself? </p>
<p>This sounds a lot like using session in a typical web application and rewriting the entire stack yourself, which usually to me mean "You're doing it wrong" especially when dealing with security.</p>
<p>EDIT: I guess I should have mentioned OAuth as well.</p>
</div></text><author><a href="/users/70424/jfrobishow">jfrobishow</a></author><comments><comment><text><span class="comment-copy">If you're sending the username and password with every request, <b>use HTTPS</b>.</span></text><author><a class="comment-user" href="/users/139010/matt-ball" title="242,981 reputation">Matt Ball</a></author></comment><comment><text><span class="comment-copy">Nothing to do with security, but a RESTful API would not use <code>getrating</code> and <code>andrating</code>; it would just be <code>rating</code>, and you would GET, POST, PUT, or DELETE to that resource.</span></text><author><a class="comment-user" href="/users/204517/duncan" title="1,431 reputation">Duncan</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p><strong>Edit 5 years later</strong></p>
<p>Use OAuth2!</p>
<p><strong>Previous version</strong></p>
<p>No, there is absolutely no need to use a cookie. It's not half as secure as HTTP Digest, OAuth or Amazon's AWS (which is not hard to copy).</p>
<p>The way you should look at a cookie is that it's an authentication token as much as Basic/Digest/OAuth/whichever would be, but less appropriate.</p>
<p>However, I don't feel using a cookie goes against RESTful principles <em>per se</em>, as long as the contents of the session cookie does not influence the contents of the resource you're returning from the server.</p>
<p>Cookies are evil, stop using them.</p>
</div></text><author><a href="/users/80911/evert">Evert</a></author><comments><comment><text><span class="comment-copy">I don't find Amazon's way hard to copy per say... like I don't find writing JavaScript from scratch "hard", but jQuery sure help writing it well. Reading about it left me wondering isn't there a framework to abstract this?</span></text><author><a class="comment-user owner" href="/users/70424/jfrobishow" title="1,896 reputation">jfrobishow</a></author></comment><comment><text><span class="comment-copy">Google it. I wrote an implementation for AWS, but it's not complete I believe: <a href="http://code.google.com/p/sabredav/source/browse/lib/Sabre/HTTP/AWSAuth.php" rel="nofollow noreferrer">code.google.com/p/sabredav/source/browse/lib/Sabre/HTTP/â€¦</a></span></text><author><a class="comment-user" href="/users/80911/evert" title="29,350 reputation">Evert</a></author></comment><comment><text><span class="comment-copy">Sorry but the answer is not correct. Cookies and HTTP Digest are complementary but orthogonal - you can use the second to authenticate user and issue a cookie. Comparing to OAuth, cookie based security won't work when you have cross-domain services, or you are letting other untrusted people to write client to your service (3rd parties involved) and want to allow your users to revoke application access. But in other cases it works exactly like OAuth, you can think about a cookie as an OAuth access token, which by the way you need to store somewhere too.</span></text><author><a class="comment-user" href="/users/66591/zihotki" title="5,021 reputation">zihotki</a></author></comment><comment><text><span class="comment-copy">My answer was written before OAuth2, when every OAuth token would be a digest of a bunch of information related to the request. This is not true for a OAuth2 bearer, which indeed pretty much puts it on-par to a token in a Cookie.</span></text><author><a class="comment-user" href="/users/80911/evert" title="29,350 reputation">Evert</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Don't worry about being "RESTful", worry about security.  Here's how I do it:</p>
<p>Step 1: User hits authentication service with credentials.</p>
<p>Step 2: If credentials check out, return a fingerprint, session id, etc..., and pop them into shared memory for quick retrieval later or use a database if you don't mind adding a few milliseconds to your web service turnaround time.</p>
<p>Step 3: Add an entry point call to the top of every web service script that validates the fingerprint and session id for <em>every</em> web service request.</p>
<p>Step 4: If the fingerprint and session id aren't valid or have timed out redirect to authentication. </p>
<p>READ THIS:</p>
<p><a href="http://stackoverflow.com/questions/319530/restful-authentication">RESTful Authentication</a></p>
</div></text><author><a href="/users/905181/daniel-pereira">Daniel Pereira</a></author><comments><comment><text><span class="comment-copy">But then don't you force the user to login before accessing an API every single time the "session" expires? In case of a mobile device what do you do? Give them a permanent "key" so they don't have to login everytime they use the application use the API?</span></text><author><a class="comment-user owner" href="/users/70424/jfrobishow" title="1,896 reputation">jfrobishow</a></author></comment><comment><text><span class="comment-copy">I force them to log in.  It's either that or use a cookie, or map the fingerprint to their UDID, but the UDID thing means the user has to access the service from the same device.</span></text><author><a class="comment-user" href="/users/905181/daniel-pereira" title="1,666 reputation">Daniel Pereira</a></author></comment><comment><text><span class="comment-copy">Regarding step 3: this means that if I'm using an MVC framework that uses "Actions" inside "Controllers", I should put in every Action two extra parameters (fingerprint and sessionid)?</span></text><author><a class="comment-user" href="/users/1387588/sports" title="2,010 reputation">sports</a></author></comment><comment><text><span class="comment-copy">@sports Regarding adding functionality at the beginning of method calls: If you're using MVC/WebApi, intercept actions with OWIN.  If you want to allow anything through the endoint, but instead want to secure the domain logic, use AOP like PostSharp.  If you're rolling your own, just use Attributes and break a bunch of principles to put functionality in attributes on methods you want to secure.</span></text><author><a class="comment-user" href="/users/1831054/suamere" title="1,221 reputation">Suamere</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p><strong>Edit 3 years later</strong></p>
<p>I completely agree with Evert, use <a href="https://oauth.net/2/" rel="nofollow noreferrer">OAuth2</a> with HTTPS, and don't reinvent the wheel! :-) </p>
<p>By simpler REST APIs - not meant for 3rd party clients - <a href="https://jwt.io/" rel="nofollow noreferrer">JSON Web Tokens</a> can be good as well.</p>
<p><strong>Previous version</strong></p>
<blockquote>
<p>Use a cookie anyway and break the stateless part of REST.</p>
</blockquote>
<p>Don't use sessions, with sessions your REST service won't be well scalable... There are 2 states here: application state (or client state or session s) and resource state. Application state contains the session data and it is maintained by the REST client. Resource state contains the resource properties and relations and is maintained by the REST service. You can decide very easy whether a particular variable is part of the application state or the resource state. If the amount of data increases with the number of active sessions, then it belongs to the application state. So for example user identity by the current session belongs to the application state, but the list of the users or user permissions belongs to the resource state.</p>
<p>So the REST client should store the identification factors and send them with every request. Don't confuse the REST client with the HTTP client. They are not the same. REST client can be on the server side too if it uses curl, or it can create for example a server side http only cookie which it can share with the REST service via CORS. The only thing what matters that the REST service has to authenticate by every request, so you have to send the credentials (username, password) with every request.</p>
<ul>
<li>If you write a client side REST client, then this can be done with SSL + HTTP auth. In that case you can create a <code>credentials -&gt; (identity, permissions)</code> cache on the server to make authentication faster. Be aware of that if you clear that cache, and the users send the same request, they will get the same response, just it will take a bit longer. You can compare this with sessions: if you clear the session store, then users will get a <code>status: 401 unauthorized</code> response...</li>
<li>If you write a server side REST client and you send identification factors to the REST service via curl, then you have 2 choices. You can use http auth as well, or you can use a session manager in your REST client but not in the REST service. </li>
<li>If somebody untrusted writes your REST client, then you have to write an application to authenticate the users and to give them the availability to decide whether they want to grant permissions to different clients or not. Oauth is an already existing solution for that. Oauth1 is more secure, oauth2 is less secure but simpler, and I guess there are several other solution for this problem... You don't have to reinvent this. There are complete authentication and authorization solutions using oauth, for example: the <a href="http://wso2.com/products/identity-server/" rel="nofollow noreferrer">wso identity server</a>.</li>
</ul>
<p>Cookies are not necessarily bad. You can use them in a RESTful way until they hold client state and the service holds resource state only. For example you can store the cart or the preferred pagination settings in cookies...</p>
</div></text><author><a href="/users/607033/inf3rno">inf3rno</a></author><comments><comment><text><span class="comment-copy">How is that not on top of <code>Don't worry about being "RESTful", worry about security.</code> answer?</span></text><author><a class="comment-user" href="/users/1243382/dennis-braga" title="741 reputation">Dennis Braga</a></author></comment><comment><text><span class="comment-copy">It's too late, and I don't know what you are talking about, sorry. :D I'll read this post tomorrow, I don't remember on it...</span></text><author><a class="comment-user" href="/users/607033/inf3rno" title="11,594 reputation">inf3rno</a></author></comment><comment><text><span class="comment-copy">I managed to read the post again. Yepp, I think it's because my post has a 2 years delay compared to the post you mentioned. That's all, have a nice evening! :-)</span></text><author><a class="comment-user" href="/users/607033/inf3rno" title="11,594 reputation">inf3rno</a></author></comment><comment><text><span class="comment-copy">Just trying to understand more. What do you mean by 3rd party client? How's JWT unsafe for them? Thanks.</span></text><author><a class="comment-user" href="/users/410487/alvin-then" title="817 reputation">Alvin Then</a></author></comment></comments></answer></answers></post>