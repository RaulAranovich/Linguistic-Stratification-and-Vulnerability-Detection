<?xml version="1.0" encoding="utf-8"?>
<post><title>javascript - How does Content Security Policy work? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I'm getting a bunch of errors in the developer console:</p>
<blockquote>
<p>Refused to evaluate a string</p>
<p>Refused to execute inline script because it violates the following Content Security Policy directive</p>
<p>Refused to load the script</p>
<p>Refused to load the stylesheet</p>
</blockquote>
<p>What's this all about? How does Content Security Policy work? How do I use the <code>Content-Security-Policy</code> HTTP header?</p>
<p>Specifically, how to...</p>
<ol>
<li>...allow multiple sources?</li>
<li>...use different directives?</li>
<li>...use multiple directives?</li>
<li>...handle ports?</li>
<li>...handle different protocols?</li>
<li>...allow <code>file://</code> protocol?</li>
<li>...use inline styles, scripts, and tags <code>&lt;style&gt;</code> and <code>&lt;script&gt;</code>?</li>
<li>...allow <code>eval()</code>?</li>
</ol>
<p>And finally:</p>
<ol start="9">
<li>What exactly does <code>'self'</code> mean?</li>
</ol>
</div></text><author><a href="/users/3853934/micha%c5%82-per%c5%82akowski">Michał Perłakowski</a></author><comments><comment><text><span class="comment-copy"><a href="https://content-security-policy.com" rel="nofollow noreferrer">content-security-policy.com</a></span></text><author><a class="comment-user" href="/users/1197775/juanpastas" title="13,054 reputation">juanpastas</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>The <code>Content-Security-Policy</code> meta-tag allows you to reduce the risk of <a href="http://en.wikipedia.org/wiki/Cross-site_scripting" rel="noreferrer">XSS</a> attacks by allowing you to define where resources can be loaded from, preventing browsers from loading data from any other locations. This makes it harder for an attacker to inject malicious code to your site.</p>
<p>I banged my head against a brick wall trying to figure out why I was getting CSP errors one after another, and there didn't seem to be any concise, clear instructions on just how does it work. So here's my attempt at explaining <strong>some</strong> points of CSP briefly, mostly concentrating on the things I found hard to solve.</p>
<p>For brevity I won’t write the full tag in each sample. Instead I'll only show the <code>content</code> property, so a sample that says <code>content="default-src 'self'"</code> means this:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="tag">&lt;meta</span><span class="pln"> </span><span class="atn">http-equiv</span><span class="pun">=</span><span class="atv">"Content-Security-Policy"</span><span class="pln"> </span><span class="atn">content</span><span class="pun">=</span><span class="atv">"default-src 'self'"</span><span class="tag">&gt;</span></code></pre>
<p><strong>1. How to allow multiple sources?</strong></p>
<p>You can simply list your sources after a directive as a space separated list:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">content</span><span class="pun">=</span><span class="str">"default-src 'self' https://example.com/js/"</span></code></pre>
<p>Note that there are no quotes around parameters other than the <em>special</em> ones, like <code>'self'</code>. Also, there's no colon (<code>:</code>) after the directive. Just the directive, then a space separated list of parameters.</p>
<p>Everything below the specified parameters is implicitly allowed. That means that in the example above these would be valid sources:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">https</span><span class="pun">:</span><span class="com">//example.com/js/file.js</span><span class="pln">
https</span><span class="pun">:</span><span class="com">//example.com/js/subdir/anotherfile.js</span></code></pre>
<p>These however would not be valid:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">http</span><span class="pun">:</span><span class="com">//example.com/js/file.js</span><span class="pln">
</span><span class="pun">^^^^</span><span class="pln"> wrong protocol

https</span><span class="pun">:</span><span class="com">//example.com/file.js</span><span class="pln">
                   </span><span class="pun">^^</span><span class="pln"> above the specified path</span></code></pre>
<p><strong>2. How to use different directives, what do they each do?</strong></p>
<p>The most common directives are:</p>
<ul>
<li><code>default-src</code> the default policy for loading javascript, images, CSS, fonts, AJAX requests, etc</li>
<li><code>script-src</code> defines valid sources for javascript files</li>
<li><code>style-src</code> defines valid sources for css files</li>
<li><code>img-src</code> defines valid sources for images</li>
<li><code>connect-src</code> defines valid targets for to XMLHttpRequest (AJAX), WebSockets or EventSource. If a connection attempt is made to a host that's not allowed here, the browser will emulate a <code>400</code> error</li>
</ul>
<p>There are others, but these are the ones you're most likely to need.</p>
<p><strong>3. How to use multiple directives?</strong></p>
<p>You define all your directives inside one meta-tag by terminating them with a semicolon (<code>;</code>):</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">content</span><span class="pun">=</span><span class="str">"default-src 'self' https://example.com/js/; style-src 'self'"</span></code></pre>
<p><strong>4. How to handle ports?</strong></p>
<p>Everything but the default ports need to be allowed explicitly by adding the port number or an asterisk after the allowed domain:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">content</span><span class="pun">=</span><span class="str">"default-src 'self' https://ajax.googleapis.com http://example.com:123/free/stuff/"</span></code></pre>
<p>The above would result in:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">https</span><span class="pun">:</span><span class="com">//ajax.googleapis.com:123</span><span class="pln">
                           </span><span class="pun">^^^^</span><span class="pln"> </span><span class="typ">Not</span><span class="pln"> ok</span><span class="pun">,</span><span class="pln"> wrong port

https</span><span class="pun">:</span><span class="com">//ajax.googleapis.com - OK</span><span class="pln">

http</span><span class="pun">:</span><span class="com">//example.com/free/stuff/file.js</span><span class="pln">
                 </span><span class="pun">^^</span><span class="pln"> </span><span class="typ">Not</span><span class="pln"> ok</span><span class="pun">,</span><span class="pln"> only the port </span><span class="lit">123</span><span class="pln"> </span><span class="kwd">is</span><span class="pln"> allowed

http</span><span class="pun">:</span><span class="com">//example.com:123/free/stuff/file.js - OK</span></code></pre>
<p>As I mentioned, you can also use an asterisk to explicitly allow all ports:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">content</span><span class="pun">=</span><span class="str">"default-src example.com:*"</span></code></pre>
<p><strong>5. How to handle different protocols?</strong></p>
<p>By default, only standard protocols are allowed. For example to allow websockets <code>ws://</code> you will have to allow it explicitly:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">content</span><span class="pun">=</span><span class="str">"default-src 'self'; connect-src ws:; style-src 'self'"</span><span class="pln">
                                         </span><span class="pun">^^^</span><span class="pln"> websockets are now allowed on all domains </span><span class="kwd">and</span><span class="pln"> ports</span></code></pre>
<p><strong>6. How to allow the file protocol <code>file://</code>?</strong></p>
<p>If you'll try to define it as such it won’t work. Instead, you'll allow it with the <code>filesystem</code> parameter:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">content</span><span class="pun">=</span><span class="str">"default-src filesystem"</span></code></pre>
<p><strong>7. How to use inline scripts and style definitions?</strong></p>
<p>Unless explicitly allowed, you can't use inline style definitions, code inside <code>&lt;script&gt;</code> tags or in tag properties like <code>onclick</code>. You allow them like so:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">content</span><span class="pun">=</span><span class="str">"script-src 'unsafe-inline'; style-src 'unsafe-inline'"</span></code></pre>
<p>You'll also have to explicitly allow inline, base64 encoded images:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">content</span><span class="pun">=</span><span class="str">"img-src data:"</span></code></pre>
<p><strong>8. How to allow <code>eval()</code>?</strong></p>
<p>I'm sure many people would say that you don't, since 'eval is evil' and the most likely cause for the impending end of the world. Those people would be wrong. Sure, you can definitely punch major holes into your site's security with eval, but it has perfectly valid use cases. You just have to be smart about using it. You allow it like so:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">content</span><span class="pun">=</span><span class="str">"script-src 'unsafe-eval'"</span></code></pre>
<p><strong>9. What exactly does <code>'self'</code> mean?</strong></p>
<p>You might take <code>'self'</code> to mean localhost, local filesystem, or anything on the same host. It doesn't mean any of those. It means sources that have the same scheme (protocol), same host, and same port as the file the content policy is defined in. Serving your site over http? No https for you then, unless you define it explicitly.</p>
<p>I've used <code>'self'</code> in most examples as it usually makes sense to include it, but it's by no means mandatory. Leave it out if you don't need it.</p>
<p><strong>But hang on a minute!</strong> Can't I just use <code>content="default-src *"</code> and be done with it?</p>
<p>No. In addition to the obvious security vulnerabilities this would leave it also won’t work as you'd expect. Even though <a href="http://content-security-policy.com/" rel="noreferrer">some docs</a> claim it allows anything, that's not true. It doesn't allow inlining or evals, so to really, really make your site extra vulnerable, you would use this:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">content</span><span class="pun">=</span><span class="str">"default-src * 'unsafe-inline' 'unsafe-eval'"</span></code></pre>
<p>... but I trust you won’t.</p>
<p><strong>Further reading:</strong></p>
<p><a href="http://content-security-policy.com" rel="noreferrer">http://content-security-policy.com</a></p>
<p><a href="http://en.wikipedia.org/wiki/Content_Security_Policy" rel="noreferrer">http://en.wikipedia.org/wiki/Content_Security_Policy</a></p>
</div></text><author><a href="/users/1697755/schlaus">Schlaus</a></author><comments><comment><text><span class="comment-copy">Great post. One thing: it's not obvious what happens when multiple directives are specified; do the style-src settings in example 3 take precedence over default-src? etc...</span></text><author><a class="comment-user" href="/users/2059308/track0" title="108 reputation">track0</a></author></comment><comment><text><span class="comment-copy">So, to allow <i>everything  everything  everything</i> the content would be <code>default-src *; style-src * 'unsafe-inline'; script-src * 'unsafe-inline' 'unsafe-eval'; img-src * data: 'unsafe-inline'; connect-src * 'unsafe-inline'; frame-src *;</code></span></text><author><a class="comment-user" href="/users/503831/arnold-roa" title="2,113 reputation">Arnold Roa</a></author></comment><comment><text><span class="comment-copy">It's important to know that <code>content="default-src * 'unsafe-inline' 'unsafe-eval'"</code> is necessary to make some Angular applications work.</span></text><author><a class="comment-user" href="/users/1335233/flanger001" title="485 reputation">flanger001</a></author></comment><comment><text><span class="comment-copy">when i try to do <code>router.navigate()</code> in durandal it says navigation cancelled, what should i do it to allow every thing nothing works for me from your answers and comments ..</span></text><author><a class="comment-user" href="/users/1635676/touqeer-shafi" title="1,763 reputation">Touqeer Shafi</a></author></comment><comment><text><span class="comment-copy">Thanks Arnold! My app couldn't load images properly using the permissive policy in Schlaus' post. With your policy, they load correctly.</span></text><author><a class="comment-user" href="/users/1484617/reubend" title="160 reputation">Reubend</a></author></comment><comment><text><span class="comment-copy">Great answer, but I think that instead of HTML <code>meta</code> tag, you should use a HTTP header. Please update your answer. I already edited the question; I hope you don't mind. You can also add a link to this great article on <a href="http://www.html5rocks.com/en/tutorials/security/content-security-policy/" rel="nofollow noreferrer">HTML5 Rocks</a>.</span></text><author><a class="comment-user" href="/users/3853934/micha%c5%82-per%c5%82akowski" title="20,483 reputation">Michał Perłakowski</a></author></comment><comment><text><span class="comment-copy">@ArnoldRoa it does not accepts https src. Can anyone help please</span></text><author><a class="comment-user" href="/users/1530567/ashok-shah" title="475 reputation">Ashok Shah</a></author></comment><comment><text><span class="comment-copy">@AshokShah did you resolve this?  I'm having the same issue right now.  I go out fine in Ripple, but Google emulator or on phone - nothing.</span></text><author><a class="comment-user" href="/users/2171052/aaron" title="712 reputation">Aaron</a></author></comment><comment><text><span class="comment-copy">@ArnoldRoa yes use this code. &lt;meta http-equiv="Content-Security-Policy" content="default-src *; style-src * 'unsafe-inline'; script-src * 'unsafe-inline' 'unsafe-eval'; img-src * data: 'unsafe-inline'; connect-src * 'unsafe-inline'; frame-src *;"&gt;</span></text><author><a class="comment-user" href="/users/1530567/ashok-shah" title="475 reputation">Ashok Shah</a></author></comment><comment><text><span class="comment-copy">Is there some obscure reason why, even after adding all possible script-src values you can possible imagine, all my dynamically created onclick events are ignored? This is the case in WP8 compiled with Cordova.</span></text><author><a class="comment-user" href="/users/161293/alex" title="992 reputation">Alex</a></author></comment><comment><text><span class="comment-copy">@flanger001 For AngularJS apps, you can also use the <code>csp</code> directive, as described here: <a href="https://docs.angularjs.org/api/ng/directive/ngCsp" rel="nofollow noreferrer">docs.angularjs.org/api/ng/directive/ngCsp</a></span></text><author><a class="comment-user" href="/users/1371408/matty-j" title="2,371 reputation">Matty J</a></author></comment><comment><text><span class="comment-copy">Worth also noting that you can use <code>*</code> as a wildcard for (sub)domains - as documented with some good further information here: <a href="https://developer.mozilla.org/en/docs/Web/Security/CSP/CSP_policy_directives" rel="nofollow noreferrer">developer.mozilla.org/en/docs/Web/Security/CSP/…</a></span></text><author><a class="comment-user" href="/users/1371408/matty-j" title="2,371 reputation">Matty J</a></author></comment><comment><text><span class="comment-copy">I found that <code>file:</code> was required and that <code>filesystem</code> didn't work for supporting <code>file:///</code> resources</span></text><author><a class="comment-user" href="/users/1282237/andrewb" title="3,369 reputation">andrewb</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p><strong>APACHE2 MOD_HEADERS</strong></p>
<p>You could also enable Apache2 mod_headers, on Fedora it's already enabled by default, if you use Ubuntu/Debian enable it like this:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="com"># First enable headers module for Apache2, </span><span class="pln">
</span><span class="com"># then restart the Apache2 service   </span><span class="pln">
a2enmod headers
apache2 </span><span class="pun">-</span><span class="pln">k graceful</span></code></pre>
<p>On Ubuntu/Debian you can configure headers in the file
<code>/etc/apache2/conf-enabled/security.conf</code></p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="com">#</span><span class="pln">
</span><span class="com"># Setting this header will prevent MSIE from interpreting files as something</span><span class="pln">
</span><span class="com"># else than declared by the content type in the HTTP headers.</span><span class="pln">
</span><span class="com"># Requires mod_headers to be enabled.</span><span class="pln">
</span><span class="com"># </span><span class="pln">
</span><span class="com">#Header set X-Content-Type-Options: "nosniff"</span><span class="pln">

</span><span class="com">#</span><span class="pln">
</span><span class="com"># Setting this header will prevent other sites from embedding pages from this</span><span class="pln">
</span><span class="com"># site as frames. This defends against clickjacking attacks.</span><span class="pln">
</span><span class="com"># Requires mod_headers to be enabled.</span><span class="pln">
</span><span class="com">#</span><span class="pln">
</span><span class="typ">Header</span><span class="pln"> always </span><span class="kwd">set</span><span class="pln"> X</span><span class="pun">-</span><span class="typ">Frame</span><span class="pun">-</span><span class="typ">Options</span><span class="pun">:</span><span class="pln"> </span><span class="str">"sameorigin"</span><span class="pln">
</span><span class="typ">Header</span><span class="pln"> always </span><span class="kwd">set</span><span class="pln"> X</span><span class="pun">-</span><span class="typ">Content</span><span class="pun">-</span><span class="typ">Type</span><span class="pun">-</span><span class="typ">Options</span><span class="pln"> nosniff
</span><span class="typ">Header</span><span class="pln"> always </span><span class="kwd">set</span><span class="pln"> X</span><span class="pun">-</span><span class="pln">XSS</span><span class="pun">-</span><span class="typ">Protection</span><span class="pln"> </span><span class="str">"1; mode=block"</span><span class="pln">
</span><span class="typ">Header</span><span class="pln"> always </span><span class="kwd">set</span><span class="pln"> X</span><span class="pun">-</span><span class="typ">Permitted</span><span class="pun">-</span><span class="typ">Cross</span><span class="pun">-</span><span class="typ">Domain</span><span class="pun">-</span><span class="typ">Policies</span><span class="pln"> </span><span class="str">"master-only"</span><span class="pln">
</span><span class="typ">Header</span><span class="pln"> always </span><span class="kwd">set</span><span class="pln"> </span><span class="typ">Cache</span><span class="pun">-</span><span class="typ">Control</span><span class="pln"> </span><span class="str">"no-cache, no-store, must-revalidate"</span><span class="pln">
</span><span class="typ">Header</span><span class="pln"> always </span><span class="kwd">set</span><span class="pln"> </span><span class="typ">Pragma</span><span class="pln"> </span><span class="str">"no-cache"</span><span class="pln">
</span><span class="typ">Header</span><span class="pln"> always </span><span class="kwd">set</span><span class="pln"> </span><span class="typ">Expires</span><span class="pln"> </span><span class="str">"-1"</span><span class="pln">
</span><span class="typ">Header</span><span class="pln"> always </span><span class="kwd">set</span><span class="pln"> </span><span class="typ">Content</span><span class="pun">-</span><span class="typ">Security</span><span class="pun">-</span><span class="typ">Policy</span><span class="pun">:</span><span class="pln"> </span><span class="str">"default-src 'none';"</span><span class="pln">
</span><span class="typ">Header</span><span class="pln"> always </span><span class="kwd">set</span><span class="pln"> </span><span class="typ">Content</span><span class="pun">-</span><span class="typ">Security</span><span class="pun">-</span><span class="typ">Policy</span><span class="pun">:</span><span class="pln"> </span><span class="str">"script-src 'self' www.google-analytics.com adserver.example.com www.example.com;"</span><span class="pln">
</span><span class="typ">Header</span><span class="pln"> always </span><span class="kwd">set</span><span class="pln"> </span><span class="typ">Content</span><span class="pun">-</span><span class="typ">Security</span><span class="pun">-</span><span class="typ">Policy</span><span class="pun">:</span><span class="pln"> </span><span class="str">"style-src 'self' www.example.com;"</span></code></pre>
<p>Note: This is the bottom part of the file, only the last 3 entries are CSP settings.</p>
<p>The first parameter is the directive, the 2nd are the sources to be white-listed. I've added Google analytics and an adserver, which you might have. Furthermore I found that if you have aliases, e.g, www.example.com and example.com configured in Apache2 you should add them to the white-list as well.</p>
<p>Inline code is considered harmful, you should avoid it. Copy all the javascripts and css to separate files and add them to the white-list.</p>
<p>While you're at it you could take a look at the other header settings and install mod_security</p>
<p><strong>Further reading:</strong></p>
<p><a href="https://developers.google.com/web/fundamentals/security/csp/" rel="nofollow noreferrer">https://developers.google.com/web/fundamentals/security/csp/</a></p>
<p><a href="https://www.w3.org/TR/CSP/" rel="nofollow noreferrer">https://www.w3.org/TR/CSP/</a></p>
</div></text><author><a href="/users/6352715/erik-hendriks">Erik Hendriks</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>My solutions is Just add Metatag in header.Below i mention example</p>
<p>Note:Cannot load external js from other domain and cannot use inline script.</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">  </span><span class="tag">&lt;meta</span><span class="pln"> </span><span class="atn">http-equiv</span><span class="pun">=</span><span class="atv">"Content-Security-Policy"</span><span class="pln"> </span><span class="atn">content</span><span class="pun">=</span><span class="atv">"default-src http://192.168.0.155:83; child-src 'none'; object-src 'none'"</span><span class="tag">&gt;</span></code></pre>
</div></text><author><a href="/users/4318483/arunkumar-sekar">ArunKumar Sekar</a></author><comments/></answer></answers></post>