<?xml version="1.0" encoding="utf-8"?>
<post><title>security - Exploitable C# Functions - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>This question is similar to <a href="http://stackoverflow.com/questions/3115559/exploitable-php-functions/3697776#3697776">Exploitable PHP Functions</a>.</p>
<p>Tainted data comes from the user,  or more specifically an attacker.  When a tainted variable reaches a sink function,  then you have a vulnerability.  For instance a function that executes a sql query is a sink,  and GET/POST variables are sources of taint. </p>
<p>What are all of the sink functions in C#?  I am looking for functions that introduce a vulnerability or <a href="http://cwe.mitre.org/data/slices/2000.html" rel="noreferrer">software weakness</a>.  I am particularly interested in Remote Code Execution vulnerabilities.  Are there whole classes/libraries that contain nasty functionally that a hacker would like to influence?   How do people accidentally make dangerous C# code? </p>
</div></text><author><a href="/users/183528/rook">rook</a></author><comments><comment><text><span class="comment-copy">It's a little bit vague. A lot of the danger comes from applications running under full trust instead of a lower trust level; the lower the trust, the harder it gets to do something malicious.</span></text><author><a class="comment-user" href="/users/88558/lucero" title="48,096 reputation">Lucero</a></author></comment><comment><text><span class="comment-copy">@Lucero I liked the php question,  I think this applies to C# quite well.</span></text><author><a class="comment-user owner" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">wow, the software weakness link is a huuuuge page.</span></text><author><a class="comment-user" href="/users/463878/iwriteapps" title="475 reputation">IWriteApps</a></author></comment><comment><text><span class="comment-copy">@Gio yep took a while to put together ;)</span></text><author><a class="comment-user owner" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">What exactly do you expect here? A huge list of functions? I'm not sure how that is useful... Also, to be pedant, you are talking about the .Net <a href="http://en.wikipedia.org/wiki/Base_Class_Library" rel="nofollow noreferrer">Base Class Library</a>, or maybe Asp.Net, not C# functions (I'm not sure there <i>are</i> "C# functions").</span></text><author><a class="comment-user" href="/users/7586/kobi" title="91,718 reputation">Kobi</a></author></comment><comment><text><span class="comment-copy">@Kobi My post for PHP functions was pretty useful and more than just a dumb list.  There are families of functions, and unintended functionality.</span></text><author><a class="comment-user owner" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">To add to @Kobi's remarks, no answer below is in fact related to C# as a language. They apply to probably all .NET languages (VB, F#, etc.). You should widen the question to BCL or .NET IMHO.</span></text><author><a class="comment-user" href="/users/403671/simon-mourier" title="76,596 reputation">Simon Mourier</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>On the web based side of things, C# (and more generally, ASP.NET) is commonly vulnerable to the following (items listed by <a href="https://www.owasp.org/index.php/Top_10_2013-Top_10" rel="nofollow noreferrer">OWASP Top 10 2013</a>). I realise you were mainly interested in sink functions, of which I cover some, however you did ask how people accidentally make dangerous C# code so hopefully I've provided some insight here.</p>
<h1>A1-Injection</h1>
<h2>SQL Injection</h2>
<p>Generating queries by string concatenation.</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="kwd">var</span><span class="pln"> sql </span><span class="pun">=</span><span class="pln"> </span><span class="str">"SELECT * FROM UserAccount WHERE Username = '"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> username </span><span class="str">"'"</span><span class="pun">;</span><span class="pln">
</span><span class="typ">SqlCommand</span><span class="pln"> command </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SqlCommand</span><span class="pun">(</span><span class="pln">sql </span><span class="pun">,</span><span class="pln"> connection</span><span class="pun">);</span><span class="pln">
</span><span class="typ">SqlDataReader</span><span class="pln"> reader </span><span class="pun">=</span><span class="pln"> command</span><span class="pun">.</span><span class="typ">ExecuteReader</span><span class="pun">();</span></code></pre>
<p>This can often be solved by <a href="http://www.dotnetperls.com/sqlparameter" rel="nofollow noreferrer">parameterised queries</a>, but if you are using an <code>IN</code> condition it <a href="http://stackoverflow.com/a/303422/413180">currently isn't possible</a> without string concatenation.</p>
<h2>LDAP Injection</h2>
<p>Code such as</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="pln">searcher</span><span class="pun">.</span><span class="typ">Filter</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">.</span><span class="typ">Format</span><span class="pun">(</span><span class="str">"(sAMAccountName={1})"</span><span class="pun">,</span><span class="pln"> loginName</span><span class="pun">);</span></code></pre>
<p>can make the application vulnerable. More information <a href="http://blogs.msdn.com/b/securitytools/archive/2009/08/11/ldap-injection-and-mitigation.aspx" rel="nofollow noreferrer">here</a>.</p>
<h2>OS Command Injection</h2>
<p>This code is vulnerable to command injection because the second parameter to <code>Process.Start</code> can have extra commands passed to it using the <code>&amp;</code> character to batch multiple commands</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="kwd">string</span><span class="pln"> strCmdText</span><span class="pun">=</span><span class="pln"> </span><span class="str">@"/C dir c:\files\"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="typ">Request</span><span class="pun">.</span><span class="typ">QueryString</span><span class="pun">[</span><span class="str">"dir"</span><span class="pun">];</span><span class="pln">
</span><span class="typ">ProcessStartInfo</span><span class="pln"> info </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ProcessStartInfo</span><span class="pun">(</span><span class="str">"CMD.exe"</span><span class="pun">,</span><span class="pln"> strCmdText</span><span class="pun">);</span><span class="pln">
</span><span class="typ">Process</span><span class="pun">.</span><span class="typ">Start</span><span class="pun">(</span><span class="pln">info</span><span class="pun">);</span></code></pre>
<p>e.g. <code>foldername &amp;&amp; ipconfig</code></p>
<h1>A2-Broken Authentication and Session Management</h1>
<h2>Sign Out</h2>
<p>The default Forms Authentication <a href="http://msdn.microsoft.com/en-us/library/system.web.security.formsauthentication.signout.aspx" rel="nofollow noreferrer">SignOut</a> method does not update anything server side, allowing a captured auth token to be continued to be used.</p>
<blockquote>
<p>Calling the SignOut method only removes the forms authentication cookie. The Web server does not store valid and expired authentication tickets for later comparison. This makes your site vulnerable to a replay attack if a malicious user obtains a valid forms authentication cookie.</p>
</blockquote>
<h2>Using Session State for Authentication</h2>
<p>A <a href="https://www.owasp.org/index.php/Session_fixation" rel="nofollow noreferrer">session fixation</a> vulnerability could be present if a user has used <a href="http://stackoverflow.com/q/20755969/413180">session state for authentication</a>.</p>
<h1>A3-Cross-Site Scripting (XSS)</h1>
<p><code>Response.Write</code> (and the shortcut <code>&lt;%= =&gt;</code>) are vulnerable by default, unless the developer has remembered to HTML encode the output. The more recent shortcut <code>&lt;%:</code> HTML encodes by default, although some developers may use this to insert values into JavaScript where they can still be escaped by an attacker. Even using the modern <a href="http://razorengine.codeplex.com/" rel="nofollow noreferrer">Razor engine</a> it is difficult to get this right:</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="kwd">var</span><span class="pln"> name </span><span class="pun">=</span><span class="pln"> </span><span class="str">'@Html.Raw(HttpUtility.JavaScriptStringEncode(Model.Name))'</span><span class="pun">;</span></code></pre>
<p>ASP.NET by default enables <a href="http://msdn.microsoft.com/en-us/library/hh882339%28v=vs.110%29.aspx" rel="nofollow noreferrer">Request Validation</a>, which will block any input from cookies, the query string and from POST data that could potentially be malicious (e.g. HTML tags). This appears to cope well with input coming through the particular app, but if there is content in the database that is inserted from other sources like from an app written using other technologies, then it is possible that malicious script code could still be output. Another weakness is where data is inserted within an attribute value. e.g.</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="pun">&lt;%</span><span class="pln">
alt </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Request</span><span class="pun">.</span><span class="typ">QueryString</span><span class="pun">[</span><span class="str">"alt"</span><span class="pun">];</span><span class="pln">
</span><span class="pun">%&gt;</span><span class="pln">
</span><span class="pun">&lt;</span><span class="pln">img src</span><span class="pun">=</span><span class="str">"http://example.com/foo.jpg"</span><span class="pln"> alt</span><span class="pun">=</span><span class="str">"&lt;%=alt %&gt;"</span><span class="pln"> </span><span class="pun">/&gt;</span></code></pre>
<p>This can be exploited without triggering Request Validation:</p>
<p>If <code>alt</code> is</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="str">" onload="</span><span class="pln">alert</span><span class="pun">(</span><span class="str">'xss'</span><span class="pun">)</span></code></pre>
<p>then this renders</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="pun">&lt;</span><span class="pln">img src</span><span class="pun">=</span><span class="str">"http://example.com/foo.jpg"</span><span class="pln"> alt</span><span class="pun">=</span><span class="str">""</span><span class="pln"> onload</span><span class="pun">=</span><span class="str">"alert('xss')"</span><span class="pln"> </span><span class="pun">/&gt;</span></code></pre>
<p>In old versions of .NET it was a bit of a <a href="http://msdn.microsoft.com/en-us/magazine/hh708755.aspx" rel="nofollow noreferrer">mine-field</a> for a developer to ensure that their output was correctly encoded using some of the default web controls.</p>
<blockquote>
<p>Unfortunately, the data-binding syntax doesn’t yet contain a built-in encoding syntax; it’s coming in the next version of ASP.NET </p>
</blockquote>
<p>e.g. not vulnerable:</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="pln">  </span><span class="pun">&lt;</span><span class="pln">asp</span><span class="pun">:</span><span class="typ">Repeater</span><span class="pln"> ID</span><span class="pun">=</span><span class="str">"Repeater1"</span><span class="pln"> runat</span><span class="pun">=</span><span class="str">"server"</span><span class="pun">&gt;</span><span class="pln">
    </span><span class="pun">&lt;</span><span class="typ">ItemTemplate</span><span class="pun">&gt;</span><span class="pln">
      </span><span class="pun">&lt;</span><span class="pln">asp</span><span class="pun">:</span><span class="typ">TextBox</span><span class="pln"> ID</span><span class="pun">=</span><span class="str">"txtYourField"</span><span class="pln"> </span><span class="typ">Text</span><span class="pun">=</span><span class="str">'&lt;%# Bind("YourField") %&gt;'</span><span class="pln">
        runat</span><span class="pun">=</span><span class="str">"server"</span><span class="pun">&gt;&lt;/</span><span class="pln">asp</span><span class="pun">:</span><span class="typ">TextBox</span><span class="pun">&gt;</span><span class="pln">
    </span><span class="pun">&lt;/</span><span class="typ">ItemTemplate</span><span class="pun">&gt;</span><span class="pln">
  </span><span class="pun">&lt;/</span><span class="pln">asp</span><span class="pun">:</span><span class="typ">Repeater</span><span class="pun">&gt;</span></code></pre>
<p>vulnerable:</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="pun">&lt;</span><span class="pln">asp</span><span class="pun">:</span><span class="typ">Repeater</span><span class="pln"> ID</span><span class="pun">=</span><span class="str">"Repeater2"</span><span class="pln"> runat</span><span class="pun">=</span><span class="str">"server"</span><span class="pun">&gt;</span><span class="pln">
  </span><span class="pun">&lt;</span><span class="typ">ItemTemplate</span><span class="pun">&gt;</span><span class="pln">
    </span><span class="pun">&lt;%#</span><span class="pln"> </span><span class="typ">Eval</span><span class="pun">(</span><span class="str">"YourField"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">%&gt;</span><span class="pln">
  </span><span class="pun">&lt;/</span><span class="typ">ItemTemplate</span><span class="pun">&gt;</span><span class="pln">
</span><span class="pun">&lt;/</span><span class="pln">asp</span><span class="pun">:</span><span class="typ">Repeater</span><span class="pun">&gt;</span></code></pre>
<h1>A4-Insecure Direct Object References</h1>
<p>MVC model binding can allow <a href="http://carnal0wnage.attackresearch.com/2011/12/insecure-object-mapping.html" rel="nofollow noreferrer">parameters added to POST data</a> to be mapped onto the a data model. This can happen unintentionally as the developer hasn't realised that a malicious user may amend parameters in this way. The <code>Bind</code> attribute can be used to <a href="http://codetunnel.com/blog/post/aspnet-mvc-model-binding-security" rel="nofollow noreferrer">prevent this</a>.</p>
<h1>A5-Security Misconfiguration</h1>
<p>There are many configuration options that can weaken the security of an application. For example setting <code>customErrors</code> to <code>On</code> or enabling trace.</p>
<p>Scanners such as <a href="https://asafaweb.com/" rel="nofollow noreferrer">ASafaWeb</a> can check for this common misconfigurations.</p>
<h1>A6-Sensitive Data Exposure</h1>
<h2>Default Hashing</h2>
<p>The default password hashing methods in ASP.NET are sometimes not the best.</p>
<ul>
<li><a href="http://carson63000-tech.blogspot.co.uk/2010/08/dont-use-formsauthenticationhashpasswor_11.html" rel="nofollow noreferrer">HashPasswordForStoringInConfigFile()</a> - this could also be bad if it is used to hash a plain password with no added salt.</li>
<li>Article "<a href="http://www.troyhunt.com/2012/06/our-password-hashing-has-no-clothes.html" rel="nofollow noreferrer">Our password hashing has no clothes</a>" regarding the ASP.NET membership provider in .NET 4.</li>
</ul>
<h1>A7-Missing Function Level Access Control</h1>
<h2>Failure to Restrict URL Access</h2>
<p>In integrated pipeline mode .NET can see every request and handles can authorise each request, even to non .NET resources (e.g. <code>.js</code> and images). However, if the application i running in classic mode, .NET only sees requests to files such as <code>.aspx</code> so other files may be accidentally unsecured. See <a href="http://stackoverflow.com/q/716049/413180">this answer</a> for more detail on the differences.</p>
<p>e.g. <code>www.example.com/images/private_photograph_user1.jpg</code> is more likely to be vulnerable in an application that runs in classic mode, although there are <a href="http://www.microsoft.com/technet/prodtechnol/WindowsServer2003/Library/IIS/5c5ae5e0-f4f9-44b0-a743-f4c3a5ff68ec.mspx?mfr=true" rel="nofollow noreferrer">workarounds</a>.</p>
<h1>A8-Cross-Site Request Forgery (CSRF)</h1>
<p>Although the legacy web forms applications are usually more secure against CSRF due to requiring the attacker to forge the View State and <a href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.enableeventvalidation%28v=vs.110%29.aspx" rel="nofollow noreferrer">Event Validation</a> values, newer MVC applications could be vulnerable unless the developer has manually implemented <a href="http://blog.stevensanderson.com/2008/09/01/prevent-cross-site-request-forgery-csrf-using-aspnet-mvcs-antiforgerytoken-helper/" rel="nofollow noreferrer">anti forgery tokens</a>. Note I am not saying that web forms is not vulnerable, just that it is more difficult that simply passing on a few basic parameters - there are fixes though, such as <a href="http://software-security.sans.org/developer-how-to/developer-guide-csrf" rel="nofollow noreferrer">integrating the user key</a> into the View State value.</p>
<blockquote>
<p>When the EnableEventValidation property is set to true, ASP.NET validates that a control event originated from the user interface that was rendered by that control. A control registers its events during rendering and then validates the events during postback or callback handling. For example, if a list control includes options numbered 1, 2, or 3 when the page is rendered, and if a postback request is received specifying option number 4, ASP.NET raises an exception. All event-driven controls in ASP.NET use this feature by default.</p>
<p>[EnableEventValidation] feature reduces the risk of unauthorized or malicious postback requests and callbacks. It is strongly recommended that you do not disable event validation.</p>
</blockquote>
<h1>A10-Unvalidated - Redirects and Forwards</h1>
<p>Adding code such as</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="typ">Response</span><span class="pun">.</span><span class="typ">Redirect</span><span class="pun">(</span><span class="typ">Request</span><span class="pun">.</span><span class="typ">QueryString</span><span class="pun">[</span><span class="str">"Url"</span><span class="pun">]);</span></code></pre>
<p>will make your site vulnerable. The attack could be initiated by sending a phishing email to a user containing a link. If the user is vigilant they may have double checked the domain of the URL before clicking. However, as the domain will match your domain which the user trusts, they will click the link unaware that the page will redirect the user to the attacker's domain.</p>
<p>Validation should take place on <code>Url</code> to ensure that it is either a relative, allowed URL or an absolute URL to one of your own allowed domains and pages. You may want to check someone isn't redirecting your users to <code>/Logout.aspx</code> for example. Although there may be nothing stopping an attacker from directly linking to <code>http://www.example.com/Logout.aspx</code>, they could use the redirect to hide the URL so it is harder for a user to understand which page is being accessed (<code>http://www.example.com/Redirect.aspx?Url=%2f%4c%6f%67%6f%75%74%2e%61%73%70%78</code>).</p>
<h1>Others</h1>
<p>The other OWASP categories are:</p>
<ul>
<li>A9-Using Components with Known Vulnerabilities </li>
</ul>
<p>of which I can't think of any to mind that are specific to C#/ASP.NET. I'll update my answer if I think of any (if you think they are relevant to your question).</p>
</div></text><author><a href="/users/413180/silverlightfox">SilverlightFox</a></author><comments><comment><text><span class="comment-copy">I should have read this more carefully.</span></text><author><a class="comment-user owner" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">@rook Me too. This guy is awesome.And I mean it.</span></text><author><a class="comment-user" href="/users/859154/royi" title="61,237 reputation">Royi</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Anything that uses regular expressions (particularly the RegularExpressionValidator).  To see this, run a RegularExpressionValidator with the regex <code>^(\d+)+$</code> and give it 30 digits and an alpha character to validate against.  </p>
<p>Some posts: </p>
<ul>
<li><a href="http://msdn.microsoft.com/en-us/magazine/ff646973.aspx" rel="noreferrer">http://msdn.microsoft.com/en-us/magazine/ff646973.aspx</a></li>
<li><a href="http://www.abemiester.com/abemiester/post/RegEx-DOS-attack-Regular-Expressions-Now-you-have-3-problems.aspx" rel="noreferrer">http://www.abemiester.com/abemiester/post/RegEx-DOS-attack-Regular-Expressions-Now-you-have-3-problems.aspx</a> (this is a blog post from my own blog going into more detail about the MSDN article).</li>
</ul>
<p>This is called a Regular Expression Denial of Service attack and it can bring a website to its knees.</p>
</div></text><author><a href="/users/226897/abe-miessler">Abe Miessler</a></author><comments><comment><text><span class="comment-copy">Oh, that's a good one.  And applies to any language with regex support.</span></text><author><a class="comment-user" href="/users/390278/jeff-mercado" title="74,382 reputation">Jeff Mercado</a></author></comment><comment><text><span class="comment-copy">Interesting oddity,  but this is a far reach from the complete answer.</span></text><author><a class="comment-user owner" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">All regular expressions won't cause such problems. This one is particularly crafted to have this kind of problem.</span></text><author><a class="comment-user" href="/users/267/lasse-v-karlsen" title="238,252 reputation">Lasse V. Karlsen</a></author></comment><comment><text><span class="comment-copy">I'm aware of that.  Did you look at either of the links I posted?</span></text><author><a class="comment-user" href="/users/226897/abe-miessler" title="46,581 reputation">Abe Miessler</a></author></comment><comment><text><span class="comment-copy">Yes, I did, and I fully agree. If you use regular expressions that you haven't vetted, and you know <i>a lot</i> about regular expressions, you're opening up all sorts of cans of worms.</span></text><author><a class="comment-user" href="/users/267/lasse-v-karlsen" title="238,252 reputation">Lasse V. Karlsen</a></author></comment><comment><text><span class="comment-copy">By using a smart algorithm and removing  support for some exotic features, regex can be done safely. Examples: TRE, Google's RE2.</span></text><author><a class="comment-user" href="/users/298656/jilles" title="6,382 reputation">jilles</a></author></comment><comment><text><span class="comment-copy">Regex can be done safely with out that.  You just need to write it in a safe way.</span></text><author><a class="comment-user" href="/users/226897/abe-miessler" title="46,581 reputation">Abe Miessler</a></author></comment><comment><text><span class="comment-copy">is that a specific problem with the MS regex implementation? it did not take that long with a simple grep on the command line: $ time echo "123456789012345678901234567890" | grep "\([0-9]\+\)\+" 123456789012345678901234567890  real    0m0.007s user    0m0.020s sys     0m0.010s</span></text><author><a class="comment-user" href="/users/44434/lothar" title="15,412 reputation">lothar</a></author></comment><comment><text><span class="comment-copy">No its not specific to .NET regex. Try adding a "z" to the end of your string of numbers. Only languages that use an NFA regex engine are vulnerable.</span></text><author><a class="comment-user" href="/users/226897/abe-miessler" title="46,581 reputation">Abe Miessler</a></author></comment><comment><text><span class="comment-copy">As a side note: .NET 4.5 has the option of limiting the execution time of a regular expression. Use the constructor with the TimeSpan. <a href="http://msdn.microsoft.com/en-us/library/hh160196%28v=vs.110%29.aspx" rel="nofollow noreferrer">msdn.microsoft.com/en-us/library/hh160196(v=vs.110).aspx</a></span></text><author><a class="comment-user" href="/users/446261/pieter-van-ginkel" title="22,384 reputation">Pieter van Ginkel</a></author></comment><comment><text><span class="comment-copy">Just a note about the cause of this. This is not a problem with NFA regex engines--it is a problem with <a href="http://swtch.com/%7Ersc/regexp/regexp1.html" rel="nofollow noreferrer">backtracking</a>. An example of a non-backtracking NFA is the <a href="http://en.wikipedia.org/wiki/Thompson%27s_construction_algorithm" rel="nofollow noreferrer">Thompson NFA</a>, commonly used in implementations of ed, grep, awk, and sed.</span></text><author><a class="comment-user" href="/users/1257631/laindir" title="1,099 reputation">laindir</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p><a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.process.start.aspx" rel="noreferrer"><code>Process.Start</code></a> is the first one to come to mind.</p>
<p>I am sure that <a href="http://msdn.microsoft.com/en-us/library/system.security.principal.windowsidentity.aspx" rel="noreferrer"><code>WindowsIdentity</code></a> and much of <a href="http://msdn.microsoft.com/en-us/library/gg145025.aspx" rel="noreferrer"><code>System.Security</code></a> can also be used for evil.</p>
<p>Of course, there are SQL injection attacks, but I don't think that's what you mean (though remote execution can occur through SQL Server).</p>
</div></text><author><a href="/users/1583/oded">Oded</a></author><comments><comment><text><span class="comment-copy">Things like connection strings that have a username and password for SQL are a bit dodgy, when you use static strings they are typically found in decompilers, so its always best not to use them if they contain private information.</span></text><author><a class="comment-user" href="/users/437759/kyndigs" title="2,640 reputation">kyndigs</a></author></comment><comment><text><span class="comment-copy">Please describe the problems with WindowsIdentity</span></text><author><a class="comment-user" href="/users/70386/jgauffin" title="71,979 reputation">jgauffin</a></author></comment><comment><text><span class="comment-copy">Whereas I prefer connectionstring with usernames and password, but then tightly control the database permissions so that the username and password cant do anything I didnt explicitly give it permission to do on a case by case basis.</span></text><author><a class="comment-user" href="/users/80164/goblyn27" title="1,547 reputation">Goblyn27</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Aside from the obvious <code>Process.Start()</code> already mentioned, I can see a couple of ways of potential indirect exploitation.</p>
<ul>
<li>WinAPI calls via PInvoke to <code>CreateProcess()</code> and whatnot.</li>
<li>Any sort of dynamic assembly loading mechanism using <code>Assembly.Load()</code> and other such overloads.  If a compromised assembly made it to the system and loaded.</li>
<li>If running in full trust in general.</li>
<li>With the right permissions, any registry operations could put you at risk.</li>
</ul>
<p>That's all that comes to mind right now.</p>
</div></text><author><a href="/users/390278/jeff-mercado">Jeff Mercado</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>IMO: The nr 1 exploitable functions, are innocent looking, but very dangerously when used without thought.</p>
<p>In ASP.Net <code>Response.Write</code> or the shortcut:</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="pln">  </span><span class="pun">&lt;%=</span><span class="pln"> searchTermFromUser </span><span class="pun">%&gt;</span></code></pre>
<p>In ADO.Net:</p>
<ul>
<li>The <code>string</code> <code>+</code> operator:<br/>
<code>var sql = "SELECT * FROM table WHERE name = '" + searchTermFromUser + "'"</code></li>
</ul>
</div></text><author><a href="/users/11492/gvs">GvS</a></author><comments><comment><text><span class="comment-copy">Never ever do SQL statements like that. Use Command.AddParameter and parameter names in queries.</span></text><author><a class="comment-user" href="/users/70386/jgauffin" title="71,979 reputation">jgauffin</a></author></comment><comment><text><span class="comment-copy">Yes, that's what I mean. These are examples of exploitable code.</span></text><author><a class="comment-user" href="/users/11492/gvs" title="39,836 reputation">GvS</a></author></comment><comment><text><span class="comment-copy">What's wrong with response.write for the website using that ?</span></text><author><a class="comment-user" href="/users/313421/xaqron" title="9,850 reputation">Xaqron</a></author></comment><comment><text><span class="comment-copy">@Xaqron: Because it is common to forget HtmlEncode</span></text><author><a class="comment-user" href="/users/11492/gvs" title="39,836 reputation">GvS</a></author></comment><comment><text><span class="comment-copy">@Xaqron: that is one path to allow [cross site scripting ](<a href="http://en.wikipedia.org/wiki/Cross-site_scripting" rel="nofollow noreferrer">en.wikipedia.org/wiki/Cross-site_scripting</a>)</span></text><author><a class="comment-user" href="/users/255257/jachguate" title="14,529 reputation">jachguate</a></author></comment><comment><text><span class="comment-copy">It's more clear to write Response.Write(UserData)</span></text><author><a class="comment-user" href="/users/313421/xaqron" title="9,850 reputation">Xaqron</a></author></comment><comment><text><span class="comment-copy">@Xaqron: That would be equally wrong.</span></text><author><a class="comment-user" href="/users/103167/ben-voigt" title="212,096 reputation">Ben Voigt</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Any piece of data you get from the user (or any other external source) and pass to another system or another user is a potential exploit.</p>
<p>If you get a string from the user and display it to another user without using HtmlEncode it's a potential exploit.</p>
<p>If you get a string from the user and use it to construct SQL it's a potential SQL injection.</p>
<p>If you get a string from the user and use it to contract a file name for Process.Start or Assembly.Load it's a remote execution vulnerability</p>
<p>You get the point, the danger comes from using unsanitized data, if you never pass user input to external system without sanitizing it (example: HtmlEncode) or using injection-safe interfaces (example: SQL parameters) you are relatively safe - the minute you forget to sanitize something the most innocent-looking method can become a security vulnerability.</p>
<p>Note: cookies, html headers and anything else that passes over a network is also data from the user, in most cases even data in your database is data from the user.</p>
</div></text><author><a href="/users/3509/nir">Nir</a></author><comments><comment><text><span class="comment-copy">Yes data from the user is called tainted data.  When tainted data reaches a "sink" function,  then you have a vulnerability.  Look at the list of PHP sink functions i posted at the top.</span></text><author><a class="comment-user owner" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">@Rook - You can't possibly list all the "sink" functions, any code that is not explicitly designed to deal with possibly malicious data is a sink function - also, any code that is designed to deal with malicious data in a diffract context that you use it is a sink function (example: XmlDocument.Load is designed to detect and reject malformed or malicious XML, but if you let the user control the file you load it can be used to load your configuration files and create a really bad information disclosure vulnerability)</span></text><author><a class="comment-user" href="/users/3509/nir" title="23,033 reputation">Nir</a></author></comment><comment><text><span class="comment-copy">did you see my PHP link at the top?  Or have you come across static analysis tools like RATS (<a href="https://www.fortify.com/ssa-elements/threat-intelligence/rats.html" rel="nofollow noreferrer">fortify.com/ssa-elements/threat-intelligence/rats.html</a>)</span></text><author><a class="comment-user owner" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Plenty of things in the  System.Net, System.XML, System.IO, (anything that takes a URI and/or file path and actually deals with the resource they identify) System.Reflection, System.Security, System.Web, System.Data and System.Threading namespaces can be dangerous, as in they can be used to do bad things that go further than just messing up the current execution. So much that it would be time consuming to try to identify each.</p>
<p>Of course, every method in all third party assemblies will have to assumed to be dangerous until shown otherwise. More time consuming again.</p>
<p>Nor do I think it's a particularly fruitful approach. Producing a checklist of functions only really works with a limited library, or with a large-language where a lot of what would be in a library with a language like C# is in the language itself.</p>
<p>There are some classically dangerous examples like <code>Process.Start()</code> or anything that executes another process directly, but they are balanced by being quite obviously dangerous. Even a relatively foolhardy and incompetent coder may take care when they use that, while leaving data that goes to other methods unsanitised.</p>
<p>That sanitation of data is a more fruitful thing to look at than any list of functions. Is data validated to remove obviously incorrect input (which may be due to an attack, or may simply be a mistake) and is it encoded and escaped in the appropriate way for a given layer (there is too much talk about "dangerous" character sequences, <code>'</code> never hurt anyone, it's <code>'</code> not correctly escaped for SQL, that can hurt when it is indeed at a SQL layer - the job required to make sure the data gets in there correctly is the same as that to avoid exploits). Are the layers at which communication with something outside of the code solid. Are URIs constructed using unexamined input, for example - if not you can turn some of the more commonly used System.Net and System.XML methods into holes.</p>
</div></text><author><a href="/users/400547/jon-hanna">Jon Hanna</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Using any type of unsafe code can cause problems such as pointers. Microsoft provided a good article about unsafe code here: <a href="http://msdn.microsoft.com/en-us/library/aa288474%28VS.71%29.aspx">http://msdn.microsoft.com/en-us/library/aa288474(VS.71).aspx</a></p>
</div></text><author><a href="/users/437759/kyndigs">kyndigs</a></author><comments><comment><text><span class="comment-copy">"Problems such as pointers"</span></text><author><a class="comment-user" href="/users/242520/ta-speot-is" title="20,919 reputation">ta.speot.is</a></author></comment><comment><text><span class="comment-copy">-1 for qualifying pointers as problems... what kind of problem they are?</span></text><author><a class="comment-user" href="/users/255257/jachguate" title="14,529 reputation">jachguate</a></author></comment><comment><text><span class="comment-copy">They are unsafe, pretty obvious if used incorrectly they can be exploited hence they can be a problem, doesnt take einstein to figure that one out does it?</span></text><author><a class="comment-user" href="/users/437759/kyndigs" title="2,640 reputation">kyndigs</a></author></comment><comment><text><span class="comment-copy"><i>if used incorrectly</i>.  Your car is unsafe <i>if used incorrectly</i>, a kitchen knife is unsafe <i>if used incorrectly</i>, but they are not inherently unsafe for someone who knows what are doing and how to properly use them.</span></text><author><a class="comment-user" href="/users/255257/jachguate" title="14,529 reputation">jachguate</a></author></comment><comment><text><span class="comment-copy">Which is exactly why I said "can cause" in my post... I didnt say "will cause".</span></text><author><a class="comment-user" href="/users/437759/kyndigs" title="2,640 reputation">kyndigs</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Reflection.Emit and CodeDom</p>
<p><strong>Edit</strong>: </p>
<p>Allowing plugins or third party libraries that uses threading can bring your whole application down unless you load those libraries/plugins in a separate appdomain.</p>
</div></text><author><a href="/users/70386/jgauffin">jgauffin</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Probably half the framework contains very scary functions. I myself think that <code>File.WriteAllText()</code> is very scary since it can overwrite any file the current user has access to.</p>
<p>A different approach to this question would be how you can manage security. The article at <a href="http://ondotnet.com/pub/a/dotnet/2003/02/18/permissions.html" rel="noreferrer">http://ondotnet.com/pub/a/dotnet/2003/02/18/permissions.html</a> contains a basic description concerning the .NET security system, with the <a href="http://msdn.microsoft.com/en-us/library/24ed02w7%28v=VS.100%29.aspx" rel="noreferrer">System.Security.Permissions</a> namespace containing all permissions .NET makes available. You can also take a look at <a href="http://msdn.microsoft.com/en-us/library/5ba4k1c5.aspx" rel="noreferrer">http://msdn.microsoft.com/en-us/library/5ba4k1c5.aspx</a> for more information.</p>
<p>In short, .NET allows you to limit the permissions a process can have, for example denying methods that change data on disk. You can then check these permissions and act on whether the process has them or not.</p>
</div></text><author><a href="/users/446261/pieter-van-ginkel">Pieter van Ginkel</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>even a simple string comparison can be an issue. </p>
<blockquote>
<p>If an application makes a trust
  decision based on the results of this
  String.Compare operation, the result
  of that decision could be subverted by
  changing the CurrentCulture</p>
</blockquote>
<p>Take a look at the <a href="http://msdn.microsoft.com/en-us/library/5bz7d2f8%28VS.71%29.aspx" rel="noreferrer">example</a>. Fairly easy to miss</p>
</div></text><author><a href="/users/472232/jasper">jasper</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I've seen code where the user could set the name and parameters for a function call in a database. The system would then execute the named function through Reflection without checking anything ... </p>
</div></text><author><a href="/users/43565/bigblackdog">BigBlackDog</a></author><comments/></answer></answers></post>