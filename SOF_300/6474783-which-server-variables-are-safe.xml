<?xml version="1.0" encoding="utf-8"?>
<post><title>php - Which $_SERVER variables are safe? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>Any variable that a user can control,  an attacker can also control and is therefore a source of an attack.  This is called a "tainted" variable, and is unsafe. </p>
<p>When using <a href="http://php.net/manual/en/reserved.variables.server.php" rel="noreferrer"><code>$_SERVER</code></a>, many of the variables can be controlled. <code>PHP_SELF</code>, <code>HTTP_USER_AGENT</code>, <code>HTTP_X_FORWARDED_FOR</code>, <code>HTTP_ACCEPT_LANGUAGE</code> and many others are a part of the HTTP request header sent by the client.</p>
<p>Does anyone know of a "safe list"  or untainted list of <code>$_SERVER</code> variables?</p>
</div></text><author><a href="/users/11410/benjol">Benjol</a></author><comments><comment><text><span class="comment-copy">Depends on how you define "safe". The values are all <i>safe</i> as they are, it only depends what you use them for.</span></text><author><a class="comment-user" href="/users/476/deceze" title="324,016 reputation">deceze<span class="mod-flair" title="moderator">♦</span></a></author></comment><comment><text><span class="comment-copy">I think in this context, Rook is saying "Which server variables can't be spoofed by the user", such as <code>REMOTE_ADDR</code>.</span></text><author><a class="comment-user" href="/users/492405/vcsjones" title="85,811 reputation">vcsjones</a></author></comment><comment><text><span class="comment-copy">Anything prefaced with <code>HTTP_</code> is a request header and can be set by the browser or proxy in between. I would consider those as any other user input.</span></text><author><a class="comment-user" href="/users/790224/datasage" title="14,976 reputation">datasage</a></author></comment><comment><text><span class="comment-copy">@deceze i have updated my post.</span></text><author><a class="comment-user owner" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">@vcsjones: <code>REMOTE_ADDR</code> can be spoofed, hijacked, or can be meaningless if client used a proxy.</span></text><author><a class="comment-user" href="/users/352583/bob-the-destroyer" title="2,473 reputation">bob-the-destroyer</a></author></comment><comment><text><span class="comment-copy">@bob-the-destroyer  REMOTE_ADDR is pulled directly from apache's TCP socket,  this value <b>cannot be spoofed</b> over the Internet because of the three way handshake.</span></text><author><a class="comment-user owner" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">@Rook: good point.  I guess with the mention of "spoofing", I was more leaning towards the old act of ip spoofing itself, rather than any sort of faking the actual value of <code>REMOTE_ADDR</code>.  And that would be out of the scope of this question.  Good to get some insight into how this value is set though, so thanks.</span></text><author><a class="comment-user" href="/users/352583/bob-the-destroyer" title="2,473 reputation">bob-the-destroyer</a></author></comment><comment><text><span class="comment-copy">@Rook, That depends on your SAPI. <a href="http://php.net/manual/en/reserved.variables.server.php" rel="nofollow noreferrer">There is no guarantee</a> that every web server will provide any of the stuff in <code>$_SERVER</code>, or even the "correct" values.</span></text><author><a class="comment-user" href="/users/632951/pacerier" title="33,795 reputation">Pacerier</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>There's no such thing as "safe" or "unsafe" values as such. There are only values that the server controls and values that the user controls and you need to be aware of where a value comes from and hence whether it can be trusted for a certain purpose. <code>$_SERVER['HTTP_FOOBAR']</code> for example is entirely safe to store in a database, but I most certainly wouldn't <code>eval</code> it.</p>
<p>As such, let's divide those values into three categories:</p>
<h2>Server controlled</h2>
<p>These variables are set by the server environment and depend entirely on the server configuration.</p>
<ul>
<li><code>'GATEWAY_INTERFACE'</code></li>
<li><code>'SERVER_ADDR'</code></li>
<li><code>'SERVER_SOFTWARE'</code></li>
<li><code>'DOCUMENT_ROOT'</code></li>
<li><code>'SERVER_ADMIN'</code></li>
<li><code>'SERVER_SIGNATURE'</code></li>
</ul>
<h2>Partly server controlled</h2>
<p>These variables depend on the specific request the client sent, but can only take a limited number of valid values, since all invalid values should be rejected by the web server and not cause the invocation of the script to begin with. Hence they can be considered <em>reliable</em>.</p>
<ul>
<li><code>'HTTPS'</code></li>
<li><code>'REQUEST_TIME'</code></li>
<li><code>'REMOTE_ADDR'</code> *</li>
<li><code>'REMOTE_HOST'</code> *</li>
<li><code>'REMOTE_PORT'</code> *</li>
<li><code>'SERVER_PROTOCOL'</code></li>
<li><code>'HTTP_HOST'</code> †</li>
<li><code>'SERVER_NAME'</code> †</li>
<li><code>'SCRIPT_FILENAME'</code></li>
<li><code>'SERVER_PORT'</code> ‡</li>
<li><code>'SCRIPT_NAME'</code></li>
</ul>
<p>* The <code>REMOTE_</code> values are guaranteed to be the valid address of the client, as verified by a TCP/IP handshake. This is the address where any response will be sent to. <code>REMOTE_HOST</code> relies on reverse DNS lookups though and may hence be spoofed by DNS attacks against your server (in which case you have bigger problems anyway). This value may be a proxy, which is a simple reality of the TCP/IP protocol and nothing you can do anything about.</p>
<p>† If your web server responds to <em>any</em> request regardless of <code>HOST</code> header, this should be considered unsafe as well. See <a href="http://stackoverflow.com/a/10350718/476">How safe is $_SERVER[“HTTP_HOST”]?</a>.<br/>
Also see <a href="http://shiflett.org/blog/2006/mar/server-name-versus-http-host">http://shiflett.org/blog/2006/mar/server-name-versus-http-host</a>.</p>
<p>‡ See <a href="https://bugs.php.net/bug.php?id=64457">https://bugs.php.net/bug.php?id=64457</a>, <a href="http://httpd.apache.org/docs/current/mod/core.html#usecanonicalphysicalport">http://httpd.apache.org/docs/current/mod/core.html#usecanonicalphysicalport</a>, <a href="http://httpd.apache.org/docs/2.4/mod/core.html#comment_999">http://httpd.apache.org/docs/2.4/mod/core.html#comment_999</a></p>
<h2>Entirely arbitrary user controlled values</h2>
<p>These values are not checked at all and do not depend on any server configuration, they are entirely arbitrary information sent by the client.</p>
<ul>
<li><code>'argv'</code>, <code>'argc'</code> (only applicable to CLI invocation, not usually a concern for web servers)</li>
<li><code>'REQUEST_METHOD'</code> §</li>
<li><code>'QUERY_STRING'</code></li>
<li><code>'HTTP_ACCEPT'</code></li>
<li><code>'HTTP_ACCEPT_CHARSET'</code></li>
<li><code>'HTTP_ACCEPT_ENCODING'</code></li>
<li><code>'HTTP_ACCEPT_LANGUAGE'</code></li>
<li><code>'HTTP_CONNECTION'</code></li>
<li><code>'HTTP_REFERER'</code></li>
<li><code>'HTTP_USER_AGENT'</code></li>
<li><code>'AUTH_TYPE'</code> ‖</li>
<li><code>'PHP_AUTH_DIGEST'</code> ‖</li>
<li><code>'PHP_AUTH_USER'</code> ‖</li>
<li><code>'PHP_AUTH_PW'</code> ‖</li>
<li><code>'PATH_INFO'</code></li>
<li><code>'ORIG_PATH_INFO'</code></li>
<li><code>'REQUEST_URI'</code> (may contain tainted data)</li>
<li><code>'PHP_SELF'</code> (may contain tainted data)</li>
<li><code>'PATH_TRANSLATED'</code> </li>
<li>any other <code>'HTTP_'</code> value</li>
</ul>
<p>§ May be considered <em>reliable</em> as long as the web server allows only certain request methods.</p>
<p>‖ May be considered <em>reliable</em> if authentication is handled entirely by the web server.</p>
<p>The superglobal <code>$_SERVER</code> also includes several environment variables. Whether these are "safe" or not depend on how (and where) they are defined. They can range from completely server controlled to completely user controlled.</p>
</div></text><author><a href="/users/476/deceze">deceze</a></author><comments><comment><text><span class="comment-copy">Thank you, Deceze. I can't verify it's all accurate, but I can hope that it will become canonical.</span></text><author><a class="comment-user" href="/users/451969/jared-farrish" title="36,334 reputation">Jared Farrish</a></author></comment><comment><text><span class="comment-copy">@Jared Please feel free to edit if there are any inaccuracies.</span></text><author><a class="comment-user" href="/users/476/deceze" title="324,016 reputation">deceze<span class="mod-flair" title="moderator">♦</span></a></author></comment><comment><text><span class="comment-copy">@deceze - Nothing looks out of place to me, but I'm admittedly not particularly well-versed on this type of thing.</span></text><author><a class="comment-user" href="/users/451969/jared-farrish" title="36,334 reputation">Jared Farrish</a></author></comment><comment><text><span class="comment-copy">@deceze: good analysis for the basic ones.  There's 20 or so more depending on the PHP version, OS or CLI vs cgi/iis/apache mod usage, but not commonly used.</span></text><author><a class="comment-user" href="/users/352583/bob-the-destroyer" title="2,473 reputation">bob-the-destroyer</a></author></comment><comment><text><span class="comment-copy">@bob By all means, please add them. :)</span></text><author><a class="comment-user" href="/users/476/deceze" title="324,016 reputation">deceze<span class="mod-flair" title="moderator">♦</span></a></author></comment><comment><text><span class="comment-copy">@bob It (AFAIK) means the server does a DNS lookup on the <code>REMOTE_ADDR</code> IP. <i>How</i> it does this exactly and whether the DNS lookup can be attacked depends entirely on the server in question.</span></text><author><a class="comment-user" href="/users/476/deceze" title="324,016 reputation">deceze<span class="mod-flair" title="moderator">♦</span></a></author></comment><comment><text><span class="comment-copy">@deceze: sorry, my self-censored comment I think answered itself.  But regarding the several other obscure <code>$_SERVER</code> values, I admittedly am not familiar with their true source, even though they appear to be safe (system paths, settings, etc).</span></text><author><a class="comment-user" href="/users/352583/bob-the-destroyer" title="2,473 reputation">bob-the-destroyer</a></author></comment><comment><text><span class="comment-copy">Also i have no idea why you put clearly tainted variables as "reliable",  i went ahead and fixed that.</span></text><author><a class="comment-user owner" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">this is one of the hell answer there</span></text><author><a class="comment-user" href="/users/496223/dynamic" title="25,287 reputation">dynamic</a></author></comment><comment><text><span class="comment-copy">@deceze You have an incorrect view of security.  <b>Everything</b> that comes from a user could also be coming from an attacker and is there for unsafe.</span></text><author><a class="comment-user owner" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">@Rook But as I said, it absolutely depends on <i>how you use it</i>. Values just by themselves are neither safe nor unsafe, it depends on <i>what you use them for</i>. Even data sent from a nefarious user is perfectly safe as long as you're not doing anything with it that may compromise your security.</span></text><author><a class="comment-user" href="/users/476/deceze" title="324,016 reputation">deceze<span class="mod-flair" title="moderator">♦</span></a></author></comment><comment><text><span class="comment-copy">@deceze I am writing a patch for PHP-IDS,  <i>they are all unsafe</i> for my purposes.   Your list was very misleading until modification.  I think that a question like this should not have a "shoot from the hip"  approach,  and requires some rigor.</span></text><author><a class="comment-user owner" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">@Rook: your idea of "safe" makes this question seem a bit arbitrary, especially since it's entirely tied to an obscure extension or custom version of PHP.  While you say "should not have a "shoot from the hip" approach", any answer actually seems to require at minimum familiarity with PHP sourcecode to find out how these values are set.  Would emailing PHP devs not be a better approach to finding an answer?</span></text><author><a class="comment-user" href="/users/352583/bob-the-destroyer" title="2,473 reputation">bob-the-destroyer</a></author></comment><comment><text><span class="comment-copy">@bob-the-destroyer acutally my mind is completely blown.  I thought i could just say "safe"  and nothing else and everyone would immediately understand it.  But i should have realized that people don't have a clue what a taint or what a sink is,  and are really just wondering around blind implementing vulnerabilities as they go.</span></text><author><a class="comment-user owner" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">good updates,  it looks better.</span></text><author><a class="comment-user owner" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">@Rook: Miscommunication. As deceze hinted at, "safe for what purpose". As I hinted at, your purpose is unknown, and besides there are several other undocumented <code>$_SERVER</code> values depending on how the file is served. In my opinion, the documented ones don't clarify the true source. Otherwise I believe you wouldn't be asking this question. Glad you got a list you can use. But I'd still suggest submitting a bug report (when their bug site is fixed), sending doc maintainers an email, or updating the docs yourself (if you're privy to the link). It would benefit the community to know this info.</span></text><author><a class="comment-user" href="/users/352583/bob-the-destroyer" title="2,473 reputation">bob-the-destroyer</a></author></comment><comment><text><span class="comment-copy"><code>SERVER_NAME</code> is not necessarily controlled by the server. Depending on gateway and settings it may be duplicated from <code>HTTP_HOST</code> and hence subject to the same caveat.</span></text><author><a class="comment-user" href="/users/18936/bobince" title="387,718 reputation">bobince</a></author></comment><comment><text><span class="comment-copy">Be careful with <code>REMOTE_HOST</code>.  It might be semi-reliable, but not safe for all purposes: its value can be controlled by the attacker.  For instance, I would not recommend eval-ing it.  An attacker could register a domain name with a malicious name or possibly with strange characters in it. Remember, the attacker controls the domain names, so this variable is mostly controlled by the attacker. There are of course some constraints on its value imposed by the DNS protocol, but I would be wary of relying upon that for security.</span></text><author><a class="comment-user" href="/users/781723/d-w" title="1,440 reputation">D.W.</a></author></comment><comment><text><span class="comment-copy">@D.W. I did note that to some degree and I'm not sure why you'd want to <code>eval</code> it, but good point nonetheless.</span></text><author><a class="comment-user" href="/users/476/deceze" title="324,016 reputation">deceze<span class="mod-flair" title="moderator">♦</span></a></author></comment><comment><text><span class="comment-copy">this should be copied as a user comment into the php manual somewhere.</span></text><author><a class="comment-user" href="/users/249538/goat" title="22,958 reputation">goat</a></author></comment><comment><text><span class="comment-copy">@deceze @Rook Does <code>SERVER_PORT</code> need that little cross? <a href="https://bugs.php.net/bug.php?id=64457" rel="nofollow noreferrer">bugs.php.net/bug.php?id=64457</a></span></text><author><a class="comment-user" href="/users/424004/dejan-marjanovic" title="15,339 reputation">Dejan Marjanovic</a></author></comment><comment><text><span class="comment-copy">@TOOTSKI Apparently it does. Thanks!</span></text><author><a class="comment-user" href="/users/476/deceze" title="324,016 reputation">deceze<span class="mod-flair" title="moderator">♦</span></a></author></comment><comment><text><span class="comment-copy">@deceze Thanks! I have documented it in <a href="http://www.php.net/manual/en/reserved.variables.server.php" rel="nofollow noreferrer">PHP manual</a> right after opening the bug. Would you mind if I add legend to each variable based on your answer?</span></text><author><a class="comment-user" href="/users/424004/dejan-marjanovic" title="15,339 reputation">Dejan Marjanovic</a></author></comment><comment><text><span class="comment-copy">@TOOTSKI Sure. This would also hopefully get more eyes to look at the issue and find those special cases as you did.</span></text><author><a class="comment-user" href="/users/476/deceze" title="324,016 reputation">deceze<span class="mod-flair" title="moderator">♦</span></a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>In PHP every <code>$_SERVER</code> variable starting with <code>HTTP_</code> can be influenced by the user. For example the variable <code>$_SERVER['HTTP_REINERS']</code> can be tainted by setting the HTTP header <code>REINERS</code> to an arbitrary value in the HTTP request.</p>
</div></text><author><a href="/users/1125201/reiners">Reiners</a></author><comments/></answer></answers></post>