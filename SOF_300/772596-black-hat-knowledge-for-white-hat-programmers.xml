<?xml version="1.0" encoding="utf-8"?>
<post><title>security - Black hat knowledge for white hat programmers - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>There's always skepticism from non-programmers when honest developers learn the techniques of black hat hackers. Obviously though, we need to learn many of their tricks so we can keep our own security up to par.</p>
<p>To what extent do you think an honest programmer needs to know the methods of malicious programmers?</p>
</div></text><author><a href="/users/149341/duskwuff">duskwuff</a></author><comments><comment><text><span class="comment-copy">Shouldn't this question have a "poll" tag?</span></text><author><a class="comment-user" href="/users/11537/tonj" title="377 reputation">TonJ</a></author></comment><comment><text><span class="comment-copy">I think the better question would be "How do I start acquiring the knowledge that the black hats have already gotten?"  That is, is there some starting point for their reverse engineering tricks etc. that an honest developer might start with?</span></text><author><a class="comment-user" href="/users/2820/onorio-catenacci" title="9,709 reputation">Onorio Catenacci</a></author></comment><comment><text><span class="comment-copy">I'd say "to the full extent". How else can you prevent attacks unless you know exactly how they are performed?</span></text><author><a class="comment-user" href="/users/65387/mpen" title="94,547 reputation">mpen</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>I'm coming in late on this, as I just heard about it on the podcast. However, I'll offer my opinion as someone who has worked on the security team of a software company.</p>
<p>We actually took developer education very seriously, and we'd give as many teams of developers as possible basic training in secure development. Thinking about security really does require a shift in thinking from normal development, so we'd try to get developers thinking in a how-to-break-things frame of mind. One prop we used was one of those home safes with the digital keypad. We'd let developers examine it inside and out to try to come up with a way of breaking in to it. (The solution was to put pressure on the handle while giving the safe a sharp bash on the top, which would cause the bolt to bounce on its spring in the solenoid.) While we wouldn't give them specific black-hat techniques, we'd talk about the implementation errors that cause those vulnerabilities -- especially things they might not have encountered before, like integer overflows or compilers optimising out function calls (like memset to clear passwords). We published a monthly security newsletter internally, which invited developers to spot security-related bugs in small code samples, which certainly showed how much they would miss.</p>
<p>We also tried to follow Microsoft's Security Development Lifecycle, which would involve getting developers to talk about the architecture of their products and figure out the assets and possible ways to attack those assets.</p>
<p>As for the security team, who were mostly former developers, understanding the black-hat techniques was very important to us. One of the things we were responsible for was receiving security alerts from third parties, and knowing how difficult it would be for a black hat to exploit some weakness was an important part of the triage and investigation processes. And yes, on occasion that has involved me stepping through a debugger to calculate memory offsets of vulnerable routines and patching binary executables.</p>
<p>The real problem, though, is that a lot of this was beyond developers' abilities. Any reasonably sized company is going to have many developers who are good enough at writing code, but just do not have the security mindset. So my answer to your question is this: expecting all developers to have black-hat knowledge would be an unwelcome and detrimental burden, but <em>somebody</em> in your company should have that knowledge, whether it be a security audit and response team, or just senior developers.</p>
</div></text><author><a href="/users/56050/derecho">Derecho</a></author><comments><comment><text><span class="comment-copy">That is an EXCELLENT answer.  You're absolutely right, particularly in your last paragraph.</span></text><author><a class="comment-user" href="/users/60682/david" title="55,972 reputation">David</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>At the end of the day nothing the 'black hats' know is criminal knowledge, it's just how the knowledge is applied. Having a deep understanding of any technology is valuable as a programmer, it's how we get the best out of the system. It's possible to get by these days without knowing the depths as we've more and more frameworks, libraries and components that have been written using such knowledge to save you having to know everything but it's still good to dig from time to time.</p>
</div></text><author><a href="/users/19540/lazarus">Lazarus</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I'm going to be a bit heretical and go out on a limb and say:</p>
<ul>
<li>You really need to talk to the
sysadmin/network folks that secure
their machines.  These folks deal with the concept of break-ins every day, and are always on the lookout for potential exploits to be used against them.  For the most part, ignore the "motivation" aspect of how attackers think, as the days of "hacking for notoriety" are long gone.  Focus instead on <em>methodology</em>.  A competent admin will be able to demonstrate this easily.</li>
</ul>
<p>When you write a program, you are presenting what is (hopefully) a seamless, smooth interface to ${whatever-else-accepts-your-programs-I/O}.  In this case, it may be an end-user, or it may be another process on another machine, but it doesn't matter.  <strong>ALWAYS assume that the "client" of your application is potentially hostile, regardless if it's a machine or a person.</strong></p>
<p>Don't believe me?  Try writing a small app that takes sales orders from salespeople, then have a company rule that you need to enforce through that app, but the salespeople are constantly trying to get around so they can make more money.  Just this little exercise alone will demonstrate how a motivated attacker - in this case, <em>the intended end-user</em> - will be actively searching for ways to either exploit flaws in logic, or to game the system by other means.  <em>And these are trusted end-users!</em></p>
<p>Multiplayer online games are constantly in a war against cheaters because the server software typically trusts the client; and in all cases, the client can <em>and will</em> be hacked, resulting in players gaming the system.  Think about this - here we have people who are simply enjoying themselves, and they will use extreme measures to gain the upper hand in an activity that doesn't involve making money.</p>
<p>Just imagine the motivation of a professional bot herder who makes their money for a living this way...writing malware so they can use other people's machines as revenue generators, selling out their botnets to the highest bidder for massive spam floods...yes, <a href="http://en.wikipedia.org/wiki/Botnet" rel="noreferrer">this</a> <a href="http://www.cio.com/article/print/117150" rel="noreferrer">really does</a> <a href="http://news.cnet.com/8301-10789_3-9907939-57.html" rel="noreferrer">happen</a>.</p>
<p>Regardless of motivation, the point remains, your program can, and at some point will, be under attack.  It's not enough to protect against <a href="http://en.wikipedia.org/wiki/Buffer_overflow" rel="noreferrer">buffer overflows</a>, <a href="http://en.wikipedia.org/wiki/Stack-smashing_protection#Attacks_that_cannot_be_protected_against" rel="noreferrer">stack smashing</a>, stack execution (code-as-data is loaded into the stack, then a return is done to unload the stack, leading to execution of the code), <a href="http://en.wikipedia.org/wiki/Data_Execution_Prevention" rel="noreferrer">data execution</a>, <a href="http://en.wikipedia.org/wiki/Cross-site_scripting" rel="noreferrer">cross-site scripting</a>, <a href="http://en.wikipedia.org/wiki/Privilege_escalation" rel="noreferrer">privilege escalation</a>, <a href="http://en.wikipedia.org/wiki/Race_condition" rel="noreferrer">race conditions</a>, or other "programmatic" attacks, although it does help.  In addition to your "standard" programmatic defenses, you'll also need to think in terms of trust, verification, identity, and credentials - in other words, dealing with whatever is providing your program input and whatever is consuming your program's output.  For example, how does one defend against <a href="http://en.wikipedia.org/wiki/DNS_cache_poisoning" rel="noreferrer">DNS poisoning</a> from a programmatic perspective?  And sometimes, you can't avoid things in code - getting your end-users to not turn over their passwords to coworkers is an example.</p>
<p>Incorporate those concepts into a <em>methodology</em> for security, rather than a "technology".  <a href="http://www.schneier.com/crypto-gram-0005.html#1" rel="noreferrer">Security is a process, not a product</a>.  When you start thinking about what's "on the other side" of your program, and the <em>methods</em> you can employ to mitigate those issues, it will become much clearer as to what can go right, and what can go <em>horribly</em> wrong. </p>
</div></text><author><a href="/users/86944/avery-payne">Avery Payne</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>To a large extent. You need to think like a criminal, or you're not paranoid enough.</p>
</div></text><author><a href="/users/2342/scottstonehouse">ScottStonehouse</a></author><comments><comment><text><span class="comment-copy">you can't think like that if you don't know how think like that. It's like "think about a LINQ solution without learning LINQ". It won't work.</span></text><author><a class="comment-user" href="/users/40322/dr-evil" title="15,327 reputation">dr. evil</a></author></comment><comment><text><span class="comment-copy">Thinking like a criminal involves acquiring knowledge. Criminals go through a learning process too.</span></text><author><a class="comment-user" href="/users/68507/ben-s" title="50,786 reputation">Ben S</a></author></comment><comment><text><span class="comment-copy">And I thought it just involved strangling kittens....</span></text><author><a class="comment-user" href="/users/1143/quibblesome" title="18,583 reputation">Quibblesome</a></author></comment><comment><text><span class="comment-copy">(-1) Although your comment is a step in the right direction, you haven't actually said anything that would be useful to asker. I.E. how is he to 'think like a criminal', how is he to 'learn everything they do'.</span></text><author><a class="comment-user" href="/users/59808/devinb" title="6,538 reputation">DevinB</a></author></comment><comment><text><span class="comment-copy">@devinb: That wasn't asked.</span></text><author><a class="comment-user" href="/users/22114/treb" title="14,807 reputation">Treb</a></author></comment><comment><text><span class="comment-copy">I've never gotten so many minus votes. I guess folks are uncomfortable with the implication that thinking about security is criminal.  Of course it isn't.  Knowledge isn't criminal and neither is hacking a system that you have legitimate access to.  But if you never TRY to hack a system, you really don't know much about security.</span></text><author><a class="comment-user" href="/users/2342/scottstonehouse" title="14,193 reputation">ScottStonehouse</a></author></comment><comment><text><span class="comment-copy">@Scott, I have no problem with 'thinking like a criminal' as a solution to this issue. I simply think that your answer does nothing to help the person who asked the question.</span></text><author><a class="comment-user" href="/users/59808/devinb" title="6,538 reputation">DevinB</a></author></comment><comment><text><span class="comment-copy">Guns don't kill people.  People kill people.  The second amendment applies here, too, IMHO.</span></text><author><a class="comment-user" href="/users/3347/spoulson" title="17,134 reputation">spoulson</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<blockquote>
<p>To what extent do you think an honest programmer needs to know the methods of malicious programmers?</p>
</blockquote>
<p>You need to know <em>more</em> than them.</p>
</div></text><author><a href="/users/1288/bill-the-lizard">Bill the Lizard</a></author><comments><comment><text><span class="comment-copy">read my answer, you can simply see most of the time it's just not possible unless you got too much time in your hands to pour in it.</span></text><author><a class="comment-user" href="/users/40322/dr-evil" title="15,327 reputation">dr. evil</a></author></comment><comment><text><span class="comment-copy">I disagree.  If you're a web programmer you need to know all the ways your programs are going to be attacked in order to protect them.  You can (and should) hire professionals to help you, but it should be a part of your job to learn the security techniques used in whatever type of programs you're paid to develop.</span></text><author><a class="comment-user" href="/users/1288/bill-the-lizard" title="240,859 reputation">Bill the Lizard</a></author></comment><comment><text><span class="comment-copy">There is big difference between cracking into something and protecting against it. If you write parameterised SQL Queries, it's done, code secure against SQL Injeciton. Therefore you don't need to know 10 different ways of how to exploit SQL Injections. If you do quick search on exploiting SQL Injections you can simply there 4-5 different main ways based on the context and so many other possibilities based on backend database.But as a developer knowing 10 different ways is not going to help you.</span></text><author><a class="comment-user" href="/users/40322/dr-evil" title="15,327 reputation">dr. evil</a></author></comment><comment><text><span class="comment-copy">I see your point, and I agree somewhat.  You don't need to know how to execute 10 different kinds of attack, but you do need to know how to protect against all of them.  It's not always as easy as one solution, parameterized SQL queries, that covers all attacks.</span></text><author><a class="comment-user" href="/users/1288/bill-the-lizard" title="240,859 reputation">Bill the Lizard</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I do work as a security guy not a developer and based on my experience I can simply say you can't learn stuff as good as black hat or professional white hats do unless it's your second profession. It just too time consuming.</p>
<p>Most important bit though seeing some bad guys or professionals on action and understanding what are the possibilities and the impact of unsecure code.</p>
<p>So by learning some tricks but lots of them one might get feeling of "false sense of security" because he or she can't hack. Although a better skilled attacker might hack the same thing within minutes. </p>
<p>Having said that, as soon as you keep this in mind I think it's good to learn some attacks, fun and quite educational to learn how to break stuff. </p>
</div></text><author><a href="/users/40322/dr-evil">dr. evil</a></author><comments><comment><text><span class="comment-copy">I don't think learning a few techniques will leave you feeling more secure than learning nothing at all.  If you learn how these things are done, you should be scared, not lulled into a false sense of security.</span></text><author><a class="comment-user" href="/users/2342/scottstonehouse" title="14,193 reputation">ScottStonehouse</a></author></comment><comment><text><span class="comment-copy">Good point though, that you can't really know security unless it's your full time job. It's not my full time job, and that just makes me more paranoid.</span></text><author><a class="comment-user" href="/users/2342/scottstonehouse" title="14,193 reputation">ScottStonehouse</a></author></comment><comment><text><span class="comment-copy">You right, as soon as you aware of the fact that you don't know everything about that subject, it's always good to get your hands a little bit dirty :)</span></text><author><a class="comment-user" href="/users/40322/dr-evil" title="15,327 reputation">dr. evil</a></author></comment><comment><text><span class="comment-copy">Just updated the answer to clarify / emphasize the last sentence.</span></text><author><a class="comment-user" href="/users/40322/dr-evil" title="15,327 reputation">dr. evil</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>It pays to be as "innocent as doves, and as wise as serpents," and learn techniques that folks with nefarious purposes do.  That said, such knowledge should be used carefully.  "With great power comes great responsibility".</p>
</div></text><author><a href="/users/40411/j-polfer">J. Polfer</a></author><comments><comment><text><span class="comment-copy">Quoting the Bible and Spider-Man together. I like it.</span></text><author><a class="comment-user" href="/users/78093/jergason" title="11,693 reputation">jergason</a></author></comment><comment><text><span class="comment-copy">With great power comes great electricity too!</span></text><author><a class="comment-user" href="/users/20471/joe-phillips" title="23,899 reputation">Joe Phillips</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Definitely learn the dark side. Even if you don't learn the actual techniques, at least make the effort to learn what's possible. </p>
<p><a href="http://ecx.images-amazon.com/images/I/51rqNSV141L._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA240_SH20_OU01_.jpg" rel="noreferrer">alt text http://ecx.images-amazon.com/images/I/51rqNSV141L._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA240_SH20_OU01_.jpg</a><a href="http://ecx.images-amazon.com/images/I/519BX6GJZVL._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA240_SH20_OU01_.jpg" rel="noreferrer">alt text http://ecx.images-amazon.com/images/I/519BX6GJZVL._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA240_SH20_OU01_.jpg</a></p>
<p>Good resources to learn the tricks of the trade are <a href="http://rads.stackoverflow.com/amzn/click/0764574817" rel="noreferrer">Reversing: Secrets of Reverse Engineering</a> and <a href="http://rads.stackoverflow.com/amzn/click/1593271441" rel="noreferrer">Hacking: The Art of Exploitation</a>. They're written for both sides - these could be used to LEARN how to hack, but they also give ways to prevent these kinds of attacks.</p>
</div></text><author><a href="/users/49018/ryeguy">ryeguy</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>One word of caution: <a href="http://en.wikipedia.org/wiki/Randal_L._Schwartz" rel="noreferrer">State of Oregon vs. Randal Schwartz</a>.</p>
<p>Having been a small part of investigating two separate incidents at our site, I'd say the odds of learning about an exploit before it's used against you are vanishingly small.  Perhaps if you dedicate your career to being a white hat you'll stay on top of all the potential holes in most of the popular hardware/software stacks.  But for an ordinary programmer, you are more likely to be in reaction mode.</p>
<p>You do have a responsibility to know how your own software could be hacked and a responsibility to stay reasonably up-to-date with third-party software.  It would be good to have an emergency plan in place to deal with an attack, especially if you are a high-profile or high-value target.  Some places will want to shut a hole immediately, but our site tends to leave certain holes open to assist law enforcement in catching the perpetrators.  The IT security team occasionally announces internally that it will be conducting a port scan so that SA's don't freak out about it.</p>
</div></text><author><a href="/users/1438/jon-ericson">Jon Ericson</a></author><comments><comment><text><span class="comment-copy">So it sounds like knowing how to do it is probably okay, but actually doing it without permission is absolutely not okay!</span></text><author><a class="comment-user" href="/users/544198/pearsonartphoto" title="24,820 reputation">PearsonArtPhoto</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I personally don't see the technical difference. Sure the motives are different but the technical game is the same. It's like asking what kind of warfare the "goodies" need to know about. </p>
<p>The answer is all of it, even if they don't actively practice it.</p>
</div></text><author><a href="/users/1143/quibblesome">Quibblesome</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>One skill that is often missed is social engineering. </p>
<p>Many people simply do not recognize when they are being conned. At a prior company a VP ran a test by having three (female) temp workers in a conference room call programmers and sysadmins and work from script to try and get someone to grant access or reveal passwords. Each of the temps got access to something in the first hour of calls. </p>
<p>I bet if a similar test were run at any mid to large sized company, they would get the same results.</p>
</div></text><author><a href="/users/13753/sal">sal</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I think part of 'coding defensively' includes knowing malicious techniques, but at the same time, you don't necessarily need to know all of the techniques in order to defend against them effectively.
For instance, knowing about buffer-overflow attacks isn't the reason to try and protect your buffers from overflowing. You protect them from overflowing because if they do, it could wreak havoc in your program regardless of whether it's a bug or an attack.</p>
<p>If you write very thoroughly checked and well architected code, then the malicious attacks will be unable to penetrate, because good architecture should automatically lock out side-effects and unauthorized access.</p>
<p>However, that last paragraph assumes that we have a perfect job where we are given incredible amounts of time to make our code <em>just right</em>. Since such a job doesn't exist, then knowing the malicious techniques is a good shortcut, because it means that although your code isn't perfect, you can create 'un-workarounds' for those exploits to make sure that they do not get through. But, those don't make the code better, and they don't make the application better. </p>
<p>Ultimately, knowing malicious exploits is something that is good to be aware of, but 95% of them will be covered by simply making sure you adhere to best practices. </p>
</div></text><author><a href="/users/59808/devinb">DevinB</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p><a href="http://www.codinghorror.com/blog/archives/001123.html" rel="nofollow noreferrer">Design for evil</a>. "When good is dumb, evil will always triumph."</p>
<p>In short, if you don't think like a criminal, that doesn't mean the criminals won't.</p>
</div></text><author><a href="/users/18192/brian">Brian</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>One of the techniques the White Hats need to learn is how to test/mitigate/think in terms of social engineering, because the biggest security threat is people.</p>
<p>White Hats are good at manipulating bits, but people are the ones manipulated far more often by the Black Hats. </p>
</div></text><author><a href="/users/33226/gavin-miller">Gavin Miller</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I'm going to take the controversial stance and say that there's some black-hat knowledge that you don't need to be a good white-hat hacker. A doctor doesn't need to know how to genetically engineer a virus in order to effectively treat illness.</p>
</div></text><author><a href="/users/48171/gabriel">Gabriel</a></author><comments><comment><text><span class="comment-copy">Software development isn't (hopefully) like a doctor treating illness. Your doctor might, in fact, only sign off on nurse to administer a flu shot you requested. Furthermore, in general doctors don't have an effective treatment for viruses.  However, some of the people involved in the development of the vaccine itself most likely do posses the knowledge to engineer a virus.</span></text><author><a class="comment-user" href="/users/116270/marsh-ray" title="2,375 reputation">Marsh Ray</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>we white hats and gray hats need to be good at a million things those black hats and skiddies only have to succeed with one thing</p>
</div></text><author><a href="/users/93117/jan-willem-hoekman">Jan-Willem Hoekman</a></author><comments><comment><text><span class="comment-copy">This has also been expressed as "We have to be lucky every time, they (hackers) only have to be lucky once"</span></text><author><a class="comment-user" href="/users/39709/richard-everett" title="27,767 reputation">Richard Everett</a></author></comment><comment><text><span class="comment-copy">true that is the same sentence only in a different way</span></text><author><a class="comment-user" href="/users/93117/jan-willem-hoekman" title="60 reputation">Jan-Willem Hoekman</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Basically almost all security exploits used by hackers are bugs in the code introduced by poor programming style or disciplines. If you write code to protect against bad data and invalid call operations you'll block the majority of security vulnerabilities in your code. </p>
<p>If you're interested to protect your code from hacking/abuse/etc. you'll spend way too much time on it. Just buy a package to protect the basics and just move on. </p>
</div></text><author><a href="/users/76456/paul-alexander">Paul Alexander</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>You have to understand the methods the 'bad guys' use, so some understanding is mandatory.</p>
<p>For the average developer I think it is enough to grok the basic priciple of what they are doing in order to avoid creating vulnerabilities in their projects.</p>
<p>For somebody who works in a security relevant area (banking comes to mind, or credit card data from an online shop), a deeper understanding is required. Those developers need to go 'under the hood' of how a 'bad guy' operates and which techniques he uses.</p>
</div></text><author><a href="/users/22114/treb">Treb</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>To the point where by learning their ways he starts to think in their direction. And then he must choose which side he wants "to belong to".</p>
<p>There is nothing malicious in technology itself ... knowledge is pure ... it's how you use it that determines how it shall be looked upon.</p>
</div></text><author><a href="/users/62699/rook">Rook</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>2 sides of the same coin. Other than intent -- what's the question? Same skills, different implementation.</p>
</div></text><author><a>NONE</a></author><comments><comment><text><span class="comment-copy">Nah - stepping through a debugger to calculate memory offsets of vulnerable routines and patching binary executables is a different set of skills from checking your inputs to prevent buffer overflows (for example). A programmer should understand the model, but the black hat has to know how to implement the attack.</span></text><author><a class="comment-user" href="/users/76288/guns" title="6,530 reputation">guns</a></author></comment><comment><text><span class="comment-copy">@guns: this is one of the best examples yet. Please put it in a real answer so it can be upvoted and maybe accepted.</span></text><author><a class="comment-user owner" href="/users/356/dinah" title="22,423 reputation">Dinah</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>When I hear the word blackhat, I think of someone who uses knowledge of computers to break into banks and do other mischievous things. A whitehat knows <em>everything</em> that the blackhat knows, but just doesn't do anything bad with it.</p>
<p>Therefore, you don't have <em>care</em> or <em>know</em> what a "blackhat" is to be secure...</p>
<p>Knowing how a blackhat <em>thinks</em>, when you're already an equivalent whitehat doesn't help squat. It's like knowing, "John wants to break into my house and steal my iPod music". If you really cared about your iPod music, you should have had it secure anyways.</p>
</div></text><author><a href="/users/80243/l%cc%b2%cc%b3o%cc%b2%cc%b3%cc%b3n%cc%b2%cc%b3%cc%b3g%cc%b2%cc%b3%cc%b3p%cc%b2%cc%b3o%cc%b2%cc%b3%cc%b3k%cc%b2%cc%b3%cc%b3e%cc%b2%cc%b3%cc%b3">L̲̳o̲̳̳n̲̳̳g̲̳̳p̲̳o̲̳̳k̲̳̳e̲̳̳</a></author><comments/></answer></answers></post>