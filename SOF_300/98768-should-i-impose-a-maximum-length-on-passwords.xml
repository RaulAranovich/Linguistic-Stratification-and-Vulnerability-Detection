<?xml version="1.0" encoding="utf-8"?>
<post><title>security - Should I impose a maximum length on passwords? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I can understand that imposing a minimum length on passwords makes a lot of sense (to save users from themselves), but my <strong>bank</strong> has a requirement that passwords are between 6 and 8 characters long, and I started wondering...</p>
<ul>
<li>Wouldn't this just make it easier for brute force attacks? (Bad)</li>
<li>Does this imply that my password is being stored unencrypted? (Bad)</li>
</ul>
<p>If someone with (hopefully) some good IT security professionals working for them are imposing a max password length, should I think about doing similar? What are the pros/cons of this?</p>
</div></text><author><a href="/users/9021/nickf">nickf</a></author><comments><comment><text><span class="comment-copy">There almost certainly is a "three strikes and you are out" policy, which eliminates the threat of a brute force attack.</span></text><author><a class="comment-user" href="/users/2961/stu-thompson" title="25,470 reputation">Stu Thompson</a></author></comment><comment><text><span class="comment-copy">There is no excuse for this for non-legacy systems, like modern-day websites.</span></text><author><a class="comment-user" href="/users/48256/mparaz" title="1,025 reputation">mparaz</a></author></comment><comment><text><span class="comment-copy">I don't think the answer is purely IT. The minimum size (6) and a maximum limit of attempt is "likely" to eliminate wild guesses. My guess is that the maximum size (8) is to limit the number of call (and consequently the cost) of the support for the "Oops I forget mycode" or "I type the code to fast" or "I mistype one characters" etc. In addition of the paper on which you write the password if you can't remember it..</span></text><author><a class="comment-user" href="/users/24334/call-me-steve" title="985 reputation">call me Steve</a></author></comment><comment><text><span class="comment-copy">The university im enrolled in has insanely stupid password rules: 8 chars only, at least 1 number, but not in the beginning or end of the password, needs chars from more than the 2 upper rows of the keyboard etc. etc. In the end they make bruteforcing easier by having these rules -.- . I realize you aint that stupid, but please don't make silly rules like that! (Just had to get it out of my system :) )</span></text><author><a class="comment-user" href="/users/2372835/cwap" title="7,787 reputation">cwap</a></author></comment><comment><text><span class="comment-copy">@call Well if you impose a max length for that reason then you will get "I forgot my password" calls from <i>me</i>, because my site-unique passwords are all long, and limiting me to 12 chars is a sure way to guarantee I will not remember it.</span></text><author><a class="comment-user" href="/users/33080/roman-starkov" title="28,729 reputation">Roman Starkov</a></author></comment><comment><text><span class="comment-copy">Related: <a href="http://stackoverflow.com/questions/702421/why-restrict-the-length-of-a-password/702438#702438" title="why restrict the length of a password">stackoverflow.com/questions/702421/…</a></span></text><author><a class="comment-user" href="/users/319931/mechanical-snail" title="14,783 reputation">Mechanical snail</a></author></comment><comment><text><span class="comment-copy">The only reason to enforce a maximum password length is to prevent a denial of service attack. (i.e. send rapidly a very large amount of content to your logon screen and your server will be busy with calculating hashes.... and only calculating hashes... )</span></text><author><a class="comment-user" href="/users/44056/jeroen-landheer" title="5,261 reputation">Jeroen Landheer</a></author></comment><comment><text><span class="comment-copy">are maximum password limits really bogus? For exmaple bycrpt only hashes the first 63 chars and thus everything above that is just ignorted. A 100 char password would be the same sthrendth of an 10000 char password. But lets assume i have some crypto container and i want to choose an incredible good password which will always be copy and pasted. How could I make it possible that a 10000 char password really is more secure than a shorter one. What key dervation algo should i use, if any? What is the correct approach here</span></text><author><a class="comment-user" href="/users/4773888/bluewizard" title="208 reputation">BlueWizard</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Passwords are hashed to 32, 40, 128, whatever length. The only reason for a minimum length is to prevent easy to guess passwords. There is no purpose for a maximum length.</p>
<p>The obligatory <a href="http://xkcd.com/936/" rel="noreferrer">XKCD</a> explaining why you're doing your user a disservice if you impose a max length:</p>
<p><a href="http://xkcd.com/936/" rel="noreferrer" title="To anyone who understands information theory and security and is in an infuriating argument with someone who does not (possibly involving mixed case), I sincerely apologize."><img alt="The obligatory XKCD" src="https://imgs.xkcd.com/comics/password_strength.png"/></a></p>
</div></text><author><a href="/users/16204/epochwolf">epochwolf</a></author><comments><comment><text><span class="comment-copy">Perhaps a bank might choose to limit the password because on ATMs you can't input more than, say, 8 characters.</span></text><author><a class="comment-user" href="/users/4850/andr%c3%a9-neves" title="6,298 reputation">André Neves</a></author></comment><comment><text><span class="comment-copy">I didn't think about that because my bank separates online accounts and ATM card PINs. (PINs at my bank are 3 to 4 numbers in length /\d{3,4}/)</span></text><author><a class="comment-user" href="/users/16204/epochwolf" title="7,664 reputation">epochwolf</a></author></comment><comment><text><span class="comment-copy">well at least on ATMs, if you try a brute force attack, it'll eat your card. What I'm referring to is the password for logging on online only though.</span></text><author><a class="comment-user owner" href="/users/9021/nickf" title="310,146 reputation">nickf</a></author></comment><comment><text><span class="comment-copy">passwords and PINs are two different things.  good point, nickf.</span></text><author><a class="comment-user" href="/users/2961/stu-thompson" title="25,470 reputation">Stu Thompson</a></author></comment><comment><text><span class="comment-copy">Sadly that assumes that the passwords are always hashed. Maximum length passwords are a symptom of passwords stored in plaintext.</span></text><author><a class="comment-user" href="/users/39531/jevon" title="1,901 reputation">jevon</a></author></comment><comment><text><span class="comment-copy">Sigh, even at PayPal, "correct horse battery staple" is 8 characters above their <i>&lt;censored&gt;</i> maximum length... <i>headdesk</i></span></text><author><a class="comment-user" href="/users/33080/roman-starkov" title="28,729 reputation">Roman Starkov</a></author></comment><comment><text><span class="comment-copy">If there is no maximum a brute force attack can count on collisions too, i.e. the malicious user will be able to enter 1000 characters for example that produce the same hash as the original password with 8 symbols.</span></text><author><a class="comment-user" href="/users/1077687/unknown" title="883 reputation">Unknown</a></author></comment><comment><text><span class="comment-copy">@Unknown That doesn't decrease the number of guesses that it would take to find a match, though.  I don't see why that observation is relevant at all, in fact.</span></text><author><a class="comment-user" href="/users/593105/aaron-dufour" title="12,548 reputation">Aaron Dufour</a></author></comment><comment><text><span class="comment-copy">It does not indeed, but still there is a small chance to use such a collision. It is a fairly small chance, but if you can eliminate it with a simple length validation I do not see a reason to just skip it.</span></text><author><a class="comment-user" href="/users/1077687/unknown" title="883 reputation">Unknown</a></author></comment><comment><text><span class="comment-copy">@Unknown Hash collisions are entirely irrelevant here and have absolutely nothing to do with arbitrary maximum length restrictions.</span></text><author><a class="comment-user" href="/users/770230/dan" title="2,705 reputation">Dan</a></author></comment><comment><text><span class="comment-copy">XCKD's password selection advice was probably good advice in 2008. Today, better advice is to use a completely random password in a secure password store. Ideally, your totally gibberish per-site password is longer than XKCD's example of a good password.</span></text><author><a class="comment-user" href="/users/22927/steven-fisher" title="32,032 reputation">Steven Fisher</a></author></comment><comment><text><span class="comment-copy">The reason you put max length is to minimize possible script attacks.What idiot is going to type passwords of 30+ characters every time they log in? No one.</span></text><author><a class="comment-user" href="/users/339465/roy-oliver" title="133 reputation">Roy Oliver</a></author></comment><comment><text><span class="comment-copy">Nice meme. Does it really answer the question better than a real answer though?</span></text><author><a class="comment-user" href="/users/1202953/deji" title="419 reputation">Deji</a></author></comment><comment><text><span class="comment-copy">Hello, Roy Oliver. Thanks for calling me an idiot. I love you, too.</span></text><author><a class="comment-user" href="/users/687488/koniiiik" title="2,641 reputation">koniiiik</a></author></comment><comment><text><span class="comment-copy">@jevon Care to explain why it’s a symptom for passwords being stored in plaintext?</span></text><author><a class="comment-user" href="/users/2036825/kleinfreund" title="3,700 reputation">kleinfreund</a></author></comment><comment><text><span class="comment-copy">@kleinfreund because if it was hashed, the password length wouldn't matter to them (hash functions convert a string of <i>any</i> length to a fixed length).</span></text><author><a class="comment-user" href="/users/504611/vicky-chijwani" title="5,323 reputation">Vicky Chijwani</a></author></comment><comment><text><span class="comment-copy">@RoyOliver you're ignoring the fact that people are faster at typing real words than gibberish, especially if the gibberish involves contorting ones fingers to hold down the Shift key. Also, why does limiting the password length minimize script attacks? Honest question.</span></text><author><a class="comment-user" href="/users/504611/vicky-chijwani" title="5,323 reputation">Vicky Chijwani</a></author></comment><comment><text><span class="comment-copy">@VickyChijwani, obviously people type faster when it's not gibberish.  To your question:If all an attacker can get away with is to attempt to inject a simple alert box because they don't have enough space, then that's better than allowing them to inject a paragraph worth of attacks that do more than just show an alert box.  If your system, however, can prevent all potential future script attacks against login entry point, then it doesn't matter. Especially, if you're a fortune teller.</span></text><author><a class="comment-user" href="/users/339465/roy-oliver" title="133 reputation">Roy Oliver</a></author></comment><comment><text><span class="comment-copy">@koniiiik, I hate you for making me think about laughing. I hate laughing.</span></text><author><a class="comment-user" href="/users/339465/roy-oliver" title="133 reputation">Roy Oliver</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>A maximum length specified on a password field should be read as a <strong>SECURITY WARNING</strong>:
Any sensible, security conscious user must assume the worst and expect that this site is storing your password literally (i.e. not hashed, as explained by epochwolf).</p>
<p>In that that is the case:
(a) avoid using this site like the plague if possible [they obviously know nuts about security]
(b) if you must use the site, make sure your password is unique - unlike any password you use elsewhere.  </p>
<p>If you are developing a site that accepts passwords, DON'T put a silly password limit, unless you want to get tarred with the same brush.</p>
<p>[Internally, of course your code may treat only the first 256/1028/2k/4k(whatever) bytes as "significant" to avoid crunching on mammoth passwords.] </p>
</div></text><author><a href="/users/6329/tardate">tardate</a></author><comments><comment><text><span class="comment-copy">I also send such websites a standard email, mentioning that they forced me to use a shorter, less secure password, that I also happen to reuse on every website that imposes such silly limits. This lets them know that it's a problem and also might give a Joe Coder some leverage to show to the higher-ups: evidence that users actually think badly of the website as a result of this.</span></text><author><a class="comment-user" href="/users/33080/roman-starkov" title="28,729 reputation">Roman Starkov</a></author></comment><comment><text><span class="comment-copy">@romkyns: ...and very little happens - e.g. Skype (!) has this misfeature for <i>years</i> now. <a href="http://i.piskvor.org/maximum-suggests-plaintext-password-storage.png" rel="nofollow noreferrer">Makes me wonder about their other security claims</a>.</span></text><author><a class="comment-user" href="/users/19746/piskvor" title="64,494 reputation">Piskvor</a></author></comment><comment><text><span class="comment-copy">I'm not sure you should assume that a password maximum means they are storing plain text passwords. Sometimes, they are truncating the input, and simply passing the first x chars into the hashing(). (The way to check is set a password to beyond the limit, then try to login with a variation of the password characters beyond the max-length).</span></text><author><a class="comment-user" href="/users/2910/benc" title="753 reputation">benc</a></author></comment><comment><text><span class="comment-copy">@benc sure, that's possible, but the point is that as a user you have no way of knowing if this is what they are doing. A max-length (especially a short one) is a warning sign and I think it's best to assume the worst (or get in touch with the provider to get them to confirm).</span></text><author><a class="comment-user" href="/users/6329/tardate" title="10,937 reputation">tardate</a></author></comment><comment><text><span class="comment-copy">Please elaborate. This answer is a mere statement.</span></text><author><a class="comment-user" href="/users/2036825/kleinfreund" title="3,700 reputation">kleinfreund</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Allowing for completely unbounded password length has one major drawback if you accept the password from untrusted sources.</p>
<p>The sender could try to give you such a long password that it results in a denial of service for other people.  For example, if the password is 1GB of data and you spend all your time accept it until you run out of memory.  Now suppose this person sends you this password as many times as you are willing to accept.  If you're not careful about the other parameters involved this could lead to a DoS attack.</p>
<p>Setting the upper bound to something like 256 chars seems overly generous by today's standards.</p>
</div></text><author><a href="/users/5113/jason-dagit">Jason Dagit</a></author><comments><comment><text><span class="comment-copy">You can still send 1gb of data with a maximum limit. The software doing the limiting is almost always behind the webserver.</span></text><author><a class="comment-user" href="/users/16204/epochwolf" title="7,664 reputation">epochwolf</a></author></comment><comment><text><span class="comment-copy">You can still drop all but the first 256chars before doing something computationally intensive though.  Running a sha hash on 1gb of data is going to take <i>much</i> longer than the same hash on 256 chars.</span></text><author><a class="comment-user" href="/users/3446/rcreswick" title="8,476 reputation">rcreswick</a></author></comment><comment><text><span class="comment-copy">What about client-side hashing?  For a web client, have him SHA-256 his password in javascript and then send that.</span></text><author><a class="comment-user" href="/users/4454/eyal" title="3,089 reputation">Eyal</a></author></comment><comment><text><span class="comment-copy">@Eyal: Anything that happens on the client side of a web app is inherently untrusted; thus, the hash becomes a password equivalent, making this an exercise in futility. (a web browser probably won't accept a 1-GB text input, and a custom client might send a 1-GB string in the "thisisthehashedpassword" form field)</span></text><author><a class="comment-user" href="/users/19746/piskvor" title="64,494 reputation">Piskvor</a></author></comment><comment><text><span class="comment-copy">@Piskvor: But there is no way to prevent the 1-GB string anyway.  A user can always request <a href="http://www.example.com/?password=abcabcabcabc" rel="nofollow noreferrer">example.com/?password=abcabcabcabc</a> ... and make his request as big as he wants.  Standard DoS.</span></text><author><a class="comment-user" href="/users/4454/eyal" title="3,089 reputation">Eyal</a></author></comment><comment><text><span class="comment-copy">@Eyal: My point exactly :)</span></text><author><a class="comment-user" href="/users/19746/piskvor" title="64,494 reputation">Piskvor</a></author></comment><comment><text><span class="comment-copy">@Piskvor and Eyal, fortunately, Apache and IIS (and presumably other mature servers) limit the length of fields passed via URLs: <a href="http://www.boutell.com/newfaq/misc/urllength.html" rel="nofollow noreferrer">boutell.com/newfaq/misc/urllength.html</a></span></text><author><a class="comment-user" href="/users/82216/sampablokuper" title="2,301 reputation">sampablokuper</a></author></comment><comment><text><span class="comment-copy">That said, I suppose one might want to impose a rate limit, i.e. a limit on the number of times (e.g. per minute) that a user can submit a new password to the back-end for hashing? Obviously this only makes sense if the rate limiting algorithm is less resource-intensive than the hashing algorithm.</span></text><author><a class="comment-user" href="/users/82216/sampablokuper" title="2,301 reputation">sampablokuper</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>First, do not assume that banks have good IT security professionals working for them.  <a href="http://thedailywtf.com/Articles/WishItWas-TwoFactor-.aspx" rel="noreferrer">Plenty don't</a>.</p>
<p>That said, maximum password length is worthless.  It often requires users to create a new password (arguments about the value of using different passwords on every site aside for the moment), which increases the likelihood they will just write them down.  It also greatly increases the susceptibility to attack, by any vector from brute force to social engineering.</p>
</div></text><author><a href="/users/13675/sparr">Sparr</a></author><comments><comment><text><span class="comment-copy">Agreed!  Look at that the string of UK bank online access security failures of the past few years...</span></text><author><a class="comment-user" href="/users/2961/stu-thompson" title="25,470 reputation">Stu Thompson</a></author></comment><comment><text><span class="comment-copy">I already use a different password on every website through a scheme that lets me remember them all, but they are all rather long. The only websies whose passwords I write on sticky notes are those which impose moronic max length limitations and thus force me away from my preferred yet unique password...</span></text><author><a class="comment-user" href="/users/33080/roman-starkov" title="28,729 reputation">Roman Starkov</a></author></comment><comment><text><span class="comment-copy">@romkyns I take it your scheme does not use symbols? I had such a scheme once that produced short hard-to-brute-force passwords, but I had to abandon it when 10-20% of the sites I used forbid common special characters.</span></text><author><a class="comment-user" href="/users/13675/sparr" title="6,514 reputation">Sparr</a></author></comment><comment><text><span class="comment-copy">no special characters, no, but it always adds numbers and uppercase chars, because I knew some sites demand that. Wish I had known about the max length limits when I came up with it... But the (simpler) schemes I made up for close relatives have worked perfectly so far!</span></text><author><a class="comment-user" href="/users/33080/roman-starkov" title="28,729 reputation">Roman Starkov</a></author></comment><comment><text><span class="comment-copy">@romkyns other problems with such schemes: sites that share passwords. If your scheme is something like nameofwebsitefO0 (googlefO0 yahoofO0 etc) then how do you remember that you're supposed to use "yahoofO0" on flickr.com, or stackoverflowfO0 on askubuntu.com? sites that expire passwords. then you need to extend the scheme to include a part that can change. but that fails if the expiration rule checks for substrings.</span></text><author><a class="comment-user" href="/users/13675/sparr" title="6,514 reputation">Sparr</a></author></comment><comment><text><span class="comment-copy">@romkyns Another possible issue with schemes is that if they're not sufficiently complex, (e.g. the googlefO0, yahoofO0 approach), then an attacker can very easily deduce all of your passwords from the plaintext of only one. You might as well use the same password for all sites.</span></text><author><a class="comment-user" href="/users/770230/dan" title="2,705 reputation">Dan</a></author></comment><comment><text><span class="comment-copy">What's wrong with writing a password down? Assuming it's in writing, not digitally stored, it's the one of most secure ways to save a password after storing it in your own brain (which <i>can</i> be hacked - we're just lucky that's not much of a problem yet - though it can be conned rather easily already).</span></text><author><a class="comment-user" href="/users/1202953/deji" title="419 reputation">Deji</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>One reason I can imagine for enforcing a maximum password length is if the frontend must interface with many legacy system backends, one of which itself enforces a maximum password length.</p>
<p>Another thinking process might be that if a user is forced to go with a short password they're more likely to invent random gibberish than an easily guessed (by their friends/family) catch-phrase or nickname.  This approach is of course only effective if the frontend enforces mixing numbers/letters and rejects passwords which have any dictionary words, including words written in l33t-speak.</p>
</div></text><author><a href="/users/18446/mbac32768">mbac32768</a></author><comments><comment><text><span class="comment-copy">While understandable, legacy systems sometimes have to dictate design. Wheverever possible they should NOT influence it. The last thing you want in a new system is one with a security policy designed before modern security attacks were even common. Or worse, newer software but incorrectly designed in the first place. An existing corporate system may use HTTP but that's no justification to not use SSL in a new system or extension. Likewise, password policies shouldn't continue to be vulnerable just because the LAST guys did it wrong.And if keeping, there had better be a HUGE cost/benefit study.</span></text><author><a class="comment-user" href="/users/3366461/katastic-voyage" title="68 reputation">Katastic Voyage</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Maximum password length limit is now  discouraged by OWASP Authentication Cheat Sheet</p>
<p><a href="https://www.owasp.org/index.php/Authentication_Cheat_Sheet">https://www.owasp.org/index.php/Authentication_Cheat_Sheet</a></p>
<p>Citing the whole paragraph:</p>
<blockquote>
<p>Longer passwords provide a greater combination of characters and consequently make it more difficult for an attacker to guess.</p>
<p>Minimum length of the passwords should be enforced by the application.
  Passwords shorter than 10 characters are considered to be weak ([1]).
  While minimum length enforcement may cause problems with memorizing passwords among some users, applications should encourage them to set passphrases (sentences or combination of words) that can be much longer than typical passwords and yet much easier to remember.</p>
<p>Maximum password length should not be set too low, as it will prevent users from creating passphrases. Typical maximum length is 128 characters.
  Passphrases shorter than 20 characters are usually considered weak if they only consist of lower case Latin characters. Every character counts!!</p>
<p>Make sure that every character the user types in is actually included in the password. We've seen systems that truncate the password at a length shorter than what the user provided (e.g., truncated at 15 characters when they entered 20).
  This is usually handled by setting the length of ALL password input fields to be exactly the same length as the maximum length password. This is particularly important if your max password length is short, like 20-30 characters.</p>
</blockquote>
</div></text><author><a href="/users/1274149/kravietz">kravietz</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>One potentially valid reason to impose some maximum password length is that the process of hashing it (due to the use of a slow hashing function such as bcrypt) takes up too much time; something that could be abused in order to execute a DOS attack against the server.</p>
<p>Then again, servers should be configured to automatically drop request handlers that take too long. So I doubt this would be much of a problem.</p>
</div></text><author><a href="/users/1345020/aardvarksoup">AardvarkSoup</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I think you're very right on both bullet points. If they're storing the passwords hashed, as they should, then password length doesn't affect their DB schema whatsoever. Having an open-ended password length throws in one more variable that a brute-force attacker has to account for.</p>
<p>It's hard to see any excuse for limiting password length, besides bad design.</p>
</div></text><author><a href="/users/6726/lucas-oman">Lucas Oman</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Storage is cheap, why limit the password length. Even if you're encrypting the password as opposed to just hashing it a 64 character string isn't going to take much more than a 6 character string to encrypt.</p>
<p>Chances are the bank system is overlaying an older system so they were only able to allow a certain amount of space for the password.</p>
</div></text><author><a href="/users/13616/lizb">LizB</a></author><comments><comment><text><span class="comment-copy">Unless there is a very valid reason, passwords should hashed.  Hashes result in fixed length strings.  There is not space argument to make, unless the system is storing the actual password, which is arguably a terrible idea.</span></text><author><a class="comment-user" href="/users/2961/stu-thompson" title="25,470 reputation">Stu Thompson</a></author></comment><comment><text><span class="comment-copy">Encrypting passwords is a terrible idea. An unscrupulous employee is all it takes for you to leak a gazillion passwords. Save the trouble by never storing them in the first place.</span></text><author><a class="comment-user" href="/users/33080/roman-starkov" title="28,729 reputation">Roman Starkov</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The only benefit I can see to a maximum password length would be to eliminate the risk of a buffer overflow attack caused by an overly long password, but there are much better ways to handle that situation. </p>
</div></text><author><a href="/users/17007/drstalker">DrStalker</a></author><comments><comment><text><span class="comment-copy">Nothing that very basic testing could not solve.</span></text><author><a class="comment-user" href="/users/2961/stu-thompson" title="25,470 reputation">Stu Thompson</a></author></comment><comment><text><span class="comment-copy">There should be a maximum input length, yes, but it should definitely not be &lt; 64. A maximum length of 8 or 12 is just ridiculous.</span></text><author><a class="comment-user" href="/users/770230/dan" title="2,705 reputation">Dan</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Longer passwords, or pass-phrases, are harder to crack simply based on length, and easier to remember than requiring a complex password.<br/><br/>
Probably best to go for a fairly long (10+) minimum length, restricting the length useless.</p>
</div></text><author><a href="/users/4490/benpearce">benPearce</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>My bank does this too. It used to allow any password, and I had a 20 character one. One day I changed it, and lo and behold it gave me a maximum of 8, and had cut out non-alphanumeric characters which were in my old password. Didn't make any sense to me.</p>
<p>All the back-end systems at the bank worked before when I was using my 20 char password with non alpha-numerics, so legacy support can't have been the reason. And even if it was, they should still allow you to have arbitrary passwords, and then make a hash that fits the requirements of the legacy systems. Better still, they should fix the legacy systems.</p>
<p>A smart card solution would not go well with me. I already have too many cards as it is... I don't need another gimmick.</p>
</div></text><author><a href="/users/16299/vincent-mcnabb">Vincent McNabb</a></author><comments><comment><text><span class="comment-copy">Switch to a different bank, quick!</span></text><author><a class="comment-user" href="/users/319931/mechanical-snail" title="14,783 reputation">Mechanical snail</a></author></comment><comment><text><span class="comment-copy">They cut out important keyspace that lengthens to time for brute force attacks when (and I mean WHEN) their database of hashes is stolen (assuming they even salt/hash/stretch, which I'm sure they don't).  Time to change banks.</span></text><author><a class="comment-user" href="/users/263817/chris-gomez" title="760 reputation">Chris Gomez</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>If you accept an arbitrary sized password then one assumes that it is getting truncated to a curtain length for performance reasons before it is hashed. The issue with truncation is that as your server performance increases over time you can't easily increase the length before truncation as its hash would clearly be different. Of course you could have a transition period where both lengths are hashed and checked but this uses more resources. </p>
</div></text><author><a href="/users/3480243/user">User</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Should there be a maximum length? This is a curious topic in IT in that, longer passwords are typically harder to remember, and therefore more likely to get written down (a BIG no-no for obvious reasons).  Longer passwords also tend to get forgotten more, which while not necessarily a security risk, can lead to administrative hassles, lost productivity, etc.  Admins who believe that these issues are pressing are likely to impose maximum lengths on passwords.</p>
<p>I personally believe on this specific issue,  to each user their own.  If you think you can remember a 40 character password, then all the more power to you!  </p>
<p>Having said that though, passwords are fast becoming an outdated mode of security, Smart Cards and certificate authentication prove very difficult to impossible to brute force as you stated is an issue, and only a public key need be stored on the server end with the private key on your card/computer at all times.</p>
</div></text><author><a href="/users/16868/tekiegreg">tekiegreg</a></author><comments><comment><text><span class="comment-copy">People can easily remember a favorite song lyric, bible verse, or other saying. Those are <i>very</i> long compared to a typical password. I just tested one and came in at 79 characters! (Granted, the possibility of a mistake goes up the longer a passphrase is. Even worse when a STUPID website doesn't show you the last character you entered in the password box.)</span></text><author><a class="comment-user" href="/users/3366461/katastic-voyage" title="68 reputation">Katastic Voyage</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Legacy systems (mentioned already) or interfacing outside vendor's systems might necessitate the 8 character cap. It could also be a misguided attempt to save the users from themselves. Limiting it in that fashion will result in too many pssw0rd1, pssw0rd2, etc. passwords in the system.</p>
</div></text><author><a href="/users/1921/chuck">Chuck</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>One reason passwords may not be hashed is the authentication algorithm used. For example, some <a href="http://en.wikipedia.org/wiki/Digest_access_authentication" rel="nofollow">digest algorithms</a> require a plaintext version of the password at the server as the authentication mechanism involves both the client and the server performing the same maths on the entered password (which generally won't produce the same output each time as the password is combined with a randomly generated 'nonce', which is shared between the two machines).</p>
<p>Often this can be strengthened as the digest can be part computed in some cases, but not always. A better route is for the password to be stored with reversible encryption - this then means the application sources need to be protected as they'll contain the encryption key.</p>
<p>Digst auth is there to allow authentication over otherwise non-encrypted channels. If using SSL or some other full-channel encryption, then there's no need to use digest auth mechanisms, meaning passwords can be stored hashed instead (as passwords could be sent plaintext over the wire safely (for a given value of safe).</p>
</div></text><author><a href="/users/130352/chris-j">Chris J</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Try not to impose any limitation unless necessary. Be warned: it might and will be necessary in a lot of different cases. Dealing with legacy systems is one of these reasons. Make sure you test the case of very long passwords well (can your system deal with 10MB long passwords?). You can run into Denial of Service (DoS) problems because the Key Defivation Functions (KDF) you will be using (usually PBKDF2, bcrypt, scrypt) will take to much time and resources. Real life example: <a href="http://arstechnica.com/security/2013/09/long-passwords-are-good-but-too-much-length-can-be-bad-for-security/" rel="nofollow">http://arstechnica.com/security/2013/09/long-passwords-are-good-but-too-much-length-can-be-bad-for-security/</a></p>
</div></text><author><a href="/users/831460/marek-puchalski">Marek Puchalski</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Just 8 char long passwords sound simply wrong. If there ought to be a limit, then atleast 20 char is better idea.</p>
</div></text><author><a href="/users/17000/user17000">user17000</a></author><comments><comment><text><span class="comment-copy">But that's the thing - there ought to not be a limit at all.</span></text><author><a class="comment-user" href="/users/332565/lucanos" title="9,231 reputation">Lucanos</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I think the only limit that should be applied is like a 2000 letter limit, or something else insainly high, but only to limit the database size if that is an issue</p>
</div></text><author><a href="/users/2592/josh-hunt">Josh Hunt</a></author><comments><comment><text><span class="comment-copy">Passwords should be hashed... And database size wouldn't be an issue is the password is hashed.</span></text><author><a class="comment-user" href="/users/16204/epochwolf" title="7,664 reputation">epochwolf</a></author></comment><comment><text><span class="comment-copy">@epochwolf – I can think of one reason why passwords shouldn't <i>always</i> be hashed (because I discovered it myself today): a password that needs to be submitted to a third party on behalf of the user can't be stored as a hashed value. [E.g. an application that needs to store credentials for sending emails thru an external domain.]</span></text><author><a class="comment-user" href="/users/173497/kenny-evitt" title="4,418 reputation">Kenny Evitt</a></author></comment></comments></answer></answers></post>