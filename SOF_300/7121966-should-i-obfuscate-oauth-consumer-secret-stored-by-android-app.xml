<?xml version="1.0" encoding="utf-8"?>
<post><title>security - Should I obfuscate OAuth consumer secret stored by Android app? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>My Android app contains OAuth consumer secret for Twitter's API. At the moment it's in <code>.properties</code> file in plain text, so it takes zero effort for someone to look it up in APK.</p>
<p>Should I take steps to obscure it (like, rot13 or stored in obfuscated Java code)? Or should I actually avoid doing any of that, as it would create false sense of security?</p>
<p>How do people usually distribute/store OAuth secret in Android apps?
How common it is for the secret to be stolen and abused?</p>
</div></text><author><a href="/users/5821/p%c4%93teris-caune">Pēteris Caune</a></author><comments><comment><text><span class="comment-copy">I have the same strategy with my iOS app and NodeJS+ExpressJS+PassportJS at the backend. I use Twitter reverse auth to authenticate the users from iOS. But for securing this and stop users from sniffing HTTP packets in the middle to find out what's in the headers, I am planning to use HTTPS on my servers to encrypt the data. Check this to avoid embedding your secrets keys in your app: <a href="https://dev.twitter.com/docs/ios/using-reverse-auth" rel="nofollow noreferrer">dev.twitter.com/docs/ios/using-reverse-auth</a></span></text><author><a class="comment-user" href="/users/1449151/maziyar" title="685 reputation">Maziyar</a></author></comment><comment><text><span class="comment-copy">Note: Reverse Auth is only for iOS</span></text><author><a class="comment-user" href="/users/825364/steve-tauber" title="3,807 reputation">Steve Tauber</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>The real question is what does an attacker get from stealing it...</p>
<p>You should do your best to protect secrets but at the end, a highly motivated hacker can always get to it in an installed app. So it's the value of the secret vs. difficulty of extraction.</p>
<p>The value of the client secret is impersonating the application. It doesn't give any access to user data. However, since Twitter supports automatic issuance of credentials to previously approved apps (their sign-in with Twitter flow), an attacker can potentially build a web app with your secret and steal user data using a blind redirect.</p>
<p>The problem with Twitter's implementation is that they do not ask the developer about the nature of the application. If they did, they would not have issued you a secret to begin with, and would block anyone building a web application using your client credentials and stealing data from users who already approved it.</p>
<p>Obfuscating is one option, but a weak one. Moving the secret to a web server acting as an API proxy is another, but that just moves the problem elsewhere because now your app has to authenticate against the proxy server. However, this pattern can be reasonably secure if you require users to log into your site (which can use, via web views, Twitter to log in). This way, someone trying to abuse your proxy will need their users to open accounts on your service, which isn't very appealing.</p>
<p>In short, go ahead and obfuscate it. It doesn't hurt. Consider using the proxy pattern too. And maybe let Twitter know their security policies are "not great".</p>
</div></text><author><a href="/users/807187/eran-hammer">Eran Hammer</a></author><comments><comment><text><span class="comment-copy">Thanks for the answer. The app I'm working on is not going to be high profile social app, tweeting from it is a side feature. So I think I'll go with some obfuscation, but will skip the added complexity of proxy pattern.</span></text><author><a class="comment-user owner" href="/users/5821/p%c4%93teris-caune" title="24,734 reputation">Pēteris Caune</a></author></comment><comment><text><span class="comment-copy">Great to see my points reinforced by someone in the know. While proxying does move the problem elsewhere, a would-be hacker has to write a specific program to abuse your proxy. In reality, they will simply harvest consumer secrets from other apps - there's <a href="http://techcrunch.com/2011/08/19/twitter-releases-bootstrap-a-set-of-tools-to-build-web-apps-using-css/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+Techcrunch+%28TechCrunch%29" rel="nofollow noreferrer">over a million third-party apps</a> out there, after all.</span></text><author><a class="comment-user" href="/users/80425/david-caunt" title="45,958 reputation">David Caunt</a></author></comment><comment><text><span class="comment-copy">There is a CallBack URL in Twitter Apps, is this going to be enough to stop hackers from building web apps stealing data? It has to be the domain you set into your app settings otherwise it wont authorize whatever you send.</span></text><author><a class="comment-user" href="/users/1449151/maziyar" title="685 reputation">Maziyar</a></author></comment><comment><text><span class="comment-copy">@Eran Even if the secret key has been obfuscated using a complex algorithm, is there anything stopping someone from installing a certificate on the device to trick it into thinking it is communicating with Twitter's API so it sends the deobfuscated key along with the request when in fact it is sending the deobfuscated key to the attacker's server? And if so, isn't this certificate exercise fairly trivial to do, so what is the point of obfuscating the key?</span></text><author><a class="comment-user" href="/users/706760/josh-sherick" title="1,190 reputation">Josh Sherick</a></author></comment><comment><text><span class="comment-copy">Is there anyway to put it in iOS/Android keychain?</span></text><author><a class="comment-user" href="/users/2797254/weishi-zeng" title="454 reputation">Weishi Zeng</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I would definitely read <a href="http://hueniverse.com/2010/09/all-this-twitter-oauth-security-nonsense/" rel="nofollow">this analysis</a> by one of the OAuth authors, Eran Hammer-Lahav, which cites another <a href="http://arstechnica.com/security/guides/2010/09/twitter-a-case-study-on-how-to-do-oauth-wrong.ars" rel="nofollow">article dissecting Twitter's OAuth secret problems</a>.</p>
<p>My advice would be to obfuscate the key so that it cannot trivially be extracted and you should be safe from chancers and spammers. </p>
<p>Hammer-Lahav's opinion is that OAuth secrets should not be revoked and should merely be used for gathering statistics. Hopefully Twitter are following this advice.</p>
</div></text><author><a href="/users/80425/david-caunt">David Caunt</a></author><comments><comment><text><span class="comment-copy">The article says "don't use client secrets in installed applications", and your advice is to do the opposite...</span></text><author><span class="comment-user">user23743</span></author></comment><comment><text><span class="comment-copy">@Graham Great point - I should have been a little clearer. If the OP is planning to proceed then obfuscation <i>is</i> imporant. Otherwise, I guess you need an implementation where the secret is stored on a remote server and a web service acts as a proxy for OAuth calls. I don't know what the best practices are for this approach.</span></text><author><a class="comment-user" href="/users/80425/david-caunt" title="45,958 reputation">David Caunt</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Main point of 0Auth is that you do not store any precious sensitive information on device -
so it is ok to store secret on device (much better that real user credentials). In case your device secrets are stolen,  user can always invalidate access without need to change his credentials</p>
</div></text><author><a href="/users/683735/konstantin-pribluda">Konstantin Pribluda</a></author><comments><comment><text><span class="comment-copy">Aye but if someone finds your app's consumer secret they can pretend to be your app. You can change the key and secret but then all your installations in the field can't tweet any more.</span></text><author><a class="comment-user" href="/users/64505/funkybro" title="6,232 reputation">funkybro</a></author></comment><comment><text><span class="comment-copy">There is no way to hide something inside your app from determined person (even OS 360 was reverse engineered and patched in machine code in russia). And even if somebody pretends to be your app,  user will still have  to authenticate himself against service - so no real compromiss there.</span></text><author><a class="comment-user" href="/users/683735/konstantin-pribluda" title="10,453 reputation">Konstantin Pribluda</a></author></comment><comment><text><span class="comment-copy">I think this answer has confused consumer secrets with oauth tokens.</span></text><author><a class="comment-user" href="/users/80425/david-caunt" title="45,958 reputation">David Caunt</a></author></comment></comments></answer></answers></post>