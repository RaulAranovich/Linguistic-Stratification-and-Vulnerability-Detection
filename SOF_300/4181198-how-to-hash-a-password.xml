<?xml version="1.0" encoding="utf-8"?>
<post><title>c# - How to hash a password - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>hey,
   I'd like to store the hash of a password on the phone, but I'm not sure how to do it. I can only seem to find encryption methods. What's the best way to hash the password? 
thanks</p>
</div></text><author><a href="/users/245004/skoder">Skoder</a></author><comments/></question><answers><answer><text><div class="post-text" itemprop="text">
<p><strong>UPDATE</strong>: <strong>THIS ANSWER IS SERIOUSLY OUTDATED</strong>. Please use the recommendations from the <a href="http://stackoverflow.com/a/10402129/251311">http://stackoverflow.com/a/10402129/251311</a> instead.</p>
<p>You can either use</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="kwd">var</span><span class="pln"> md5 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> MD5CryptoServiceProvider</span><span class="pun">();</span><span class="pln">
</span><span class="kwd">var</span><span class="pln"> md5data </span><span class="pun">=</span><span class="pln"> md5</span><span class="pun">.</span><span class="typ">ComputeHash</span><span class="pun">(</span><span class="pln">data</span><span class="pun">);</span></code></pre>
<p>or</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="kwd">var</span><span class="pln"> sha1 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> SHA1CryptoServiceProvider</span><span class="pun">();</span><span class="pln">
</span><span class="kwd">var</span><span class="pln"> sha1data </span><span class="pun">=</span><span class="pln"> sha1</span><span class="pun">.</span><span class="typ">ComputeHash</span><span class="pun">(</span><span class="pln">data</span><span class="pun">);</span></code></pre>
<p>To get <code>data</code> as byte array you could use</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="kwd">var</span><span class="pln"> data </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Encoding</span><span class="pun">.</span><span class="pln">ASCII</span><span class="pun">.</span><span class="typ">GetBytes</span><span class="pun">(</span><span class="pln">password</span><span class="pun">);</span></code></pre>
<p>and to get back string from <code>md5data</code> or <code>sha1data</code></p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="kwd">var</span><span class="pln"> hashedPassword </span><span class="pun">=</span><span class="pln"> </span><span class="typ">ASCIIEncoding</span><span class="pun">.</span><span class="typ">GetString</span><span class="pun">(</span><span class="pln">md5data</span><span class="pun">);</span></code></pre>
</div></text><author><a href="/users/251311/zerkms">zerkms</a></author><comments><comment><text><span class="comment-copy">I would REALLY recommend using SHA1. MD5 is a no-no unless you are maintaining backward compatibility with an existing system. In addition, make sure you put it in a <code>using</code> statement or call <code>Clear()</code> on it when you are done using the implementation.</span></text><author><a class="comment-user" href="/users/492405/vcsjones" title="85,811 reputation">vcsjones</a></author></comment><comment><text><span class="comment-copy">@vcsjones: I don't want to holy-war here, but <code>md5</code> is good enough for the almost all kind of tasks. Its vulnerabilities also refers to very specific situations and almost requires for attacker to know a lot about cryptography.</span></text><author><a class="comment-user" href="/users/251311/zerkms" title="158,747 reputation">zerkms</a></author></comment><comment><text><span class="comment-copy">@zerkms point taken, but if there is no reason for backward compatibility, there is no reason to use MD5. "Better safe than sorry".</span></text><author><a class="comment-user" href="/users/492405/vcsjones" title="85,811 reputation">vcsjones</a></author></comment><comment><text><span class="comment-copy">@zerkms MD5CryptoServiceProvider and SHA1CryptoServiceProvider implement the IDisposable interface explicitly using the <code>Clear</code> method.</span></text><author><a class="comment-user" href="/users/492405/vcsjones" title="85,811 reputation">vcsjones</a></author></comment><comment><text><span class="comment-copy">While I agree wholeheartedly with zerkms, if you have the option between the two, and the difficulty is approximately the same, choose SHA1 or allow for either.</span></text><author><a class="comment-user" href="/users/366020/slartibartfast" title="1,411 reputation">Slartibartfast</a></author></comment><comment><text><span class="comment-copy">@vcsjones: oh, thanks. I did not even know crypto-classes need to be disposed :-S The samples at <a href="http://msdn.microsoft.com/en-us/library/system.security.cryptography.md5cryptoserviceprovider.aspx" rel="nofollow noreferrer">msdn.microsoft.com/en-us/library/â€¦</a> don't do that in some reason...</span></text><author><a class="comment-user" href="/users/251311/zerkms" title="158,747 reputation">zerkms</a></author></comment><comment><text><span class="comment-copy">@Slartibartfast: indeed, <code>sha1</code> is better, but <code>md5</code> is not so bad as most of people want to present.</span></text><author><a class="comment-user" href="/users/251311/zerkms" title="158,747 reputation">zerkms</a></author></comment><comment><text><span class="comment-copy">Thanks, this is great!</span></text><author><a class="comment-user owner" href="/users/245004/skoder" title="1,183 reputation">Skoder</a></author></comment><comment><text><span class="comment-copy">No reason to use MD5 at this point.  Given that computation time is insignificant there is no reason to use MD5 except as compatibility with existing systems.  Even if MD5 is "good enough" there is no cost with user the far more secure SHA.  I am sure zerkms know this the comment is more for the questioner.</span></text><author><a class="comment-user" href="/users/498612/gerald-davis" title="3,187 reputation">Gerald Davis</a></author></comment><comment><text><span class="comment-copy">Some systems (WPF in my case) do not suppose ASCIIEncoding.GetString(md5data) - instead, you can use var hashedPassword = new System.Text.ASCIIEncoding().GetString(md5data).</span></text><author><a class="comment-user" href="/users/498949/chris-rae" title="4,501 reputation">Chris Rae</a></author></comment><comment><text><span class="comment-copy">Surprisingly no one says why it's bad to use MD5: because it's incredibly fast (say takes microseconds to hash a 5-10 char string), so it's possible to run a brute force attack to find the password for a given md5 hash (say 10 billion possible password 5 chars long =&gt; 10000 seconds or less than 3 hours on a single cpu).</span></text><author><a class="comment-user" href="/users/306042/milan" title="6,080 reputation">milan</a></author></comment><comment><text><span class="comment-copy">Three big mistakes: 1) ASCII silently degrades passwords with unusual characters 2) Plain MD5/SHA-1/SHA-2 is fast. 3) You need a salt. | Use PBKDF2, bcrypt or scrypt instead. PBKDF2 is easiest in the Rfc2898DeriveBytes class (not sure if present on WP7)</span></text><author><a class="comment-user" href="/users/445517/codesinchaos" title="78,763 reputation">CodesInChaos</a></author></comment><comment><text><span class="comment-copy">See <a href="https://en.wikipedia.org/wiki/MD5#Security" rel="nofollow noreferrer">en.wikipedia.org/wiki/MD5#Security</a> for reasons why using MD5 is now a bad idea.</span></text><author><a class="comment-user" href="/users/88588/sam" title="1,514 reputation">Sam</a></author></comment><comment><text><span class="comment-copy">@zerkms you might want to update this answer.</span></text><author><a class="comment-user" href="/users/1348195/benjamin-gruenbaum" title="140,087 reputation">Benjamin Gruenbaum</a></author></comment><comment><text><span class="comment-copy">@BenjaminGruenbaum like that?</span></text><author><a class="comment-user" href="/users/251311/zerkms" title="158,747 reputation">zerkms</a></author></comment><comment><text><span class="comment-copy">Thanks, much much better.</span></text><author><a class="comment-user" href="/users/1348195/benjamin-gruenbaum" title="140,087 reputation">Benjamin Gruenbaum</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Most of the other answers here are somewhat out-of-date with today's best practices.  As such here is the application of using PBKDF2/Rfc2898DeriveBytes to store and verify passwords.  The following code is in a stand-alone class in this post: <a href="http://csharptest.net/470/another-example-of-how-to-store-a-salted-password-hash/" rel="noreferrer">Another example of how to store a salted password hash</a>.  The basics are really easy, so here it is broken down:</p>
<p><strong>STEP 1</strong> Create the salt value with a cryptographic PRNG:</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> salt</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">RNGCryptoServiceProvider</span><span class="pun">().</span><span class="typ">GetBytes</span><span class="pun">(</span><span class="pln">salt </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">byte</span><span class="pun">[</span><span class="lit">16</span><span class="pun">]);</span></code></pre>
<p><strong>STEP 2</strong> Create the Rfc2898DeriveBytes and get the hash value:</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="kwd">var</span><span class="pln"> pbkdf2 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Rfc2898DeriveBytes</span><span class="pun">(</span><span class="pln">password</span><span class="pun">,</span><span class="pln"> salt</span><span class="pun">,</span><span class="pln"> </span><span class="lit">10000</span><span class="pun">);</span><span class="pln">
</span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> hash </span><span class="pun">=</span><span class="pln"> pbkdf2</span><span class="pun">.</span><span class="typ">GetBytes</span><span class="pun">(</span><span class="lit">20</span><span class="pun">);</span></code></pre>
<p><strong>STEP 3</strong> Combine the salt and password bytes for later use:</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> hashBytes </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">byte</span><span class="pun">[</span><span class="lit">36</span><span class="pun">];</span><span class="pln">
</span><span class="typ">Array</span><span class="pun">.</span><span class="typ">Copy</span><span class="pun">(</span><span class="pln">salt</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> hashBytes</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">16</span><span class="pun">);</span><span class="pln">
</span><span class="typ">Array</span><span class="pun">.</span><span class="typ">Copy</span><span class="pun">(</span><span class="pln">hash</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> hashBytes</span><span class="pun">,</span><span class="pln"> </span><span class="lit">16</span><span class="pun">,</span><span class="pln"> </span><span class="lit">20</span><span class="pun">);</span></code></pre>
<p><strong>STEP 4</strong> Turn the combined salt+hash into a string for storage</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="kwd">string</span><span class="pln"> savedPasswordHash </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Convert</span><span class="pun">.</span><span class="typ">ToBase64String</span><span class="pun">(</span><span class="pln">hashBytes</span><span class="pun">);</span><span class="pln">
</span><span class="typ">DBContext</span><span class="pun">.</span><span class="typ">AddUser</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">User</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">...,</span><span class="pln"> </span><span class="typ">Password</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> savedPasswordHash </span><span class="pun">});</span></code></pre>
<p><strong>STEP 5</strong> Verify the user-entered password against a stored password</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="com">/* Fetch the stored value */</span><span class="pln">
</span><span class="kwd">string</span><span class="pln"> savedPasswordHash </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DBContext</span><span class="pun">.</span><span class="typ">GetUser</span><span class="pun">(</span><span class="pln">u </span><span class="pun">=&gt;</span><span class="pln"> u</span><span class="pun">.</span><span class="typ">UserName</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> user</span><span class="pun">).</span><span class="typ">Password</span><span class="pun">;</span><span class="pln">
</span><span class="com">/* Extract the bytes */</span><span class="pln">
</span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> hashBytes </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Convert</span><span class="pun">.</span><span class="typ">FromBase64String</span><span class="pun">(</span><span class="pln">savedPasswordHash</span><span class="pun">);</span><span class="pln">
</span><span class="com">/* Get the salt */</span><span class="pln">
</span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> salt </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">byte</span><span class="pun">[</span><span class="lit">16</span><span class="pun">];</span><span class="pln">
</span><span class="typ">Array</span><span class="pun">.</span><span class="typ">Copy</span><span class="pun">(</span><span class="pln">hashBytes</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> salt</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">16</span><span class="pun">);</span><span class="pln">
</span><span class="com">/* Compute the hash on the password the user entered */</span><span class="pln">
</span><span class="kwd">var</span><span class="pln"> pbkdf2 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Rfc2898DeriveBytes</span><span class="pun">(</span><span class="pln">password</span><span class="pun">,</span><span class="pln"> salt</span><span class="pun">,</span><span class="pln"> </span><span class="lit">10000</span><span class="pun">);</span><span class="pln">
</span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> hash </span><span class="pun">=</span><span class="pln"> pbkdf2</span><span class="pun">.</span><span class="typ">GetBytes</span><span class="pun">(</span><span class="lit">20</span><span class="pun">);</span><span class="pln">
</span><span class="com">/* Compare the results */</span><span class="pln">
</span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="typ">int</span><span class="pln"> i</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">20</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">hashBytes</span><span class="pun">[</span><span class="pln">i</span><span class="pun">+</span><span class="lit">16</span><span class="pun">]</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> hash</span><span class="pun">[</span><span class="pln">i</span><span class="pun">])</span><span class="pln">
        </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">UnauthorizedAccessException</span><span class="pun">();</span></code></pre>
<p>Note: Depending on the performance requirements of your specific application, the value '10000' can be reduced.  A minimum value should be around 1000.</p>
</div></text><author><a href="/users/164392/csharptest-net">csharptest.net</a></author><comments><comment><text><span class="comment-copy">Thank you for the update and the detailed comments on your code, big help !</span></text><author><a class="comment-user" href="/users/860246/mickael-v" title="402 reputation">Mickael V.</a></author></comment><comment><text><span class="comment-copy">This is more like a question, isn't easier, for checking the password, to hash the given password and compare the stored string with the one given by the user and hashed again?</span></text><author><a class="comment-user" href="/users/1723944/daniel" title="878 reputation">Daniel</a></author></comment><comment><text><span class="comment-copy">@Daniel basically the post is about using something more secure than a hash alone.  If you simply hash a password, even with salt, your users passwords are going to be compromised (and likely sold/published) before you even have a chance to tell them to change it. Use the above code to make it difficult for the attacker, not easy for the developer.</span></text><author><a class="comment-user" href="/users/164392/csharptest-net" title="28,882 reputation">csharptest.net</a></author></comment><comment><text><span class="comment-copy">I find a website what go very deep in the argument: <a href="http://www.codeproject.com/Articles/704865/Salted-Password-Hashing-Doing-it-Right" rel="nofollow noreferrer">codeproject.com/Articles/704865/â€¦</a> and here is the code that the author propose: <a href="https://crackstation.net/hashing-security.htm#aspsourcecode" rel="nofollow noreferrer">crackstation.net/hashing-security.htm#aspsourcecode</a></span></text><author><a class="comment-user" href="/users/339150/marco-staffoli" title="1,248 reputation">Marco Staffoli</a></author></comment><comment><text><span class="comment-copy">Please help me clarify: the step 1 should be runned once and use that array forever for an application, is it correct?</span></text><author><a class="comment-user" href="/users/653457/datvm" title="3,793 reputation">DatVM</a></author></comment><comment><text><span class="comment-copy">@DatVM No, new salt for every time you store a hash. that is why it's combined with the hash for storage so that you can verify a password.</span></text><author><a class="comment-user" href="/users/164392/csharptest-net" title="28,882 reputation">csharptest.net</a></author></comment><comment><text><span class="comment-copy">@csharptest.net thanks, works fine but how I can decript to see initial password ? Thanks</span></text><author><a class="comment-user" href="/users/5375427/ciprian-jijie" title="178 reputation">Ciprian Jijie</a></author></comment><comment><text><span class="comment-copy">@CiprianJijie the whole point is your not suppose to be able to.</span></text><author><a class="comment-user" href="/users/164392/csharptest-net" title="28,882 reputation">csharptest.net</a></author></comment><comment><text><span class="comment-copy">In case anyone is doing a VerifyPassword method, if you would like to use Linq and a shorter call for a boolean, this would do: return hash.SequenceEqual(hashBytes.Skip(_saltSize));</span></text><author><a class="comment-user" href="/users/3897926/jes%c3%ba-castillo" title="86 reputation">JesÃº Castillo</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I use a hash and a salt for my password encryption (it's the same hash that Asp.Net Membership uses):</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="kwd">private</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">PasswordSalt</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
   get
   </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">var</span><span class="pln"> rng </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">RNGCryptoServiceProvider</span><span class="pun">();</span><span class="pln">
      </span><span class="kwd">var</span><span class="pln"> buff </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">byte</span><span class="pun">[</span><span class="lit">32</span><span class="pun">];</span><span class="pln">
      rng</span><span class="pun">.</span><span class="typ">GetBytes</span><span class="pun">(</span><span class="pln">buff</span><span class="pun">);</span><span class="pln">
      </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Convert</span><span class="pun">.</span><span class="typ">ToBase64String</span><span class="pun">(</span><span class="pln">buff</span><span class="pun">);</span><span class="pln">
   </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">EncodePassword</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> password</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> salt</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
   </span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> bytes </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Encoding</span><span class="pun">.</span><span class="typ">Unicode</span><span class="pun">.</span><span class="typ">GetBytes</span><span class="pun">(</span><span class="pln">password</span><span class="pun">);</span><span class="pln">
   </span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> src </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Encoding</span><span class="pun">.</span><span class="typ">Unicode</span><span class="pun">.</span><span class="typ">GetBytes</span><span class="pun">(</span><span class="pln">salt</span><span class="pun">);</span><span class="pln">
   </span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> dst </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">byte</span><span class="pun">[</span><span class="pln">src</span><span class="pun">.</span><span class="typ">Length</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> bytes</span><span class="pun">.</span><span class="typ">Length</span><span class="pun">];</span><span class="pln">
   </span><span class="typ">Buffer</span><span class="pun">.</span><span class="typ">BlockCopy</span><span class="pun">(</span><span class="pln">src</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> dst</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> src</span><span class="pun">.</span><span class="typ">Length</span><span class="pun">);</span><span class="pln">
   </span><span class="typ">Buffer</span><span class="pun">.</span><span class="typ">BlockCopy</span><span class="pun">(</span><span class="pln">bytes</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> dst</span><span class="pun">,</span><span class="pln"> src</span><span class="pun">.</span><span class="typ">Length</span><span class="pun">,</span><span class="pln"> bytes</span><span class="pun">.</span><span class="typ">Length</span><span class="pun">);</span><span class="pln">
   </span><span class="typ">HashAlgorithm</span><span class="pln"> algorithm </span><span class="pun">=</span><span class="pln"> </span><span class="typ">HashAlgorithm</span><span class="pun">.</span><span class="typ">Create</span><span class="pun">(</span><span class="str">"SHA1"</span><span class="pun">);</span><span class="pln">
   </span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> inarray </span><span class="pun">=</span><span class="pln"> algorithm</span><span class="pun">.</span><span class="typ">ComputeHash</span><span class="pun">(</span><span class="pln">dst</span><span class="pun">);</span><span class="pln">
   </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Convert</span><span class="pun">.</span><span class="typ">ToBase64String</span><span class="pun">(</span><span class="pln">inarray</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/144496/martin">Martin</a></author><comments><comment><text><span class="comment-copy">-1 for using plain SHA-1, which is fast. Use a slow key derivation function, such as PBKDF2, bcrypt or scrypt.</span></text><author><a class="comment-user" href="/users/445517/codesinchaos" title="78,763 reputation">CodesInChaos</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Based on <a href="http://stackoverflow.com/a/10402129/2441442">csharptest.net's</a> great answer, I have written a Class for this:</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="kwd">public</span><span class="pln"> </span><span class="kwd">sealed</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">SecurePasswordHasher</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="com">/// &lt;summary&gt;</span><span class="pln">
    </span><span class="com">/// Size of salt</span><span class="pln">
    </span><span class="com">/// &lt;/summary&gt;</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> </span><span class="typ">SaltSize</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">16</span><span class="pun">;</span><span class="pln">

    </span><span class="com">/// &lt;summary&gt;</span><span class="pln">
    </span><span class="com">/// Size of hash</span><span class="pln">
    </span><span class="com">/// &lt;/summary&gt;</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> </span><span class="typ">HashSize</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">20</span><span class="pun">;</span><span class="pln">

    </span><span class="com">/// &lt;summary&gt;</span><span class="pln">
    </span><span class="com">/// Creates a hash from a password</span><span class="pln">
    </span><span class="com">/// &lt;/summary&gt;</span><span class="pln">
    </span><span class="com">/// &lt;param name="password"&gt;the password&lt;/param&gt;</span><span class="pln">
    </span><span class="com">/// &lt;param name="iterations"&gt;number of iterations&lt;/param&gt;</span><span class="pln">
    </span><span class="com">/// &lt;returns&gt;the hash&lt;/returns&gt;</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">Hash</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> password</span><span class="pun">,</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> iterations</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="com">//create salt</span><span class="pln">
        </span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> salt</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">RNGCryptoServiceProvider</span><span class="pun">().</span><span class="typ">GetBytes</span><span class="pun">(</span><span class="pln">salt </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">byte</span><span class="pun">[</span><span class="typ">SaltSize</span><span class="pun">]);</span><span class="pln">

        </span><span class="com">//create hash</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> pbkdf2 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Rfc2898DeriveBytes</span><span class="pun">(</span><span class="pln">password</span><span class="pun">,</span><span class="pln"> salt</span><span class="pun">,</span><span class="pln"> iterations</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> hash </span><span class="pun">=</span><span class="pln"> pbkdf2</span><span class="pun">.</span><span class="typ">GetBytes</span><span class="pun">(</span><span class="typ">HashSize</span><span class="pun">);</span><span class="pln">

        </span><span class="com">//combine salt and hash</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> hashBytes </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">byte</span><span class="pun">[</span><span class="typ">SaltSize</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="typ">HashSize</span><span class="pun">];</span><span class="pln">
        </span><span class="typ">Array</span><span class="pun">.</span><span class="typ">Copy</span><span class="pun">(</span><span class="pln">salt</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> hashBytes</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="typ">SaltSize</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">Array</span><span class="pun">.</span><span class="typ">Copy</span><span class="pun">(</span><span class="pln">hash</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> hashBytes</span><span class="pun">,</span><span class="pln"> </span><span class="typ">SaltSize</span><span class="pun">,</span><span class="pln"> </span><span class="typ">HashSize</span><span class="pun">);</span><span class="pln">

        </span><span class="com">//convert to base64</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> base64Hash </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Convert</span><span class="pun">.</span><span class="typ">ToBase64String</span><span class="pun">(</span><span class="pln">hashBytes</span><span class="pun">);</span><span class="pln">

        </span><span class="com">//format hash with extra information</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">.</span><span class="typ">Format</span><span class="pun">(</span><span class="str">"$MYHASH$V1${0}${1}"</span><span class="pun">,</span><span class="pln"> iterations</span><span class="pun">,</span><span class="pln"> base64Hash</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="com">/// &lt;summary&gt;</span><span class="pln">
    </span><span class="com">/// Creates a hash from a password with 10000 iterations</span><span class="pln">
    </span><span class="com">/// &lt;/summary&gt;</span><span class="pln">
    </span><span class="com">/// &lt;param name="password"&gt;the password&lt;/param&gt;</span><span class="pln">
    </span><span class="com">/// &lt;returns&gt;the hash&lt;/returns&gt;</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">Hash</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> password</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Hash</span><span class="pun">(</span><span class="pln">password</span><span class="pun">,</span><span class="pln"> </span><span class="lit">10000</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="com">/// &lt;summary&gt;</span><span class="pln">
    </span><span class="com">/// Check if hash is supported</span><span class="pln">
    </span><span class="com">/// &lt;/summary&gt;</span><span class="pln">
    </span><span class="com">/// &lt;param name="hashString"&gt;the hash&lt;/param&gt;</span><span class="pln">
    </span><span class="com">/// &lt;returns&gt;is supported?&lt;/returns&gt;</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">bool</span><span class="pln"> </span><span class="typ">IsHashSupported</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> hashString</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> hashString</span><span class="pun">.</span><span class="typ">Contains</span><span class="pun">(</span><span class="str">"$MYHASH$V1$"</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="com">/// &lt;summary&gt;</span><span class="pln">
    </span><span class="com">/// verify a password against a hash</span><span class="pln">
    </span><span class="com">/// &lt;/summary&gt;</span><span class="pln">
    </span><span class="com">/// &lt;param name="password"&gt;the password&lt;/param&gt;</span><span class="pln">
    </span><span class="com">/// &lt;param name="hashedPassword"&gt;the hash&lt;/param&gt;</span><span class="pln">
    </span><span class="com">/// &lt;returns&gt;could be verified?&lt;/returns&gt;</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">bool</span><span class="pln"> </span><span class="typ">Verify</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> password</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> hashedPassword</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="com">//check hash</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="typ">IsHashSupported</span><span class="pun">(</span><span class="pln">hashedPassword</span><span class="pun">))</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">NotSupportedException</span><span class="pun">(</span><span class="str">"The hashtype is not supported"</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="com">//extract iteration and Base64 string</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> splittedHashString </span><span class="pun">=</span><span class="pln"> hashedPassword</span><span class="pun">.</span><span class="typ">Replace</span><span class="pun">(</span><span class="str">"$MYHASH$V1$"</span><span class="pun">,</span><span class="pln"> </span><span class="str">""</span><span class="pun">).</span><span class="typ">Split</span><span class="pun">(</span><span class="str">'$'</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> iterations </span><span class="pun">=</span><span class="pln"> </span><span class="typ">int</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="pln">splittedHashString</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]);</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> base64Hash </span><span class="pun">=</span><span class="pln"> splittedHashString</span><span class="pun">[</span><span class="lit">1</span><span class="pun">];</span><span class="pln">

        </span><span class="com">//get hashbytes</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> hashBytes </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Convert</span><span class="pun">.</span><span class="typ">FromBase64String</span><span class="pun">(</span><span class="pln">base64Hash</span><span class="pun">);</span><span class="pln">

        </span><span class="com">//get salt</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> salt </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">byte</span><span class="pun">[</span><span class="typ">SaltSize</span><span class="pun">];</span><span class="pln">
        </span><span class="typ">Array</span><span class="pun">.</span><span class="typ">Copy</span><span class="pun">(</span><span class="pln">hashBytes</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> salt</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="typ">SaltSize</span><span class="pun">);</span><span class="pln">

        </span><span class="com">//create hash with given salt</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> pbkdf2 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Rfc2898DeriveBytes</span><span class="pun">(</span><span class="pln">password</span><span class="pun">,</span><span class="pln"> salt</span><span class="pun">,</span><span class="pln"> iterations</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> hash </span><span class="pun">=</span><span class="pln"> pbkdf2</span><span class="pun">.</span><span class="typ">GetBytes</span><span class="pun">(</span><span class="typ">HashSize</span><span class="pun">);</span><span class="pln">

        </span><span class="com">//get result</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="typ">HashSize</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">hashBytes</span><span class="pun">[</span><span class="pln">i </span><span class="pun">+</span><span class="pln"> </span><span class="typ">SaltSize</span><span class="pun">]</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> hash</span><span class="pun">[</span><span class="pln">i</span><span class="pun">])</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>Usage:</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="com">//Hash</span><span class="pln">
</span><span class="kwd">var</span><span class="pln"> hash </span><span class="pun">=</span><span class="pln"> </span><span class="typ">SecurePasswordHasher</span><span class="pun">.</span><span class="typ">Hash</span><span class="pun">(</span><span class="str">"mypassword"</span><span class="pun">);</span><span class="pln">

</span><span class="com">//Verify</span><span class="pln">
</span><span class="kwd">var</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> </span><span class="typ">SecurePasswordHasher</span><span class="pun">.</span><span class="typ">Verify</span><span class="pun">(</span><span class="str">"mypassword"</span><span class="pun">,</span><span class="pln"> hash</span><span class="pun">);</span></code></pre>
<p>A sample hash could be this:</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="pln">$MYHASH$V1$10000$Qhxzi6GNu</span><span class="pun">/</span><span class="typ">Lpy3iUqkeqR</span><span class="pun">/</span><span class="pln">J1hh8y</span><span class="pun">/</span><span class="pln">h5KPDjrv89KzfCVrubn</span></code></pre>
<p>As you can see, I also have included the iterations in the hash for easy usage and the possibility to upgrade this, if we need to upgrade.</p>
</div></text><author><a href="/users/2441442/christian-gollhardt">Christian Gollhardt</a></author><comments><comment><text><span class="comment-copy">Just to verify, if you do upgrade the hashing engine you'd increment the V1 section of your hash and key off of that?</span></text><author><a class="comment-user" href="/users/86191/mike-cole" title="6,504 reputation">Mike Cole</a></author></comment><comment><text><span class="comment-copy">Yes that is the plan. You would then decide based on <code>V1</code> and <code>V2</code> which verification method you need.</span></text><author><a class="comment-user" href="/users/2441442/christian-gollhardt" title="6,014 reputation">Christian Gollhardt</a></author></comment><comment><text><span class="comment-copy">Thanks for the reply, and the class. I'm implementing it as we speak.</span></text><author><a class="comment-user" href="/users/86191/mike-cole" title="6,504 reputation">Mike Cole</a></author></comment><comment><text><span class="comment-copy">Why don't you use <a href="https://msdn.microsoft.com/en-us/library/system.security.securestring%28v=vs.110%29.aspx" rel="nofollow noreferrer">SecureString</a>?</span></text><author><a class="comment-user" href="/users/5967068/wavum" title="74 reputation">Wavum</a></author></comment><comment><text><span class="comment-copy">In my scenario there is no need for it @Wavum. The password is provided by the user via web, so this is a bigger atack vector then the possibility that somebodody has access to my server and reads the ram. Anyway if you work with client application, the usage of <code>SecureString</code> makes sence.</span></text><author><a class="comment-user" href="/users/2441442/christian-gollhardt" title="6,014 reputation">Christian Gollhardt</a></author></comment><comment><text><span class="comment-copy">@ChristianGollhardt Okay, thanks. I would like to use this code in my client application.</span></text><author><a class="comment-user" href="/users/5967068/wavum" title="74 reputation">Wavum</a></author></comment></comments></answer></answers></post>