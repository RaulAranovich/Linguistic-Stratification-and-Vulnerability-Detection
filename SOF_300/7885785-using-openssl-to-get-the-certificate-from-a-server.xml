<?xml version="1.0" encoding="utf-8"?>
<post><title>linux - Using openssl to get the certificate from a server - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I am trying to get the certificate of a remote server, which I can then use to add to my keystore and use within my java application.</p>
<p>A senior dev (who is on holidays :(  ) informed me I can run this:</p>
<pre><code>openssl s_client -connect host.host:9999
</code></pre>
<p>To get a raw certificate dumped out, which I can then copy and export. I receive the following output:</p>
<pre><code>depth=1 /C=NZ/ST=Test State or Province/O=Organization Name/OU=Organizational Unit Name/CN=Test CA
verify error:num=19:self signed certificate in certificate chain
verify return:0
23177:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1086:SSL alert number 40
23177:error:140790E5:SSL routines:SSL23_WRITE:ssl handshake failure:s23_lib.c:188:
</code></pre>
<p>I have also tried with this option</p>
<pre><code>-showcerts 
</code></pre>
<p>and this one (running on debian mind you)</p>
<pre><code>-CApath /etc/ssl/certs/ 
</code></pre>
<p>But get the same error.</p>
<p><a href="http://gagravarr.org/writing/openssl-certs/personal.shtml" rel="noreferrer">This source</a> says I can use that CApath flag but it doesn't seem to help. I tried multiple paths to no avail.</p>
<p>Please let me know where I'm going wrong.</p>
</div></text><author><a href="/users/51493/nasty-pasty">nasty pasty</a></author><comments/></question><answers><answer><text><div class="post-text" itemprop="text">
<pre><code>openssl s_client -showcerts -connect www.example.com:443 &lt;/dev/null
</code></pre>
<p>The server certificate is the first certificate returned, and will be PEM formatted. The CA certificate is the final certificate returned, and is also PEM formatted.</p>
<p>I tested that against a self-signed certificate using OpenSSL 1.0.0e and it worked perfectly.</p>
<p>If the remote server is using SNI (that is, sharing multiple SSL hosts on a single IP address) you will also need to send the correct hostname in order to get the right certificate.</p>
<pre><code>openssl s_client -showcerts -servername www.example.com -connect www.example.com:443 &lt;/dev/null
</code></pre>
<p>To view the full details of a site's cert you can use this chain of commands as well:</p>
<pre><code>$ echo | \
    openssl s_client -servername www.example.com -connect www.example.com:443 2&gt;/dev/null | \
    openssl x509 -text
</code></pre>
</div></text><author><a href="/users/749782/ari-maniatis">Ari Maniatis</a></author><comments><comment><text><span class="comment-copy">Hmm. I still get the same error when trying that command. I noticed my Openssl version is 'OpenSSL 0.9.8g 19 Oct 2007'. Do you have any ideas?</span></text><author><a class="comment-user owner" href="/users/51493/nasty-pasty" title="1,551 reputation">nasty pasty</a></author></comment><comment><text><span class="comment-copy">Useful: <code>echo "" | openssl s_client -connect server:port -prexit 2&gt;/dev/null | sed -n -e '/BEGIN\ CERTIFICATE/,/END\ CERTIFICATE/ p'</code> <a href="http://stackoverflow.com/a/12918442/843000">stackoverflow.com/a/12918442/843000</a></span></text><author><a class="comment-user" href="/users/843000/mbrownnyc" title="606 reputation">mbrownnyc</a></author></comment><comment><text><span class="comment-copy">Alternative useful script, from <a href="http://www.madboa.com/geek/openssl/" rel="nofollow noreferrer">madboa.com</a>: <code>echo | openssl s_client -connect server:port 2&gt;&amp;1 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' &gt; cert.pem</code></span></text><author><a class="comment-user" href="/users/920851/rmeakins" title="1,009 reputation">rmeakins</a></author></comment><comment><text><span class="comment-copy">To make this a bit more concise, you can replace the <code>sed</code> with <code>openssl x509</code>, and read it in using a sub-shell: <code>openssl x509 -in &lt;(openssl s_client -connect server:port -prexit 2&gt;/dev/null)</code></span></text><author><a class="comment-user" href="/users/119479/gabe-martin-dempesy" title="4,697 reputation">Gabe Martin-Dempesy</a></author></comment><comment><text><span class="comment-copy">Also <code>echo | openssl s_client -connect google.com:443  2&gt;/dev/null | openssl x509</code></span></text><author><a class="comment-user" href="/users/2865186/mattsizzle" title="2,443 reputation">MattSizzle</a></author></comment><comment><text><span class="comment-copy"><code>echo | openssl s_client -servername example.com -connect example.com:443 2&gt;/dev/null | openssl x509 -text</code> to get human readable output as well. Also as an <a href="http://stackoverflow.com/a/35442314/289064">answer</a>.</span></text><author><a class="comment-user" href="/users/289064/florian" title="1,998 reputation">Florian</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>While I agree with Ari's answer (and upvoted it :), I needed to do an extra step to get it to work with Java on Windows (where it needed to be deployed):</p>
<pre><code>openssl s_client -showcerts -connect www.example.com:443 &lt; /dev/null | openssl x509 -outform DER &gt; derp.der
</code></pre>
<p>Before adding the <code>openssl x509 -outform DER</code> conversion, I was getting an error from keytool on Windows complaining about the certificate's format.  Importing the .der file worked fine.</p>
</div></text><author><a href="/users/40373/david-jaquay">David Jaquay</a></author><comments><comment><text><span class="comment-copy">This one worked for me.</span></text><author><a class="comment-user" href="/users/404271/ibic" title="119 reputation">ibic</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>It turns out there is more complexity here: I needed to provide many more details to get this rolling. I think its something to do with the fact that its a connection that needs client authentication, and the hankshake needed more info to continue to the stage where the certificates were dumped.</p>
<p>Here is my working command:</p>
<pre><code>openssl s_client -connect host:port -key our_private_key.pem -showcerts \
                 -cert our_server-signed_cert.pem
</code></pre>
<p>Hopefully this is a nudge in the right direction for anyone who could do with some more info. </p>
</div></text><author><a href="/users/51493/nasty-pasty">nasty pasty</a></author><comments><comment><text><span class="comment-copy">I am sorry, but your answer doesn't make much sense. You needed to pass the certificate to the server in order to get the certificate?</span></text><author><a class="comment-user" href="/users/749782/ari-maniatis" title="3,144 reputation">Ari Maniatis</a></author></comment><comment><text><span class="comment-copy">Yep. Client authentication AFAIK.</span></text><author><a class="comment-user owner" href="/users/51493/nasty-pasty" title="1,551 reputation">nasty pasty</a></author></comment><comment><text><span class="comment-copy">It turns out '-prexit' will return that data as well. E.g.; openssl s_client -connect host:port -prexit</span></text><author><a class="comment-user" href="/users/367220/robert" title="17,467 reputation">Robert</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The easiest command line for this, which includes the PEM output to add it to the keystore, as well as a human readable output and also supports SNI, which is important if you are working with an HTTP server is:</p>
<pre><code>openssl s_client -servername example.com -connect example.com:443 \
    &lt;/dev/null 2&gt;/dev/null | openssl x509 -text
</code></pre>
<p>The <em>-servername</em> option is to enable SNI support and the <em>openssl x509 -text</em> prints the certificate in human readable format.</p>
</div></text><author><a href="/users/289064/florian">Florian</a></author><comments><comment><text><span class="comment-copy">You may add to your -servername your subdomain, for instance ws.example.com instead of example.com (apply this to the -connect parameter too).</span></text><author><a class="comment-user" href="/users/828551/russellhoff" title="549 reputation">russellhoff</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>To get the certificate of remote server you can use <code>openssl</code> tool and you can find it between <code>BEGIN CERTIFICATE</code> and <code>END CERTIFICATE</code> which you need to copy and paste into your certificate file (CRT).</p>
<p>Here is the command demonstrating it:</p>
<pre><code>ex +'/BEGIN CERTIFICATE/,/END CERTIFICATE/p' &lt;(echo | openssl s_client -showcerts -connect example.com:443) -scq &gt; file.crt
</code></pre>
<p>To return all certificates from the chain, just add <code>g</code> (global) like:</p>
<pre><code>ex +'g/BEGIN CERTIFICATE/,/END CERTIFICATE/p' &lt;(echo | openssl s_client -showcerts -connect example.com:443) -scq
</code></pre>
<p>Then you can simply import your certificate file (<code>file.crt</code>) into your keychain and make it trusted, so Java shouldn't complain.</p>
<p>On OS X you can double-click on the file or drag and drop in your Keychain Access, so it'll appear in login/Certificates. Then double-click on the imported certificated and make it <em>Always Trust for SSL</em>.</p>
<p>On CentOS 5 you can append them into <code>/etc/pki/tls/certs/ca-bundle.crt</code> file (and run: <code>sudo update-ca-trust force-enable</code>), or in CentOS 6 copy them into <code>/etc/pki/ca-trust/source/anchors/</code> and run <code>sudo update-ca-trust extract</code>.</p>
<p>In Ubuntu, copy them into <code>/usr/local/share/ca-certificates</code> and run <code>sudo update-ca-certificates</code>.</p>
</div></text><author><a href="/users/55075/kenorb">kenorb</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>For the benefit of others like me who tried to follow the good advice here when accessing <a href="https://aws.amazon.com/cloudfront/" rel="nofollow noreferrer">AWS CloudFront</a> but failed, the trick is to add <code>-servername domain.name..</code>.</p>
<p>Source: <a href="https://serverfault.com/a/780450/8972">https://serverfault.com/a/780450/8972</a></p>
</div></text><author><a href="/users/164137/amos-shapira">Amos Shapira</a></author><comments/></answer></answers></post>