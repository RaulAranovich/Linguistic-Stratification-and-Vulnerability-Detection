<?xml version="1.0" encoding="utf-8"?>
<post><title>security - techniques for obscuring sensitive strings in C++ - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I need to store sensitive information (a symmetric encryption key that I want to keep private) in my C++ application. The simple approach is to do this:</p>
<p><code>std::string myKey = "mysupersupersecretpasswordthatyouwillneverguess";</code></p>
<p>However, running the application through the <code>strings</code> process (or any other that extracts strings from a binary app) will reveal the above string.</p>
<p>What techniques should be used to obscure such sensitive data?</p>
<p><strong>Edit:</strong></p>
<p>OK, so pretty much all of you have said <em>"your executable can be reverse engineered"</em> - of course! This is a pet peeve of mine, so I'm going to rant a bit here:</p>
<p>Why is it that 99% (OK, so perhaps I exaggerate a little) of all security-related questions on this site are answered with a  torrent of "there is no possible way to create a perfectly secure program" - that is not a helpful answer! Security is a sliding scale between perfect usability and no security at one end, and perfect security but no usability at the other. </p>
<p>The point is that you pick your position on that sliding scale depending on what you're trying to do and the environment in which your software will run. <em>I'm not writing an app for a military installation, I'm writing an app for a home PC</em>. I need to encrypt data across an untrusted network with a pre-known encryption key. In these cases, "security through obscurity" is probably good enough! Sure, someone with enough time, energy and skill could reverse-engineer the binary and find the password, but guess what? I don't care:</p>
<p>The time it takes me to implement a top-notch secure system is more expensive than the loss of sales due to the cracked versions (not that I'm actually selling this, but you get my point). This blue-sky "lets do it the absolute best way possible" trend in programming amongst new programmers is foolish to say the least.</p>
<p>Thank you for taking the time to answer this question - they were most helpful. Unfortunately I can only accept one answer, but I've up-voted all the useful answers.</p>
</div></text><author><a href="/users/21028/csl">csl</a></author><comments><comment><text><span class="comment-copy">Perhaps if you describe what you are trying to accomplish with the encryption key we can offer advice on how to avoid needing to do this.</span></text><author><a class="comment-user" href="/users/30587/joshperry" title="26,819 reputation">joshperry</a></author></comment><comment><text><span class="comment-copy">Exact duplicate: <a href="http://stackoverflow.com/questions/926172/how-to-hide-strings-in-a-exe-or-a-dll" title="how to hide strings in a exe or a dll">stackoverflow.com/questions/926172/â€¦</a></span></text><author><a class="comment-user" href="/users/123111/kirill-v-lyadvinsky" title="67,468 reputation">Kirill V. Lyadvinsky</a></author></comment><comment><text><span class="comment-copy">@Kirill: it's hard to call this question exactly the same as the one you mention.  Indeed, the idea is the same.  The question is not.</span></text><author><a class="comment-user" href="/users/6610/xtofl" title="28,558 reputation">xtofl</a></author></comment><comment><text><span class="comment-copy">@xtofl, you are free not to vote. To me it looks like two identical questions.</span></text><author><a class="comment-user" href="/users/123111/kirill-v-lyadvinsky" title="67,468 reputation">Kirill V. Lyadvinsky</a></author></comment><comment><text><span class="comment-copy">It does seem like a duplicate - and I apologise for that. The duplicate did not show up in the searches, so I asked anyway. Interesting that this questions has more, and different answers...</span></text><author><a class="comment-user owner" href="/users/1304/thomi" title="6,652 reputation">Thomi</a></author></comment><comment><text><span class="comment-copy">+1 for the rant</span></text><author><a class="comment-user" href="/users/27596/foraidt" title="3,415 reputation">foraidt</a></author></comment><comment><text><span class="comment-copy">(Unrelated to rant) The very definition of a "private key" is the one half of a public/private key pair that you don't give out. In this case too, the private key is the one you keep on your server; the one in your client app is public.</span></text><author><a class="comment-user" href="/users/15416/msalters" title="114,394 reputation">MSalters</a></author></comment><comment><text><span class="comment-copy">@MSalters - thansk, I hadn't noticed that I had used that phrase. I realise that "private key" usually refers tot eh private part of an asynchronouse key pair. However, in this context I mean it literally - a key that I wish to keep private. I will edit to remove any confusion. Thanks again!</span></text><author><a class="comment-user owner" href="/users/1304/thomi" title="6,652 reputation">Thomi</a></author></comment><comment><text><span class="comment-copy">Re your rant:  the reason we tell you it can't be done is that you're trying to solve the wrong problem.  Now that we actually <i>know</i> what you're trying to do - <i>"encrypt data across an untrusted network with a pre-known encryption key"</i> - we can tell you the correct way of solving it:  negotiating a unique key.  Because your key is the same for all users and easily available, what you are doing is not "encrypting" the data, you're simply "obfuscating it;" in which case, you might as well just XOR it with some number.</span></text><author><a class="comment-user" href="/users/238419/blueraja-danny-pflughoeft" title="48,164 reputation">BlueRaja - Danny Pflughoeft</a></author></comment><comment><text><span class="comment-copy">+1 for the edit. I am, right now, frustrated at the same level as you would be, as seemingly, while editing your question.</span></text><author><a class="comment-user" href="/users/5349543/zeeshan-mahmood" title="156 reputation">Zeeshan Mahmood</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Basically, anyone with access to your program and a debugger <em>can</em> and <em>will</em> find the key in the application if they want to.</p>
<p>But, if you just want to make sure the key doesn't show up when running <code>strings</code> on your binary, you could for instance make sure that the key is not within the printable range.</p>
<p><strong>Obscuring key with XOR</strong></p>
<p>For instance, you could use XOR to split the key into two byte arrays:</p>
<pre class="lang-cpp prettyprint prettyprinted" style=""><code><span class="pln">key </span><span class="pun">=</span><span class="pln"> key1 XOR key2</span></code></pre>
<p>If you create key1 with the same byte-length as <code>key</code> you can use (completely) random byte values and then compute <code>key2</code>:</p>
<pre class="lang-cpp prettyprint prettyprinted" style=""><code><span class="pln">key1</span><span class="pun">[</span><span class="pln">n</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> crypto_grade_random_number</span><span class="pun">(</span><span class="lit">0.</span><span class="pun">.</span><span class="lit">255</span><span class="pun">)</span><span class="pln">
key2</span><span class="pun">[</span><span class="pln">n</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> key</span><span class="pun">[</span><span class="pln">n</span><span class="pun">]</span><span class="pln"> XOR key1</span><span class="pun">[</span><span class="pln">n</span><span class="pun">]</span></code></pre>
<p>You can do this in your build environment, and then only store <code>key1</code>and <code>key2</code> in your application.</p>
<p><strong>Protecting your binary</strong></p>
<p>Another approach is to use a tool to protect your binary.  For instance, there are several security tools that can make sure your binary is obfuscated and starts a virtual machine that it runs on.  This makes it hard(er) to debug, and is also the convential way many commercial grade secure applications (also, alas, malware) is protected.</p>
<p>One of the premier tools is <a href="http://www.oreans.com/products.php" rel="noreferrer">Themida</a>, which does an awesome job of protecting your binaries.  It is often used by well known programs, such as Spotify, to protect against reverse engineering.  It has features to prevent debugging in programs such as OllyDbg and Ida Pro.</p>
<p>There is also a larger list, maybe somewhat outdated, of <a href="http://www.google.com/Top/Computers/Security/Products_and_Tools/Software_Protection_and_License_Control/" rel="noreferrer">tools to protect your binary</a>.<br/>
Some of them are free.</p>
<p><strong>Password matching</strong></p>
<p>Someone here discussed hashing password+salt.  </p>
<p>If you need to store the key to match it against some kind of user submitted password, you should use a one-way hashing function, preferrably by combining username, password and a salt.  The problem with this, though, is that your application has to know the salt to be able to do the one-way and compare the resulting hashes.  So therefore you still need to store the salt somewhere in your application. But, as @Edward points out in the comments below, this will effectively protect against a dictionary attack using, e.g, rainbow tables.</p>
<p>Finally, you can use a combination of all the techniques above.</p>
</div></text><author><a href="/users/21028/csl">csl</a></author><comments><comment><text><span class="comment-copy">Thank you, very helpful.</span></text><author><a class="comment-user owner" href="/users/1304/thomi" title="6,652 reputation">Thomi</a></author></comment><comment><text><span class="comment-copy">If its a password that the user has to enter, store the hash+salt of the password. See answer below.</span></text><author><a class="comment-user" href="/users/172783/hplbsh" title="2,091 reputation">hplbsh</a></author></comment><comment><text><span class="comment-copy">@hapalibashi: How do you store the salt securely in your application?  I don't think the OP needed a one-way password matching system, just a generalized way of storing static keys.</span></text><author><a class="comment-user" href="/users/21028/csl" title="7,778 reputation">csl</a></author></comment><comment><text><span class="comment-copy">I've found when looking at disassembled programs there typically aren't very many XORs, so if you're hoping to use XOR to obscure something, keep in mind they draw attention to themselves.</span></text><author><a class="comment-user" href="/users/77806/kb" title="186 reputation">kb.</a></author></comment><comment><text><span class="comment-copy">@kb - that's an interesting point. I'd guess you'd see bitwise ands and ors happening a lot more than xor. a ^ b == (a &amp; ~b) || (~a &amp; b)</span></text><author><a class="comment-user" href="/users/132377/jeremy-powell" title="2,270 reputation">Jeremy Powell</a></author></comment><comment><text><span class="comment-copy">Knowing the salt value doesn't usually give an adversary an advantage - the point of the salt is to avoid a "dictionary attack", whereby the attacker has pre-computed the hashes for many likely inputs.  Using a salt forces them to pre-compute their dictionary with a new one based on the salt.  If each salt is used only once, then the dictionary attack becomes completely useless.</span></text><author><a class="comment-user" href="/users/404737/edward-dixon" title="491 reputation">Edward Dixon</a></author></comment><comment><text><span class="comment-copy">@Edward: You are right, of course!</span></text><author><a class="comment-user" href="/users/21028/csl" title="7,778 reputation">csl</a></author></comment><comment><text><span class="comment-copy">For anyone who need xor implementation, <a href="http://ideone.com/MhbSDF" rel="nofollow noreferrer">ideone.com/MhbSDF</a></span></text><author><a class="comment-user" href="/users/1847645/berkay-turanc%c4%b1" title="2,332 reputation">Berkay TurancÄ±</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>First of all, realise that there is nothing you can do that will stop a sufficiently determined hacker, and there are plenty of those around. The protection on every game and console around is cracked eventually, so this is only a temporary fix.</p>
<p>There are 4 things you can do that will increase you chances of staying hidden for a while.</p>
<p>1) Hide the elements of the string in some way -- something obvious like xoring ( the ^ operator) the string with another string will be good enough to make the string impossible to search for.</p>
<p>2) Split the string into pieces -- split up your string and pop bits of it into strangely named methods in strange modules. Don't make it easy to search through and find the method with the string in it. Of course some method will have to call all these bits, but it still makes it a little harder.</p>
<p>3) Don't ever build the string in memory -- most hackers use tools that let them see the string in memory after you have encoded it. If possible, avoid this. If for example you are sending the key off to a server, send it character by character, so the whole string is never around. Of course, if you are using it from something like RSA encoding, then this is trickier.</p>
<p>4) Do an ad-hoc algorithm -- on top of all this, add a unique twist or two. Maybe just add 1 to everything you produce, or do any encryption twice, or add a sugar. This just makes it a little harder for the hacker who already knows what to look for when someone is using, for example, vanilla md5 hashing or RSA encryption.</p>
<p>Above all, make sure it isn't too important when (and it will be when if you application becomes popular enough) your key is discovered!</p>
</div></text><author><a href="/users/27074/chris-jefferson">Chris Jefferson</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>A strategy i've used in the past is to create an array of seemingly-random characters. You initially insert, and then locate your particular characters with a algebraic process where each step from 0 to N will yield a number &lt; size of the array which contains the next char in your obfuscated string. (This answer is feeling obfuscated now!)</p>
<p>Example:</p>
<p>Given an array of chars (numbers and dashes are for reference only)</p>
<pre class="lang-cpp prettyprint prettyprinted" style=""><code><span class="lit">0123456789</span><span class="pln">
</span><span class="pun">----------</span><span class="pln">
ALFHNFELKD
LKFKFLEHGT
FLKRKLFRFK
FJFJJFJ</span><span class="pun">!</span><span class="pln">JL</span></code></pre>
<p>And an equation whose first six results are: 3, 6, 7, 10, 21, 47</p>
<p>Would yield the word "HELLO!" from the array above.</p>
</div></text><author><a href="/users/47550/paul-sasik">Paul Sasik</a></author><comments><comment><text><span class="comment-copy">Good idea - I guess you could further improve it by using non-printing characters in the array...</span></text><author><a class="comment-user owner" href="/users/1304/thomi" title="6,652 reputation">Thomi</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I agree with @Checkers, your executable can be reverse-engineered.</p>
<p>A bit better way is to create it dynamically, for example:</p>
<pre class="lang-cpp prettyprint prettyprinted" style=""><code><span class="pln">std</span><span class="pun">::</span><span class="pln">string myKey </span><span class="pun">=</span><span class="pln"> part1</span><span class="pun">()</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> part2</span><span class="pun">()</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="pun">...</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> partN</span><span class="pun">();</span></code></pre>
</div></text><author><a href="/users/108130/nick-dandoulakis">Nick Dandoulakis</a></author><comments><comment><text><span class="comment-copy">True, that avoids having the string revealed when searching the binary. However, your string is still resident in memory.. Your solution is probably good enough though, for what I'm doing.</span></text><author><a class="comment-user owner" href="/users/1304/thomi" title="6,652 reputation">Thomi</a></author></comment><comment><text><span class="comment-copy">@Thomi, you can, of course, <i>destroy</i> it as soon as you've done with it. But still, it isn't the best way to handle <i>sensitive</i> strings.</span></text><author><a class="comment-user" href="/users/108130/nick-dandoulakis" title="32,941 reputation">Nick Dandoulakis</a></author></comment><comment><text><span class="comment-copy">good point - write over it then destroy it...</span></text><author><a class="comment-user owner" href="/users/1304/thomi" title="6,652 reputation">Thomi</a></author></comment><comment><text><span class="comment-copy">...since destroying it doesn't actually guarantee that the memory will be re-used straight away.</span></text><author><a class="comment-user owner" href="/users/1304/thomi" title="6,652 reputation">Thomi</a></author></comment><comment><text><span class="comment-copy">@Thomi, exacly :-)</span></text><author><a class="comment-user" href="/users/108130/nick-dandoulakis" title="32,941 reputation">Nick Dandoulakis</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Of course, storing private data in software which is shipped to the user is always a risk. Any sufficiently educated (and dedicated) engineer could reverse engineer the data. </p>
<p>That being said, you can often make things secure enough by raising the barrier which people need to overcome to reveal your private data. That's usually a good compromise.</p>
<p>In your case, you could clutter your strings with non-printable data, and then decode that at runtime using a simple helper function, like this:</p>
<pre class="lang-cpp prettyprint prettyprinted" style=""><code><span class="kwd">void</span><span class="pln"> unscramble</span><span class="pun">(</span><span class="pln"> </span><span class="kwd">char</span><span class="pln"> </span><span class="pun">*</span><span class="pln">s </span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> </span><span class="kwd">char</span><span class="pln"> </span><span class="pun">*</span><span class="pln">str </span><span class="pun">=</span><span class="pln"> s </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> </span><span class="pun">*</span><span class="pln">str </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> str </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">2</span><span class="pln"> </span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="pun">*</span><span class="pln">s</span><span class="pun">++</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">*</span><span class="pln">str</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">*</span><span class="pln">s </span><span class="pun">=</span><span class="pln"> </span><span class="str">'\0'</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">void</span><span class="pln"> f</span><span class="pun">()</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">char</span><span class="pln"> privateStr</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"\001H\002e\003l\004l\005o"</span><span class="pun">;</span><span class="pln">
    unscramble</span><span class="pun">(</span><span class="pln"> privateStr </span><span class="pun">);</span><span class="pln"> </span><span class="com">// privateStr is 'Hello' now.</span><span class="pln">

    string s </span><span class="pun">=</span><span class="pln"> privateStr</span><span class="pun">;</span><span class="pln">
    </span><span class="com">// ...</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/91757/frerich-raabe">Frerich Raabe</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I've created a simple encryption tool for strings, it can automatically generate encrypted strings and has a few extra options to do that, a few examples:</p>
<p>String as a global variable:</p>
<pre class="lang-cpp prettyprint prettyprinted" style=""><code><span class="com">// myKey = "mysupersupersecretpasswordthatyouwillneverguess";</span><span class="pln">
</span><span class="kwd">unsigned</span><span class="pln"> </span><span class="kwd">char</span><span class="pln"> myKey</span><span class="pun">[</span><span class="lit">48</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="lit">0xCF</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x34</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xF8</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x5F</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x5C</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x3D</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x22</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x13</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB4</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xF3</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x63</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x7E</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x6B</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x34</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x01</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB7</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xDB</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x89</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x9A</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB5</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x1B</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x22</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xD4</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x29</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xE6</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x7C</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x43</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x0B</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x27</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x00</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x91</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x5F</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x14</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x39</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xED</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x74</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x7D</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x4B</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x22</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x04</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x48</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x49</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xF1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x88</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xBE</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x29</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x1F</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x27</span><span class="pln"> </span><span class="pun">};</span><span class="pln">

myKey</span><span class="pun">[</span><span class="lit">30</span><span class="pun">]</span><span class="pln"> </span><span class="pun">-=</span><span class="pln"> </span><span class="lit">0x18</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">39</span><span class="pun">]</span><span class="pln"> </span><span class="pun">-=</span><span class="pln"> </span><span class="lit">0x8E</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">3</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">0x16</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">0x45</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^=</span><span class="pln"> </span><span class="lit">0xA2</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">24</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">0x8C</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">44</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^=</span><span class="pln"> </span><span class="lit">0xDB</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">15</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^=</span><span class="pln"> </span><span class="lit">0xC5</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">7</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">0x60</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">27</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^=</span><span class="pln"> </span><span class="lit">0x63</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">37</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">0x23</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">2</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^=</span><span class="pln"> </span><span class="lit">0x8B</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">25</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^=</span><span class="pln"> </span><span class="lit">0x18</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">12</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^=</span><span class="pln"> </span><span class="lit">0x18</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">14</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^=</span><span class="pln"> </span><span class="lit">0x62</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">11</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^=</span><span class="pln"> </span><span class="lit">0x0C</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">13</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">0x31</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">6</span><span class="pun">]</span><span class="pln"> </span><span class="pun">-=</span><span class="pln"> </span><span class="lit">0xB0</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">22</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^=</span><span class="pln"> </span><span class="lit">0xA3</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">43</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">0xED</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">29</span><span class="pun">]</span><span class="pln"> </span><span class="pun">-=</span><span class="pln"> </span><span class="lit">0x8C</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">38</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^=</span><span class="pln"> </span><span class="lit">0x47</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">19</span><span class="pun">]</span><span class="pln"> </span><span class="pun">-=</span><span class="pln"> </span><span class="lit">0x54</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">33</span><span class="pun">]</span><span class="pln"> </span><span class="pun">-=</span><span class="pln"> </span><span class="lit">0xC2</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">40</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">0x1D</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">20</span><span class="pun">]</span><span class="pln"> </span><span class="pun">-=</span><span class="pln"> </span><span class="lit">0xA8</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">34</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^=</span><span class="pln"> </span><span class="lit">0x84</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">8</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">0xC1</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">28</span><span class="pun">]</span><span class="pln"> </span><span class="pun">-=</span><span class="pln"> </span><span class="lit">0xC6</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">18</span><span class="pun">]</span><span class="pln"> </span><span class="pun">-=</span><span class="pln"> </span><span class="lit">0x2A</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">17</span><span class="pun">]</span><span class="pln"> </span><span class="pun">-=</span><span class="pln"> </span><span class="lit">0x15</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">4</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^=</span><span class="pln"> </span><span class="lit">0x2C</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">9</span><span class="pun">]</span><span class="pln"> </span><span class="pun">-=</span><span class="pln"> </span><span class="lit">0x83</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">26</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">0x31</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">10</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^=</span><span class="pln"> </span><span class="lit">0x06</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">16</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">0x8A</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">42</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">0x76</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">5</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^=</span><span class="pln"> </span><span class="lit">0x58</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">23</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^=</span><span class="pln"> </span><span class="lit">0x46</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">32</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">0x61</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">41</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^=</span><span class="pln"> </span><span class="lit">0x3B</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">31</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^=</span><span class="pln"> </span><span class="lit">0x30</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">46</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^=</span><span class="pln"> </span><span class="lit">0x6C</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">35</span><span class="pun">]</span><span class="pln"> </span><span class="pun">-=</span><span class="pln"> </span><span class="lit">0x08</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">36</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^=</span><span class="pln"> </span><span class="lit">0x11</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">45</span><span class="pun">]</span><span class="pln"> </span><span class="pun">-=</span><span class="pln"> </span><span class="lit">0xB6</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">21</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">0x51</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">47</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">0xD9</span><span class="pun">;</span></code></pre>
<p>As unicode string with decryption loop:</p>
<pre class="lang-cpp prettyprint prettyprinted" style=""><code><span class="com">// myKey = "mysupersupersecretpasswordthatyouwillneverguess";</span><span class="pln">
</span><span class="typ">wchar_t</span><span class="pln"> myKey</span><span class="pun">[</span><span class="lit">48</span><span class="pun">];</span><span class="pln">

myKey</span><span class="pun">[</span><span class="lit">21</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00A6</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">10</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00B0</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">29</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00A1</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">22</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00A2</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">19</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00B4</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">33</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00A2</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00B8</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">32</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00A0</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">16</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00B0</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">40</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00B0</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">4</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00A5</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">26</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00A1</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">18</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00A5</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">17</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00A1</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">8</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00A0</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">36</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00B9</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">34</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00BC</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">44</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00B0</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">30</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00AC</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">23</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00BA</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">35</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00B9</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">25</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00B1</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">6</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00A7</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">27</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00BD</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">45</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00A6</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">3</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00A0</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">28</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00B4</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">14</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00B6</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">7</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00A6</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">11</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00A7</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">13</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00B0</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">39</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00A3</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">9</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00A5</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">2</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00A6</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">24</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00A7</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">46</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00A6</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">43</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00A0</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">37</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00BB</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">41</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00A7</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">15</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00A7</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">31</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00BA</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00AC</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">47</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00D5</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">20</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00A6</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">5</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00B0</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">38</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00B0</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">42</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00B2</span><span class="pun">;</span><span class="pln">
myKey</span><span class="pun">[</span><span class="lit">12</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x00A6</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">unsigned</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> fngdouk </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> fngdouk </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">48</span><span class="pun">;</span><span class="pln"> fngdouk</span><span class="pun">++)</span><span class="pln"> myKey</span><span class="pun">[</span><span class="pln">fngdouk</span><span class="pun">]</span><span class="pln"> </span><span class="pun">^=</span><span class="pln"> </span><span class="lit">0x00D5</span><span class="pun">;</span></code></pre>
<p>String as a global variable:</p>
<pre class="lang-cpp prettyprint prettyprinted" style=""><code><span class="com">// myKey = "mysupersupersecretpasswordthatyouwillneverguess";</span><span class="pln">
</span><span class="kwd">unsigned</span><span class="pln"> </span><span class="kwd">char</span><span class="pln"> myKey</span><span class="pun">[</span><span class="lit">48</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="lit">0xAF</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xBB</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB5</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB7</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB2</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xA7</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB4</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB5</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB7</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB2</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xA7</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB4</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB5</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xA7</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xA5</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB4</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xA7</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB6</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB2</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xA3</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB5</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB5</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB9</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB4</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xA6</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB6</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xAA</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xA3</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB6</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xBB</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB7</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB9</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xAB</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xAE</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xAE</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xA7</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB8</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xA7</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB4</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xA9</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB7</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xA7</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB5</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0xB5</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0x42</span><span class="pln"> </span><span class="pun">};</span><span class="pln">

</span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">unsigned</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> dzxykdo </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> dzxykdo </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">48</span><span class="pun">;</span><span class="pln"> dzxykdo</span><span class="pun">++)</span><span class="pln"> myKey</span><span class="pun">[</span><span class="pln">dzxykdo</span><span class="pun">]</span><span class="pln"> </span><span class="pun">-=</span><span class="pln"> </span><span class="lit">0x42</span><span class="pun">;</span></code></pre>
</div></text><author><a href="/users/205036/bartosz-w%c3%b3jcik">Bartosz WÃ³jcik</a></author><comments><comment><text><span class="comment-copy">Did you write it manually?</span></text><author><a class="comment-user" href="/users/351305/andy" title="6,558 reputation">Andy</a></author></comment><comment><text><span class="comment-copy">Nah, I've used <a href="http://www.stringencrypt.com" rel="nofollow noreferrer">stringencrypt.com</a> website to do the work. It has examples for C/C++ <a href="http://www.stringencrypt.com/c-cpp-encryption/" rel="nofollow noreferrer">stringencrypt.com/c-cpp-encryption</a> you might consider using it to automate simple string encryption.</span></text><author><a class="comment-user" href="/users/205036/bartosz-w%c3%b3jcik" title="384 reputation">Bartosz WÃ³jcik</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Somewhat dependent on what you are trying to protect as joshperry points out.
From experience, I would say that if it is part of some licensing scheme to protect your software then don't bother. They will eventially reverse engineer it. Simply use a simple cipher like ROT-13 to protect it from simple attacks (line running strings over it).
If it is to secure users sensitive data I would be questioning whether protecting that data with a private key stored locally is a wise move. Again it comes down to what you are trying to protect.</p>
<p>EDIT: If you are going to do it then a combination of techniques that Chris points out will be far better than rot13.</p>
</div></text><author><a href="/users/2281/nic-strong">Nic Strong</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>As was said before, there's no way to totally protect your string. But there are ways to protect it wis a reasonable safety. </p>
<p>When I had to do this, I did put some innocent looking string into the code (a copyright notice, for example, or some faked user prompt or anything else that won't be changed by someone fixing unrelated code), encrypted that using itself as a key, hashed that (adding some salt), and used the result as a key to encrypt what I actually wanted to encrypt. </p>
<p>Of course this could be hacked, but it does take a determined hacker to do so. </p>
</div></text><author><a href="/users/140719/sbi">sbi</a></author><comments><comment><text><span class="comment-copy">Good idea - another form of obscurity is using a string that is still reasonably strong (long, punctuation and all that jazz) but does not obviously look like a password.</span></text><author><a class="comment-user owner" href="/users/1304/thomi" title="6,652 reputation">Thomi</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Instead of storing private key in your executable, you may want to request it from the user and store it by means of an external <a href="http://en.wikipedia.org/wiki/Password_manager" rel="nofollow noreferrer">password manager</a>, something similar to Mac OS X Keychain Access.</p>
</div></text><author><a href="/users/45249/mouviciel">mouviciel</a></author><comments><comment><text><span class="comment-copy">well yes and no.. normally I'd agree with you, but in this case I'm trying to hide this from the user of the software, so storing it in an external system isn't a great idea (many keychain systems can expose passwords as plain text to users given suitable authorisation). Keychain software is great for user passwords, but not so great for application encryption keys.</span></text><author><a class="comment-user owner" href="/users/1304/thomi" title="6,652 reputation">Thomi</a></author></comment><comment><text><span class="comment-copy">if it feels insecure (though given your clarifications maybe it is adequate) you could combine a keychain and something hardcoded :)</span></text><author><a class="comment-user" href="/users/172783/hplbsh" title="2,091 reputation">hplbsh</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Try <a href="http://www.codeproject.com/Articles/502283/Strings-Obfuscation-System" rel="nofollow">this</a>. The source code explains how to encrypt and decrypt on the fly all strings in a given Visual Studio c++ project.</p>
</div></text><author><a href="/users/1592639/michael-haephrati">Michael Haephrati</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>One method I recently tried is:</p>
<ol>
<li>Take hash (SHA256) of the private data and populate it in code as <code>part1</code></li>
<li>Take XOR of private data and its hash and populate it in code as <code>part2</code></li>
<li>Populate data: Don't store it as char str[], but populate on runtime using assignment instructions (as shown in macro below)</li>
<li>Now, generate the private data on run time by taking the XOR of <code>part1</code> and <code>part2</code></li>
<li><strong>Additional step</strong>: Calculate hash of generated data and compare it with <code>part1</code>. It will verify the integrity of private data.</li>
</ol>
<p><strong>MACRO to populate data:</strong> </p>
<p>Suppose, private data is of 4 bytes. We define a macro for it which saves the data with assignment instructions in some random order.</p>
<pre class="lang-cpp prettyprint prettyprinted" style=""><code><span class="com">#define</span><span class="pln"> POPULATE_DATA</span><span class="pun">(</span><span class="pln">str</span><span class="pun">,</span><span class="pln"> i0</span><span class="pun">,</span><span class="pln"> i1</span><span class="pun">,</span><span class="pln"> i2</span><span class="pun">,</span><span class="pln"> i3</span><span class="pun">)</span><span class="pln">\
</span><span class="pun">{</span><span class="pln">\
    </span><span class="kwd">char</span><span class="pln"> </span><span class="pun">*</span><span class="pln">p </span><span class="pun">=</span><span class="pln"> str</span><span class="pun">;</span><span class="pln">\
    p</span><span class="pun">[</span><span class="lit">3</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> i3</span><span class="pun">;</span><span class="pln">\
    p</span><span class="pun">[</span><span class="lit">2</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> i2</span><span class="pun">;</span><span class="pln">\
    p</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> i0</span><span class="pun">;</span><span class="pln">\
    p</span><span class="pun">[</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> i1</span><span class="pun">;</span><span class="pln">\
</span><span class="pun">}</span></code></pre>
<p>Now use this macro in code where you need to save <code>part1</code> and <code>part2</code>, as follows:</p>
<pre class="lang-cpp prettyprint prettyprinted" style=""><code><span class="kwd">char</span><span class="pln"> part1</span><span class="pun">[</span><span class="lit">4</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="lit">0</span><span class="pun">};</span><span class="pln">
</span><span class="kwd">char</span><span class="pln"> part2</span><span class="pun">[</span><span class="lit">4</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="lit">0</span><span class="pun">};</span><span class="pln">
POPULATE_DATA</span><span class="pun">(</span><span class="pln">part1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">,</span><span class="pln"> </span><span class="lit">3</span><span class="pun">,</span><span class="pln"> </span><span class="lit">4</span><span class="pun">);</span><span class="pln"> 
POPULATE_DATA</span><span class="pun">(</span><span class="pln">part2</span><span class="pun">,</span><span class="pln"> </span><span class="lit">5</span><span class="pun">,</span><span class="pln"> </span><span class="lit">6</span><span class="pun">,</span><span class="pln"> </span><span class="lit">7</span><span class="pun">,</span><span class="pln"> </span><span class="lit">8</span><span class="pun">);</span></code></pre>
</div></text><author><a href="/users/5349543/zeeshan-mahmood">Zeeshan Mahmood</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Context dependent but you could just store the <em>hash</em> of the key plus a <em>salt</em> (constant string, easy to obscure).</p>
<p>Then when (if) the user enters the key, you add the <em>salt</em>, calculate the <em>hash</em> and compare.</p>
<p>The <em>salt</em> is probably unnecessary in this case, it stops a brute-force dictionary attack if the hash can be isolated (a Google search has also been know to work).</p>
<p>A hacker still only has to insert a jmp instruction somewhere to bypass the whole lot, but that's rather more complicated than a simple text search.</p>
</div></text><author><a href="/users/172783/hplbsh">hplbsh</a></author><comments><comment><text><span class="comment-copy">This is an encryption key, not a password hash. I need the actual key to encode &amp; decode data. The user never sees the key, it is not ever stored outside the binary.</span></text><author><a class="comment-user owner" href="/users/1304/thomi" title="6,652 reputation">Thomi</a></author></comment><comment><text><span class="comment-copy">Oh silly me. Sorry.</span></text><author><a class="comment-user" href="/users/172783/hplbsh" title="2,091 reputation">hplbsh</a></author></comment><comment><text><span class="comment-copy">No worries. Thanks for taking the time to answer!</span></text><author><a class="comment-user owner" href="/users/1304/thomi" title="6,652 reputation">Thomi</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>If you are on windows user DPAPI, <a href="http://msdn.microsoft.com/en-us/library/ms995355.aspx" rel="nofollow noreferrer">http://msdn.microsoft.com/en-us/library/ms995355.aspx</a></p>
<p>As a previous post said if you are on mac use the keychain. </p>
<p>Basically all of these cute ideas about how to store your private key inside your binary are sufficiently poor from a security perspective that you should not do them. Anyone getting your private key is a big deal, don't keep it inside your program. Depending on how import your app is you can keep your private keys on a smart card, on a remote computer your code talks to or you can do what most people do and keep it in a very secure place on the local computer (the "key store" which is kind of like a weird secure registry) that is protected by permissions and all the strength of your OS. </p>
<p>This is a solved problem and the answer is NOT to keep the key inside your program :)</p>
</div></text><author><a href="/users/166324/collin">Collin</a></author><comments/></answer></answers></post>