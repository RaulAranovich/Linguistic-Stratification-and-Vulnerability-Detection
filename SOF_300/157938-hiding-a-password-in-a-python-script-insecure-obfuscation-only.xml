<?xml version="1.0" encoding="utf-8"?>
<post><title>security - Hiding a password in a python script (insecure obfuscation only) - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I have got a python script which is creating an ODBC connection. The ODBC connection is generated with a connection string. In this connection string I have to include the username and password for this connection.  </p>
<p>Is there an easy way to obscure this password in the file (just that nobody can read the password when I'm editing the file) ? </p>
</div></text><author><a href="/users/42223/dreftymac">dreftymac</a></author><comments><comment><text><span class="comment-copy">Just remember that the users running this file will have at least read access to it and can easily grab the passwords.  If thins can only be read by you and you are worried about people seeing it over your shoulder go for it, but be warned while the average observer can't memorize things fast enough to grab a password, anyone with access to the script and a small bit of technical know-how and a small amount of ambition will be able to grab your passwords.  Always think security through very carefully, it's important.</span></text><author><a class="comment-user" href="/users/513499/youarefunny" title="449 reputation">Youarefunny</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/lib/module-base64.html" rel="noreferrer">Base64 encoding</a> is in the standard library and will do to stop shoulder surfers:</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="pun">&gt;&gt;&gt;</span><span class="pln"> </span><span class="kwd">import</span><span class="pln"> base64
</span><span class="pun">&gt;&gt;&gt;</span><span class="pln"> </span><span class="kwd">print</span><span class="pln"> base64</span><span class="pun">.</span><span class="pln">b64encode</span><span class="pun">(</span><span class="str">"password"</span><span class="pun">)</span><span class="pln">
cGFzc3dvcmQ</span><span class="pun">=</span><span class="pln">
</span><span class="pun">&gt;&gt;&gt;</span><span class="pln"> </span><span class="kwd">print</span><span class="pln"> base64</span><span class="pun">.</span><span class="pln">b64decode</span><span class="pun">(</span><span class="str">"cGFzc3dvcmQ="</span><span class="pun">)</span><span class="pln">
password</span></code></pre>
</div></text><author><a href="/users/3171/dave-webb">Dave Webb</a></author><comments><comment><text><span class="comment-copy">I agree. The base64 encoded password looks much more mysterious.</span></text><author><a class="comment-user" href="/users/2926/ed-haber" title="1,474 reputation">Ed Haber</a></author></comment><comment><text><span class="comment-copy">But doesn't help the fact that the script must be readable by the user running it and the password must not.</span></text><author><a class="comment-user" href="/users/10897/martin-beckett" title="72,448 reputation">Martin Beckett</a></author></comment><comment><text><span class="comment-copy">You don't encode the entire script though.  Just the password inside the script.</span></text><author><a class="comment-user" href="/users/305/mark-biek" title="73,295 reputation">Mark Biek</a></author></comment><comment><text><span class="comment-copy">worked very well - thank you.</span></text><author><a class="comment-user owner" href="/users/3056/bernhardrusch" title="6,108 reputation">bernhardrusch</a></author></comment><comment><text><span class="comment-copy">I don't think that <code>base64</code> is better obfuscating than <code>rot13</code> in this context. On the contrary, <code>base64</code> has its typical characteristics (equal sign, ...) and is thus easier detectable than other approaches. Any obfuscation has no practical benefit, though. Really bad that this answer is this highly rated. It just gives a false feeling of security...</span></text><author><a class="comment-user" href="/users/851737/schlamar" title="5,442 reputation">schlamar</a></author></comment><comment><text><span class="comment-copy">If you're recording the password so that it can be used by the script, anyone with access to the script will be able to able to get the password, not matter which encryption method you use.  The requirement here was just to hide the password from someone just looking at the script while it was open.  In this case <code>base64</code> is preferable to <code>rot13</code> as it is in the Python standard library.</span></text><author><a class="comment-user" href="/users/3171/dave-webb" title="133,239 reputation">Dave Webb</a></author></comment><comment><text><span class="comment-copy">Really?  <code>&gt;&gt;&gt; u'abc'.encode('rot13')</code> <code>'nop'</code> The problem here is that in the question and answer it is not clear that this should just help against people looking over your shoulder and might misguiding others.</span></text><author><a class="comment-user" href="/users/851737/schlamar" title="5,442 reputation">schlamar</a></author></comment><comment><text><span class="comment-copy">base64 is NOT encryption.  it's obfuscation at best.</span></text><author><a class="comment-user" href="/users/669378/csgeek" title="114 reputation">csgeek</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Douglas F Shearer's is the generally approved solution in Unix when you need to specify a password for a remote login.<br/>
You add a <strong>--password-from-file</strong> option to specify the path and read plaintext from a file.<br/>
The file can then be in the user's own area protected by the operating system.
It also allows different users to automatically pick up their own own file.</p>
<p>For passwords that the user of the script isn't allowed to know - you can run the script with elavated permission and have the password file owned by that root/admin user.</p>
</div></text><author><a href="/users/10897/martin-beckett">Martin Beckett</a></author><comments><comment><text><span class="comment-copy">How exactly do you run the script with elevated permissions without giving a root or admin password?  Is it related to set UID bits?</span></text><author><a class="comment-user" href="/users/513499/youarefunny" title="449 reputation">Youarefunny</a></author></comment><comment><text><span class="comment-copy">Never mind I figured it out.  For anyone else who cares: If a script has a setuid bit set the OS will <i>'pass'</i> the setuid bit to the interpreter.  Unfortunately, there are massive gaping security holes so most modern distros turn off setuid for scripts.</span></text><author><a class="comment-user" href="/users/513499/youarefunny" title="449 reputation">Youarefunny</a></author></comment><comment><text><span class="comment-copy">I can't find any information on the --password-from-file option. Do you have any examples? Thanks!</span></text><author><a class="comment-user" href="/users/3892678/pyramidface" title="471 reputation">pyramidface</a></author></comment><comment><text><span class="comment-copy">@pyramidface - I meant that you would code a feature like this and add the ability to read a passwd from a file</span></text><author><a class="comment-user" href="/users/10897/martin-beckett" title="72,448 reputation">Martin Beckett</a></author></comment><comment><text><span class="comment-copy">@MartinBeckett but like Youarefunny said, you would have to raise setuid on python in order to give the script root access to the password file?</span></text><author><a class="comment-user" href="/users/3892678/pyramidface" title="471 reputation">pyramidface</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>If you are working on a Unix system, take advantage of the netrc module in the standard Python library. It reads passwords from a separate text file (.netrc), which has the format decribed <a href="http://www.mavetju.org/unix/netrc.php" rel="noreferrer">here</a>.</p>
<p>Here is a small usage example:</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="kwd">import</span><span class="pln"> netrc

</span><span class="com"># Define which host in the .netrc file to use</span><span class="pln">
HOST </span><span class="pun">=</span><span class="pln"> </span><span class="str">'mailcluster.loopia.se'</span><span class="pln">

</span><span class="com"># Read from the .netrc file in your home directory</span><span class="pln">
secrets </span><span class="pun">=</span><span class="pln"> netrc</span><span class="pun">.</span><span class="pln">netrc</span><span class="pun">()</span><span class="pln">
username</span><span class="pun">,</span><span class="pln"> account</span><span class="pun">,</span><span class="pln"> password </span><span class="pun">=</span><span class="pln"> secrets</span><span class="pun">.</span><span class="pln">authenticators</span><span class="pun">(</span><span class="pln"> HOST </span><span class="pun">)</span><span class="pln">

</span><span class="kwd">print</span><span class="pln"> username</span><span class="pun">,</span><span class="pln"> password</span></code></pre>
</div></text><author><a href="/users/622786/jonasberg">jonasberg</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>The best solution, assuming the username and password can't be given at runtime by the user, is probably a separate source file containing only variable initialization for the username and password that is imported into your main code. This file would only need editing when the credentials change. Otherwise, if you're only worried about shoulder surfers with average memories, base 64 encoding is probably the easiest solution. ROT13 is just too easy to decode manually, isn't case sensitive and retains too much meaning in it's encrypted state. Encode your password and user id outside the python script. Have he script decode at runtime for use.</p>
<p>Giving scripts credentials for automated tasks is always a risky proposal. Your script should have its own credentials and the account it uses should have no access other than exactly what is necessary. At least the password should be long and rather random.</p>
</div></text><author><a href="/users/20486/tduehr">tduehr</a></author><comments><comment><text><span class="comment-copy">Very nice answer - thank you. For the small scripts I'm writing (which are maintenance scripts anyway - the BASE64 encoding will suffice)</span></text><author><a class="comment-user owner" href="/users/3056/bernhardrusch" title="6,108 reputation">bernhardrusch</a></author></comment><comment><text><span class="comment-copy">This sounds good, but can you give an example implementation? Right now it's just a description of a general practice, and not as useful to someone hasn't done this before.</span></text><author><a class="comment-user" href="/users/1231241/dannid" title="533 reputation">Dannid</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Here is a simple method:</p>
<ol>
<li>Create a python module - let's call it peekaboo.py.  </li>
<li>In peekaboo.py, include both the password and any code needing that password</li>
<li>Create a compiled version - peekaboo.pyc - by importing this module (via python commandline, etc...).</li>
<li>Now, delete peekaboo.py.  </li>
<li>You can now happily import peekaboo relying only on peekaboo.pyc. Since peekaboo.pyc is byte compiled it is not readable to the casual user.</li>
</ol>
<p>This should be a bit more secure than base64 decoding - although it is vulnerable to a py_to_pyc decompiler.</p>
</div></text><author><a href="/users/3491046/manypartsareedible">manyPartsAreEdible</a></author><comments><comment><text><span class="comment-copy">This still has some shortcomings, but it's actually very close to what I want. It will allow me to demo python scripts that include user/passwd connections without revealing the password onscreen, or having to type it into the command prompt. After importing peekaboo <code>import peekabo</code> the password is available as <code>peekaboo.password</code> (if peekaboo.py contained <code>password='secret'</code>)</span></text><author><a class="comment-user" href="/users/1231241/dannid" title="533 reputation">Dannid</a></author></comment><comment><text><span class="comment-copy">If you want to take this idea one step further, you can use <a href="http://cython.org/" rel="nofollow noreferrer">Cython</a> to compile any .py file into C and generate a platform specific binary (ex: .pyd for windows, .so for macOS, etc)... By <code>cythonizing</code> your script and sharing the generated binary you'll get the benefit of this answer + add another layer of obfuscation, because now you have decompile C code to get to password. This is not 100% secure, but it'll take a lot of labor to get to the sensitive data you want to hide.</span></text><author><a class="comment-user" href="/users/1429402/fnord" title="1,438 reputation">Fnord</a></author></comment><comment><text><span class="comment-copy">cythonizing, perfect</span></text><author><a class="comment-user" href="/users/4265257/arnovr" title="63 reputation">ArnoVR</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>base64 is the way to go for your simple needs. There is no need to import anything:</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="pun">&gt;&gt;&gt;</span><span class="pln"> </span><span class="str">'your string'</span><span class="pun">.</span><span class="pln">encode</span><span class="pun">(</span><span class="str">'base64'</span><span class="pun">)</span><span class="pln">
</span><span class="str">'eW91ciBzdHJpbmc=\n'</span><span class="pln">
</span><span class="pun">&gt;&gt;&gt;</span><span class="pln"> _</span><span class="pun">.</span><span class="pln">decode</span><span class="pun">(</span><span class="str">'base64'</span><span class="pun">)</span><span class="pln">
</span><span class="str">'your string'</span></code></pre>
</div></text><author><a href="/users/6899/tzot">tzot</a></author><comments><comment><text><span class="comment-copy">What exactly is silly?! The whole reply, or the not-importing part?</span></text><author><a class="comment-user" href="/users/6899/tzot" title="50,715 reputation">tzot</a></author></comment><comment><text><span class="comment-copy">Base64 only adds the illusion of security.</span></text><author><a class="comment-user" href="/users/1965/flyswat" title="95,048 reputation">FlySwat</a></author></comment><comment><text><span class="comment-copy">Jonathan, it seems as if you didn't read the question. It's about <i>obscurity</i> (and a very temporary one), not <i>security</i>, so I don't understand why you consider my answer not helpful.</span></text><author><a class="comment-user" href="/users/6899/tzot" title="50,715 reputation">tzot</a></author></comment><comment><text><span class="comment-copy">I didn't know you could do this instead of having to use the base64 module. And there are a lot of encodings too like zlib too... fun :)</span></text><author><a class="comment-user" href="/users/49559/kiv" title="16,787 reputation">Kiv</a></author></comment><comment><text><span class="comment-copy">Which way is generally preferred? This or the base64 module?</span></text><author><a class="comment-user" href="/users/72321/dennis" title="20,144 reputation">Dennis</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>How about importing the username and password from a file external to the script? That way even if someone got hold of the script, they wouldn't automatically get the password.</p>
</div></text><author><a href="/users/13831/douglas-f-shearer">Douglas F Shearer</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>This is a pretty common problem.  Typically the best you can do is to either </p>
<p>A) create some kind of ceasar cipher function to encode/decode (just not rot13)
or 
B) the preferred method is to use an encryption key, within reach of your program, encode/decode the password.  In which you can use file protection to protect access the key.
  Along those lines if your app runs as a service/daemon (like a webserver) you can put your key into a password protected keystore with the password input as part of the service startup. It'll take an admin to restart your app, but you will have really good pretection for your configuration passwords.</p>
</div></text><author><a>NONE</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Your operating system probably provides facilities for encrypting data securely. For instance, on Windows there is DPAPI (data protection API). Why not ask the user for their credentials the first time you run then squirrel them away encrypted for subsequent runs?</p>
</div></text><author><a href="/users/19533/jamie-eisenhart">Jamie Eisenhart</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Place the configuration information in a encrypted config file. Query this info in your code using an key. Place this key in a separate file per environment, and don't store it with your code.</p>
</div></text><author><a href="/users/1965/flyswat">FlySwat</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>More homegrown appraoch rather than converting authentication / passwords / username to encrytpted details. <strong>FTPLIB</strong> is just the example.
"<strong>pass.csv</strong>" is the csv file name</p>
<p>Save password in CSV like below : </p>
<p>user_name</p>
<p>user_password</p>
<p>(With no column heading)</p>
<p>Reading the CSV and saving it to a list. </p>
<p>Using List elelments as authetntication details.</p>
<p>Full code.</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="kwd">import</span><span class="pln"> os
</span><span class="kwd">import</span><span class="pln"> ftplib
</span><span class="kwd">import</span><span class="pln"> csv 
cred_detail </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[]</span><span class="pln">
os</span><span class="pun">.</span><span class="pln">chdir</span><span class="pun">(</span><span class="str">"Folder where the csv file is stored"</span><span class="pun">)</span><span class="pln">
</span><span class="kwd">for</span><span class="pln"> row </span><span class="kwd">in</span><span class="pln"> csv</span><span class="pun">.</span><span class="pln">reader</span><span class="pun">(</span><span class="pln">open</span><span class="pun">(</span><span class="str">"pass.csv"</span><span class="pun">,</span><span class="str">"rb"</span><span class="pun">)):</span><span class="pln">       
        cred_detail</span><span class="pun">.</span><span class="pln">append</span><span class="pun">(</span><span class="pln">row</span><span class="pun">)</span><span class="pln">
ftp </span><span class="pun">=</span><span class="pln"> ftplib</span><span class="pun">.</span><span class="pln">FTP</span><span class="pun">(</span><span class="str">'server_name'</span><span class="pun">,</span><span class="pln">cred_detail</span><span class="pun">[</span><span class="lit">0</span><span class="pun">][</span><span class="lit">0</span><span class="pun">],</span><span class="pln">cred_detail</span><span class="pun">[</span><span class="lit">1</span><span class="pun">][</span><span class="lit">0</span><span class="pun">])</span></code></pre>
</div></text><author><a href="/users/1435852/lonelysoul">LonelySoul</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>There are several ROT13 utilities written in Python on the 'Net -- just google for them. ROT13 encode the string offline, copy it into the source, decode at point of transmission.<br/><br/>But this is <em>really</em> weak protection...</p>
</div></text><author><a href="/users/14028/kevin-little">Kevin Little</a></author><comments><comment><text><span class="comment-copy">ROT13 utilities? Isn't 'your string'.encode('rot13') enough?</span></text><author><a class="comment-user" href="/users/6899/tzot" title="50,715 reputation">tzot</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Do you know pit?</p>
<p><a href="https://pypi.python.org/pypi/pit" rel="nofollow">https://pypi.python.org/pypi/pit</a> (py2 only (version 0.3))</p>
<p><a href="https://github.com/yoshiori/pit" rel="nofollow">https://github.com/yoshiori/pit</a> (it will work on py3 (current version 0.4))</p>
<p>test.py</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="kwd">from</span><span class="pln"> pit </span><span class="kwd">import</span><span class="pln"> </span><span class="typ">Pit</span><span class="pln">

config </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Pit</span><span class="pun">.</span><span class="pln">get</span><span class="pun">(</span><span class="str">'section-name'</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span><span class="str">'require'</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="str">'username'</span><span class="pun">:</span><span class="pln"> </span><span class="str">'DEFAULT STRING'</span><span class="pun">,</span><span class="pln">
    </span><span class="str">'password'</span><span class="pun">:</span><span class="pln"> </span><span class="str">'DEFAULT STRING'</span><span class="pun">,</span><span class="pln">
    </span><span class="pun">}})</span><span class="pln">
</span><span class="kwd">print</span><span class="pun">(</span><span class="pln">config</span><span class="pun">)</span></code></pre>
<p>Run:</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="pln">$ python test</span><span class="pun">.</span><span class="pln">py
</span><span class="pun">{</span><span class="str">'password'</span><span class="pun">:</span><span class="pln"> </span><span class="str">'my-password'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'username'</span><span class="pun">:</span><span class="pln"> </span><span class="str">'my-name'</span><span class="pun">}</span></code></pre>
<p>~/.pit/default.yml:</p>
<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="pln">section</span><span class="pun">-</span><span class="pln">name</span><span class="pun">:</span><span class="pln">
  password</span><span class="pun">:</span><span class="pln"> my</span><span class="pun">-</span><span class="pln">password
  username</span><span class="pun">:</span><span class="pln"> my</span><span class="pun">-</span><span class="pln">name</span></code></pre>
</div></text><author><a href="/users/5406454/takesxisximada">TakesxiSximada</a></author><comments/></answer></answers></post>