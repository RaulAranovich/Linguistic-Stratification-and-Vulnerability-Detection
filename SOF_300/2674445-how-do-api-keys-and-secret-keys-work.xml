<?xml version="1.0" encoding="utf-8"?>
<post><title>security - How do API Keys and Secret Keys work? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I am just starting to think about how api keys and secret keys work.  Just 2 days ago I signed up for Amazon S3 and installed the <a href="http://www.s3fox.net/" rel="noreferrer">S3Fox Plugin</a>.  They asked me for both my Access Key and Secret Access Key, both of which require me to login to access.</p>
<p>So I'm wondering, if they're asking me for my secret key, they must be storing it somewhere right?  Isn't that basically the same thing as asking me for my credit card numbers or password and storing that in their own database?</p>
<p>How are secret keys and api keys supposed to work?  How secret do they need to be?  Are these applications that use the secret keys storing it somehow?</p>
<p>Thanks for the insight.</p>
</div></text><author><a href="/users/169992/lance-pollard">Lance Pollard</a></author><comments/></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Basically elaborating on what's outlined <a href="http://docs.amazonwebservices.com/AmazonS3/latest/dev/RESTAuthentication.html" rel="noreferrer">here</a>.</p>
<p>Here's how it works: let's say we have a function that takes a number from zero through nine, adds three and, if the result is greater than ten, subtracts ten. So f(2) = 5, f(8) = 1, etc. Now, we can make another function, call it f', that goes backwards, by adding seven instead of three. f'(5) = 2, f'(1) = 8, etc.</p>
<p>That's an example of a two-way function and its inverse. Theoretically, any mathematical functions that maps one thing to another can be reversed. In practice, though, you can make a function that scrambles its input so well that it's incredibly difficult to reverse.</p>
<p>Taking an input and applying a one-way function is called "hashing" the input, and what Amazon stores on their system is a "hash" of your secret key. SHA1 is an example of this kind of "one-way" function, it's also hardened against attacks.</p>
<p>The <a href="http://www.ietf.org/rfc/rfc2104.txt" rel="noreferrer">HMAC function</a> builds on established hash functions to use a known key to authenticate a string of text. It works like this:</p>
<ul>
<li>You take the text of your request and your secret key and apply the HMAC function.</li>
<li>You add that authentication header to your request and send it to Amazon.</li>
<li>Amazon looks up their copy of the secret key, and the text you just sent and applies the HMAC function.</li>
<li>If the result matches, they know that you have the same secret key.</li>
</ul>
<p>The difference between this and PKI is that this method is <a href="http://en.wikipedia.org/wiki/REST" rel="noreferrer">RESTful</a>, allowing a minimum number of exchanges between your system and Amazon's servers.</p>
<blockquote>
<p>Isn't that basically the same thing as
  asking me for my credit card numbers
  or password and storing that in their
  own database?</p>
</blockquote>
<p>Yes, though the damage someone can do with S3 seems to be limited to draining your account.</p>
<blockquote>
<p>How secret do they need to be? Are
  these applications that use the secret
  keys storing it somehow?</p>
</blockquote>
<p>At some point, you're going to have to load the secret key, and with most Unix based systems, if an attacker can get root access they can get the key. If you encrypt the key, you have to have code to decrypt it, and at some point the decryption code has to be plain text so it can be executed. This is the same problem DRM has, except that you own the computer.</p>
<p>In many cases, I just put secret keys in a file with limited permissions, and take the usual precautions to prevent my system from being rooted. There are a few tricks to make it work properly with a multiuser system, such as avoiding temporary files and such.</p>
</div></text><author><a href="/users/309368/ben">ben</a></author><comments><comment><text><span class="comment-copy">"Taking an input and applying a one-way function is called "hashing" the input, and what Amazon stores on their system is a "hash" of your secret key" - If Amazon stores a HASH of your secret key, how is it possible for Amazon to HASH the text sent to them ?</span></text><author><a class="comment-user" href="/users/67517/franklin" title="800 reputation">Franklin</a></author></comment><comment><text><span class="comment-copy">First you say "what Amazon stores on their system is a "hash" of your secret key" and then later "Amazon looks up their copy of the secret key".  These seem to contradict each other.  I believe the first statement is wrong.</span></text><author><a class="comment-user" href="/users/29394/sean" title="777 reputation">Sean</a></author></comment><comment><text><span class="comment-copy">foursquare for example have a client ID and a client secret you get when you sign up. And I need to send both to get a response. So isnt this just going to be able to be seen and intercepted on the 'wire'. They dont make mention of making or forcing https. There is also a common scenario of a serverless App these days so it was a) send the request to FS via the server (still able to see intercepted) b) send via client browser to FS (very easy to spot the client key and secret.) What am I missing...the secret is surely like a password you must never SEND it http always https.</span></text><author><a class="comment-user" href="/users/338867/landed" title="400 reputation">landed</a></author></comment><comment><text><span class="comment-copy">This url tells more details of Amazon S3 Auth implementation - <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/S3_Authentication2.html" rel="nofollow noreferrer">docs.aws.amazon.com/AmazonS3/latest/dev/S3_Authentication2.h‌​tml</a></span></text><author><a class="comment-user" href="/users/125904/asyncwait" title="2,080 reputation">asyncwait</a></author></comment><comment><text><span class="comment-copy">"Theoretically, any mathematical functions that maps one thing to another can be reversed" - Thats not true, hash functions are the example. it is very easy to show. lets say we have a function that turns words into numbers, based on sum of values(a=1, b=2, c=3 etc). Eg "SO" would be 18 + 14 = 32. So we have changed SO into 32 but if i reveal this function to somebody, and give him number 32, there is no way he can know if our basic word was "SO" or  "ZF"(26+6) or one of dozens other possibilities</span></text><author><a class="comment-user" href="/users/1902570/leo" title="677 reputation">Leo</a></author></comment><comment><text><span class="comment-copy">@Leo Correct, but you can try to manipulate the string until the hash matches the original one. I know that you can cause a collision in MD5.But in most scenarios, the "new" content with the same hash will make no sense.</span></text><author><a class="comment-user" href="/users/1682223/matthias-kleine" title="903 reputation">Matthias Kleine</a></author></comment><comment><text><span class="comment-copy">"Basically elaborating on what's outlined here." This is why I love SO. I opened the link, saw the long docs, and my immediate thought was "ain't nobody got no time for that.." thanks for the succinct summary.</span></text><author><a class="comment-user" href="/users/2635884/phillip-chan" title="824 reputation">Phillip Chan</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p><a href="http://en.wikipedia.org/wiki/Public-key_cryptography" rel="noreferrer">Public Key Cryptography</a> is used to defend against very specific attacks,  some of which are common.  In short this is complex math that allows one to verify that at individual has both the Public and Private Key pair while only knowing the public key.   This is very different from a credit card or static password.   As an example if you are authenticating with an OpenSSH server then the server <a href="http://sial.org/howto/openssh/publickey-auth/" rel="noreferrer">doesn't need the private key</a>. </p>
<p>Ideally if Amazon's API database where to be compromised the attacker would have a list of public keys and would be unable to access the user's API using this information.  However ideal systems are not always put into practice and i don't know for sure if Amazon is protecting against this attack vector,  but they should be. </p>
<p>In public key authentication is statistically immune to brute force.  Passwords are often dictionary words which can be broken relativity fast.  However a private key is a massive number that isn't easy to guess.  If the attacker had the public key then they could perform many guesses "offline"  on a super computer,  but even then it would take a lot of time and money to break the key. </p>
</div></text><author><a href="/users/183528/rook">rook</a></author><comments><comment><text><span class="comment-copy">the <i>doesn't need the private key</i> link is broken now.</span></text><author><a class="comment-user" href="/users/96389/joset" title="1,810 reputation">Joset</a></author></comment></comments></answer></answers></post>