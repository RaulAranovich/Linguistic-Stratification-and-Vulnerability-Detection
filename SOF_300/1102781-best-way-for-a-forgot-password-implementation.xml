<?xml version="1.0" encoding="utf-8"?>
<post><title>security - Best way for a 'forgot password' implementation? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I'm looking for the best method to implement a "forgot password" feature.</p>
<p>I come out with 2 ideas:</p>
<ol>
<li><p>When user click on forgot password, the user is required to key in the username, email and maybe date of birth or last name. Then a mail with temporary password will be sent to the user email account. The user uses the temporary password to login and resets his password.</p></li>
<li><p>Similar, but the email would contain a link to let the user reset his password.</p></li>
</ol>
<p>Or anyone can suggest me a better and secure way? I'm also thinking to send the temporary password or link, force the user to reset the password within 24 hour, or else the temporary password or link will not be usable. How to do that?</p>
</div></text><author><a href="/users/100836/zaki">Zaki</a></author><comments><comment><text><span class="comment-copy">I re-tagged the post since this goes beyond JSF - you'll probably get more responses that way.</span></text><author><a class="comment-user" href="/users/304/mcdowell" title="84,511 reputation">McDowell</a></author></comment><comment><text><span class="comment-copy">@Whoever There's a wave of "let's delete this closed question because XYZ" on meta these months. I would just like to put out there that this particular question should not be deleted, unless it is proven that the solutions are flawed and that it's existence litterally hurts more than it helps the case of security.</span></text><author><a class="comment-user" href="/users/576767/f%c3%a9lix-gagnon-grenier" title="4,293 reputation">Félix Gagnon-Grenier</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p><strong>Update: revised in May 2013 for a better approach</strong></p>
<ol>
<li>The user enters his username and hits "forgot password". I also recommend the option of entering the email address instead of the username, because usernames are sometimes forgotten too.</li>
<li>The system has a table <code>password_change_requests</code> with the columns <code>ID</code>, <code>Time</code> and <code>UserID</code>. When the new user presses the button, a record is created in the table. The <code>Time</code> column contains the time when the user pressed the "Forgot Password" button. The <code>ID</code> is a string. A long random string is created (say, a GUID) and then <strong>hashed like a password</strong> (which is a separate topic in and of itself). This hash is then used as the 'ID' in the table.</li>
<li>The system sends an email to the user which contains a link in it. The link also contains the original ID string (before the hashing). The link will be something like this: <code>http://www.mysite.com/forgotpassword.jsp?ID=01234567890ABCDEF</code>. The forgotpassword.jsp page should be able to retrieve the ID parameter. Sorry, I don't know Java, so I can't be more specific.</li>
<li>When the user clicks the link in the email, he is moved to your page. The page retrieves the <code>ID</code> from the URL, hashes it again, and checks against the table. If such a record is there and is no more than, say, 24 hours old, the user <strong>is presented with the prompt to enter a new password</strong>.</li>
<li>The user enters a new password, hits OK and everyone lives happily ever after... until next time!</li>
</ol>
</div></text><author><a href="/users/41360/vilx">Vilx-</a></author><comments><comment><text><span class="comment-copy">The link part i dont really understand how to implement, how can a link contain the ID ?</span></text><author><span class="comment-user">Hoe Chin</span></author></comment><comment><text><span class="comment-copy">The link can contain the ID as part of the query string, for example <a href="http://www.example.com/ResetPassword?ID=" rel="nofollow noreferrer">example.com/ResetPassword?ID=</a>{ID value}</span></text><author><a class="comment-user" href="/users/35031/crippledsmurf" title="3,252 reputation">Crippledsmurf</a></author></comment><comment><text><span class="comment-copy">the most appropriate way to implement this would be - send the temporary password-reset token as an email in plain-text to the user (but never store it as plain-text in the DB) - after user enters this temp immediately force him to re-enter a new password. - for the paranoid, ensure that your smtp server has ssl, so your mails containing sensitive info doesn't get snooped.  for most cases, this approach is pretty secure. if your case requires further security, you probably shouldn't have users that forget their passwords :S</span></text><author><a class="comment-user" href="/users/159825/kaushik-gopal" title="3,292 reputation">Kaushik Gopal</a></author></comment><comment><text><span class="comment-copy">@AlexYork - Uhmm... I apologize?</span></text><author><a class="comment-user" href="/users/41360/vilx" title="52,724 reputation">Vilx-</a></author></comment><comment><text><span class="comment-copy">@AlexYork - I revised the whole approach for the better one.</span></text><author><a class="comment-user" href="/users/41360/vilx" title="52,724 reputation">Vilx-</a></author></comment><comment><text><span class="comment-copy">Why generate a random string/guid, hash it and use the hash? Does not the guid suffice?</span></text><author><a class="comment-user" href="/users/989451/jeroen-k" title="5,381 reputation">Jeroen K</a></author></comment><comment><text><span class="comment-copy">@jeroenk - So that if someone steals your DB, he cannot forge a "Reset Password" link and change someone's password.</span></text><author><a class="comment-user" href="/users/41360/vilx" title="52,724 reputation">Vilx-</a></author></comment><comment><text><span class="comment-copy">this is essentially the described way of properly resetting a password <a href="https://crackstation.net/hashing-security.htm#faq" rel="nofollow noreferrer">crackstation.net/hashing-security.htm#faq</a></span></text><author><a class="comment-user" href="/users/1564566/truthof42" title="682 reputation">TruthOf42</a></author></comment><comment><text><span class="comment-copy">I wrote some implementation for it, and put it OpenSource on GitHub. If you wanna have a look - <a href="https://github.com/OhadR/oAuth2-sample/tree/master/oauth2-auth-server" rel="nofollow noreferrer">github.com/OhadR/oAuth2-sample/tree/master/oauth2-auth-serve‌​r</a></span></text><author><a class="comment-user" href="/users/421642/ohadr" title="3,472 reputation">OhadR</a></author></comment><comment><text><span class="comment-copy">been trying to write a solution, and a problem I have run into is that I have been hashing my tokens with PHP's password_hash() function, letting it generate the salt as they recommend, but then when you try to look it up by re-hashing the user-submitted token and comparing, guess what:  the newly-hashed version is different, thanks to the randomly generated salt. What to do? md5() it?</span></text><author><a class="comment-user" href="/users/867903/david" title="385 reputation">David</a></author></comment><comment><text><span class="comment-copy">@David - True, there is that problem. Here's an idea - store TWO tokens - one hashed, the other not. That way you can look up by the plaintext token, and then verify by the hashed one.</span></text><author><a class="comment-user" href="/users/41360/vilx" title="52,724 reputation">Vilx-</a></author></comment><comment><text><span class="comment-copy">@vilx so, you're saying save the same token in our database, once hashed and once plaintext? does that defeat the objective of not leaving the plaintext lying around in our database, or am I missing something?  my brain hurts.  For now I am just going with md5(), though still open to suggestions.</span></text><author><a class="comment-user" href="/users/867903/david" title="385 reputation">David</a></author></comment><comment><text><span class="comment-copy">@David - No, no, no - generate two <i>different</i> tokens. One for lookup, other for verification.</span></text><author><a class="comment-user" href="/users/41360/vilx" title="52,724 reputation">Vilx-</a></author></comment><comment><text><span class="comment-copy">@vilx initially I thought that's what you meant, but i didn't understand the logic. you wanna walk me through it from the top?</span></text><author><a class="comment-user" href="/users/867903/david" title="385 reputation">David</a></author></comment><comment><text><span class="comment-copy">@David - Ach, I wanted to edit the post, but the topic is locked. :( OK, let's try again: your table will contain the columns: <code>ID</code>, <code>UserID</code>, <code>Time</code>, <code>TokenHash</code>. You will generate TWO long, random strings. Put the first string (the "id") in the <code>ID</code> column; hash the second (the "token") and put the hash in the <code>TokenHash</code> column. The generate the link like <code>forogotPassword.jsp?id=asdasd&amp;token=asdasd</code>. The token in the link is NOT hashed. Does this make sense now?</span></text><author><a class="comment-user" href="/users/41360/vilx" title="52,724 reputation">Vilx-</a></author></comment><comment><text><span class="comment-copy">and then... email the user a url with two user tokens as query parameters (or contained in the email message or whatever)? one being the identification, the other the unhashed token which you then verify?  thanks for your patience, by the way.</span></text><author><a class="comment-user" href="/users/867903/david" title="385 reputation">David</a></author></comment><comment><text><span class="comment-copy">@David - Yes, exactly! Both tokens (both unhashed) in the URL in the email.</span></text><author><a class="comment-user" href="/users/41360/vilx" title="52,724 reputation">Vilx-</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>It all depends on your site and the level of security that you're trying to achieve but the basic process for a web app goes something like the following:</p>
<ol>
<li><p>The user navigates to the 'forgot my password' page and enters their username or email (whichever is unique) to request a password reset.</p></li>
<li><p>Optionally at this stage you can confirm the request by asking for additional information such as the answer to a predefined security question or their date of birth etc. This extra level stops users receiving emails they didn't request.</p></li>
<li><p>Look up the user's account. Save a temporary password (usually a GUID) and timestamp against the account record. Send an email to the user containing the temporary password.</p></li>
<li><p>The user either clicks on the link containing the temporary password and the user's identifier in the email or navigates to the 'forgot my password' page and copy &amp; pastes the temporary password and their identifier. The user enters their new password and confirms it.</p></li>
<li><p>Look up the user's record and if the current time is within a specified time limit (e.g. 1 hour) of the timestamp saved in step 2 then hash and save the new password. (Obviously only if the temporary passwords match!).  Delete the temporary GUID and timestamp.</p></li>
</ol>
<p>The principal here is that the user is emailed a temporary password that let's them <em>change</em> their password.  The originally stored password (it should be hashed!) is never changed to a temporary password in case the user remembers it.</p>
<p><strong>The original password will never be displayed to the user as it should be hashed and unknown.</strong></p>
<p><strong>Note</strong> this process relies entirely on the security of the user's email account. So it depends on the level of security your wish to achieve.  This is usually enough for most sites/apps.</p>
</div></text><author><a href="/users/88053/david-glenn">David Glenn</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I'll go with:</p>
<ol>
<li>Ask user for email, check email is registered</li>
<li>Generate GUID, and send it to that email</li>
<li>Do not reset password yet</li>
<li>User clicks link, and then have to enter new pass</li>
<li>Reset password only after user is in your site, and have clicked reset button after typing new pass.</li>
<li>Make that GUID expirable within a short time period to make it safer.</li>
</ol>
</div></text><author><a href="/users/439847/andres-santana">andres.santana</a></author><comments><comment><text><span class="comment-copy">I don't want to get in trouble asking a ? but it is related to your answer.  How are you generating the GUID?</span></text><author><a class="comment-user" href="/users/222837/kingandrew" title="495 reputation">KingAndrew</a></author></comment><comment><text><span class="comment-copy">-1 for not implementing some kind of hash on the link you are sending to the person</span></text><author><a class="comment-user" href="/users/1564566/truthof42" title="682 reputation">TruthOf42</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Troy Hunt makes some excellent points in his article, <a href="http://www.troyhunt.com/2012/05/everything-you-ever-wanted-to-know.html?HN2">Everything you ever wanted to know about building a secure password reset feature</a>. The most relevant excerpts are:</p>
<blockquote>
<p>[T]here are two common approaches:</p>
<ol>
<li>Generate a new password on the server and email it</li>
<li>Email a unique URL which will facilitate a reset process</li>
</ol>
<p>Despite plenty of guidance to the contrary, the first point is really not where we want to be. The problem with doing this is that it means a persistent password – one you can go back with and use any time – has now been sent over an insecure channel and resides in your inbox.</p>
</blockquote>
<p>...</p>
<blockquote>
<p>But there’s one more big problem with the first approach in that it makes the malicious lockout of an account dead simple. If I know the email address of someone who owns an account at a website then I can lock them out of it whenever I please simply by resetting their password; it’s denial of service attack served up on a silver platter! This is why a reset is something that should only happen after successfully verifying the right of the requestor to do so.</p>
<p>When we talk about a reset URL, we’re talking about a website address which is unique to this specific instance of the reset process.</p>
</blockquote>
<p>...</p>
<blockquote>
<p>What we want to do is create a unique token which can be sent in an email as part of the reset URL then matched back to a record on the server alongside the user’s account thus confirming the email account owner is indeed the one attempting to reset the password. For example, the token may be “3ce7854015cd38c862cb9e14a1ae552b” and is stored in a table alongside the ID of the user performing the reset and the time at which the token was generated (more on that in a moment). When the email is sent out, it contains a URL such as “Reset/?id=3ce7854015cd38c862cb9e14a1ae552b” and when the user loads this, the page checks for the existence of the token and consequently confirms the identity of the user and allows the password to be changed.</p>
</blockquote>
<p>...</p>
<blockquote>
<p>The other thing we want to do with a reset URL is to time limit the token so that the reset process must be completed within a certain duration, say within an hour.</p>
</blockquote>
<p>...</p>
<blockquote>
<p>Finally, we want to ensure that this is a one-time process. Once the reset process is complete, the token should be deleted so that the reset URL is no longer functional. As with the previous point, this is to ensure an attacker has a very limited window in which they can abuse the reset URL. Plus of course the token is no longer required if the reset process has completed successfully.</p>
</blockquote>
<p>He makes many more good points about avoiding information leaks, CAPTCHAs, two-factor authentication, and of course the basic best practices like password hashing. I think it's important to note that I disagree with Troy on the usefulness of security questions, preferring <a href="http://www.schneier.com/blog/archives/2005/02/the_curse_of_th.html">Bruce Schneier's skepticism of the practice</a>:</p>
<blockquote>
<p>The point of all these questions is the same: a backup password. If you forget your password, the secret question can verify your identity so you can choose another password or have the site e-mail your current password to you. It's a great idea from a customer service perspective -- a user is less likely to forget his first pet's name than some random password -- but terrible for security. The answer to the secret question is much easier to guess than a good password, and the information is much more public.</p>
</blockquote>
</div></text><author><a href="/users/706499/dave-liepmann">Dave Liepmann</a></author><comments><comment><text><span class="comment-copy">That link has clear NSFW images, there is a link to change this but a lot of people scan a page first.  Stupid idea!</span></text><author><a class="comment-user" href="/users/537674/nik0lias" title="1,532 reputation">nik0lias</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>When you are sending any information via email, it won't be secure. There are too many ways someone can get it. It would be child's play for a skilled hacker looking to steal your information.</p>
<p>Refrain from sending any personal information like passwords and income information via email as it can become VERY EMBARRASSING for you and your organization if such information was leaked or stolen. Think about security seriously. It just takes that one incident for all the bricks to fall.</p>
<p><strong>As for password retrieval, thoroughly read <a href="http://docslide.us/documents/forgot-password-best-practices-v20.html" rel="nofollow noreferrer">Forgot Password Best Practices</a></strong>.</p>
<blockquote>
<p>The bottom line is that an application
  following best practices should allow
  a user to reset his own password.
  Personal security questions should be
  used. The application should not send
  email, display passwords, nor set any
  temporary passwords.</p>
</blockquote>
<p>EDIT: Updated link</p>
</div></text><author><a href="/users/1316/jinsungy">jinsungy</a></author><comments><comment><text><span class="comment-copy"><a href="http://stackoverflow.com/questions/1069722/sending-username-and-password-through-email-after-user-registration-in-web-applic/1074507#1074507" title="sending username and password through email after user registration in web applic">stackoverflow.com/questions/1069722/…</a></span></text><author><a class="comment-user" href="/users/1316/jinsungy" title="5,463 reputation">jinsungy</a></author></comment><comment><text><span class="comment-copy">I tried the link for Forgot Password Best Practices and got a 500 server error.  Do you think the server is down just now or is there an other link to follow?</span></text><author><a class="comment-user" href="/users/222837/kingandrew" title="495 reputation">KingAndrew</a></author></comment><comment><text><span class="comment-copy">here you go..  <a href="http://www.fishnetsecurity.com/Resource_/PageResource/White_Papers/FishNetSecurity_SecureForgotPassword.pdf" rel="nofollow noreferrer">fishnetsecurity.com/Resource_/PageResource/White_Papers/…</a></span></text><author><a class="comment-user" href="/users/1316/jinsungy" title="5,463 reputation">jinsungy</a></author></comment><comment><text><span class="comment-copy">the link is dead again.</span></text><author><a class="comment-user" href="/users/256484/eric-cope" title="632 reputation">Eric Cope</a></author></comment><comment><text><span class="comment-copy">Here again: <a href="http://www.fishnetsecurity.com/6labs/resource-library/white-paper/best-practices-secure-forgot-password-feature" rel="nofollow noreferrer">fishnetsecurity.com/6labs/resource-library/white-paper/…</a></span></text><author><a class="comment-user" href="/users/807438/mustafa" title="508 reputation">mustafa</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>As said, it depends on the level of security required, however, if you need a higher level, some novel solutions I have seen include;</p>
<ul>
<li><p>Displaying half of the temporary password when the user's identity has been confirmed (security question, email address etc.) then the other half being sent to the email account. If the email account has been compromised, it is unlikely that the same person has also managed to perform a man-in-the middle attack. (Seen on UK Goverment Gateway)</p></li>
<li><p>Confirming identity via email and another medium - for example a code sent via text to a registered mobile. (Seen on eBay / PayPal)</p></li>
</ul>
<p>For somewhere in between these two extremes implementing security questions may be the way to go as mentioned by DaveG.</p>
</div></text><author><a href="/users/134897/tom-werner">Tom Werner</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>If you include an email address with the registration. The "forget password" button sends an email to that email address. It ensures that the information is send to a trusted email.</p>
<p>(Unless the database is hacked, but then nothing is safe).</p>
</div></text><author><a href="/users/18061/toon-krijthe">Toon Krijthe</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Here are three very good links that provide information on password resets:</p>
<ol>
<li><p><a href="http://jtauber.com/blog/2006/03/20/account_management_patterns/" rel="noreferrer">http://jtauber.com/blog/2006/03/20/account_management_patterns/</a></p></li>
<li><p>(Don't let users confirm using GET):<a href="http://www.artima.com/forums/flat.jsp?forum=106&amp;thread=152805&amp;start=15&amp;msRange=15" rel="noreferrer">http://www.artima.com/forums/flat.jsp?forum=106&amp;thread=152805&amp;start=15&amp;msRange=15</a></p></li>
<li><p><a href="http://fishbowl.pastiche.org/archives/docs/PasswordRecovery.pdf" rel="noreferrer">http://fishbowl.pastiche.org/archives/docs/PasswordRecovery.pdf</a></p></li>
</ol>
<p>Hope that helps.  They sure helped me understand the issue.</p>
</div></text><author><a href="/users/222837/kingandrew">KingAndrew</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I would enforce unique email addresses across the accounts.  </p>
<p>Then it is a simple matter of sending a link to a temporary page that allows the person to change their password.  (allow 24 hours or less)</p>
<p>The user's email account is the weakest link in this scenario.</p>
</div></text><author><a href="/users/30576/andrew-harry">Andrew Harry</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Never email a password to the user. Even if it is auto-generated. Best approach (recommend and used by SANS and others):</p>
<ol>
<li>On the forgot password page, ask
the email/user id and a NEW password
from the user.</li>
<li>Email a link to the stored email
for that account with an activation
link.</li>
<li>When the user clicks on that link,
enable the new password.</li>
</ol>
<p>If he doesn't click the link within 24 hours or so, disable the link (so that it does not change the password anymore). </p>
<p>Never change the password without the user consent. It means do not email a new password just because someone clicked on the forgot password link and figured out the account name.</p>
</div></text><author><a href="/users/104334/sucuri">Sucuri</a></author><comments><comment><text><span class="comment-copy">I'm concerned with this technique. Attacker enters your email and a NEW password. Account owner receives the email, misreads something, and clicks on the link. Attacker standing by, trying new password every minute, gains access to the account until account owner realizes what happened and eventually goes to "forgot password" page.</span></text><author><a class="comment-user" href="/users/21697/odi-xceed" title="48 reputation">Odi - Xceed</a></author></comment><comment><text><span class="comment-copy">Another issue! providing a new password on the password reset time is not a good option. I may forget the new password again if checked my email after hours!</span></text><author><a class="comment-user" href="/users/1052155/yazid-erman" title="458 reputation">Yazid Erman</a></author></comment></comments></answer></answers></post>