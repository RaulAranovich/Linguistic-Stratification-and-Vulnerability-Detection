<?xml version="1.0" encoding="utf-8"?>
<post><title>asp.net - How can I safely set the user principal in a custom WebAPI HttpMessageHandler? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>For basic authentication I have implemented a custom <code>HttpMessageHandler</code> based on the example shown in Darin Dimitrov's answer here: <a href="http://stackoverflow.com/a/11536349/270591">http://stackoverflow.com/a/11536349/270591</a></p>
<p>The code creates an instance <code>principal</code> of type <code>GenericPrincipal</code> with user name and roles and then sets this principal to the current principal of the thread:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="typ">Thread</span><span class="pun">.</span><span class="typ">CurrentPrincipal</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> principal</span><span class="pun">;</span></code></pre>
<p>Later in a <code>ApiController</code> method the principal can be read by accessing the controllers <code>User</code> property:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ValuesController</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">ApiController</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Post</span><span class="pun">(</span><span class="typ">TestModel</span><span class="pln"> model</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> user </span><span class="pun">=</span><span class="pln"> </span><span class="typ">User</span><span class="pun">;</span><span class="pln"> </span><span class="com">// this should be the principal set in the handler</span><span class="pln">
        </span><span class="com">//...</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>This seemed to work fine until I recently added a custom <code>MediaTypeFormatter</code> that uses the <code>Task</code> library like so:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">public</span><span class="pln"> </span><span class="kwd">override</span><span class="pln"> </span><span class="typ">Task</span><span class="str">&lt;object&gt;</span><span class="pln"> </span><span class="typ">ReadFromStreamAsync</span><span class="pun">(</span><span class="typ">Type</span><span class="pln"> type</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Stream</span><span class="pln"> readStream</span><span class="pun">,</span><span class="pln">
    </span><span class="typ">HttpContent</span><span class="pln"> content</span><span class="pun">,</span><span class="pln"> </span><span class="typ">IFormatterLogger</span><span class="pln"> formatterLogger</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> task </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Task</span><span class="pun">.</span><span class="typ">Factory</span><span class="pun">.</span><span class="typ">StartNew</span><span class="pun">(()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="com">// some formatting happens and finally a TestModel is returned,</span><span class="pln">
        </span><span class="com">// simulated here by just an empty model</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">object</span><span class="pun">)</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">TestModel</span><span class="pun">();</span><span class="pln">
    </span><span class="pun">});</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> task</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>(I have this approach to start a task with <code>Task.Factory.StartNew</code> in <code>ReadFromStreamAsync</code> from some sample code. Is it wrong and maybe the only reason for the problem?)</p>
<p>Now, "sometimes" - and for me it appears to be random - the <code>User</code> principal in the controller method isn't the principal anymore I've set in the MessageHandler, i.e. user name, <code>Authenticated</code> flag and roles are all lost. The reason seems to be that the custom MediaTypeFormatter causes a change of the thread between MessageHandler and controller method. I've confirmed this by comparing the values of <code>Thread.CurrentThread.ManagedThreadId</code> in the MessageHandler and in the controller method. "Sometimes" they are different and then the principal is "lost".</p>
<p>I've looked now for an alternative to setting <code>Thread.CurrentPrincipal</code> to somehow transfer the principal safely from the custom MessageHandler to the controller method and in <a href="http://sixgun.co.uk/blog/2012/02/29/asp-net-web-api-basic-authentication/" rel="noreferrer">this blog post</a> request properties are used:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">request</span><span class="pun">.</span><span class="typ">Properties</span><span class="pun">.</span><span class="typ">Add</span><span class="pun">(</span><span class="typ">HttpPropertyKeys</span><span class="pun">.</span><span class="typ">UserPrincipalKey</span><span class="pun">,</span><span class="pln">
    </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">GenericPrincipal</span><span class="pun">(</span><span class="pln">identity</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]));</span></code></pre>
<p>I wanted to test that but it seems that the <code>HttpPropertyKeys</code> class (which is in namespace <code>System.Web.Http.Hosting</code>) doesn't have a <code>UserPrincipalKey</code> property anymore in the recent WebApi versions (release candidate and final release from last week as well).</p>
<p>My question is: How can I change the last code snippet above so that is works with the current WebAPI version? Or generally: How can I set the user principal in a custom MessageHandler and access it reliably in a controller method?</p>
<p><strong>Edit</strong></p>
<p>It is mentioned <a href="http://leastprivilege.com/2012/03/08/asp-net-webapi-security-2-identity-architecture/" rel="noreferrer">here</a> that "<code>HttpPropertyKeys.UserPrincipalKey</code> ... resolves to <code>“MS_UserPrincipal”</code>", so I tried to use:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">request</span><span class="pun">.</span><span class="typ">Properties</span><span class="pun">.</span><span class="typ">Add</span><span class="pun">(</span><span class="str">"MS_UserPrincipal"</span><span class="pun">,</span><span class="pln">
    </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">GenericPrincipal</span><span class="pun">(</span><span class="pln">identity</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]));</span></code></pre>
<p>But it doesn't work as I expected: The <code>ApiController.User</code> property does not contain the principal added to the <code>Properties</code> collection above.</p>
</div></text><author><a href="/users/270591/slauma">Slauma</a></author><comments><comment><text><span class="comment-copy">I suggest looking at this <a href="https://github.com/thinktecture/Thinktecture.IdentityModel.45" rel="nofollow noreferrer">github.com/thinktecture/Thinktecture.IdentityModel.45</a></span></text><author><a class="comment-user" href="/users/6819/darrel-miller" title="93,579 reputation">Darrel Miller</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>The problem of losing the principal on a new thread is mentioned here:</p>
<p><a href="http://leastprivilege.com/2012/06/25/important-setting-the-client-principal-in-asp-net-web-api/">http://leastprivilege.com/2012/06/25/important-setting-the-client-principal-in-asp-net-web-api/</a></p>
<blockquote>
<p><strong>Important: Setting the Client Principal in ASP.NET Web API</strong></p>
<p>Due to some unfortunate mechanisms buried deep in ASP.NET, setting
  Thread.CurrentPrincipal in Web API web hosting is not enough.</p>
<p>When hosting in ASP.NET, Thread.CurrentPrincipal might get overridden
  with HttpContext.Current.User when creating new threads. This means
  you have to set the principal on both the thread and the HTTP context.</p>
</blockquote>
<p>And here: <a href="http://aspnetwebstack.codeplex.com/workitem/264">http://aspnetwebstack.codeplex.com/workitem/264</a></p>
<blockquote>
<p>Today, you will need to set both of the following for user principal
  if you use a custom message handler to perform authentication in the
  web hosted scenario.</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="typ">IPrincipal</span><span class="pln"> principal </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">GenericPrincipal</span><span class="pun">(</span><span class="pln">
    </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">GenericIdentity</span><span class="pun">(</span><span class="str">"myuser"</span><span class="pun">),</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">"myrole"</span><span class="pln"> </span><span class="pun">});</span><span class="pln">
</span><span class="typ">Thread</span><span class="pun">.</span><span class="typ">CurrentPrincipal</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> principal</span><span class="pun">;</span><span class="pln">
</span><span class="typ">HttpContext</span><span class="pun">.</span><span class="typ">Current</span><span class="pun">.</span><span class="typ">User</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> principal</span><span class="pun">;</span></code></pre>
</blockquote>
<p>I have added the last line <code>HttpContext.Current.User = principal</code> (needs <code>using System.Web;</code>) to the message handler and the <code>User</code> property in the <code>ApiController</code> does always have the correct principal now, even if the thread has changed due to the task in the MediaTypeFormatter.</p>
<p><strong>Edit</strong></p>
<p>Just to emphasize it: Setting the current user's principal of the <code>HttpContext</code> is only necessary when the WebApi is hosted in ASP.NET/IIS. For self-hosting it is not necessary (and not possible because <code>HttpContext</code> is an ASP.NET construct and doesn't exist when self hosted).</p>
</div></text><author><a href="/users/270591/slauma">Slauma</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>To avoid the context switch try using a <code>TaskCompletionSource&lt;object&gt;</code> instead of manually starting another task in your custom <code>MediaTypeFormatter</code>:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">public</span><span class="pln"> </span><span class="kwd">override</span><span class="pln"> </span><span class="typ">Task</span><span class="str">&lt;object&gt;</span><span class="pln"> </span><span class="typ">ReadFromStreamAsync</span><span class="pun">(</span><span class="typ">Type</span><span class="pln"> type</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Stream</span><span class="pln"> readStream</span><span class="pun">,</span><span class="pln"> </span><span class="typ">HttpContent</span><span class="pln"> content</span><span class="pun">,</span><span class="pln"> </span><span class="typ">IFormatterLogger</span><span class="pln"> formatterLogger</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> tcs </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">TaskCompletionSource</span><span class="str">&lt;object&gt;</span><span class="pun">();</span><span class="pln">

    </span><span class="com">// some formatting happens and finally a TestModel is returned,</span><span class="pln">
    </span><span class="com">// simulated here by just an empty model</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> testModel </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">TestModel</span><span class="pun">();</span><span class="pln">

    tcs</span><span class="pun">.</span><span class="typ">SetResult</span><span class="pun">(</span><span class="pln">testModel</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> tcs</span><span class="pun">.</span><span class="typ">Task</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/29407/darin-dimitrov">Darin Dimitrov</a></author><comments><comment><text><span class="comment-copy">It works, but I'm a bit worried to have to be that careful with the usage of tasks and threads to keep a security feature intact. I've found another solution, see my own answer here.</span></text><author><a class="comment-user owner" href="/users/270591/slauma" title="126,657 reputation">Slauma</a></author></comment><comment><text><span class="comment-copy">@Darin Dimitrov, I have installed the RTM of vs 2012 and latest bits of asp.net web api and HttpPropertyKeys.UserPrincipalKey gives syntax error. viewing class in object browser shows that this key is not present in final release. Any ideas what else can i use?</span></text><author><a class="comment-user" href="/users/331174/muhammad-adeel-zahid" title="11,898 reputation">Muhammad Adeel Zahid</a></author></comment><comment><text><span class="comment-copy">Why do you want to use <code>HttpPropertyKeys.UserPrincipalKey</code>? Where in my answer did you see using it? So don't use it.</span></text><author><a class="comment-user" href="/users/29407/darin-dimitrov" title="730,876 reputation">Darin Dimitrov</a></author></comment><comment><text><span class="comment-copy">@DarinDimitrov, doesn't doing this defeat explicit threading of the Async? I.e. original code runs the task on a pool thread. Isn't there a different approach to preserve the context?</span></text><author><a class="comment-user" href="/users/365968/g-stoynev" title="3,150 reputation">G. Stoynev</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Using your custom MessageHandler you could add the <code>MS_UserPrincipal</code> property by calling the <code>HttpRequestMessageExtensionMethods.SetUserPrincipal</code> extension method defined in <code>System.ServiceModel.Channels</code>:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">protected</span><span class="pln"> </span><span class="kwd">override</span><span class="pln"> </span><span class="typ">Task</span><span class="pun">&lt;</span><span class="typ">HttpResponseMessage</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">SendAsync</span><span class="pun">(</span><span class="pln">
    </span><span class="typ">HttpRequestMessage</span><span class="pln"> request</span><span class="pun">,</span><span class="pln"> </span><span class="typ">CancellationToken</span><span class="pln"> cancellationToken</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> user </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">GenericPrincipal</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">GenericIdentity</span><span class="pun">(</span><span class="str">"UserID"</span><span class="pun">),</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">);</span><span class="pln">
    request</span><span class="pun">.</span><span class="typ">SetUserPrincipal</span><span class="pun">(</span><span class="pln">user</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">base</span><span class="pun">.</span><span class="typ">SendAsync</span><span class="pun">(</span><span class="pln">request</span><span class="pun">,</span><span class="pln"> cancellationToken</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>Note that this only adds this property to the Request's Properties collection, it doesn't change the User attached to the ApiController.</p>
</div></text><author><a href="/users/1584585/gmoody1979">gmoody1979</a></author><comments/></answer></answers></post>