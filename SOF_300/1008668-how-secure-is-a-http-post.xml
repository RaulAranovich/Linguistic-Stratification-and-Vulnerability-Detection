<?xml version="1.0" encoding="utf-8"?>
<post><title>security - How secure is a HTTP POST? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>Is a POST secure enough to send login credentials over?</p>
<p>Or is an SSL connection a <strong>must</strong>?</p>
</div></text><author><a href="/users/123908/matt">Matt</a></author><comments><comment><text><span class="comment-copy">See previous question (<a href="http://stackoverflow.com/questions/1008539/how-secure-is-a-http-get-when-the-data-is-url-encoded" title="how secure is a http get when the data is url encoded">stackoverflow.com/questions/1008539/…</a>).</span></text><author><a class="comment-user" href="/users/47773/matthew-flaschen" title="187,391 reputation">Matthew Flaschen</a></author></comment><comment><text><span class="comment-copy">Hey Matt, before you ask, yes, you need to hash the login password that you store on the server.</span></text><author><a class="comment-user" href="/users/3474/erickson" title="191,743 reputation">erickson</a></author></comment><comment><text><span class="comment-copy">I think it is a serious question. Check out Matt's other questions and you will see that he is probably a novice, hence the seemingly naive question.</span></text><author><a class="comment-user" href="/users/30018/johnfx" title="29,094 reputation">JohnFx</a></author></comment><comment><text><span class="comment-copy">@JohnFX: Nothing wrong with that!</span></text><author><a class="comment-user" href="/users/58114/andy-mikula" title="14,655 reputation">Andy Mikula</a></author></comment><comment><text><span class="comment-copy">It is a serious question. I thought that since the data wasn't passed in the querystring that it was not easily retrievable by hackers. I just used login credentials as an example because I know a lot of people get concerned when it comes to the way programmers deal with credentials.</span></text><author><a class="comment-user owner" href="/users/123908/matt" title="1,756 reputation">Matt</a></author></comment><comment><text><span class="comment-copy">Only if you like sending your passwords in clear text.</span></text><author><a class="comment-user" href="/users/135769/david-lively" title="19,325 reputation">David Lively</a></author></comment><comment><text><span class="comment-copy">If I run my own testing server [used for playing with the code, not for admin stuff] and I only connect to it from my desktop, then I don't need to secure my login credentials. Of course, for everything else I should use SSH.</span></text><author><a class="comment-user" href="/users/87520/samgoody" title="7,152 reputation">SamGoody</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>SSL is a must. POST is not more secure than GET as it’s also send unencrypted. SSL will cover the whole HTTP communication and encrypt the HTTP data send between the client and server.</p>
</div></text><author><a href="/users/53114/gumbo">Gumbo</a></author><comments><comment><text><span class="comment-copy">A must? For a My Little Pony fan forum? Is a ptarmigan shielded terminal, quantum encryption and a tested leased line also required?</span></text><author><a class="comment-user" href="/users/10897/martin-beckett" title="72,448 reputation">Martin Beckett</a></author></comment><comment><text><span class="comment-copy">@mgb: Leased? You've got to be kidding me. If you don't own the copper all the way through, how can you be sure it's secure?!</span></text><author><a class="comment-user" href="/users/58114/andy-mikula" title="14,655 reputation">Andy Mikula</a></author></comment><comment><text><span class="comment-copy">Yes, because people use the same password for My Little Pony fan forum and their bank account.</span></text><author><a class="comment-user" href="/users/3474/erickson" title="191,743 reputation">erickson</a></author></comment><comment><text><span class="comment-copy">ponygirl88 wanted an account and Mommy created it for her. Mommy used the same username and password that she uses for her investment account. MLP Developer forgot to require authentication over SSL. Mommy lost all the money and now ponygirl88 can't go to college. Just use SSL.</span></text><author><a class="comment-user" href="/users/12349/yfeldblum" title="54,024 reputation">yfeldblum</a></author></comment><comment><text><span class="comment-copy">@erickson: I know that was supposed to be sarcastic, but people do use the same password for -everything-, and they have trouble remembering even that.</span></text><author><a class="comment-user" href="/users/58114/andy-mikula" title="14,655 reputation">Andy Mikula</a></author></comment><comment><text><span class="comment-copy">It wasn't sarcasm. I'm not sure why you would think it was. It's a huge problem; most programmers don't even grasp the problem, and its unreasonable for those that do to expect "normal" people to worry about it.</span></text><author><a class="comment-user" href="/users/3474/erickson" title="191,743 reputation">erickson</a></author></comment><comment><text><span class="comment-copy"><a href="http://xkcd.com/792/" rel="nofollow noreferrer">xkcd.com/792</a> @erickson is right.</span></text><author><a class="comment-user" href="/users/199966/jlam" title="1,083 reputation">Jlam</a></author></comment><comment><text><span class="comment-copy">SSL is a must because without it, anyone could intercept your users login and gain access to that account and possibly even an admin level account. This happens all the time on forum type sites. Next thing you know your my little pony site will be full of Gucci bag ads, and probably a lot worse. If you use SSL and send login and confidential information in the body of the post request it will be encrypted and protected. If you use a "GET" request even with SSL this data will be in the URL, again every server between the user and destination will have a copy of this data in their logs.</span></text><author><a class="comment-user" href="/users/42987/agile-noob" title="1,147 reputation">Agile Noob</a></author></comment><comment><text><span class="comment-copy">Hey @MartinBeckett, this is an OLD comment but FYI Google, Amazon, Facebook announced they are going ALL HTTPS for now on. Google is also prioritizing HTTPS sites over HTTP. Basically everyone is moving to HTTPS now so you gotta get with it ;)</span></text><author><a class="comment-user" href="/users/1696153/kayvar" title="15,662 reputation">Kayvar</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p><code>&lt;shameless plug&gt;</code>I have a <a href="http://jasonmbaker.wordpress.com/2009/05/10/http-and-you/" rel="noreferrer">blog post</a> that details what an HTTP request looks like and how a GET request compares to a POST request.  For brevity's sake, GET:</p>
<pre><code>GET /?page=123 HTTP/1.1 CRLF
Host: jasonmbaker.wordpress.com CRLF
User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_6; en-us) AppleWebKit/525.27.1 (KHTML, like Gecko) Version/3.2.1 Safari/525.27.1 CRLF
Connection: close CRLF
</code></pre>
<p>and POST:</p>
<pre><code>POST / HTTP/1.1 CRLF
Host: jasonmbaker.wordpress.com CRLF
User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_6; en-us) AppleWebKit/525.27.1 (KHTML, like Gecko) Version/3.2.1 Safari/525.27.1 CRLF
Connection: close CRLF
CRLF
page=123
</code></pre>
<p>(The CRLF is just a newline)</p>
<p>As you can see, the only differences from the standpoint of how a request is formed* is that a POST request uses the word POST and the form data is sent in the body of the request vs the URI.  Thus, using HTTP POST is security by obscurity.  If you want to protect data, you should use SSL.</p>
<p><code>*</code> Note that there <a href="http://jasonmbaker.wordpress.com/2009/04/29/make-sure-you-use-the-right-method/" rel="noreferrer"><em>are</em> other differences</a>.</p>
</div></text><author><a href="/users/2147/jason-baker">Jason Baker</a></author><comments><comment><text><span class="comment-copy">+1 For providing a visualization of why POST is no more secure.</span></text><author><a class="comment-user" href="/users/1665/rob-wilkerson" title="19,897 reputation">Rob Wilkerson</a></author></comment><comment><text><span class="comment-copy">You didn't close your shameless plug tag, compile error</span></text><author><a class="comment-user" href="/users/413127/blundell" title="49,517 reputation">Blundell</a></author></comment><comment><text><span class="comment-copy">@Blundell You compile your XML?</span></text><author><a class="comment-user" href="/users/113632/dimo414" title="23,624 reputation">dimo414</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>That depends on your circumstances, how much would the interception of the credentials cost somebody?</p>
<p>If it's just a login to a software Q+A site then SSL might not be necessary, if it's an online banking site or you store credit card data then it is.<br/>
This is a business not a techncial decision.</p>
</div></text><author><a href="/users/10897/martin-beckett">Martin Beckett</a></author><comments><comment><text><span class="comment-copy">downvoted because people reuse passwords.</span></text><author><a class="comment-user" href="/users/12243/malfist" title="14,149 reputation">Malfist</a></author></comment><comment><text><span class="comment-copy">Malfist: People reuse passwords all the time, but if you intercept a random password, do you know where else to use it?</span></text><author><a class="comment-user" href="/users/22164/thetxi" title="29,960 reputation">TheTXI</a></author></comment><comment><text><span class="comment-copy">if you are listening to traffic to grab credentials you can see any site the user visits. SSL does not hide the address, just the data</span></text><author><a class="comment-user" href="/users/88781/jim" title="91 reputation">Jim</a></author></comment><comment><text><span class="comment-copy">Fair point Malfist - but, "you MUST do X" answers where X is SSL, unit testing, backups, RAD etc without questioning the cost/benefit are almost always the wrong answer. In this case gumbo was correct to point out to the OP that POST is no more secure than GET.</span></text><author><a class="comment-user" href="/users/10897/martin-beckett" title="72,448 reputation">Martin Beckett</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>HTTP POST is not encrypted, it can be intercepted by a network sniffer, by a proxy or leaked in the logs of the server with a customised logging level. Yes, POST is better than GET because POST data is not <em>usualy</em> logged by a proxy or server, but it is not <em>secure</em>. 
To secure a password or other confidential data you must use SSL or encrypt the data before you POST. Another option would be to use Digest Authentication with the browser (see RFC 2617). Remember that (home grown) encryption is not enough to prevent replay attacks, you must concatenate a nonce and other data (eg. realm) before encrypting (see RFC 2617 for how it is done in Digest Auth).</p>
</div></text><author><a href="/users/124546/user124546">user124546</a></author><comments><comment><text><span class="comment-copy">+1 for noting the differences in logging</span></text><author><a class="comment-user" href="/users/6521/paul-dixon" title="200,230 reputation">Paul Dixon</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>SSL is a must :)</p>
<p>HTTP Post is transmitted in plain text.  For an example, download and use Fiddler to watch HTTP traffic.  You can easily see the entire post in there (or via a network traffic monitor like WireShark)</p>
</div></text><author><a href="/users/30812/ken-pespisa">Ken Pespisa</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>It is not secure. A POST can be sniffed just as easily as a GET.</p>
</div></text><author><a href="/users/13627/driis">driis</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>No...POST is not secure enough at all. SSL is a MUST.</p>
<p>POST only effectively hides the parameters in the query string. Those parameters can still be picked up by anybody looking at the traffic in between the browser and the end point.</p>
</div></text><author><a href="/users/84651/justin-niessner">Justin Niessner</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>The most secure way is to not send credentials at all.</p>
<p>If you use <a href="http://en.wikipedia.org/wiki/Digest_access_authentication" rel="nofollow noreferrer">Digest Authentication</a>, then SSL is <strong>NOT</strong> a must.</p>
<p>(NB: I am not implying that Digest Authentication over HTTP is always more secure than using POST over HTTPS).</p>
</div></text><author><a href="/users/10026/ykaganovich">ykaganovich</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>POST is plaintext.</p>
<p>A secure connection is a must.</p>
<p>That's why it's called a secure connection.</p>
</div></text><author><a href="/users/12349/yfeldblum">yfeldblum</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>No, use SSL.</p>
<p>With POST the values are still submitted as plain text unless SSL is used.</p>
</div></text><author><a href="/users/67386/dana-holt">Dana Holt</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>The only difference between HTTP GET and HTTP POST is the manner in which the data is encoded. In both cases it is sent as plain-text.</p>
<p>In order to provide any sort of security for login credentials, HTTPS is a must.</p>
<p>You do not need an expensive certificate to provide HTTPS either. There are many providers that will issue very basic certificates for about $20USD. The more expensive ones include identity verification which is more of a concern for e-commerce sites.</p>
</div></text><author><a href="/users/87189/tadman">tadman</a></author><comments><comment><text><span class="comment-copy">Eddy Nigg's <a href="https://www.startcom.org/" rel="nofollow noreferrer">Startcom</a> will issue a certificate for <a href="https://www.startssl.com/?app=25#90" rel="nofollow noreferrer">free</a>. Their certificates are trusted by <a href="https://www.startssl.com/?app=40" rel="nofollow noreferrer">most browsers</a>. They charge for revocation because that's where most of the cost lies.</span></text><author><a class="comment-user" href="/users/608639/jww" title="41,097 reputation">jww</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>A POST request alone is not secure because all the data is "traveling" in plain text.</p>
<p>You need SSL, to make it secure.</p>
</div></text><author><a href="/users/28388/rogeriopvl">rogeriopvl</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>POST data is sent in plain text if you are using an unencrypted HTTP connection.
IF this is secure enough depends on your usage (hint: it's not).  </p>
<p>If both the server, the client machine and ALL MACHINES BETWEEN THEM are part of a controlled, fully trusted network, this may be ok.  </p>
<p>Outside of these very limited circumstances (and sometimes even within them) plain text authentication is asking for trouble.</p>
</div></text><author><a>NONE</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Please see this great article:</p>
<p><strong>Protect Against Malicious POST Requests</strong></p>
<p><a href="https://perishablepress.com/protect-post-requests/" rel="nofollow">https://perishablepress.com/protect-post-requests/</a></p>
</div></text><author><a href="/users/3691530/sandromarques">SandroMarques</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Depends on where you are using it and how secure you really need.</p>
<p>There is no way for someone to get the POST data you send from your home unless you are using a proxy (TOR) or someone is tapping your wires.  </p>
<p>However, if you are concerned that someone will login using a wireless unsecured network, than ssl is important.</p>
<p>If you are a bank, you can't even take that risk.
If you are a techer with logins to see assignments, then you should be fine </p>
</div></text><author><a href="/users/87520/samgoody">SamGoody</a></author><comments><comment><text><span class="comment-copy">Sorry for -1, but how could it be "no way for someone" to see the data between home and a server?</span></text><author><a class="comment-user" href="/users/115200/ilya-n" title="10,180 reputation">ilya n.</a></author></comment><comment><text><span class="comment-copy">Please explain.  This post is being made to SO from my home computer.  Even assuming that you - Ilya - knew my (and SO's) IP addresses, you would still not able to intercept the data I have posted to SO.  You cannot know whats there unless you can intercept it.  [And often, when you can intercept it, a SSL connection won't help.]  If you believe this to be in error, prove it.</span></text><author><a class="comment-user" href="/users/87520/samgoody" title="7,152 reputation">SamGoody</a></author></comment><comment><text><span class="comment-copy">@SamGoody This demonstrates complete ignorance of what a man-in-the-middle attack is, and how SSL prevents it. I know this is an old comment and may no longer reflect your current understanding, if that's a case you should remove it and delete this answer, as they are both utterly wrong.</span></text><author><a class="comment-user" href="/users/229044/meagar" title="147,352 reputation">meagar<span class="mod-flair" title="moderator">♦</span></a></author></comment></comments></answer></answers></post>