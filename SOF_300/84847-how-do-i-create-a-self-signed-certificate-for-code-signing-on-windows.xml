<?xml version="1.0" encoding="utf-8"?>
<post><title>security - How do I create a self-signed certificate for code signing on Windows? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>How do I create a self-signed certificate for code signing using tools from the Windows SDK?</p>
</div></text><author><a href="/users/8446/roger-lipscombe">Roger Lipscombe</a></author><comments/></question><answers><answer><text><div class="post-text" itemprop="text">
<h2>Updated Answer</h2>
<p>If you are using the following Windows versions or later: Windows Server 2012, Windows Server 2012 R2, or Windows 8.1 then <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa386968%28v=vs.85%29.aspx" rel="noreferrer">MakeCert is now deprecated</a>, and Microsoft recommends using <a href="https://technet.microsoft.com/library/hh848633" rel="noreferrer">the PowerShell Cmdlet <strong>New-SelfSignedCertificate</strong></a>.</p>
<p>If you're using an older version such as Windows 7, you'll need to stick with MakeCert or another solution. Some people <a href="https://www.reddit.com/r/PowerShell/comments/3190yr/powershell_40_but_no_newselfsignedcertificate/" rel="noreferrer">suggest</a> the <a href="https://pspki.codeplex.com/" rel="noreferrer">Public Key Infrastructure Powershell (PSPKI) Module</a>.</p>
<h2>Original Answer</h2>
<p>While you can create a self-signed code-signing certificate (SPC - <a href="http://msdn.microsoft.com/en-us/library/8s9b9yaz.aspx" rel="noreferrer">Software Publisher Certificate</a>) in one go, I prefer to do the following:</p>
<h3>Creating a self-signed certificate authority (CA)</h3>
<pre><code>makecert -r -pe -n "CN=My CA" -ss CA -sr CurrentUser ^
         -a sha256 -cy authority -sky signature -sv MyCA.pvk MyCA.cer
</code></pre>
<p>(^ = allow batch command-line to wrap line)</p>
<p>This creates a self-signed (-r) certificate, with an exportable private key (-pe). It's named "My CA", and should be put in the CA store for the current user. We're using the <a href="http://en.wikipedia.org/wiki/SHA-2" rel="noreferrer">SHA-256</a> algorithm. The key is meant for signing (-sky).</p>
<p>The private key should be stored in the MyCA.pvk file, and the certificate in the MyCA.cer file.</p>
<h3>Importing the CA certificate</h3>
<p>Because there's no point in having a CA certificate if you don't trust it, you'll need to import it into the Windows certificate store. You <em>can</em> use the Certificates MMC snapin, but from the command line:</p>
<pre><code>certutil -user -addstore Root MyCA.cer
</code></pre>
<h3>Creating a code-signing certificate (SPC)</h3>
<pre><code>makecert -pe -n "CN=My SPC" -a sha256 -cy end ^
         -sky signature ^
         -ic MyCA.cer -iv MyCA.pvk ^
         -sv MySPC.pvk MySPC.cer
</code></pre>
<p>It is pretty much the same as above, but we're providing an issuer key and certificate (the -ic and -iv switches).</p>
<p>We'll also want to convert the certificate and key into a PFX file:</p>
<pre><code>pvk2pfx -pvk MySPC.pvk -spc MySPC.cer -pfx MySPC.pfx
</code></pre>
<p>If you want to protect the PFX file, add the -po switch, otherwise PVK2PFX creates a PFX file with no passphrase.</p>
<h3>Using the certificate for signing code</h3>
<pre><code>signtool sign /v /f MySPC.pfx ^
              /t http://timestamp.url MyExecutable.exe
</code></pre>
<p>(<a href="http://stackoverflow.com/a/4417466/57611">See why timestamps may matter</a>)</p>
<p>If you import the PFX file into the certificate store (you can use PVKIMPRT or the MMC snapin), you can sign code as follows:</p>
<pre><code>signtool sign /v /n "Me" /s SPC ^
              /t http://timestamp.url MyExecutable.exe
</code></pre>
<p>Some possible timestamp URLs for <code>signtool /t</code> are:</p>
<ul>
<li><code>http://timestamp.verisign.com/scripts/timstamp.dll</code></li>
<li><code>http://timestamp.globalsign.com/scripts/timstamp.dll</code></li>
<li><code>http://timestamp.comodoca.com/authenticode</code></li>
</ul>
<h3>Full Microsoft documentation</h3>
<ul>
<li><a href="http://msdn.microsoft.com/en-us/library/8s9b9yaz.aspx" rel="noreferrer">signtool</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/bfsktky3.aspx" rel="noreferrer">makecert</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/windows/hardware/ff550672%28v=vs.85%29.aspx" rel="noreferrer">pvk2pfx</a></li>
</ul>
<h3>Downloads</h3>
<p>For those who are not .NET developers, you will need a copy of the Windows SDK and .NET framework. A current link is available here: <a href="http://msdn.microsoft.com/en-us/windowsserver/bb980924.aspx" rel="noreferrer">SDK &amp; .NET</a> (which installs makecert in <code>C:\Program Files\Microsoft SDKs\Windows\v7.1</code>). Your mileage may vary.</p>
<p>MakeCert is available from the Visual Studio Command Prompt. Visual Studio 2015 does have it, and it can be launched from the Start Menu in Windows 7 under "Developer Command Prompt for VS 2015" or "VS2015 x64 Native Tools Command Prompt" (probably all of them in the same folder).</p>
</div></text><author><a href="/users/8446/roger-lipscombe">Roger Lipscombe</a></author><comments><comment><text><span class="comment-copy">+1 for examples and for using timestamping.</span></text><author><a class="comment-user" href="/users/14326/bratch" title="2,383 reputation">Bratch</a></author></comment><comment><text><span class="comment-copy">Is there any way to populate the certificate's email address field using this method? Right click exe&gt;properties&gt;digital signatures shows email as "not available" after signing.</span></text><author><a class="comment-user" href="/users/661643/cronoklee" title="2,531 reputation">cronoklee</a></author></comment><comment><text><span class="comment-copy">If you get "too many parameters" errors then you check you didn't edit out one of the hyphens accidentally. Failing that - retype the hyphens - don't copy paste.</span></text><author><a class="comment-user" href="/users/1141876/fiat" title="5,991 reputation">fiat</a></author></comment><comment><text><span class="comment-copy">@cronoklee To populate the email field of the certificate, simply add <code>E=your@email</code>. Eg: <code>makecert -pe -n "CN=My SPC,E=email@domain" ........</code></span></text><author><a class="comment-user" href="/users/938089/rob-w" title="222,654 reputation">Rob W</a></author></comment><comment><text><span class="comment-copy">Don't you need the Extended Use key flag <code>-eku 1.3.6.1.5.5.7.3.3</code> so the cert can be used for code signing (I know powershell fails to sign scripts if it is missing it)</span></text><author><a class="comment-user" href="/users/80274/scott-chamberlain" title="81,204 reputation">Scott Chamberlain</a></author></comment><comment><text><span class="comment-copy">Yes. <code>Set-AuthenticodeSignature</code> is much more picky about which certificates it will accept. It also <i>requires</i> separate CA and SPC certificates.</span></text><author><a class="comment-user owner" href="/users/8446/roger-lipscombe" title="48,861 reputation">Roger Lipscombe</a></author></comment><comment><text><span class="comment-copy">@Scott and Roger: Either of you know why Set-AuthenticodeSignature won't work with a self-signed (or issuer signed for that matter) certificate with 'All applications' and ' All purposes' in Certificate MMC?</span></text><author><a class="comment-user" href="/users/426422/mike-cheel" title="6,508 reputation">Mike Cheel</a></author></comment><comment><text><span class="comment-copy">@MikeCheel As to "why" only Microsoft can say. You may be better off asking on their forums for an answer.</span></text><author><a class="comment-user" href="/users/80274/scott-chamberlain" title="81,204 reputation">Scott Chamberlain</a></author></comment><comment><text><span class="comment-copy">It's not necessary to get the Windows SDK to get these files. They are quite small and self contained so they can be downloaded individually.</span></text><author><a class="comment-user" href="/users/392362/niels-brinch" title="781 reputation">Niels Brinch</a></author></comment><comment><text><span class="comment-copy">I noticed you commented that your example is good for "test/internal purposes" is this method acceptable for distribution?  (Allowing enough people to click "run anyway" so windows can learn to trust your certificate?)</span></text><author><a class="comment-user" href="/users/873217/adam-phelps" title="285 reputation">Adam Phelps</a></author></comment><comment><text><span class="comment-copy">@AdamPhelps, Windows won't "learn" to trust your certificate. Your users need to install the CA certificate in the Root store. This is, generally speaking, a bad idea (because root CA certificates can be used for nefarious purposes). It <i>can</i> make sense in an enterprise scenario, though.</span></text><author><a class="comment-user owner" href="/users/8446/roger-lipscombe" title="48,861 reputation">Roger Lipscombe</a></author></comment><comment><text><span class="comment-copy">@RogerLipscombe Thanks for the help. I read <a href="http://blogs.msdn.com/b/ie/archive/2011/03/22/smartscreen-174-application-reputation-building-reputation.aspx" rel="nofollow noreferrer">this bit</a> from Microsoft about Smartscreen and code signing. I understood it to apply to self-signed code as well. So to clarify, this is only for Authenticode CAs?</span></text><author><a class="comment-user" href="/users/873217/adam-phelps" title="285 reputation">Adam Phelps</a></author></comment><comment><text><span class="comment-copy">I think there's a typo, and that you may have switched the /n and /s flags in the last example. The first line should probably read: <code>signtool sign /v /s Me /n SPC /d http://www.me.me ^</code>, right?</span></text><author><a class="comment-user" href="/users/2319351/oskar-lindberg" title="1,287 reputation">Oskar Lindberg</a></author></comment><comment><text><span class="comment-copy">@OskarLindberg I guess that it's correct and not switched. The /n is used for the subject name and the /s is used for the store name according to the documentation</span></text><author><a class="comment-user" href="/users/4626775/bernardo-ramos" title="745 reputation">Bernardo Ramos</a></author></comment><comment><text><span class="comment-copy">Where do I type all these nice commands?</span></text><author><a class="comment-user" href="/users/2093137/cymro" title="275 reputation">Cymro</a></author></comment><comment><text><span class="comment-copy">It's in the answer: "MakeCert is available from the Visual Studio Command Prompt"</span></text><author><a class="comment-user owner" href="/users/8446/roger-lipscombe" title="48,861 reputation">Roger Lipscombe</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Roger's answer was very helpful.</p>
<p>I had a little trouble using it, though, and kept getting the red "Windows can't verify the publisher of this driver software" error dialog. The key was to install the test root certificate with</p>
<pre><code>certutil -addstore Root Demo_CA.cer
</code></pre>
<p>which Roger's answer didn't quite cover.</p>
<p>Here is a batch file that worked for me (with my .inf file, not included).
It shows how to do it all from start to finish, with no GUI tools at all
(except for a few password prompts).</p>
<pre><code>REM Demo of signing a printer driver with a self-signed test certificate.
REM Run as administrator (else devcon won't be able to try installing the driver)
REM Use a single 'x' as the password for all certificates for simplicity.

PATH %PATH%;"c:\Program Files\Microsoft SDKs\Windows\v7.1\Bin";"c:\Program Files\Microsoft SDKs\Windows\v7.0\Bin";c:\WinDDK\7600.16385.1\bin\selfsign;c:\WinDDK\7600.16385.1\Tools\devcon\amd64

makecert -r -pe -n "CN=Demo_CA" -ss CA -sr CurrentUser ^
   -a sha256 -cy authority -sky signature ^
   -sv Demo_CA.pvk Demo_CA.cer

makecert -pe -n "CN=Demo_SPC" -a sha256 -cy end ^
   -sky signature ^
   -ic Demo_CA.cer -iv Demo_CA.pvk ^
   -sv Demo_SPC.pvk Demo_SPC.cer

pvk2pfx -pvk Demo_SPC.pvk -spc Demo_SPC.cer ^
   -pfx Demo_SPC.pfx ^
   -po x

inf2cat /drv:driver /os:XP_X86,Vista_X64,Vista_X86,7_X64,7_X86 /v

signtool sign /d "description" /du "www.yoyodyne.com" ^
   /f Demo_SPC.pfx ^
   /p x ^
   /v driver\demoprinter.cat

certutil -addstore Root Demo_CA.cer

rem Needs administrator. If this command works, the driver is properly signed.
devcon install driver\demoprinter.inf LPTENUM\Yoyodyne_IndustriesDemoPrinter_F84F

rem Now uninstall the test driver and certificate.
devcon remove driver\demoprinter.inf LPTENUM\Yoyodyne_IndustriesDemoPrinter_F84F

certutil -delstore Root Demo_CA
</code></pre>
</div></text><author><a href="/users/1539692/dan-kegel">Dan Kegel</a></author><comments><comment><text><span class="comment-copy">If you want to use this for signing drivers, you need to import the CA certificate into the machine store. My example imports it into the user store, which is fine for most software, for test/internal purposes.</span></text><author><a class="comment-user owner" href="/users/8446/roger-lipscombe" title="48,861 reputation">Roger Lipscombe</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>As of PowerShell 4.0 (Windows 8.1/<a href="https://en.wikipedia.org/wiki/Windows_Server_2012" rel="noreferrer">Server 2012</a> R2) it is possible to make a certificate in Windows without <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa386968%28v=vs.85%29.aspx" rel="noreferrer">makecert.exe</a>.</p>
<p>The commands you need are <a href="https://technet.microsoft.com/library/hh848633" rel="noreferrer">New-SelfSignedCertificate</a> and <a href="https://technet.microsoft.com/en-us/library/hh848635.aspx" rel="noreferrer">Export-PfxCertificate</a>.</p>
<p>Instructions are in <em><a href="http://windowsitpro.com/blog/creating-self-signed-certificates-powershell" rel="noreferrer">Creating Self Signed Certificates with PowerShell</a></em>.</p>
</div></text><author><a href="/users/77779/yishai">Yishai</a></author><comments><comment><text><span class="comment-copy">It's worth mentioning that, even if you install the WMF update to get PowerShell 4.0 on Windows 7, you won't have access to this command. It seems to be Win8 or Server 2012 or later.</span></text><author><a class="comment-user" href="/users/120278/daniel-yankowsky" title="5,340 reputation">Daniel Yankowsky</a></author></comment></comments></answer></answers></post>