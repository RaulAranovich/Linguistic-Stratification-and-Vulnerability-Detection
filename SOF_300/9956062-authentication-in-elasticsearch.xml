<?xml version="1.0" encoding="utf-8"?>
<post><title>security - Authentication in Elasticsearch - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>How to define security access in Elasticsearch? I have the elasticsearch-head plugin but your access don't require any security.</p>
</div></text><author><a href="/users/468793/kapa">kapa</a></author><comments/></question><answers><answer><text><div class="post-text" itemprop="text">
<p>The plugin mentioned in this answer is no longer being actively supported.</p>
<hr/>
<p>There is no built-in access control in elasticsearch. So, you would need to setup a reverse proxy (here is a <a href="https://www.elastic.co/blog/playing-http-tricks-nginx" rel="nofollow">blog post</a> how to setup nginx), use one of the 3rd party elasticsearch plugins such as <a href="https://github.com/Asquera/elasticsearch-http-basic" rel="nofollow">https://github.com/Asquera/elasticsearch-http-basic</a> or use the official security plugin <a href="https://www.elastic.co/products/shield" rel="nofollow">Shield</a>.</p>
</div></text><author><a href="/users/783043/imotov">imotov</a></author><comments><comment><text><span class="comment-copy">Many thanks for the hint. Any experiences with elasticsearch-http-basic? Good or bad?</span></text><author><a class="comment-user" href="/users/661327/robert-reiz" title="1,798 reputation">Robert Reiz</a></author></comment><comment><text><span class="comment-copy">A reverse proxy such as nginx will give you more security options, including SSL support.</span></text><author><a class="comment-user" href="/users/1346034/andrew" title="712 reputation">Andrew</a></author></comment><comment><text><span class="comment-copy">Here also is the Chef cookbook for ElasticSearch that provides an easy way to install ElasticSearch with a reverse proxy using Nginx. <a href="https://github.com/elasticsearch/cookbook-elasticsearch" rel="nofollow noreferrer">github.com/elasticsearch/cookbook-elasticsearch</a></span></text><author><a class="comment-user" href="/users/1658743/tom-rogers" title="191 reputation">Tom Rogers</a></author></comment><comment><text><span class="comment-copy">try this, its opensource <a href="https://github.com/floragunncom/search-guard" rel="nofollow noreferrer">github.com/floragunncom/search-guard</a></span></text><author><a class="comment-user" href="/users/6275494/search-guard" title="136 reputation">Search Guard</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Elasticsearch now have security plugin <a href="http://www.elasticsearch.org/blog/shield-know-security-coming-soon/" rel="nofollow noreferrer">http://www.elasticsearch.org/blog/shield-know-security-coming-soon/</a></p>
</div></text><author><a href="/users/2841722/ahmedalawady">AhmedAlawady</a></author><comments><comment><text><span class="comment-copy">Note: Shield is a commercial product.</span></text><author><a class="comment-user" href="/users/400448/david-ammouial" title="235 reputation">David Ammouial</a></author></comment><comment><text><span class="comment-copy">Now it is a reality: <a href="https://www.elastic.co/products/shield" rel="nofollow noreferrer">elastic.co/products/shield</a>        This answer is coming late, but is good for new readers.</span></text><author><a class="comment-user" href="/users/1619489/raulsaeztapia" title="146 reputation">raulsaeztapia</a></author></comment><comment><text><span class="comment-copy">@rsaez Yet it's a commercial product with a 30 day trial.</span></text><author><a class="comment-user" href="/users/1872046/polkovnikov-ph" title="2,428 reputation">polkovnikov.ph</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p><code>&lt;shamelessPlug&gt;</code></p>
<p>Sorry but I have serious doubts about all these plugins and proxies that only try to capture queries with sloppy regex's at HTTP level. </p>
<p>Will you regex all the possible ES syntax that may perform a write? How do you filter by index? How about index aliases? Multi-index queries?</p>
<blockquote>
<p>The only clean way to do the access control is AFTER ElasticSearch has
  parsed the queries. This is exactly what Shield does after all!</p>
</blockquote>
<p>I wrote a MIT licensed plugin (<a href="https://github.com/sscarduzio/elasticsearch-readonlyrest-plugin" rel="nofollow">readonly-rest-plugin</a>) that does exactly this. </p>
<p>You can match request by: </p>
<ul>
<li><p>✔️ Host name, IP and IP with Netmask</p></li>
<li><p>✔️ Indices (wildcards supported) and index aliases are resolved</p></li>
<li><p>✔️ HTTP Basic Auth</p></li>
</ul>
<p>It has also first class support for Kibana authentication :)</p>
<p><code>&lt;/shamelessPlug&gt;</code></p>
</div></text><author><a href="/users/1094616/sscarduzio">sscarduzio</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p><strong>Update</strong>: This work pretty well and is (for the moste features) free and open source: <a href="https://github.com/floragunncom/search-guard" rel="nofollow noreferrer">https://github.com/floragunncom/search-guard</a></p>
<p><strong>NOTE:</strong> The plugin mentioned in this article is no longer being maintained</p>
<hr/>
<p>Maybe this helps: <a href="https://github.com/salyh/elasticsearch-security-plugin" rel="nofollow noreferrer">https://github.com/salyh/elasticsearch-security-plugin</a></p>
<p>This plugin adds http/rest security functionality to Elasticsearch in kind of separate modules. Instead of Netty a embedded Tomcat 7 is used to process http/rest requests.</p>
<p>Currently for user based authentication and authorization Kerberos and NTLM are supported through 3rd party library waffle (only on windows servers). For UNIX servers Kerberos is supported through 3rd party library tomcatspnegoad (Works with any kerberos implementation. For authorization either Active Directory and generic LDAP is supported).</p>
<p>You can use this plugin also without Kerberos/NTLM but then only host based authentication is available.</p>
</div></text><author><a href="/users/1798542/salyh">salyh</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>If you want to use the basic authentication with Kibana3, here is my solution:</p>
<p><a href="https://github.com/fangli/kibana-authentication-proxy" rel="nofollow">https://github.com/fangli/kibana-authentication-proxy</a></p>
<p>Support not only basicAuth ES backend, but also GoogleOAuth and BasicAuth for the client. Please give a star if it works for you, thanks.</p>
</div></text><author><a href="/users/2184947/felix">Felix</a></author><comments><comment><text><span class="comment-copy">Can you provide with some links on how to use this ?? I installed it and made the ap up, but did not find any help online about usage.</span></text><author><a class="comment-user" href="/users/1360694/siddharth-trikha" title="645 reputation">Siddharth Trikha</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Try <a href="http://www.elasticsearch.org/overview/shield/" rel="nofollow">Shield</a>. It has Authentication and Authorization. For now it needs a license. Won't be too long before people create similar open source plugins.</p>
</div></text><author><a href="/users/1167318/bharath-lakshman">Bharath Lakshman</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Regarding a specific solution to this problem, I ran across the following that is a simple implementation of a reverse proxy approach as mentioned in other answers:</p>
<p><a href="https://gist.github.com/jpluscplusm/9227777" rel="nofollow">https://gist.github.com/jpluscplusm/9227777</a></p>
<p>As a caveat, it seems at least some at Elasticsearch proper don't consider nginx to be the optimal solution, but I think that depends on the specifics of your authentication requirements (RBAC, user count, number of indexes, frequency of access list modifications). For some users (including myself) the first example is sufficient. </p>
<p><a href="http://www.elasticsearch.org/blog/restricting-users-kibana-filtered-aliases/" rel="nofollow">http://www.elasticsearch.org/blog/restricting-users-kibana-filtered-aliases/</a></p>
<p>If you find that your requirement specifics arent met by nginx, something like this might work: <a href="https://github.com/lukas-vlcek/node.es" rel="nofollow">https://github.com/lukas-vlcek/node.es</a> </p>
</div></text><author><a href="/users/830426/wjimenez5271">wjimenez5271</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>As ElasticSearch is kinda of a database service, you probably wouldn't want it to be exposed publicly anyway.</p>
<p>I don't trust plugins to do that for me, so I did with a nginx proxy.</p>
<p>This tutorial is very very helpful:</p>
<p><a href="http://www.minvolai.com/blog/2014/08/Setting-up-a-Secure-Single-Node-Elasticsearch-server-behind-Nginx/Setting-up-a-Secure-Single-Node-Elasticsearch-server-behind-Nginx/" rel="nofollow">http://www.minvolai.com/blog/2014/08/Setting-up-a-Secure-Single-Node-Elasticsearch-server-behind-Nginx/Setting-up-a-Secure-Single-Node-Elasticsearch-server-behind-Nginx/</a></p>
</div></text><author><a href="/users/656094/panthro">Panthro</a></author><comments><comment><text><span class="comment-copy">I get it that you don't trust them, but you can't be sure you do a <i>real</i> index isolation if you don't have access to the internal ElasticSearch parser :)  That's why I wrote this: <a href="https://github.com/sscarduzio/elasticsearch-readonlyrest-plugin" rel="nofollow noreferrer">github.com/sscarduzio/elasticsearch-readonlyrest-plugin</a></span></text><author><a class="comment-user" href="/users/1094616/sscarduzio" title="2,069 reputation">sscarduzio</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I am very novice in ElasticSearch, yet I feel that X-Pack plugin should appear here as an answer:
<a href="https://www.elastic.co/guide/en/x-pack/current/index.html" rel="nofollow noreferrer">https://www.elastic.co/guide/en/x-pack/current/index.html</a></p>
<p>It is my understanding that X-Pack is now the de-facto standard for securing ElasticSearch (and much more), including authentication.</p>
</div></text><author><a href="/users/1061573/pinkasey">pinkasey</a></author><comments/></answer></answers></post>