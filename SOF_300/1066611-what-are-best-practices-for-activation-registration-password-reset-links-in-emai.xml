<?xml version="1.0" encoding="utf-8"?>
<post><title>security - What are best practices for activation/registration/password-reset links in emails with nonce - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>Applications send out emails to verify user accounts or reset a password. I believe the following is the way it should be and I am asking for references and implementations.</p>
<p>If an application has to send out a link in an email to verify the user's address, according to my view, the link and the application's processing of the link should have the following characteristics:</p>
<ol>
<li>The link contains a <a href="http://en.wikipedia.org/wiki/Cryptographic_nonce" rel="noreferrer">nonce</a> in the request URI (<code>http://host/path?nonce</code>).</li>
<li>On following the link (GET), the user is presented a form, optionally with the nonce.</li>
<li>User confirms the input (POST).</li>
<li>The server receives the request and

<ul>
<li>checks input parameters,</li>
<li>performs the change,</li>
<li>and invalidates the nonce.</li>
</ul></li>
</ol>
<p>This should be correct per <a href="http://tools.ietf.org/html/rfc2616#section-9.1" rel="noreferrer">HTTP RFC on Safe and Idempotent Methods</a>.</p>
<p>The problem is that this process involves one additional page or user action (item 3), which is considered superfluous (if not useless) by a lot of people. I had problems presenting this approach to peers and customers, so I am asking for input on this from a broader technical group. The only argument I had against skipping the POST step was a possible pre-loading of the link from the browser.</p>
<ul>
<li>Are there references on this subject that might better explain the idea and convince even a non-technical person (best practices from journals, blogs, ...)?</li>
<li>Are there reference sites (preferably popular and with many users) that implement this approach?

<ul>
<li>If not, are there documented reasons or equivalent alternatives?</li>
</ul></li>
</ul>
<p>Thank you,<br/>
Kariem</p>
<hr/>
<p><strong>Details spared</strong></p>
<p>I have kept the main part short, but to reduce too much discussion around the details which I had intentionally left out, I will add a few assumptions:</p>
<ul>
<li>The content of the email is not part of this discussion. The user knows that she has to click the link to perform the action. If the user does not react, nothing will happen, which is also known.</li>
<li>We do not have to indicate why we are mailing the user, nor the communication policy. We assume that the user expects to receive the email.</li>
<li>The nonce has an expiration timestamp and is directly associated with the recipients email address to reduce duplicates.</li>
</ul>
<hr/>
<p><strong>Notes</strong></p>
<p>With OpenID and the like, normal web applications are relieved from implementing standard user account management (password, email ...), but still some customers want '<em>their own users</em>'</p>
<p>Strangely enough I haven't found a satisfying question nor answer here yet. What I have found so far:</p>
<ul>
<li><a href="http://stackoverflow.com/questions/611906/http-post-with-url-query-parameters-good-idea-or-not/612035#612035">Answer by Don in <em>HTTP POST with URL query parameters — good idea or not?</em></a></li>
<li><a href="http://stackoverflow.com/questions/46585/when-do-you-use-post-and-when-do-you-use-get">Question from Thomas -- <em>When do you use POST and when do you use GET?</em></a></li>
</ul>
</div></text><author><a href="/users/10080/avid">AviD</a></author><comments><comment><text><span class="comment-copy">Related <a href="http://security.stackexchange.com/q/40512/61220">security</a> and <a href="http://ux.stackexchange.com/q/33014/33282">UX</a> questions on the topic.</span></text><author><a class="comment-user" href="/users/1146608/patrick-m" title="5,259 reputation">Patrick M</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>This question is very similar to <a href="http://stackoverflow.com/questions/938031/implementing-secure-unique-single-use-activation-urls-in-asp-net-c/938076#938076">Implementing secure, unique “single-use” activation URLs in ASP.NET (C#)</a>.  </p>
<p>My answer there is close to your scheme, with a few issues pointed out - such as short period of validity, handling double signups, etc.<br/>
Your use of a <strong>cryptographic</strong> nonce is also important, that many tend to skip over - e.g. "lets just use a GUID"... </p>
<p>One new point that you do raise, and this is important here, is wrt the idempotency of GET.<br/>
Whilst I agree with your general intent, its clear that idempotency is in direct contradiction to one-time links, which is a necessity in some situations such as this.  </p>
<p>I would have liked to posit that this doesn't really violate the idempotentness of the GET, but unfortunately it does... On the other hand, the RFC says GET <strong>SHOULD</strong> be idempotent, its not a MUST. So I would say forgo it in this case, and stick to the one-time auto-invalidated links.</p>
<p>If you <em>really</em> want to aim for strict RFC compliance, and not get into non-idempotent(?) GETs, you can have the GET page auto-submit the POST - kind of a loophole around that bit of the RFC, but legit, and you dont require the user to double-optin, and you're not bugging him...</p>
<p>You dont really have to worry about preloading (are you talkng about CSRF, or browser-optimizers?)... CSRF is useless because of the nonce, and optimizers usually wont process javascript (used to auto-submit) on the preloaded page.</p>
</div></text><author><a href="/users/10080/avid">AviD</a></author><comments><comment><text><span class="comment-copy">Thank you, for the pointer AviD. Good solution to have javascript on the first page submit the POST. That does not bug the user and conforms to the RFC. I thought of the browser pre-loading a URL that is displayed in the body of a webmail client. This would definitely not execute javascript code at the target web page. This is a good proposal ... do you have any references where something like that is implemented?</span></text><author><a class="comment-user owner" href="/users/12039/kariem" title="1,523 reputation">Kariem</a></author></comment><comment><text><span class="comment-copy">Right now, I could only think of references at some of my consulting clients (which I can't really disclose)... I don't really bother noticing other sites anymore... Sorry.</span></text><author><a class="comment-user" href="/users/10080/avid" title="10,324 reputation">AviD</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>About password reset:</p>
<p>The practice of doing this by sending an email to the user's registered email address is, while very common in practice, not good security. Doing this fully outsources your application security to the user's email provider. It does not matter how long passwords you require and whatever clever password hashing you use. I will be able to get into your site by reading the email sent out to the user, given that I have access to the email account or am able to read the unencrypted email anywhere on its way to the user (think: evil sysadmins).</p>
<p>This might or might not be important depending on the security requirements of the site in question, but I, as a user of the site, would at least want to be able to disable such a password reset function since I consider it unsafe.</p>
<p>I found <a href="http://www.fishnetsecurity.com/sites/default/files/media/10WP0003_BestPractices_SecureForgotPassword%5B1%5D_0.pdf" rel="nofollow noreferrer">this white paper</a> that discusses the topic.</p>
<p>The short version of how to do it in a secure way:</p>
<ol>
<li><p>Require hard facts about the account</p>
<ol>
<li>username.</li>
<li>email address.</li>
<li>10 digit  account number or other information
like social security number.</li>
</ol></li>
<li><p>Require that the user answers at least three predefined questions (predefined by you,
don't let the user create his own questions) that can not be trivial. Like "What's
your favorite vacation spot", not "What's your favorite color".</p></li>
<li><p>Optionally: Send a confirmation code to a predefined email address or cell number (SMS) that the user has to input.</p></li>
<li><p>Allow the user to input a new password.</p></li>
</ol>
</div></text><author><a href="/users/52993/per-wiklander">Per Wiklander</a></author><comments><comment><text><span class="comment-copy">I am not sure, whether I have fully understood your answer, but I believe it misses the point: 1) The password is never sent out in any email. That has neither been suggested in the question, nor in any of the answers. 2) Additional security measures, such as account number and verification questions not considered at all, because that is a different subject. 3) The question asked for a solution for password reset using a confirmation code, which is actually a part of your solution: item 3 in your summary. Could you please elaborate on how your answer helps in the context of the question?</span></text><author><a class="comment-user owner" href="/users/12039/kariem" title="1,523 reputation">Kariem</a></author></comment><comment><text><span class="comment-copy">1) The original question was "What are best practices for activation/registration/password-reset links in emails with nonce". In my answer I tried to point out that using "password-reset links in emails" is not a good idea. The password is never sent out, but the link that is sent out is just as good as a password since it gives access to the account and lets the attacker change the password giving him total control of the account.  2) The "additional security measures" was my suggestion of a better way of doing a password reset since I had said that the email reset was a bad way.</span></text><author><a class="comment-user" href="/users/52993/per-wiklander" title="746 reputation">Per Wiklander</a></author></comment><comment><text><span class="comment-copy">3) The process of sending a confirmation code through email or SMS would only be initiated AFTER the other identification method had succeeded. It should not be relied upon as the only required identification method.</span></text><author><a class="comment-user" href="/users/52993/per-wiklander" title="746 reputation">Per Wiklander</a></author></comment><comment><text><span class="comment-copy">The link is only as good as a password that is invalidated after it's first use or a certain time period, actually.  So........ ...not the same at all.</span></text><author><a class="comment-user" href="/users/69993/kzqai" title="12,386 reputation">Kzqai</a></author></comment><comment><text><span class="comment-copy">Yes, that is true. But I am asuming that the attacker has control over the email account. He doesn’t have to intercept the message on the way and try to use the code before the owner. The owner will probably never see it.</span></text><author><a class="comment-user" href="/users/52993/per-wiklander" title="746 reputation">Per Wiklander</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I generally agree with you with some modification suggested below.</p>
<ol>
<li>User registers at your site providing an email.</li>
<li>Verification email is sent to the users account with two links:
a) One link with the GUID to verify the registration b) One link with the GUID to reject the verification</li>
<li>When they visit the verification url from their email they are automatically verified and the verification guid is marked as such in your system.</li>
<li>When they visit the rejection url from their email they are automatically removed from the queue of possible verifications but more importantly you can tell the user that you are sorry for the email registration and give them further options such as removing their email from your system.  This will stop any custom service type complaints about someone entering my email in your system...blah blah blah.</li>
</ol>
<p>Yes, you should assume that when they click the verification link that they are verified.  Making them click a second button in a page is a bit much and only needed for double opt in style registration where you plan to spam the person that registered.  Standard registration/verification schemes don't usually require this.</p>
</div></text><author><a href="/users/83889/andrew-siemer">Andrew Siemer</a></author><comments><comment><text><span class="comment-copy">Thank you, Andrew. I have left out some assumptions to reduce the length of my post, but I will add that information. In general, GUIDs should not be used as random keys, as they are designed for uniqueness not secure randomness. I agree that the additional user action should not be necessary, but performing the action directly on the GET request is not nice from an architectural view.  Do you have any references on 'standard registration/verification schemes'?</span></text><author><a class="comment-user owner" href="/users/12039/kariem" title="1,523 reputation">Kariem</a></author></comment><comment><text><span class="comment-copy">+1 For the two links recommendations. I don't like the auto verification on GET tough, but rather provide a second verification factor through an extra PIN/UUID or something to prevent robots and others to accidentally enabling users, for the low possibility that may be.</span></text><author><a class="comment-user" href="/users/881286/diosney" title="6,274 reputation">diosney</a></author></comment></comments></answer></answers></post>