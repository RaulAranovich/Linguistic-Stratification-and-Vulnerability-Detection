<?xml version="1.0" encoding="utf-8"?>
<post><title>security - How do you Encrypt and Decrypt a PHP String? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>What I mean is:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="typ">Original</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="typ">Salt</span><span class="pln"> </span><span class="kwd">or</span><span class="pln"> </span><span class="typ">Key</span><span class="pln"> </span><span class="pun">--&gt;</span><span class="pln"> </span><span class="typ">Encrypted</span><span class="pln"> </span><span class="typ">String</span><span class="pln">
</span><span class="typ">Encrypted</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="typ">Salt</span><span class="pln"> </span><span class="kwd">or</span><span class="pln"> </span><span class="typ">Key</span><span class="pln"> </span><span class="pun">--&gt;</span><span class="pln"> </span><span class="typ">Decrypted</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Original</span><span class="pln"> </span><span class="typ">String</span><span class="pun">)</span></code></pre>
<p>Maybe something like:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="str">"hello world!"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="str">"ABCD1234"</span><span class="pln"> </span><span class="pun">--&gt;</span><span class="pln"> </span><span class="typ">Encrypt</span><span class="pln"> </span><span class="pun">--&gt;</span><span class="pln"> </span><span class="str">"2a2ffa8f13220befbe30819047e23b2c"</span><span class="pln"> </span><span class="pun">(</span><span class="pln">may be</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">for</span><span class="pln"> e</span><span class="pun">.</span><span class="pln">g</span><span class="pun">)</span><span class="pln">
</span><span class="str">"2a2ffa8f13220befbe30819047e23b2c"</span><span class="pln"> </span><span class="pun">--&gt;</span><span class="pln"> </span><span class="typ">Decrypt</span><span class="pln"> </span><span class="kwd">with</span><span class="pln"> </span><span class="str">"ABCD1234"</span><span class="pln"> </span><span class="pun">--&gt;</span><span class="pln"> </span><span class="str">"hello world!"</span></code></pre>
<ul>
<li>In PHP, how can you do this?</li>
</ul>
<p>Attempted to use <strong><code>Crypt_Blowfish</code></strong>, but it didn't work for me.</p>
</div></text><author><a href="/users/2224584/scott-arciszewski">Scott Arciszewski</a></author><comments><comment><text><span class="comment-copy">@Rogue He doesn't want a hash, he wants symmetric encryption (like AES), he just doesn't know what it's called. (And now he does :) )</span></text><author><a class="comment-user" href="/users/497106/patashu" title="16,405 reputation">Patashu</a></author></comment><comment><text><span class="comment-copy">how secure does it need to be?</span></text><author><span class="comment-user">user557846</span></author></comment><comment><text><span class="comment-copy">@夏期劇場, You do not 'salt' symmetrical encryption, you use a key. A key must be kept secret. A salt can be public without harming security (as long as everyone's salt is different), and it is a term used in hashing passwords.</span></text><author><a class="comment-user" href="/users/497106/patashu" title="16,405 reputation">Patashu</a></author></comment><comment><text><span class="comment-copy">You need a Salt (private key), a public key an an encryption algorithm like AES-256: <a href="http://wpy.me/blog/15-encrypt-and-decrypt-data-in-php-using-aes-256" rel="nofollow noreferrer">wpy.me/blog/15-encrypt-and-decrypt-data-in-php-using-aes-256</a></span></text><author><a class="comment-user" href="/users/1207021/cristian-florea" title="382 reputation">Cristian Florea</a></author></comment><comment><text><span class="comment-copy">@CristianFlorea The author of that blog post uses terms that simply do not make the slightest bit of sense in the context of symmetric encryption. There is no public key with AES, nor is there a salt. There is a single key; it must be kept secret. In some modes of operation there is an IV that need not be secret, but an IV is not a salt (depending on mode, it can have quite different requirements) and need not be secret, while the actual encryption key absolutely cannot be public. Public/private key applies to asymmetric crypto, but has nothing to do with AES.</span></text><author><a class="comment-user" href="/users/1937655/cpast" title="101 reputation">cpast</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Before you do anything further, seek to understand <a href="https://paragonie.com/blog/2015/05/using-encryption-and-authentication-correctly" rel="noreferrer">the difference between <strong>encryption</strong> and <strong>authentication</strong></a>, and why you probably want <em>authenticated encryption</em> rather than just <em>encryption</em>.</p>
<p>To implement authenticated encryption, you want to Encrypt then MAC. <a href="http://www.thoughtcrime.org/blog/the-cryptographic-doom-principle/" rel="noreferrer">The order of encryption and authentication is very important!</a> One of the existing answers to this question made this mistake; as do many cryptography libraries written in PHP.</p>
<p>You should <a href="http://www.cryptofails.com/post/75204435608/write-crypto-code-dont-publish-it" rel="noreferrer">avoid implementing your own cryptography</a>, and instead use a secure library written by and reviewed by cryptography experts.</p>
<p><strong><a href="https://github.com/jedisct1/libsodium-php" rel="noreferrer">Use libsodium if you have PECL access</a>; otherwise...</strong><br/>
<strong><a href="https://github.com/defuse/php-encryption/" rel="noreferrer">Use defuse/php-encryption</a>; don't roll your own cryptography!</strong></p>
<p>Both of the libraries linked above above make it easy and painless to implement authenticated encryption into your own libraries.</p>
<p>If you still want to write and deploy your own cryptography library, against the conventional wisdom of every cryptography expert on the Internet, these are the steps you would have to take.</p>
<h1>Encryption:</h1>
<ol>
<li>Encrypt using AES in CTR mode. You may also use GCM (which removes the need for a separate MAC). Additionally, ChaCha20 and Salsa20 (provided by <a href="https://github.com/jedisct1/libsodium-php" rel="noreferrer">libsodium</a>) are stream ciphers and do not need special modes.</li>
<li>Unless you chose GCM above, you should authenticate the ciphertext with HMAC-SHA-256 (or, for the stream ciphers, Poly1305 -- most libsodium APIs do this for you). <strong>The MAC should cover the IV as well as the ciphertext!</strong></li>
</ol>
<h1>Decryption:</h1>
<ol>
<li>Unless Poly1305 or GCM is used, recalculate the MAC of the ciphertext and compare it with the MAC that was sent using <a href="https://php.net/manual/en/function.hash-equals.php" rel="noreferrer"><code>hash_equals()</code></a>. If it fails, abort.</li>
<li>Decrypt the message.</li>
</ol>
<h1>Other Design Considerations:</h1>
<ol>
<li>Do not compress anything ever. Ciphertext is not compressible; compressing plaintext before encryption can lead to information leaks (e.g. CRIME and BREACH on TLS).</li>
<li>Make sure you use <code>mb_strlen()</code> and <code>mb_substr()</code>, using the <code>'8bit'</code> character set mode to prevent <code>mbstring.func_overload</code> issues.</li>
<li>IVs should be generating using a <a href="http://sockpuppet.org/blog/2014/02/25/safely-generate-random-numbers/" rel="noreferrer">CSPRNG</a>; If you're using <code>mcrypt_create_iv()</code>, <strong>DO NOT USE <code>MCRYPT_RAND</code></strong>!

<ul>
<li>Also check out <a href="https://github.com/paragonie/random_compat" rel="noreferrer">random_compat</a>.</li>
</ul></li>
<li>Unless you're using an AEAD construct, <a href="http://www.thoughtcrime.org/blog/the-cryptographic-doom-principle" rel="noreferrer"><strong>ALWAYS encrypt then MAC!</strong></a></li>
<li><code>bin2hex()</code>, <code>base64_encode()</code>, etc. may leak information about your encryption keys via cache timing. Avoid them if possible.</li>
</ol>
<p>Even if you follow the advice given here, a lot can go wrong with cryptography. <strong>Always have a cryptography expert review your implementation.</strong> If you are not fortunate enough to be personal friends with a cryptography student at your local university, you can always try the <a href="http://crypto.stackexchange.com">Cryptography Stack Exchange</a> forum for advice.</p>
<p>If you need a professional analysis of your implementation, you can always hire a <a href="https://paragonie.com/service/code-review" rel="noreferrer">reputable team of security consultants to review your PHP cryptography code</a> (disclosure: my employer).</p>
<h1>Important: When to Not Use Encryption</h1>
<p><strong><a href="https://paragonie.com/blog/2015/08/you-wouldnt-base64-a-password-cryptography-decoded" rel="noreferrer">Don't <em>encrypt</em> passwords</a></strong>. You want to <em>hash</em> them instead, using one of these password-hashing algorithms:</p>
<ul>
<li><a href="https://password-hashing.net/#argon2" rel="noreferrer">Argon2</a></li>
<li><a href="https://security.stackexchange.com/a/26253/43688">scrypt</a></li>
<li><a href="http://codahale.com/how-to-safely-store-a-password" rel="noreferrer">bcrypt</a></li>
<li><a href="https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2015/march/enough-with-the-salts-updates-on-secure-password-schemes" rel="noreferrer">PBKDF2-SHA256 with 86,000 iterations</a></li>
</ul>
<p>Never use a general-purpose hash function (MD5, SHA256) for password storage.</p>
<p><strong><a href="https://paragonie.com/blog/2015/09/comprehensive-guide-url-parameter-encryption-in-php" rel="noreferrer">Don't encrypt URL Parameters</a>.</strong> It's the wrong tool for the job.</p>
<h1>PHP String Encryption Example with Libsodium</h1>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pun">&lt;?</span><span class="pln">php
</span><span class="com">// This requires the libsodium PECL extension</span><span class="pln">

</span><span class="com">/**
 * Encrypt a message
 * 
 * @param string $message - message to encrypt
 * @param string $key - encryption key
 * @return string
 */</span><span class="pln">
</span><span class="kwd">function</span><span class="pln"> safeEncrypt</span><span class="pun">(</span><span class="pln">$message</span><span class="pun">,</span><span class="pln"> $key</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    $nonce </span><span class="pun">=</span><span class="pln"> \Sodium\randombytes_buf</span><span class="pun">(</span><span class="pln">
        \Sodium\CRYPTO_SECRETBOX_NONCEBYTES
    </span><span class="pun">);</span><span class="pln">

    $cipher </span><span class="pun">=</span><span class="pln"> base64_encode</span><span class="pun">(</span><span class="pln">
        $nonce</span><span class="pun">.</span><span class="pln">
        \Sodium\crypto_secretbox</span><span class="pun">(</span><span class="pln">
            $message</span><span class="pun">,</span><span class="pln">
            $nonce</span><span class="pun">,</span><span class="pln">
            $key
        </span><span class="pun">)</span><span class="pln">
    </span><span class="pun">);</span><span class="pln">
    \Sodium\memzero</span><span class="pun">(</span><span class="pln">$message</span><span class="pun">);</span><span class="pln">
    \Sodium\memzero</span><span class="pun">(</span><span class="pln">$key</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> $cipher</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="com">/**
 * Decrypt a message
 * 
 * @param string $encrypted - message encrypted with safeEncrypt()
 * @param string $key - encryption key
 * @return string
 */</span><span class="pln">
</span><span class="kwd">function</span><span class="pln"> safeDecrypt</span><span class="pun">(</span><span class="pln">$encrypted</span><span class="pun">,</span><span class="pln"> $key</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">   
    $decoded </span><span class="pun">=</span><span class="pln"> base64_decode</span><span class="pun">(</span><span class="pln">$encrypted</span><span class="pun">);</span><span class="pln">
    $nonce </span><span class="pun">=</span><span class="pln"> mb_substr</span><span class="pun">(</span><span class="pln">$decoded</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> \Sodium\CRYPTO_SECRETBOX_NONCEBYTES</span><span class="pun">,</span><span class="pln"> </span><span class="str">'8bit'</span><span class="pun">);</span><span class="pln">
    $ciphertext </span><span class="pun">=</span><span class="pln"> mb_substr</span><span class="pun">(</span><span class="pln">$decoded</span><span class="pun">,</span><span class="pln"> \Sodium\CRYPTO_SECRETBOX_NONCEBYTES</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">,</span><span class="pln"> </span><span class="str">'8bit'</span><span class="pun">);</span><span class="pln">

    $plain </span><span class="pun">=</span><span class="pln"> \Sodium\crypto_secretbox_open</span><span class="pun">(</span><span class="pln">
        $ciphertext</span><span class="pun">,</span><span class="pln">
        $nonce</span><span class="pun">,</span><span class="pln">
        $key
    </span><span class="pun">);</span><span class="pln">
    \Sodium\memzero</span><span class="pun">(</span><span class="pln">$ciphertext</span><span class="pun">);</span><span class="pln">
    \Sodium\memzero</span><span class="pun">(</span><span class="pln">$key</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> $plain</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>Then to test it out:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pun">&lt;?</span><span class="pln">php
</span><span class="com">// This refers to the previous code block.</span><span class="pln">
</span><span class="kwd">require</span><span class="pln"> </span><span class="str">"safeCrypto.php"</span><span class="pun">;</span><span class="pln"> 

</span><span class="com">// Do this once then store it somehow:</span><span class="pln">
$key </span><span class="pun">=</span><span class="pln"> \Sodium\randombytes_buf</span><span class="pun">(</span><span class="pln">
    \Sodium\CRYPTO_SECRETBOX_KEYBYTES
</span><span class="pun">);</span><span class="pln">
$message </span><span class="pun">=</span><span class="pln"> </span><span class="str">'We are all living in a yellow submarine'</span><span class="pun">;</span><span class="pln">

$ciphertext </span><span class="pun">=</span><span class="pln"> safeEncrypt</span><span class="pun">(</span><span class="pln">$message</span><span class="pun">,</span><span class="pln"> $key</span><span class="pun">);</span><span class="pln">
$plaintext </span><span class="pun">=</span><span class="pln"> safeDecrypt</span><span class="pun">(</span><span class="pln">$ciphertext</span><span class="pun">,</span><span class="pln"> $key</span><span class="pun">);</span><span class="pln">

var_dump</span><span class="pun">(</span><span class="pln">$ciphertext</span><span class="pun">);</span><span class="pln">
var_dump</span><span class="pun">(</span><span class="pln">$plaintext</span><span class="pun">);</span></code></pre>
<h2>Halite - Libsodium Made Easier</h2>
<p>One of the projects I've been working on is an encryption library called <a href="https://paragonie.com/project/halite" rel="noreferrer">Halite</a>, which aims to make libsodium easier and more intuitive.</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pun">&lt;?</span><span class="pln">php
</span><span class="kwd">use</span><span class="pln"> \ParagonIE\Halite\KeyFactory</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">use</span><span class="pln"> \ParagonIE\Halite\Symmetric\Crypto </span><span class="kwd">as</span><span class="pln"> </span><span class="typ">SymmetricCrypto</span><span class="pun">;</span><span class="pln">

</span><span class="com">// Generate a new random symmetric-key encryption key. You're going to want to store this:</span><span class="pln">
$key </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">KeyFactory</span><span class="pun">::</span><span class="pln">generateEncryptionKey</span><span class="pun">();</span><span class="pln">
</span><span class="com">// To save your encryption key:</span><span class="pln">
</span><span class="typ">KeyFactory</span><span class="pun">::</span><span class="pln">save</span><span class="pun">(</span><span class="pln">$key</span><span class="pun">,</span><span class="pln"> </span><span class="str">'/path/to/secret.key'</span><span class="pun">);</span><span class="pln">
</span><span class="com">// To load it again:</span><span class="pln">
$loadedkey </span><span class="pun">=</span><span class="pln"> </span><span class="typ">KeyFactory</span><span class="pun">::</span><span class="pln">loadEncryptionKey</span><span class="pun">(</span><span class="str">'/path/to/secret.key'</span><span class="pun">);</span><span class="pln">

$message </span><span class="pun">=</span><span class="pln"> </span><span class="str">'We are all living in a yellow submarine'</span><span class="pun">;</span><span class="pln">
$ciphertext </span><span class="pun">=</span><span class="pln"> </span><span class="typ">SymmetricCrypto</span><span class="pun">::</span><span class="pln">encrypt</span><span class="pun">(</span><span class="pln">$message</span><span class="pun">,</span><span class="pln"> $key</span><span class="pun">);</span><span class="pln">
$plaintext </span><span class="pun">=</span><span class="pln"> </span><span class="typ">SymmetricCrypto</span><span class="pun">::</span><span class="pln">decrypt</span><span class="pun">(</span><span class="pln">$ciphertext</span><span class="pun">,</span><span class="pln"> $key</span><span class="pun">);</span><span class="pln">

var_dump</span><span class="pun">(</span><span class="pln">$ciphertext</span><span class="pun">);</span><span class="pln">
var_dump</span><span class="pun">(</span><span class="pln">$plaintext</span><span class="pun">);</span></code></pre>
<p>All of the underlying cryptography is handled by libsodium. Obviously, this means you need the PECL extension to use Halite.</p>
<h1>Example with defuse/php-encryption</h1>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pun">&lt;?</span><span class="pln">php
</span><span class="com">/**
 * This requires https://github.com/defuse/php-encryption
 * php composer.phar require defuse/php-encryption
 * 
 * Note that v2.0.0 is around the corner and this might need
 * to be edited when it's finally released.
 */</span><span class="pln">

</span><span class="kwd">use</span><span class="pln"> \Defuse\Crypto\Crypto</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">require</span><span class="pln"> </span><span class="str">"vendor/autoload.php"</span><span class="pun">;</span><span class="pln">

</span><span class="com">// Do this once then store it somehow:</span><span class="pln">
$key </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Crypto</span><span class="pun">::</span><span class="pln">createNewRandomKey</span><span class="pun">();</span><span class="pln">

$message </span><span class="pun">=</span><span class="pln"> </span><span class="str">'We are all living in a yellow submarine'</span><span class="pun">;</span><span class="pln">

$ciphertext </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Crypto</span><span class="pun">::</span><span class="pln">encrypt</span><span class="pun">(</span><span class="pln">$message</span><span class="pun">,</span><span class="pln"> $key</span><span class="pun">);</span><span class="pln">
$plaintext </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Crypto</span><span class="pun">::</span><span class="pln">decrypt</span><span class="pun">(</span><span class="pln">$ciphertext</span><span class="pun">,</span><span class="pln"> $key</span><span class="pun">);</span><span class="pln">

var_dump</span><span class="pun">(</span><span class="pln">$ciphertext</span><span class="pun">);</span><span class="pln">
var_dump</span><span class="pun">(</span><span class="pln">$plaintext</span><span class="pun">);</span></code></pre>
<p><strong>Note</strong>: <code>Crypto::encrypt()</code> returns raw binary, so you may want to use <code>base64_encode()</code> and <code>base64_decode()</code>for storing/transmitting ciphertexts to prevent encoding bugs. In version 2, it will default to hex-encoded output.</p>
<h3>Encryption Key Management</h3>
<p>If you're tempted to use a "password", stop right now. You need a random 128-bit encryption key, not a human memorable password.</p>
<p>You can store an encryption key for long-term use like so:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">$storeMe </span><span class="pun">=</span><span class="pln"> bin2hex</span><span class="pun">(</span><span class="pln">$key</span><span class="pun">);</span></code></pre>
<p>And, on demand, you can retrieve it like so:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">$key </span><span class="pun">=</span><span class="pln"> hex2bin</span><span class="pun">(</span><span class="pln">$storeMe</span><span class="pun">);</span></code></pre>
<p>I <strong>strongly</strong> recommend just storing a randomly generated key for long-term use instead of any sort of password as the key (or to derive the key).</p>
<h3>"But I <em>really</em> want to use a password."</h3>
<p>That's a bad idea, but okay, here's how to do it safely.</p>
<p>First, generate a random key and store it in a constant.</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="com">/**
 * Replace this with your own salt! 
 * Use bin2hex() then add \x before every 2 hex characters, like so:
 */</span><span class="pln">
define</span><span class="pun">(</span><span class="str">'MY_PBKDF2_SALT'</span><span class="pun">,</span><span class="pln"> </span><span class="str">"\x2d\xb7\x68\x1a\x28\x15\xbe\x06\x33\xa0\x7e\x0e\x8f\x79\xd5\xdf"</span><span class="pun">);</span></code></pre>
<p>Note that you're adding extra work and could just use this constant as the key and save yourself a lot of heartache!</p>
<p>Then use PBKDF2 (like so) to derive a suitable encryption key from your password rather than encrypting with your password directly.</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="com">/**
 * Get an AES key from a static password and a secret salt
 * 
 * @param string $password Your weak password here
 * @param int $keysize Number of bytes in encryption key
 */</span><span class="pln">
</span><span class="kwd">function</span><span class="pln"> getKeyFromPassword</span><span class="pun">(</span><span class="pln">$password</span><span class="pun">,</span><span class="pln"> $keysize </span><span class="pun">=</span><span class="pln"> </span><span class="lit">16</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> hash_pbkdf2</span><span class="pun">(</span><span class="pln">
        </span><span class="str">'sha256'</span><span class="pun">,</span><span class="pln">
        $password</span><span class="pun">,</span><span class="pln">
        MY_PBKDF2_SALT</span><span class="pun">,</span><span class="pln">
        </span><span class="lit">100000</span><span class="pun">,</span><span class="pln"> </span><span class="com">// Number of iterations</span><span class="pln">
        $keysize</span><span class="pun">,</span><span class="pln">
        </span><span class="kwd">true</span><span class="pln">
    </span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>Don't just use a 16-character password. Your encryption key will be comically broken.</p>
</div></text><author><a href="/users/2224584/scott-arciszewski">Scott Arciszewski</a></author><comments><comment><text><span class="comment-copy"><a href="https://blog.agilebits.com/2013/03/09/guess-why-were-moving-to-256-bit-aes-keys/" rel="nofollow noreferrer">blog.agilebits.com/2013/03/09/…</a></span></text><author><a class="comment-user" href="/users/2224584/scott-arciszewski" title="15,046 reputation">Scott Arciszewski</a></author></comment><comment><text><span class="comment-copy"><a href="https://paragonie.com/blog/2015/08/you-wouldnt-base64-a-password-cryptography-decoded" rel="nofollow noreferrer">Don't encrypt passwords</a>, hash them with <code>password_hash()</code> and check them with <code>password_verify()</code>.</span></text><author><a class="comment-user" href="/users/2224584/scott-arciszewski" title="15,046 reputation">Scott Arciszewski</a></author></comment><comment><text><span class="comment-copy">"Do not compress anything ever." You mean like HTTP, spdy and other protocols do? Before TLS? Absolutist advice much?</span></text><author><a class="comment-user" href="/users/584490/tiberiu-ionu%c8%9b-stan" title="2,568 reputation">Tiberiu-Ionuț Stan</a></author></comment><comment><text><span class="comment-copy">@ScottArciszewski I like your comment about key "// Do this once then store it somehow:" .. somehow, lol :)) well how about storing this 'key' (which is object) as plain string, hardcoded? I need the key itself, as a string. Can I get it from this object somehow? Thanks</span></text><author><a class="comment-user" href="/users/560972/andrew" title="383 reputation">Andrew</a></author></comment><comment><text><span class="comment-copy">Version 1.2.1: save it via <code>bin2hex()</code>. Version 2.0.0: Wait until it's finished then read the docs. DO NOT use version 2 before it's released.</span></text><author><a class="comment-user" href="/users/2224584/scott-arciszewski" title="15,046 reputation">Scott Arciszewski</a></author></comment><comment><text><span class="comment-copy">Thx, I had just to modify one line in order to make your sodium examples working: <code>function getKeyFromPassword($password, $keysize = \Sodium\CRYPTO_SECRETBOX_KEYBYTES)</code></span></text><author><a class="comment-user" href="/users/3950602/alexey-ozerov" title="161 reputation">Alexey Ozerov</a></author></comment><comment><text><span class="comment-copy">For those who are interested in a C# .NET version of Scott's classes, I have published a C# .NET port on GitHub: <a href="https://github.com/mayerwin/SaferCrypto" rel="nofollow noreferrer">github.com/mayerwin/SaferCrypto</a></span></text><author><a class="comment-user" href="/users/541420/erwin-mayer" title="8,090 reputation">Erwin Mayer</a></author></comment><comment><text><span class="comment-copy">@this.lau_ NOOOOO that code is not secure why would you encourage people to copy and paste it?</span></text><author><a class="comment-user" href="/users/2224584/scott-arciszewski" title="15,046 reputation">Scott Arciszewski</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p><strong>What not to do</strong></p>
<blockquote>
<p><strong>WARNING:<br/>
  This answer uses <a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#ECB" rel="nofollow">ECB</a>. ECB is not an encryption mode, it's only a building block. Using ECB as demonstrated in this answer does not actually encrypt the string securely. Do not use ECB in your code. See <a href="https://stackoverflow.com/a/30159120">Scott's answer</a> for a good solution.</strong></p>
</blockquote>
<p>I got it on myself. Actually i found some answer on google and just modified something. <strong>The result is completely insecure however.</strong></p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pun">&lt;?</span><span class="pln">php
define</span><span class="pun">(</span><span class="str">"ENCRYPTION_KEY"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"!@#$%^&amp;*"</span><span class="pun">);</span><span class="pln">
$string </span><span class="pun">=</span><span class="pln"> </span><span class="str">"This is the original data string!"</span><span class="pun">;</span><span class="pln">

echo $encrypted </span><span class="pun">=</span><span class="pln"> encrypt</span><span class="pun">(</span><span class="pln">$string</span><span class="pun">,</span><span class="pln"> ENCRYPTION_KEY</span><span class="pun">);</span><span class="pln">
echo </span><span class="str">"&lt;br /&gt;"</span><span class="pun">;</span><span class="pln">
echo $decrypted </span><span class="pun">=</span><span class="pln"> decrypt</span><span class="pun">(</span><span class="pln">$encrypted</span><span class="pun">,</span><span class="pln"> ENCRYPTION_KEY</span><span class="pun">);</span><span class="pln">

</span><span class="com">/**
 * Returns an encrypted &amp; utf8-encoded
 */</span><span class="pln">
</span><span class="kwd">function</span><span class="pln"> encrypt</span><span class="pun">(</span><span class="pln">$pure_string</span><span class="pun">,</span><span class="pln"> $encryption_key</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    $iv_size </span><span class="pun">=</span><span class="pln"> mcrypt_get_iv_size</span><span class="pun">(</span><span class="pln">MCRYPT_BLOWFISH</span><span class="pun">,</span><span class="pln"> MCRYPT_MODE_ECB</span><span class="pun">);</span><span class="pln">
    $iv </span><span class="pun">=</span><span class="pln"> mcrypt_create_iv</span><span class="pun">(</span><span class="pln">$iv_size</span><span class="pun">,</span><span class="pln"> MCRYPT_RAND</span><span class="pun">);</span><span class="pln">
    $encrypted_string </span><span class="pun">=</span><span class="pln"> mcrypt_encrypt</span><span class="pun">(</span><span class="pln">MCRYPT_BLOWFISH</span><span class="pun">,</span><span class="pln"> $encryption_key</span><span class="pun">,</span><span class="pln"> utf8_encode</span><span class="pun">(</span><span class="pln">$pure_string</span><span class="pun">),</span><span class="pln"> MCRYPT_MODE_ECB</span><span class="pun">,</span><span class="pln"> $iv</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> $encrypted_string</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="com">/**
 * Returns decrypted original string
 */</span><span class="pln">
</span><span class="kwd">function</span><span class="pln"> decrypt</span><span class="pun">(</span><span class="pln">$encrypted_string</span><span class="pun">,</span><span class="pln"> $encryption_key</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    $iv_size </span><span class="pun">=</span><span class="pln"> mcrypt_get_iv_size</span><span class="pun">(</span><span class="pln">MCRYPT_BLOWFISH</span><span class="pun">,</span><span class="pln"> MCRYPT_MODE_ECB</span><span class="pun">);</span><span class="pln">
    $iv </span><span class="pun">=</span><span class="pln"> mcrypt_create_iv</span><span class="pun">(</span><span class="pln">$iv_size</span><span class="pun">,</span><span class="pln"> MCRYPT_RAND</span><span class="pun">);</span><span class="pln">
    $decrypted_string </span><span class="pun">=</span><span class="pln"> mcrypt_decrypt</span><span class="pun">(</span><span class="pln">MCRYPT_BLOWFISH</span><span class="pun">,</span><span class="pln"> $encryption_key</span><span class="pun">,</span><span class="pln"> $encrypted_string</span><span class="pun">,</span><span class="pln"> MCRYPT_MODE_ECB</span><span class="pun">,</span><span class="pln"> $iv</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> $decrypted_string</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
</span><span class="pun">?&gt;</span></code></pre>
</div></text><author><a href="/users/775856/%e5%a4%8f%e6%9c%9f%e5%8a%87%e5%a0%b4">夏期劇場</a></author><comments><comment><text><span class="comment-copy">You can either user "MCRYPT_MODE_CBC" instead of "MCRYPT_MODE_ECB" to ensure more security.</span></text><author><a class="comment-user" href="/users/631652/parixit" title="3,072 reputation">Parixit</a></author></comment><comment><text><span class="comment-copy">MCRYPT_MODE_ECB doesn't use IV</span></text><author><a class="comment-user" href="/users/1387163/eugene-fidelin" title="735 reputation">Eugene Fidelin</a></author></comment><comment><text><span class="comment-copy">Here is implementation of AES-128 encryption in CBC mode <a href="http://stackoverflow.com/a/19445173/1387163">stackoverflow.com/a/19445173/1387163</a></span></text><author><a class="comment-user" href="/users/1387163/eugene-fidelin" title="735 reputation">Eugene Fidelin</a></author></comment><comment><text><span class="comment-copy">Ramesh, this is because you're getting the raw encrypted data. You can get a nicer version of the encrypted data by using base64, like this: <code>base64_encode(encrypt($string))</code> -- To decrypt it: <code>decrypt(base64_decode($encrypted))</code></span></text><author><a class="comment-user" href="/users/235571/der" title="99 reputation">der</a></author></comment><comment><text><span class="comment-copy">If your string is already encoded as UTF-8, running it through the <code>utf8_encode</code> function will break it, so it needs to be removed on line 15</span></text><author><a class="comment-user" href="/users/3596962/ian" title="451 reputation">Ian</a></author></comment><comment><text><span class="comment-copy"><b>WARNING: this is insecure</b>. ECB mode should not be used for strings, ECB does not take an IV, this is not authenticated, it uses a old cipher (Blowfish) instead of AES, the key is not binary etc. etc. <b>The SO community should really stop upvoting encryption / decryption that just "work"</b> and start upvoting answers that are known to be secure. If you don't know that for sure, don't vote.</span></text><author><a class="comment-user" href="/users/589259/maarten-bodewes" title="47,642 reputation">Maarten Bodewes</a></author></comment><comment><text><span class="comment-copy">I kind of did this already by having the sample code of <code>mcrypt_encrypt</code> replaced: <a href="http://php.net/manual/en/function.mcrypt-encrypt.php" rel="nofollow noreferrer">php.net/manual/en/function.mcrypt-encrypt.php</a>. Note that reviewing it now it probably should have a <code>rtrim</code> for character <code>"\0"</code> at the end.</span></text><author><a class="comment-user" href="/users/589259/maarten-bodewes" title="47,642 reputation">Maarten Bodewes</a></author></comment><comment><text><span class="comment-copy">The correct answer is to use something like <a href="https://github.com/defuse/php-encryption" rel="nofollow noreferrer">defuse/php-encryption</a> instead of writing your own mcrypt code.</span></text><author><a class="comment-user" href="/users/2224584/scott-arciszewski" title="15,046 reputation">Scott Arciszewski</a></author></comment><comment><text><span class="comment-copy">@RyanB the heading were actually on purpose, read the revision history "added a big fat warning, because this answer ... is harmful"</span></text><author><a class="comment-user" href="/users/792066/braiam" title="3,366 reputation">Braiam</a></author></comment><comment><text><span class="comment-copy">one correction needed need to return trim($decrypted_string); as I was having trouble using this with file path on windows</span></text><author><a class="comment-user" href="/users/953496/demodave" title="1,683 reputation">Demodave</a></author></comment><comment><text><span class="comment-copy">also json_encode has a problem with the result</span></text><author><a class="comment-user" href="/users/953496/demodave" title="1,683 reputation">Demodave</a></author></comment><comment><text><span class="comment-copy">@Demodave thanks for the correction. And then, <code>json_encode</code> ? I didn't use it.</span></text><author><a class="comment-user owner" href="/users/775856/%e5%a4%8f%e6%9c%9f%e5%8a%87%e5%a0%b4" title="5,533 reputation">夏期劇場</a></author></comment><comment><text><span class="comment-copy">When I try to json_encode the data, it won't let me</span></text><author><a class="comment-user" href="/users/953496/demodave" title="1,683 reputation">Demodave</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<h1>For Laravel framework</h1>
<p>If you are using Laravel framework then it's more easy to encrypt and decrypt with internal functions.</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">$string </span><span class="pun">=</span><span class="pln"> </span><span class="str">'Some text to be encrypted'</span><span class="pun">;</span><span class="pln">
$encrypted </span><span class="pun">=</span><span class="pln"> \Illuminate\Support\Facades\Crypt</span><span class="pun">::</span><span class="pln">encrypt</span><span class="pun">(</span><span class="pln">$string</span><span class="pun">);</span><span class="pln">
$decrypted_string </span><span class="pun">=</span><span class="pln"> \Illuminate\Support\Facades\Crypt</span><span class="pun">::</span><span class="pln">decrypt</span><span class="pun">(</span><span class="pln">$encrypted</span><span class="pun">);</span><span class="pln">

var_dump</span><span class="pun">(</span><span class="pln">$string</span><span class="pun">);</span><span class="pln">
var_dump</span><span class="pun">(</span><span class="pln">$encrypted</span><span class="pun">);</span><span class="pln">
var_dump</span><span class="pun">(</span><span class="pln">$decrypted_string</span><span class="pun">);</span></code></pre>
<blockquote>
<p>Note: Be sure to set a 16, 24, or 32 character random string in the
  key option of the config/app.php file. Otherwise, encrypted values
  will not be secure.</p>
</blockquote>
</div></text><author><a href="/users/1045444/somnath-muluk">Somnath Muluk</a></author><comments><comment><text><span class="comment-copy">Sure, it may be easy to use.  But is it secure?  How does it address the issues in <a href="http://stackoverflow.com/a/30159120/781723">stackoverflow.com/a/30159120/781723</a>?  Does it use authenticated encryption?  Does it avoid side channel vulnerabilities and ensure constant-time equality checks?  Does it use a truly random key rather than a password/passphrase?  Does it use a suitable mode of operation?  Does it generate random IV's properly?</span></text><author><a class="comment-user" href="/users/781723/d-w" title="1,440 reputation">D.W.</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<blockquote>
<p><strong>Historical Note:</strong> This was written at the time of PHP4. This is what we call "legacy code" now.</p>
</blockquote>
<p>I have left this answer for historical purposes - but some of the methods are now deprecated, DES encryption method is not a recommended practice, etc.</p>
<p>I have not updated this code for two reasons: 1) I no longer work with encryption methods by hand in PHP, and 2) this code still serves the purpose it was intended for: to demonstrate the minimum, simplistic concept of how encryption can work in PHP. </p>
<p>If you find a similarly simplistic, "PHP encryption for dummies" kind of source that can get people started in 10-20 lines of code or less, let me know in comments.</p>
<p>Beyond that, please enjoy this Classic Episode of early-era PHP4 minimalistic encryption answer.</p>
<hr/>
<p>Ideally you have - or can get - access to the mcrypt PHP library, as its certainly popular and very useful a variety of tasks. Here's a run down of the different kinds of encryption and some example code: <a href="http://www.osix.net/modules/article/?id=606" rel="nofollow">Encryption Techniques in PHP</a></p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="com">//Listing 3: Encrypting Data Using the mcrypt_ecb Function </span><span class="pln">

</span><span class="pun">&lt;?</span><span class="pln">php 
echo</span><span class="pun">(</span><span class="str">"&lt;h3&gt; Symmetric Encryption &lt;/h3&gt;"</span><span class="pun">);</span><span class="pln"> 
$key_value </span><span class="pun">=</span><span class="pln"> </span><span class="str">"KEYVALUE"</span><span class="pun">;</span><span class="pln"> 
$plain_text </span><span class="pun">=</span><span class="pln"> </span><span class="str">"PLAINTEXT"</span><span class="pun">;</span><span class="pln"> 
$encrypted_text </span><span class="pun">=</span><span class="pln"> mcrypt_ecb</span><span class="pun">(</span><span class="pln">MCRYPT_DES</span><span class="pun">,</span><span class="pln"> $key_value</span><span class="pun">,</span><span class="pln"> $plain_text</span><span class="pun">,</span><span class="pln"> MCRYPT_ENCRYPT</span><span class="pun">);</span><span class="pln"> 
echo </span><span class="pun">(</span><span class="str">"&lt;p&gt;&lt;b&gt; Text after encryption : &lt;/b&gt;"</span><span class="pun">);</span><span class="pln"> 
echo </span><span class="pun">(</span><span class="pln"> $encrypted_text </span><span class="pun">);</span><span class="pln"> 
$decrypted_text </span><span class="pun">=</span><span class="pln"> mcrypt_ecb</span><span class="pun">(</span><span class="pln">MCRYPT_DES</span><span class="pun">,</span><span class="pln"> $key_value</span><span class="pun">,</span><span class="pln"> $encrypted_text</span><span class="pun">,</span><span class="pln"> MCRYPT_DECRYPT</span><span class="pun">);</span><span class="pln"> 
echo </span><span class="pun">(</span><span class="str">"&lt;p&gt;&lt;b&gt; Text after decryption : &lt;/b&gt;"</span><span class="pun">);</span><span class="pln"> 
echo </span><span class="pun">(</span><span class="pln"> $decrypted_text </span><span class="pun">);</span><span class="pln"> 
</span><span class="pun">?&gt;</span><span class="pln"> </span></code></pre>
<p>A few warnings:</p>
<p>1) Never use reversible, or "symmetric" encryption when a one-way hash will do.</p>
<p>2) If the data is truly sensitive, like credit card or social security numbers, stop; you need more than any simple chunk of code will provide, but rather you need a crypto library designed for this purpose and a significant amount of time to research the methods necessary. Further, the software crypto is probably &lt;10% of security of sensitive data. It's like rewiring a nuclear power station - accept that the task is dangerous and difficult and beyond your knowledge if that's the case. The financial penalties can be immense, so better to use a service and ship responsibility to them.</p>
<p>3) Any sort of easily implementable encryption, as listed here, can reasonably protect mildly important information that you want to keep from prying eyes or limit exposure in the case of accidental/intentional leak. But seeing as how the key is stored in plain text on the web server, if they can get the data they can get the decryption key.</p>
<p>Be that as it may, have fun :)</p>
</div></text><author><a href="/users/1886977/brianhall">BrianHall</a></author><comments><comment><text><span class="comment-copy">Eww, DES. Where's AES?</span></text><author><a class="comment-user" href="/users/497106/patashu" title="16,405 reputation">Patashu</a></author></comment><comment><text><span class="comment-copy">Thanks! But some issues. I'm getting <code>M�������f=�_=</code> strange characters as the encrypted one. Can't i get simple characters? Like: <code>2a2ffa8f13220befbe30819047e23b2c</code>. Also, can't i change the LENGTH of <code>$key_value</code> (fixed to 8 ???) and the LENGTH of output <code>$encrypted_text</code>? (can't it be 32 or 64 long or whatever longer??)</span></text><author><a class="comment-user owner" href="/users/775856/%e5%a4%8f%e6%9c%9f%e5%8a%87%e5%a0%b4" title="5,533 reputation">夏期劇場</a></author></comment><comment><text><span class="comment-copy">@夏期劇場 The result of encryption is binary data. If you need it to be human readable, use base64 or hex encoding on it. 'Can't I change the length of key value?' Different symmetrical encryption algorithms have different requirements for key value. 'and the LENGTH of output...' The length of the encrypted text has to be at least as long as the original text, or else there is not enough information to recreate the original text. (This is an application of the Pigeonhole principle.) BTW, you should use AES instead of DES. DES is easily breakable and not secure anymore.</span></text><author><a class="comment-user" href="/users/497106/patashu" title="16,405 reputation">Patashu</a></author></comment><comment><text><span class="comment-copy">comment referring 2) if the data is truly sensitive: can you link a crypto library? what services are there to which I can "ship responsibility" to? I've googled but I seems I can't hit the correct keywords to get good results.</span></text><author><a class="comment-user" href="/users/1325730/jnhghy-jantea-alexandru" title="1,719 reputation">jnhghy - Jantea Alexandru</a></author></comment><comment><text><span class="comment-copy">mcrypt_ecb has been DEPRECATED as of PHP 5.5.0 Relying on this function is highly discouraged. <a href="http://php.net/manual/en/function.mcrypt-ecb.php" rel="nofollow noreferrer">php.net/manual/en/function.mcrypt-ecb.php</a></span></text><author><a class="comment-user" href="/users/3477084/hafez" title="718 reputation">Hafez</a></author></comment><comment><text><span class="comment-copy">@Hafez And so is everything else in this answer, so in that sense it's OK.</span></text><author><a class="comment-user" href="/users/589259/maarten-bodewes" title="47,642 reputation">Maarten Bodewes</a></author></comment><comment><text><span class="comment-copy">I have updated this 2+ year-old answer as it still gets both up-votes and down-votes. I hope this answers some issues people have had, while at the same time I will not attempt to provide an answer outside my actual confidence and knowledge.</span></text><author><a class="comment-user" href="/users/1886977/brianhall" title="1,865 reputation">BrianHall</a></author></comment><comment><text><span class="comment-copy">@BrianDHall The reason this still gets down-votes is because ECB mode isn't safe (use CBC, CTR, GCM, or Poly1305), DES is weak (you want AES, which is <code>MCRYPT_RIJNDAEL_128</code>), and ciphertexts should be authenticated (<code>hash_hmac()</code>, verified with <code>hash_equals()</code>).</span></text><author><a class="comment-user" href="/users/2224584/scott-arciszewski" title="15,046 reputation">Scott Arciszewski</a></author></comment><comment><text><span class="comment-copy">hey @Patashu, how to include the base64 into that code? sorry i never used before.</span></text><author><a class="comment-user" href="/users/504112/gumuruh" title="1,110 reputation">gumuruh</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I'm late to the party, but searching for the correct way to do it I came across this page it was one of the top Google search returns, so I will like to share my view on the problem, which I consider it to be up to date at the time of writing this post (beginning of 2017). From PHP 7.1.0 the <code>mcrypt_decrypt</code> and <code>mcrypt_encrypt</code> is going to be deprecated, so building future proof code should use <a href="http://php.net/manual/en/function.openssl-encrypt.php" rel="nofollow noreferrer">openssl_encrypt</a> and <a href="http://php.net/manual/en/function.openssl-decrypt.php" rel="nofollow noreferrer">openssl_decrypt</a></p>
<p>You can do something like:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">$string_to_encrypt</span><span class="pun">=</span><span class="str">"Test"</span><span class="pun">;</span><span class="pln">
$password</span><span class="pun">=</span><span class="str">"password"</span><span class="pun">;</span><span class="pln">
$encrypted_string</span><span class="pun">=</span><span class="pln">openssl_encrypt</span><span class="pun">(</span><span class="pln">$string_to_encrypt</span><span class="pun">,</span><span class="str">"AES-128-ECB"</span><span class="pun">,</span><span class="pln">$password</span><span class="pun">);</span><span class="pln">
$decrypted_string</span><span class="pun">=</span><span class="pln">openssl_decrypt</span><span class="pun">(</span><span class="pln">$encrypted_string</span><span class="pun">,</span><span class="str">"AES-128-ECB"</span><span class="pun">,</span><span class="pln">$password</span><span class="pun">);</span></code></pre>
<blockquote>
<p><strong>Important</strong>: This uses <a href="https://blog.filippo.io/the-ecb-penguin/" rel="nofollow noreferrer">ECB mode</a>, which isn't secure. If you want a simple solution without taking a crash course in cryptography engineering, don't write it yourself, just <a href="https://paragonie.com/blog/2015/11/choosing-right-cryptography-library-for-your-php-project-guide" rel="nofollow noreferrer">use a library</a>.</p>
</blockquote>
<p>You can use any other chipper methods as well, depending on your security need. To find out the available chipper methods please see the <a href="http://php.net/manual/en/function.openssl-get-cipher-methods.php" rel="nofollow noreferrer">openssl_get_cipher_methods</a> function.</p>
</div></text><author><a href="/users/2781862/emil-borconi">Emil Borconi</a></author><comments><comment><text><span class="comment-copy">Thank you, I'm surprised this simple and clear answer is not more upvoted. I'd rather not read a 10 pages discussion on the subject like the top answer when all I want is encrypt/decrypt a simple string.</span></text><author><a class="comment-user" href="/users/561309/this-lau" title="42,989 reputation">this.lau_</a></author></comment><comment><text><span class="comment-copy">This isn't a secure answer. <a href="https://blog.filippo.io/the-ecb-penguin/" rel="nofollow noreferrer">ECB mode</a> shouldn't be used. If you want a "simple and clear answer", just <a href="https://github.com/defuse/php-encryption" rel="nofollow noreferrer">use a library</a>.</span></text><author><a class="comment-user" href="/users/2224584/scott-arciszewski" title="15,046 reputation">Scott Arciszewski</a></author></comment><comment><text><span class="comment-copy">@ScottArciszewski, yes I admit I've spoken too quickly while looking for some simple code. I've since then added an IV and using CBC in my own code, which is good enough for my use.</span></text><author><a class="comment-user" href="/users/561309/this-lau" title="42,989 reputation">this.lau_</a></author></comment><comment><text><span class="comment-copy"><a href="https://tonyarcieri.com/all-the-crypto-code-youve-ever-written-is-probably-broken" rel="nofollow noreferrer">Read this and reconsider</a>. With CBC mode, an attacker can completely change the message. If the message is a file, an attacker can flip bits and pop calc.exe. The risks of unauthenticated encryption are severe.</span></text><author><a class="comment-user" href="/users/2224584/scott-arciszewski" title="15,046 reputation">Scott Arciszewski</a></author></comment><comment><text><span class="comment-copy">It all depends on the use case! There are cases when this is perfectly FINE. For example I want to pass a GET parameter from page to page, let's say <code>prod_id=123</code> but I just do not want to make 123 readable for everybody, however even if they could read it, it won't be a problem. An attacker being able to replace the 123 to a custom value won't cause any harm, he/she will only be able to get details of any other product, but Joe Average User won't have a clue on how to get details for product 124 for example. For a scenario like this, it's a perfect solution, for security it's a no go!</span></text><author><a class="comment-user" href="/users/2781862/emil-borconi" title="1,335 reputation">Emil Borconi</a></author></comment><comment><text><span class="comment-copy">By the way @ScottArciszewski, I'm NOT a security expert but looking at the functions parameters <a href="http://php.net/manual/en/function.openssl-decrypt.php" rel="nofollow noreferrer">php.net/manual/en/function.openssl-decrypt.php</a> it does support authentificated encryption/decryption which to my understanding is considered secure. The problem is the documentation is missing on how to use it properly.</span></text><author><a class="comment-user" href="/users/2781862/emil-borconi" title="1,335 reputation">Emil Borconi</a></author></comment><comment><text><span class="comment-copy">Re: OpenSSL supporting AEEAD: That's only possible in PHP 7.1, and requires extra care. Also, the person I'm responding to specifically said CBC is fine.</span></text><author><a class="comment-user" href="/users/2224584/scott-arciszewski" title="15,046 reputation">Scott Arciszewski</a></author></comment><comment><text><span class="comment-copy">"For example I want to pass a GET parameter from page to page, let's say prod_id=123 but I just do not want to make 123 readable for everybody, however even if they could read it, it won't be a problem." - Might I suggest a better way? <a href="https://paragonie.com/blog/2015/09/comprehensive-guide-url-parameter-encryption-in-php" rel="nofollow noreferrer">paragonie.com/blog/2015/09/…</a></span></text><author><a class="comment-user" href="/users/2224584/scott-arciszewski" title="15,046 reputation">Scott Arciszewski</a></author></comment><comment><text><span class="comment-copy">Thank you @ScottArciszewski that's good, but its getting inconvenient where for example you want to pass multiple parameters or the return is simply read from a file (example picture). That will add an extra database query, sure it's a good solution it just depends on what is your user case.</span></text><author><a class="comment-user" href="/users/2781862/emil-borconi" title="1,335 reputation">Emil Borconi</a></author></comment><comment><text><span class="comment-copy">Why would you use a URL parameter (encrypted or not) to dictate which file to open? Do you want LFI vulnerabilities? Because that's how you get LFI vulnerabilities.</span></text><author><a class="comment-user" href="/users/2224584/scott-arciszewski" title="15,046 reputation">Scott Arciszewski</a></author></comment><comment><text><span class="comment-copy">@ScottArciszewski I'm not speaking of include! I have one page for example where I'm passed something like <code>prodid=123</code>, the processing script knows will do a recursive directory iteration of a specific path looking for EXACTLY "123 + something + extension", if found an x-sendfile is performed on the result (pdf) and displayed to the user. To the best of my knowledge that won't cause an LFI vulnerability, but please correct me if I'm wrong.</span></text><author><a class="comment-user" href="/users/2781862/emil-borconi" title="1,335 reputation">Emil Borconi</a></author></comment><comment><text><span class="comment-copy"><a href="http://projects.webappsec.org/w/page/13246949/Null%20Byte%20Injection" rel="nofollow noreferrer">projects.webappsec.org/w/page/13246949/Null%20Byte%20Injecti‌​on</a></span></text><author><a class="comment-user" href="/users/2224584/scott-arciszewski" title="15,046 reputation">Scott Arciszewski</a></author></comment><comment><text><span class="comment-copy">Let us <a href="http://chat.stackoverflow.com/rooms/141615/discussion-between-emil-borconi-and-scott-arciszewski">continue this discussion in chat</a>.</span></text><author><a class="comment-user" href="/users/2781862/emil-borconi" title="1,335 reputation">Emil Borconi</a></author></comment></comments></answer></answers></post>