<?xml version="1.0" encoding="utf-8"?>
<post><title>security - What is token based authentication? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I want to understand what token-based authentication means. I searched the internet but couldn't find anything understandable.</p>
</div></text><author><a href="/users/192221/kristianp">kristianp</a></author><comments><comment><text><span class="comment-copy">I have read a lot of descriptions, but they all seemed light on concrete details.  This article finally helped me: <a href="https://scotch.io/tutorials/the-anatomy-of-a-json-web-token" rel="nofollow noreferrer">scotch.io/tutorials/the-anatomy-of-a-json-web-token</a></span></text><author><a class="comment-user" href="/users/2171044/chrisco" title="4,368 reputation">chrisco</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>I think it's well explained <a href="http://www.w3.org/2001/sw/Europe/events/foaf-galway/papers/fp/token_based_authentication/" rel="noreferrer">here</a> -- quoting just the key sentences of the long article:</p>
<blockquote>
<p>The general concept behind a
  token-based authentication system is
  simple. Allow users to enter their
  username and password in order to
  obtain a token which allows them to
  fetch a specific resource - without
  using their username and password.
  Once their token has been obtained,
  the user can offer the token - which
  offers access to a specific resource
  for a time period - to the remote
  site.</p>
</blockquote>
<p>In other words: add one level of indirection for authentication -- instead of having to authenticate with username and password for each protected resource, the user authenticates that way once (within a session of limited duration), obtains a time-limited token in return, and uses that token for further authentication during the session.</p>
<p>Advantages are many -- e.g., the user could pass the token, once they've obtained it, on to some other automated system which they're willing to trust for a limited time and a limited set of resources, but would <strong>not</strong> be willing to trust with their username and password (i.e., with every resource they're allowed to access, forevermore or at least until they change their password).</p>
<p>If anything is still unclear, please edit your question to clarify WHAT isn't 100% clear to you, and I'm sure we can help you further.</p>
</div></text><author><a href="/users/95810/alex-martelli">Alex Martelli</a></author><comments><comment><text><span class="comment-copy">Am I correct in thinking that in a web application, one (or more) cookies from the remote web site performs the function of the token?</span></text><author><a class="comment-user" href="/users/539490/ajp" title="6,446 reputation">AJP</a></author></comment><comment><text><span class="comment-copy">From the W3 article you referenced:  "Typical web-authentication is cookie-based..."</span></text><author><a class="comment-user" href="/users/539490/ajp" title="6,446 reputation">AJP</a></author></comment><comment><text><span class="comment-copy">@Alex Martelli hi if connection is over HTTPS does that make a difference to send token as parameter or in header?</span></text><author><a class="comment-user" href="/users/379028/spring" title="2,568 reputation">Spring</a></author></comment><comment><text><span class="comment-copy">As tokens are stored as cookies, is there anything in place to stop a person stealing that cookie/token and using it themselves, tricking the server into thinking they are the authorized user? Obviously they could only use it for x amount of time, but during that period they could do all the damage they needed to.</span></text><author><a class="comment-user" href="/users/2539260/benm" title="2,807 reputation">BenM</a></author></comment><comment><text><span class="comment-copy">@Chibbles You can use anti-forgery tokens for that. Also you could make sure the connection is encrypted with https.</span></text><author><a class="comment-user" href="/users/1231/donny-v" title="7,135 reputation">Donny V.</a></author></comment><comment><text><span class="comment-copy">@Rondles For this you secure your ressource with SSL which prevents the man in the middle from stealing your token. And if he steals your token you can still encrypt your token.</span></text><author><a class="comment-user" href="/users/320460/elisabeth" title="6,203 reputation">Elisabeth</a></author></comment><comment><text><span class="comment-copy">@Spring No, it makes no difference. In http(s), the requested resource, including the path and query string (i.e. parameters), and the headers are all sent as data, so both are therefore encrypted.</span></text><author><a class="comment-user" href="/users/643554/keith-robertson" title="622 reputation">Keith Robertson</a></author></comment><comment><text><span class="comment-copy">How is this different from SessionAuthentication, where user can obtain a session_id by enterting his username and password, and then uses this session_id in subsequent request ?</span></text><author><a class="comment-user" href="/users/395028/saurabh-verma" title="2,483 reputation">Saurabh Verma</a></author></comment><comment><text><span class="comment-copy">@AlexMartelli Let's say I'm using JWT as my token. Where do I store the token on browser side and do I need to manually send it back to server with each subsequent request or does the browser automate that somehow? I'm also having trouble understanding how it only provides limited access to resources. Please explain further.</span></text><author><a class="comment-user" href="/users/2981600/user137717" title="454 reputation">user137717</a></author></comment><comment><text><span class="comment-copy">@user137717, your response's <code>Set-Cookie: name=value</code> (&amp;c) header instructs the browser to store the cookie (no idea what you mean by "using JWT as my token") and the browser sends it back in requests to the same domain as the <code>Cookie</code> header. (You can take control w/Javascript if you're writing a client-side app to run in the browser, of course).  The limits on the access granted (both in time and scope) are up to your server code to enforce.</span></text><author><a class="comment-user" href="/users/95810/alex-martelli" title="513,440 reputation">Alex Martelli</a></author></comment><comment><text><span class="comment-copy">if the token expires does the user have to log in again to get a new token?</span></text><author><a class="comment-user" href="/users/1834523/anthony-to" title="1,163 reputation">Anthony To</a></author></comment><comment><text><span class="comment-copy">@AnthonyTo, depends on the token auth system -- you could get a "persistent token" that you're able to "refresh", or not, depending on the system!</span></text><author><a class="comment-user" href="/users/95810/alex-martelli" title="513,440 reputation">Alex Martelli</a></author></comment><comment><text><span class="comment-copy">You don't need to store the token in a cookie. You can store it in local storage.</span></text><author><a class="comment-user" href="/users/568289/richard" title="3,554 reputation">richard</a></author></comment><comment><text><span class="comment-copy">@SaurabhVerma it's different from a session because you don't have to store the information in a cookie. That is great for mobile devices, some of which have restrictions on cookie usage.</span></text><author><a class="comment-user" href="/users/773649/kebman" title="433 reputation">Kebman</a></author></comment><comment><text><span class="comment-copy">@AlexMartelli Wouldn't we want to store the token as a header instead of a cookie?</span></text><author><a class="comment-user" href="/users/894065/lux" title="2,658 reputation">lux</a></author></comment><comment><text><span class="comment-copy">@lux, cookies ARE (transmitted in) headers: Set-Cookie in the server-&gt;client response, Cookie in the client-&gt;server request.</span></text><author><a class="comment-user" href="/users/95810/alex-martelli" title="513,440 reputation">Alex Martelli</a></author></comment><comment><text><span class="comment-copy">I'm referring to the Authorization header.</span></text><author><a class="comment-user" href="/users/894065/lux" title="2,658 reputation">lux</a></author></comment><comment><text><span class="comment-copy">The problem with cookies is that the user must have them enabled, otherwise your authentication would not work. I'd recommend sending the token via the <code>Authorization</code> header to work around this fact. Also, it fits nicely to REST services, which are supposed to be stateless and may be hosted in a different domain.</span></text><author><a class="comment-user" href="/users/2401769/matias-cicero" title="8,860 reputation">Matias Cicero</a></author></comment><comment><text><span class="comment-copy">good question with great answer..</span></text><author><a class="comment-user" href="/users/2103379/utsav-gupta" title="921 reputation">Utsav Gupta</a></author></comment><comment><text><span class="comment-copy">As a note : the fact that tokens are only valid for a limited time is an important distinction with sessions.  When a token is intercepted it can only be abused for a limited time.</span></text><author><a class="comment-user" href="/users/151657/xastor" title="347 reputation">xastor</a></author></comment><comment><text><span class="comment-copy">@xastor If the token can be intercepted, the credentials in the first request also could be intercepted. The difference is the probability of the vulnerability?</span></text><author><a class="comment-user" href="/users/3692788/jcarlos" title="454 reputation">JCarlos</a></author></comment><comment><text><span class="comment-copy">@JCarlos The first request you talk about will be a form submit on the oauth service's login page, outside of your control.  It should be a https secured site.</span></text><author><a class="comment-user" href="/users/151657/xastor" title="347 reputation">xastor</a></author></comment><comment><text><span class="comment-copy">@BenM, Tokens don't necessarily have to be cookies(for Non-browsers based systems).  And they can be stolen as they are your identity.  in a sense they're more secure then your username and password as you can expire more often that a typical username/password.</span></text><author><a class="comment-user" href="/users/462971/rayloveless" title="5,575 reputation">RayLoveless</a></author></comment><comment><text><span class="comment-copy">@SaurabhVerma, A session id is usually used to identify a specific client (e.g. a client that has logged in). Tokens are rather more general, e.g. a user can ask the server to generate a token that contains permission to do something on the user's behalf, and the user can then give away this token to someone else (this could be implemented using sessions, but that's not what sessions were created for; tokens solve this problem better).</span></text><author><a class="comment-user" href="/users/2104665/peppe-l-g" title="5,421 reputation">Peppe L-G</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>From <a href="https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/" rel="noreferrer">Auth0.com</a></p>
<blockquote>
<p>Token-Based Authentication, relies on a signed token that is sent to
  the server on each request.</p>
<p>What are the benefits of using a token-based approach?</p>
<ul>
<li><p><strong>Cross-domain / CORS:</strong> cookies + CORS don't play well across different    domains. A token-based approach allows you to make AJAX
  calls to any    server, on any domain because you use an HTTP header
  to transmit the    user information.</p></li>
<li><p><strong>Stateless (a.k.a. Server side scalability):</strong> there is no need to keep a session store, the token is a self-contained entity that conveys    all the user information. The rest of the state lives in cookies or local storage on the client side.</p></li>
<li><p><strong>CDN:</strong> you can serve all the assets of your app from a CDN (e.g.    javascript, HTML, images, etc.), and your server side is just the API.</p></li>
<li><p><strong>Decoupling:</strong> you are not tied to any particular authentication scheme.    The token might be generated anywhere, hence your API can
  be called    from anywhere with a single way of authenticating those
  calls.</p></li>
<li><p><strong>Mobile ready:</strong> when you start working on a native platform (iOS,    Android, Windows 8, etc.) cookies are not ideal when consuming a 
  token-based approach simplifies this a lot.</p></li>
<li><p><strong>CSRF:</strong> since you are not relying on cookies, you don't need to protect    against cross site requests (e.g. it would not be possible to 
  sib your site, generate a POST request and re-use the existing authentication cookie because there will be none).</p></li>
<li><p><strong>Performance:</strong> we are not presenting any hard perf benchmarks here, but    a network roundtrip (e.g. finding a session on database)
  is likely to    take more time than calculating an HMACSHA256 to
  validate a token and    parsing its contents.</p></li>
</ul>
</blockquote>
</div></text><author><a href="/users/1387002/asik">Asik</a></author><comments><comment><text><span class="comment-copy">Shows different aspects! Thanks!</span></text><author><a class="comment-user" href="/users/1752988/kasun-randika" title="2,700 reputation">Kasun Randika</a></author></comment><comment><text><span class="comment-copy">@Asik All points here are valid except "Stateless" when you start dealing with token revocation, blacklisting, reply attack prevention etc.</span></text><author><a class="comment-user" href="/users/126414/svlada" title="1,564 reputation">svlada</a></author></comment><comment><text><span class="comment-copy">The cited site recommends a newer article on the same topic: <a href="https://auth0.com/blog/cookies-vs-tokens-definitive-guide/" rel="nofollow noreferrer">auth0.com/blog/cookies-vs-tokens-definitive-guide</a></span></text><author><a class="comment-user" href="/users/331117/asalazar" title="88 reputation">ASalazar</a></author></comment><comment><text><span class="comment-copy">'statelessness' and 'performance' holds as longs as you don't need to 'immediately' revoke the token. Otherwise at-least one db access per api call is necessary.</span></text><author><a class="comment-user" href="/users/3359432/nidhin-david" title="886 reputation">Nidhin David</a></author></comment><comment><text><span class="comment-copy">You might want to read "Stop using JWT for sessions": <a href="http://cryto.net/%7Ejoepie91/blog/2016/06/13/stop-using-jwt-for-sessions/" rel="nofollow noreferrer">cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessi‌​ons</a></span></text><author><a class="comment-user" href="/users/1184752/juraj-martinka" title="397 reputation">Juraj Martinka</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>A <code>token</code> is a piece of data which only <code>Server X</code> could possibly have created, and which contains enough data to identify a particular user.</p>
<p>You might present your login information and ask <code>Server X</code> for a <code>token</code>; and then you might present your <code>token</code> and ask <code>Server X</code> to perform some user-specific action.</p>
<p><code>Token</code>s are created using various combinations of various techniques from the field of cryptography as well as with input from the wider field of security research. If you decide to go and create your own <code>token</code> system, you had best be really smart.</p>
</div></text><author><a href="/users/12349/yfeldblum">yfeldblum</a></author><comments><comment><text><span class="comment-copy">Generally, if you want token-based authentication, you should start with OAuth.</span></text><author><a class="comment-user" href="/users/90723/bob-aman" title="25,955 reputation">Bob Aman</a></author></comment><comment><text><span class="comment-copy">OAuth is certainly viable in a Web-based application. But, for example, operating system login sessions use token systems as well, as do many other kinds of software program, so this idea is not limited to the Web.</span></text><author><a class="comment-user" href="/users/12349/yfeldblum" title="54,024 reputation">yfeldblum</a></author></comment><comment><text><span class="comment-copy">A token is probably also preferable for a non-public customer support system. The company controls the username/password and issues &amp; controls the token.</span></text><author><a class="comment-user" href="/users/379169/kevinmanx" title="191 reputation">KevinManx</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>A token is a piece of data created by server, and contains information to identify a particular user and token validity. The token will contain the user's information, as well as a special token code that user can pass to the server with every method that supports authentication, instead of passing a username and password directly.</p>
<p>Token-based authentication is a security technique that authenticates the users who attempt to log in to a server, a network, or some other secure system, using a security token provided by the server.</p>
<p>An authentication is successful if a user can prove to a server that he or she is a valid user by passing a security token. The service validates the security token and processes the user request.</p>
<p>After the token is validated by the service, it is used to establish security context for the client, so the service can make authorization decisions or audit activity for successive user requests.</p>
<p><a href="http://developergeeks.com/article/18/introduction-to-token-based-authentication" rel="noreferrer"> visit the source</a></p>
</div></text><author><a href="/users/900671/deepakk">DeepakK</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>The question is old and the technology has advanced, here is the current state:</p>
<p>JSON Web Token (JWT) is a JSON-based open standard (RFC 7519) for passing claims between parties in web application environment. The tokens are designed to be compact, URL-safe and usable especially in web browser single sign-on (SSO) context.</p>
<p><a href="https://en.wikipedia.org/wiki/JSON_Web_Token">https://en.wikipedia.org/wiki/JSON_Web_Token</a></p>
</div></text><author><a href="/users/756233/ray-hulha">Ray Hulha</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>It's just a string  of 32 characters or more which is associated with user in database or some other way. That token can be used to authorize a user to access other related contents of the application. To retrieve this token on client side login is required. After first time login you need to save retrieved token not any other data like session, session id because here everything is token to access other resources of application.</p>
<p>Token is used to assure the authenticity of the user.</p>
</div></text><author><a href="/users/2617270/hardik-patel">Hardik Patel</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>When you register for a new website, often you are sent an email to activate your account.  That email typically contains a link to click on.  Part of that link, contains a token, the server knows about this token and can associate it with your account.  The token would usually have an expiry date associated with it, so you may only have an hour to click on the link and activate your account.  None of this would be possible with cookies or session variables, since its unknown what device or browser the customer is using to check emails.</p>
</div></text><author><a href="/users/3094826/user3094826">user3094826</a></author><comments><comment><text><span class="comment-copy">One-time token/link is a different concept than token based authentication.</span></text><author><a class="comment-user" href="/users/1218980/emile-bergeron" title="6,345 reputation">Emile Bergeron</a></author></comment></comments></answer></answers></post>