<?xml version="1.0" encoding="utf-8"?>
<post><title>ajax - What are the security risks of setting Access-Control-Allow-Origin? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I recently had to set <code>Access-Control-Allow-Origin</code> to <code>*</code> in order to be able to make cross-subdomain ajax calls.<br/>
Now I can't help but feel that I'm putting my environment to security risks.<br/>
Please help me if I'm doing it wrong.</p>
</div></text><author><a href="/users/370073/hamed-momeni">Hamed Momeni</a></author><comments/></question><answers><answer><text><div class="post-text" itemprop="text">
<p>By responding with <code>Access-Control-Allow-Origin: *</code> the requested resource allows sharing with every origin. This basically means that any site can send a XHR request to your site and access the server’s response which would not be the case if you hadn’t implemented this CORS response.</p>
<p>So any site can make a request to your site in behalf of their visitors and process the response of it. If you have something implemented like an authentication or authorization scheme that is based on something that is automatically provided by the browser (cookies, cookie-based sessions, etc.), the requests triggered by the third party sites will use them, too.</p>
<p>This indeed poses a security risk, particularly if you allow resource sharing not just for selected resources but for every resource. In this context you should have a look at <em><a href="http://stackoverflow.com/a/9725695/53114">When is it safe to enable CORS?</a></em>.</p>
</div></text><author><a href="/users/53114/gumbo">Gumbo</a></author><comments><comment><text><span class="comment-copy">If you can give a specific example of how the shared auth access poses a security risk, I'll upvote this.</span></text><author><a class="comment-user" href="/users/198927/petrus-theron" title="11,008 reputation">Petrus Theron</a></author></comment><comment><text><span class="comment-copy">@Gumbo What about static content? (e.g. static cdn content, such as javascripts, css, static htmls etc.) Are there any security issues of setting <code>Access-Control-Allow-Origin: *</code> on them? There will be no nogin etc, they are public to everyone?</span></text><author><a class="comment-user" href="/users/158523/umut-benzer" title="1,711 reputation">Umut Benzer</a></author></comment><comment><text><span class="comment-copy">@UmutBenzer That’s ok.</span></text><author><a class="comment-user" href="/users/53114/gumbo" title="424,771 reputation">Gumbo</a></author></comment><comment><text><span class="comment-copy">Actually this answer is not quite correct according to <a href="http://www.w3.org/TR/cors/#resource-requests" rel="nofollow noreferrer">the current CORS standard</a>: "The string '*' cannot be used for a resource that supports credentials." So you cannot force a request to use transient authentication in the form of cookies, cached HTTP authentication or client SSL certificates. However if the website were for example to use local storage for authentication, that would be a problem.</span></text><author><a class="comment-user" href="/users/916657/niklas-b" title="59,161 reputation">Niklas B.</a></author></comment><comment><text><span class="comment-copy">@NiklasB. Feel free to correct my answer.</span></text><author><a class="comment-user" href="/users/53114/gumbo" title="424,771 reputation">Gumbo</a></author></comment><comment><text><span class="comment-copy">@Gumbo Well I'm not sure about the implications of <code>Access-Control-Allow-Origin: *</code> myself, that's why I was looking at this Q&amp;A. I.e. I don't know what the correct answer would be, but I would be interested</span></text><author><a class="comment-user" href="/users/916657/niklas-b" title="59,161 reputation">Niklas B.</a></author></comment><comment><text><span class="comment-copy">@NiklasB: I tried this scenario and Chrome does follow the CORS standard  as you have mentioned. i.e. the string "<i>" is not supported with a credentials request. Here is what is reported by Chrome:  "XMLHttpRequest cannot load <a href="http://localhost:12346/hello" rel="nofollow noreferrer">localhost:12346/hello</a>. A wildcard '</i>' cannot be used in the 'Access-Control-Allow-Origin' header when the credentials flag is true. Origin '<a href="http://localhost:12345%27" rel="nofollow noreferrer">localhost:12345'</a>; is therefore not allowed access. The credentials mode of an XMLHttpRequest is controlled by the withCredentials attribute."</span></text><author><a class="comment-user" href="/users/2578506/factotum" title="290 reputation">factotum</a></author></comment><comment><text><span class="comment-copy">added correction mentioned above, also put an alternative solution to wildcard for some use cases that may be coming in off search engines</span></text><author><a class="comment-user" href="/users/578023/garet-claborn" title="608 reputation">Garet Claborn</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Afaik, Access-Control-Allow-Origin is just a http header sent from the server to the browser. Limiting it to a specific address (or disabling it) does not make your site safer for, for example, robots. If robots want to, they can just ignore the header. The regular browsers out there (explorer,chrome,etc) by default honor the header.</p>
<p>The server end doesn't actually check what the 'origin' is of the request when it returns the response. It just adds the http header. Its the browser (the client end) that did the request that decides to read the access-control header and act upon it. Note that, in the case of XHR, it may use a special 'OPTIONS' request to ask for the headers first.</p>
<p>So, anyone with creative scripting abilities can easily ignore the whole header, whatever is set in it.</p>
<p>see also <a href="http://stackoverflow.com/questions/14979313/possible-security-issues-of-setting-access-control-allow-origin">Possible security issues of setting Access-Control-Allow-Origin</a></p>
</div></text><author><a href="/users/95733/commonpike">commonpike</a></author><comments><comment><text><span class="comment-copy">Look at this from the point of view of an unwary end user.  Someone can set up a malicious webpage which injects JavaScript to pass data between the real site and a malicious site (let's say they want to steal your password).  The end user's web browser will normally block this cross site communication, but if the Access-Control-Allow-Origin is set, then it will be allowed, and the end user will be none the wiser.</span></text><author><a class="comment-user" href="/users/231839/brain2000" title="1,891 reputation">Brain2000</a></author></comment><comment><text><span class="comment-copy">Yes, setting <code>Access-Control-Allow-Origin *</code> on a malicious website that hosts scripts to steal passwords is strongly discouraged :-)</span></text><author><a class="comment-user" href="/users/95733/commonpike" title="3,678 reputation">commonpike</a></author></comment><comment><text><span class="comment-copy">Oh, I got a downvote for the joke. No, I cant look at it from a user perspective. It's the webmaster, or sitebuilder, that decides to set the HTTP header. <code>Someone can set up a malicious webpage</code> - yes, and that someone will add the malicious directive, too. And again, any client - like an infected webbrowser - may choose to ignore http headers whatever is set in them.</span></text><author><a class="comment-user" href="/users/95733/commonpike" title="3,678 reputation">commonpike</a></author></comment><comment><text><span class="comment-copy">I didn't downvote you.</span></text><author><a class="comment-user" href="/users/231839/brain2000" title="1,891 reputation">Brain2000</a></author></comment><comment><text><span class="comment-copy">i just upped that :-)</span></text><author><a class="comment-user" href="/users/95733/commonpike" title="3,678 reputation">commonpike</a></author></comment><comment><text><span class="comment-copy">I keep on getting downvotes. If anyone wants to downvote this, please explain why ?</span></text><author><a class="comment-user" href="/users/95733/commonpike" title="3,678 reputation">commonpike</a></author></comment><comment><text><span class="comment-copy">@commonpike You are correct in that someone could make a script to just totally ignore the header.  If the data is accessible, it's accessible with or without CORS headers.  There's another attack vector you're not considering though.  Suppose I log into my bank's website.  If I go to another page and then go back to my bank, I'm still logged in because of a cookie.  Other users on the internet can hit the same URLs at my bank as I do, yet they won't be able to access my account without the cookie.  If cross-origin requests are allowed, a malicious website can effectively impersonate...</span></text><author><a class="comment-user" href="/users/362536/brad" title="93,479 reputation">Brad</a></author></comment><comment><text><span class="comment-copy">@commonpike ... the user.  Put another way, you might just visit my site (which could even be a normal site, with nothing suspicous... maybe it's a real legit site that was just hijacked!) but some JavaScript that makes HTTP requests to your bank to transfer some funds to my account.  The bank doesn't know the difference between requests from its pages or requests from other pages.  Both have that cookie enabling the request to succeed.</span></text><author><a class="comment-user" href="/users/362536/brad" title="93,479 reputation">Brad</a></author></comment><comment><text><span class="comment-copy">@commonpike Let me give you a more common example... one that happens all the time.  Suppose you have a common home router, such as a Linksys WRT54g or something.  Suppose that router allows cross-origin requests.  A script on my web page could make HTTP requests to common router IP addresses (like <code>192.168.1.1</code>) and reconfigure your router to allow attacks.  It can even use your router directly as a DDoS node.  (Most routers have test pages which allow for pings or simple HTTP server checks.  These can be abused en masse.)</span></text><author><a class="comment-user" href="/users/362536/brad" title="93,479 reputation">Brad</a></author></comment><comment><text><span class="comment-copy">@commonpike By not allowing cross-origin requests, you effectively put a wall up between what two different sites can access from the same browser.  It prevents one site from accessing another's data, impersonating the user that may have previously logged in.</span></text><author><a class="comment-user" href="/users/362536/brad" title="93,479 reputation">Brad</a></author></comment><comment><text><span class="comment-copy">@Brad - thanks for the thorough comments. A bank and a router are good examples of sites that really dont want cross-origin requests (allthough the cookie example wont work with Access-Control-Allow-Origin *). What the header name doesn't make clear is that its actually a client side security mechanism, which makes it sounds much stronger (or more dangerous) than it really is.</span></text><author><a class="comment-user" href="/users/95733/commonpike" title="3,678 reputation">commonpike</a></author></comment><comment><text><span class="comment-copy">@commonpike Cookies do work.  <a href="https://quickleft.com/blog/cookies-with-my-cors/" rel="nofollow noreferrer">quickleft.com/blog/cookies-with-my-cors</a></span></text><author><a class="comment-user" href="/users/362536/brad" title="93,479 reputation">Brad</a></author></comment><comment><text><span class="comment-copy">@Brad .. but "The string '*' cannot be used for a resource that supports credentials." <a href="https://www.w3.org/TR/cors/#resource-requests" rel="nofollow noreferrer">w3.org/TR/cors/#resource-requests</a>. A more specific Access-Control-Allow-Origin url would work.</span></text><author><a class="comment-user" href="/users/95733/commonpike" title="3,678 reputation">commonpike</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Are you using CORS?
The data acquired via a cross-domain AJAX request may pose a security risk to the server making the request but I think the solution to the cross-domain AJAX request is for the user agent to implement parsing and/or validation for known data types within XHR complete with error handling (much like what jQuery.ajax does with the dataType set to “json”).</p>
</div></text><author><a href="/users/1537657/rain01">rain01</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Here are 2 examples posted as comments, when a wildcard is realy problematic:</p>
<blockquote>
<p>Suppose I log into my bank's website. If I go to another page and then
  go back to my bank, I'm still logged in because of a cookie. Other
  users on the internet can hit the same URLs at my bank as I do, yet
  they won't be able to access my account without the cookie. If
  cross-origin requests are allowed, a malicious website can effectively
  impersonate</p>
</blockquote>
<p>– <a href="http://stackoverflow.com/questions/12001269/what-are-the-security-risks-of-setting-access-control-allow-origin#comment67925248_19415564">Brad</a></p>
<blockquote>
<p>Suppose you have a common home router, such as a Linksys WRT54g or
  something. Suppose that router allows cross-origin requests. A script
  on my web page could make HTTP requests to common router IP addresses
  (like 192.168.1.1) and reconfigure your router to allow attacks. It
  can even use your router directly as a DDoS node. (Most routers have
  test pages which allow for pings or simple HTTP server checks. These
  can be abused en masse.)</p>
</blockquote>
<p>– <a href="http://stackoverflow.com/questions/12001269/what-are-the-security-risks-of-setting-access-control-allow-origin#comment67925291_19415564">Brad</a></p>
<p>I feel that these comments should have been answers, because they explain the problem with a reallife example.</p>
</div></text><author><a href="/posts/43028612/revisions" id="history-43028612" title="show revision history for this post">
        Christian Gollhardt
        </a></author><comments><comment><text><span class="comment-copy">Except this won't work. "The string '*' cannot be used for a resource that supports credentials." <a href="https://www.w3.org/TR/cors/#resource-requests" rel="nofollow noreferrer">w3.org/TR/cors/#resource-requests</a></span></text><author><a class="comment-user" href="/users/5136654/bayotop" title="155 reputation">bayotop</a></author></comment></comments></answer></answers></post>