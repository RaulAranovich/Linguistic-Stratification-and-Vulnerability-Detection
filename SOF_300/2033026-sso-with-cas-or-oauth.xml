<?xml version="1.0" encoding="utf-8"?>
<post><title>security - SSO with CAS or OAuth? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I wonder if I should use the <a href="http://www.jasig.org/cas" rel="noreferrer">CAS</a> protocol or <a href="http://oauth.net/" rel="noreferrer">OAuth</a> + some authentication provider for single sign-on.</p>
<p>Example Scenario:</p>
<ol>
<li>A User tries to access a protected resource, but is not authenticated.</li>
<li>The application redirects the user to the SSO server.</li>
<li>If beeing authenticated the user gets a token from the SSO server.</li>
<li>The SSO redirects to the original application.</li>
<li>The original application checks the token against the SSO server.</li>
<li>If the token is ok, access will be allowed and the application knows of the user id.</li>
<li>The user performs a log-out and is logged out from all connected application at the same time (single sign-out).</li>
</ol>
<p>As far as I understand that is exactly what was CAS invented for. CAS clients have to implement the CAS protocol to use the authentication service. Now I'm wondering about to use CAS or OAuth at the client (consumer) site. Is OAuth a replacement for that part of CAS? Should OAuth as a new de-facto standard be preferred? Is there an easy to use (not Sun OpenSSO!) replacement for the authentication part of CAS supporting different methods like username/password, OpenID, TLS certifactes ...?</p>
<p>Context:</p>
<ul>
<li>Different applications should rely on the authentication of the SSO server and should use something session-like.</li>
<li>The applications can be GUI web applications or (REST) serivces.</li>
<li>The SSO server must be provide a user id, which is necessary to get more information about the user like roles, email and so on from a central user information store.</li>
<li>Single Sign-out should be possible.</li>
<li>Most clients are written in Java or PHP.</li>
</ul>
<p>I've just <a href="http://hueniverse.com/2009/11/wrap-and-the-demise-of-the-oauth-community/" rel="noreferrer">discovered WRAP</a>, which could become the OAuth successor. It is a new protocol specified by Microsoft, Google and Yahoo.</p>
<p><strong>Addendum</strong></p>
<p>I've learned that OAuth was not designed for authentication even it could be used to implement SSO, but only together with a SSO service like OpenID.</p>
<p>OpenID seems to me to be the "new CAS". CAS has some features OpenID misses (like single sign-out), but it should not be to hard to add the missing parts in a particular scenario. I think OpenID has broad acceptance and it is better to integrate OpenID into applications or application servers. I know that CAS also supports OpenID, but I think CAS is dispensable with OpenID.</p>
</div></text><author><a href="/users/238134/deamon">deamon</a></author><comments><comment><text><span class="comment-copy">Single sign-out is an anti-feature.  All of the user studies I'm aware of that have covered it have indicated that it's anywhere from mildly to extremely confusing to novice and power users alike.  I personally have to use a system that makes use of single sign-out on a daily basis, and I find it incredibly irritating.  It's almost never the behavior I want.</span></text><author><a class="comment-user" href="/users/90723/bob-aman" title="25,955 reputation">Bob Aman</a></author></comment><comment><text><span class="comment-copy">Don't agree that single sign-out is an antifeature. It all depends on the applications in question. For web applications that somehow relate to eachother, i.e. google mail and google calendar, it makes sense that if you loggout explicitly out of one, that you logout of the other. In cases with apps where there is no apparent "relationship", I do agree with Bob.</span></text><author><a class="comment-user" href="/users/471842/ashwoods" title="1,730 reputation">ashwoods</a></author></comment><comment><text><span class="comment-copy">Note that this question was originally asked before OAuth 2.0 had been introduced, so the information related to OAuth may no longer be correct.</span></text><author><a class="comment-user" href="/users/48523/andrew" title="71,058 reputation">Andrew</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>OpenID is not a 'successor' or 'substitute' for CAS, they're different, in intent and in implementation.</p>
<p>CAS <strong>centralizes</strong> authentication. Use it if you want all your (probably internal) applications to ask users to login to a single server (all applications are configured to point to a single CAS server).</p>
<p>OpenID <strong>decentralizes</strong> authentication. Use it if you want your application to accept users login to whatever authentication service they want (the user provides the OpenID server address - in fact, the 'username' is the server's URL).</p>
<p>None of the above handle authorization (without extensions and/or customization).</p>
<p>OAuth handles authorization, but it is not a substitute for the traditional 'USER_ROLES table' (user access). It handles authorization for third-parties.</p>
<p>For example, you want your application to integrate with Twitter: a user could allow it to tweet automatically when they update their data or post new content. You want to access some third-party service or resource on behalf of a user, without getting his password (which is obviously unsecure for the user). The application asks Twitter for access, the <strong>user</strong> authorizes it (through Twitter), and then the app may have access.</p>
<p>So, OAuth is not about Single Sign-On (nor a substitute for the CAS protocol). It is not about <strong>you</strong> controlling what the user can access. It is about letting the <strong>user</strong> to control how <strong>their</strong> resources may be accessed by third-parties. Two very different use-cases.</p>
<p>To the context you described, CAS is probably the right choice.</p>
</div></text><author><a href="/users/176897/tetsuo">tetsuo</a></author><comments><comment><text><span class="comment-copy">Although OAuth is mainly about authorization, it can be used as if its a central authentication server. Like the way Google OAuth account is used by many sites (including SO) for authentication, without actually using any service from the OAuth provider.</span></text><author><a class="comment-user" href="/users/462865/amir-ali-akbari" title="2,472 reputation">Amir Ali Akbari</a></author></comment><comment><text><span class="comment-copy">Moreover, as said in <a href="http://stackoverflow.com/a/10226744/535203">Bertl reply</a> CAS now provides OAuth both as client or server.</span></text><author><a class="comment-user" href="/users/535203/anthony-o" title="5,179 reputation">Anthony O.</a></author></comment><comment><text><span class="comment-copy">Awesome answer! Thank you for clarifying!</span></text><author><a class="comment-user" href="/users/381201/emanuelcds" title="369 reputation">emanuelcds</a></author></comment><comment><text><span class="comment-copy">Is this answer still relevant now that OAuth 2.0 exists? How has your opinion changed with OAuth 2.0?</span></text><author><a class="comment-user" href="/users/48523/andrew" title="71,058 reputation">Andrew</a></author></comment><comment><text><span class="comment-copy">OAuth 2.0 is still an authorization protocol and not an authentication protocol but one can build on top of OAuth 2.0 to create an authentication protocol, which is what Facebook/LinkedIn etc. have done; the only standardized extension of OAuth 2.0 that provides authentication is OpenID Connect, which is the designated successor of OpenID</span></text><author><a class="comment-user" href="/users/3748349/hans-z" title="18,652 reputation">Hans Z.</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I tend to think of it this way:</p>
<p>Use CAS if you control/own the user authentication system and need to support a heterogenous set of servers and apps that need centralized authentication.</p>
<p>Use OAuth if you want to support user authentication from systems that you don't own/support (ie Google, Facebook, etc).</p>
</div></text><author><a href="/users/188071/lance-weber">Lance Weber</a></author><comments><comment><text><span class="comment-copy">OpenID is an authentication protocol, OAuth is an authorization protocol.</span></text><author><a class="comment-user" href="/users/164276/zenw0lf" title="641 reputation">zenw0lf</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p><a href="http://openid.net/" rel="noreferrer">OpenID</a> is an authentication protocol, <a href="http://oauth.net/" rel="noreferrer">OAuth</a> and <a href="http://wiki.oauth.net/OAuth-WRAP" rel="noreferrer">OAuth WRAP</a> are authorization protocols.  They can be combined with the <a href="http://step2.googlecode.com/svn/spec/openid_oauth_extension/latest/openid_oauth_extension.html" rel="noreferrer">hybrid OpenID extension</a>.</p>
<p>I'd strongly prefer to see people building on top of standards that have a lot of momentum (more available support, easier to get third parties involved), even if they aren't an exact fit for the application at hand.  In this case, OAuth has the momentum, not CAS.  You ought to be able to do all or at least nearly all of what you need to do with OAuth.  At some later point in the future, OAuth WRAP should simplify things further (it makes some worthwhile trade-offs by using a bearer token and pushing encryption down to the protocol layer), but it's still in its infancy, and in the meantime, OAuth will probably do the job just fine.</p>
<p>Ultimately, if you choose to use OpenID and OAuth, there are more libraries for more languages available to you and to anyone else who needs to integrate with the system.  You also have a lot more eyeballs looking at the protocols, making sure they really are as secure as they're supposed to be.</p>
</div></text><author><a href="/users/90723/bob-aman">Bob Aman</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Old post, but this might be useful:</p>
<p>CAS 3.5 will support oAuth as Client and Server.
See: <a href="https://wiki.jasig.org/display/CASUM/OAuth" rel="noreferrer">https://wiki.jasig.org/display/CASUM/OAuth</a></p>
</div></text><author><a href="/users/1249421/bertl">Bertl</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>To me, the real difference between SSO and OAuth is grant, not authentication 
because a server that implements OAuth obviously <em>has</em> authentication (you have to be logged in to your google, openId or facebook for OAuth to happen with the client app)</p>
<p>In SSO, a power user/sysadmin grants the final user access to an application beforehand on the "SSO app"
In OAuth, final user grants application access to his "data" on the "OAuth app"</p>
<p>I don't see why OAuth protocol couldn't be used as part of an SSO server. Just take out the grant screen from the flow and let the OAuth server lookup the grant from the backing db.</p>
<p>(my 2 cents)</p>
</div></text><author><a href="/users/299843/redben">redben</a></author><comments/></answer></answers></post>