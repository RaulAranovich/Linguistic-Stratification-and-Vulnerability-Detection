<?xml version="1.0" encoding="utf-8"?>
<post><title>security - Disable browser 'Save Password' functionality - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>One of the joys of working for a government healthcare agency is having to deal with all of the paranoia around dealing with PHI (Protected Health Information). Don't get me wrong, I'm all for doing everything possible to protect people's personal information (health, financial, surfing habits, etc.), but sometimes people get a little too jumpy.</p>
<p>Case in point: One of our state customers recently found out that the browser provides the handy feature to save your password. We all know that it has been there for a while and is completely optional and is up to the end user to decide whether or not it is a smart decision to use or not. However, there is a bit of an uproar at the moment and we are being demanded to find a way to disable that functionality for our site.</p>
<p><strong>Question</strong>: Is there a way for a site to tell the browser not to offer to remember passwords? I've been around web development a long time but don't know that I have come across that before.</p>
<p>Any help is appreciated.</p>
</div></text><author><a href="/users/531179/ulidtko">ulidtko</a></author><comments><comment><text><span class="comment-copy">You should provide a greasemonkey-script so people can re-enable it. I don't think users like to be forced to type the password every time...</span></text><author><a class="comment-user" href="/users/298479/thiefmaster" title="201,303 reputation">ThiefMaster<span class="mod-flair" title="moderator">♦</span></a></author></comment><comment><text><span class="comment-copy">The question deserves an upvote for being useful and clear. On the other hand i don't want people to find a solution to this "problem".</span></text><author><a class="comment-user" href="/users/12597/ian-boyd" title="94,195 reputation">Ian Boyd</a></author></comment><comment><text><span class="comment-copy">This is not always a "problem". I came here because firefox prompts to save a password for a form that contains WiFi/SSID password, not a login username/password form. It is very annoying and I want do stop it.</span></text><author><a class="comment-user" href="/users/2403845/srd" title="630 reputation">srd</a></author></comment><comment><text><span class="comment-copy">If the information is that critical, it should be protected by more than just a password.</span></text><author><a class="comment-user" href="/users/218294/sam-watkins" title="3,374 reputation">Sam Watkins</a></author></comment><comment><text><span class="comment-copy">One way it seems to work is not to use &lt;form&gt;. If you are using javascript to send the data (XHR), then you don't need it. I wanted to disable in a system that uses "one-time-password" authentication (no reason to store it). For user/pass authentications I wouldn't recommend to disable that feature.</span></text><author><a class="comment-user" href="/users/196507/lepe" title="15,150 reputation">lepe</a></author></comment><comment><text><span class="comment-copy">Probably you need to loose the grip on the authentication method you are familiar with and let it go if it really contradicts the requirement. Enforcing security policy with breaking the other security policy does not make system any more secure.</span></text><author><a class="comment-user" href="/users/205376/free-consulting" title="2,993 reputation">Free Consulting</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>I'm not sure if it'll work in all browsers but you should try setting autocomplete="off" on the form.</p>
<pre><code>&lt;form id="loginForm" action="login.cgi" method="post" autocomplete="off"&gt;
</code></pre>
<blockquote>
<p>The easiest and simplest way to disable Form <strong>and Password storage prompts</strong> and prevent form data from being cached in session history is to use the autocomplete form element attribute with value "off". </p>
<p>From <a href="http://developer.mozilla.org/En/How_to_Turn_Off_Form_Autocompletion" rel="noreferrer">http://developer.mozilla.org/En/How_to_Turn_Off_Form_Autocompletion</a></p>
</blockquote>
<p>Some minor research shows that this works in IE to but I'll leave no guarantees ;)</p>
<p><a href="http://stackoverflow.com/questions/32369/disable-browser-save-password-functionality#32408">@Joseph</a>: If it's a strict requirement to pass XHTML validation with the actual markup (don't know why it would be though) you could theoretically add this attribute with javascript afterwards but then users with js disabled (probably a neglectable amount of your userbase or zero if your site requires js) will still have their passwords saved.</p>
<p>Example with jQuery:</p>
<pre><code>$('#loginForm').attr('autocomplete', 'off');
</code></pre>
</div></text><author><a href="/users/2114/markus-olsson">Markus Olsson</a></author><comments><comment><text><span class="comment-copy">Just a quick comment, since this is changing, HTML5 adds the autocomplete attribute to the spec, so it is valid now.</span></text><author><a class="comment-user" href="/users/88404/tyler-egeto" title="5,207 reputation">Tyler Egeto</a></author></comment><comment><text><span class="comment-copy">firefox (3.6.15) doesnt seem to be regarding the autocomplete="off" at all.  I tried adding that to both the form and the password field, but it still fills the pwd when i press tab on the username field.  I alos tried changing the name attribute of the pwd field to something else, but looks like it uses the type="password" attribute (though i read it matches the 'name' attribute).  That too doesnt work.  Any thing else i can try?</span></text><author><a class="comment-user" href="/users/441783/hese" title="1,251 reputation">hese</a></author></comment><comment><text><span class="comment-copy">You can use the Chrome Autocomplete=On extension to defeat this :) <a href="https://chrome.google.com/webstore/detail/autocomplete-on/" rel="nofollow noreferrer">chrome.google.com/webstore/detail/autocomplete-on</a></span></text><author><a class="comment-user" href="/users/223478/neil-mcguigan" title="25,761 reputation">Neil McGuigan</a></author></comment><comment><text><span class="comment-copy">Just FYI, Microsoft decided that Internet Explorer 11 will no longer honor <code>autocomplete="off"</code> for <code>input type="password"</code> fields. <a href="http://msdn.microsoft.com/en-us/library/ie/ms533486%28v=vs.85%29.aspx" rel="nofollow noreferrer">msdn.microsoft.com/en-us/library/ie/ms533486%28v=vs.85%29.as‌​px</a></span></text><author><a class="comment-user" href="/users/3155705/jw-lim" title="1,224 reputation">JW Lim</a></author></comment><comment><text><span class="comment-copy">but I DO want autocomplete on my form, and DON'T want the browser to save show the "save password" popup.</span></text><author><a class="comment-user" href="/users/104380/vsync" title="30,683 reputation">vsync</a></author></comment><comment><text><span class="comment-copy">Just as @JWLim mentioned IE 11 dropping support for disabling password save functionality, so is Firefox.  <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=956906" rel="nofollow noreferrer">bugzilla.mozilla.org/show_bug.cgi?id=956906</a></span></text><author><a class="comment-user" href="/users/119975/gregory-cosmo-haun" title="1,006 reputation">Gregory Cosmo Haun</a></author></comment><comment><text><span class="comment-copy">@GregoryCosmoHaun Thanks for the info. It really does seem like the browsers are taking more and more power away from us developers :/ As far as I know we can still stop them from saving passwords if you seperate the 'Username' and 'Password' fields though. I've mentioned this in my <a href="http://stackoverflow.com/a/22215004/3155705">answer below</a>.</span></text><author><a class="comment-user" href="/users/3155705/jw-lim" title="1,224 reputation">JW Lim</a></author></comment><comment><text><span class="comment-copy">This doesn't work on chrome.</span></text><author><a class="comment-user" href="/users/315001/arviman" title="2,814 reputation">arviman</a></author></comment><comment><text><span class="comment-copy">yes, does not work for Chrome. No matter what the popup comes up.</span></text><author><a class="comment-user" href="/users/1369298/st-stefanov" title="157 reputation">st_stefanov</a></author></comment><comment><text><span class="comment-copy">Firefox (unfortunately) followed Microsoft's lead and "removed" the autocomplete support as well. For details see comment 100 in the following issue discussion: <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=956906" rel="nofollow noreferrer">bugzilla.mozilla.org/show_bug.cgi?id=956906</a></span></text><author><a class="comment-user" href="/users/921549/bouncing-bit" title="263 reputation">Bouncing Bit</a></author></comment><comment><text><span class="comment-copy">Solution for chrome here <a href="http://stackoverflow.com/a/29582380/4462191">stackoverflow.com/a/29582380/4462191</a></span></text><author><a class="comment-user" href="/users/4462191/camiblanch" title="1,279 reputation">camiblanch</a></author></comment><comment><text><span class="comment-copy">Now, not work for Firefox 38+ <a href="https://www.mozilla.org/en-US/firefox/38.0/releasenotes/" rel="nofollow noreferrer">mozilla.org/en-US/firefox/38.0/releasenotes</a></span></text><author><a class="comment-user" href="/users/1675907/illuminator" title="128 reputation">Illuminator</a></author></comment><comment><text><span class="comment-copy">Not works at all on firefox latest verion</span></text><author><a class="comment-user" href="/users/1138557/thorin" title="1,273 reputation">Thorin</a></author></comment><comment><text><span class="comment-copy">This is ignored by most modern browsers guys... <a href="http://caniuse.com/#feat=input-autocomplete-onoff" rel="nofollow noreferrer">caniuse.com/#feat=input-autocomplete-onoff</a></span></text><author><a class="comment-user" href="/users/425741/alejandro-iglesias" title="11,571 reputation">Alejandro Iglesias</a></author></comment><comment><text><span class="comment-copy">This won't work on any modern browser.</span></text><author><a class="comment-user" href="/users/317908/michael-kuhinica" title="421 reputation">Michael Kuhinica</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I had been struggling with this problem a while, with a unique twist to the problem.  Privileged users couldn't have the saved passwords work for them, but normal users needed it.  This meant privileged users had to log in twice, the second time enforcing no saved passwords.</p>
<p>With this requirement, the standard <code>autocomplete="off"</code> method doesn't work across all browsers, because the password may have been saved from the first login.  A colleague found a solution to replace the password field when it was focused with a new password field, and then focus on the new password field (then hook up the same event handler).  This worked (except it caused an infinite loop in IE6).  Maybe there was a way around that, but it was causing me a migraine.</p>
<p>Finally, I tried to just have the username and password outside of the form.  To my surprise, this worked!  It worked on IE6, and current versions of Firefox and Chrome on Linux.  I haven't tested it further, but I suspect it works in most if not all browsers (but it wouldn't surprise me if there was a browser out there that didn't care if there was no form).</p>
<p>Here is some sample code, along with some jQuery to get it to work:</p>
<pre><code>&lt;input type="text" id="username" name="username"/&gt;
&lt;input type="password" id="password" name="password"/&gt;

&lt;form id="theForm" action="/your/login" method="post"&gt;
  &lt;input type="hidden" id="hiddenUsername" name="username"/&gt;
  &lt;input type="hidden" id="hiddenPassword" name="password"/&gt;
  &lt;input type="submit" value="Login"/&gt;
&lt;/form&gt;

&lt;script type="text/javascript" language="JavaScript"&gt;
  $("#theForm").submit(function() {
    $("#hiddenUsername").val($("#username").val());
    $("#hiddenPassword").val($("#password").val());
  });
  $("#username,#password").keypress(function(e) {
    if (e.which == 13) {
      $("#theForm").submit();
    }
  });
&lt;/script&gt;
</code></pre>
</div></text><author><a href="/users/122/mike-stone">Mike Stone</a></author><comments><comment><text><span class="comment-copy">That looks like a good solution. It makes sense since the form that you send down does not itself include a password. I suppose to be sure you could have two forms, the first one just to ensure that the username and password are visible in all browsers.</span></text><author><a class="comment-user" href="/users/212378/alexis-wilke" title="7,751 reputation">Alexis Wilke</a></author></comment><comment><text><span class="comment-copy">i like your solution and implemented a similar on my site, is ridiculous how at today, browsers dont offer a simple way to solve this.</span></text><author><a class="comment-user" href="/users/209797/agelessessence" title="2,806 reputation">AgelessEssence</a></author></comment><comment><text><span class="comment-copy">Not sure if it's because I'm stuck using jquery 1.6, but the above jquery only worked after wrapping inside a $(document).ready(function(){ });</span></text><author><a class="comment-user" href="/users/947374/rgbflawed" title="640 reputation">rgbflawed</a></author></comment><comment><text><span class="comment-copy">The only correct soultion is this since some browsers wont accept autocomplete="off" any more!</span></text><author><a class="comment-user" href="/users/1482121/abadis" title="853 reputation">Abadis</a></author></comment><comment><text><span class="comment-copy">This doesn't work in safari.</span></text><author><a class="comment-user" href="/users/1488110/sivakumar" title="190 reputation">Sivakumar</a></author></comment><comment><text><span class="comment-copy">This was working fine for me in chrome, but recently is started again prompting for save password</span></text><author><a class="comment-user" href="/users/1615100/manoj" title="909 reputation">manoj</a></author></comment><comment><text><span class="comment-copy">Breaking the security feature with amateur grade code is a horrible solution in the fact.</span></text><author><a class="comment-user" href="/users/205376/free-consulting" title="2,993 reputation">Free Consulting</a></author></comment><comment><text><span class="comment-copy">One problem with this i see is the hidden password shows the actuall password text in the browser.</span></text><author><a class="comment-user" href="/users/852398/tim" title="1,426 reputation">Tim</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Well, its a very old post, but still I will give my solution, which my team had been trying to achieve for long. We just added a new input type="password" field inside the form and wrapped it in div and made the div hidden. Made sure that this div is before the actual password input. 
This worked for us and it didn't gave any Save Password option</p>
<p>Plunk - <a href="http://plnkr.co/edit/xmBR31NQMUgUhYHBiZSg?p=preview">http://plnkr.co/edit/xmBR31NQMUgUhYHBiZSg?p=preview</a> </p>
<p>HTML:</p>
<pre><code>&lt;form method="post" action="yoururl"&gt;
      &lt;div class="hidden"&gt;
        &lt;input type="password"/&gt;
      &lt;/div&gt;
      &lt;input type="text" name="username" placeholder="username"/&gt;
      &lt;input type="password" name="password" placeholder="password"/&gt;
    &lt;/form&gt;
</code></pre>
<p>CSS:</p>
<pre><code>.hidden {display:none;}
</code></pre>
</div></text><author><a href="/users/1122463/whyato8">whyAto8</a></author><comments><comment><text><span class="comment-copy">One advantage of this way vs the ones who use hidden inputs is that this way a password is never stored in a plaintext field</span></text><author><a class="comment-user" href="/users/15355/pvgoddijn" title="3,824 reputation">pvgoddijn</a></author></comment><comment><text><span class="comment-copy">@whyAto8 This didn't work for me in Chrome 47.0.2526.111 ... the trick to make it work was to add another field text in the hidden div. The browser ask to save the password BUT its says "Are you sure to save this crendetials?" and then it show a blank username and a blank password. This has worked.</span></text><author><a class="comment-user" href="/users/1009061/david-b%c3%a9langer" title="5,460 reputation">David Bélanger</a></author></comment><comment><text><span class="comment-copy">whyAto8's solution together with @David Bélanger's comment worked for me (none of the other solutions did). I should also mention that I added the two blank hidden fields BEFORE the ones actually used for data entry, and the duplicated (hidden) fields had the same respective names. This way Chrome (48.0.2564.103) did not even ask whether any password should be saved.</span></text><author><a class="comment-user" href="/users/1223767/vadim" title="585 reputation">Vadim</a></author></comment><comment><text><span class="comment-copy">No combination of this is working on Chrome 48.0.2564.116.  Even combined with DavidBelanger's comment, the Chrome popup asking you to save the password still caches the password if you click ok</span></text><author><a class="comment-user" href="/users/623842/chriso" title="237 reputation">ChrisO</a></author></comment><comment><text><span class="comment-copy">Not works for Google Chrome :(</span></text><author><a class="comment-user" href="/users/836018/clint-eastwood" title="814 reputation">Clint Eastwood</a></author></comment><comment><text><span class="comment-copy">Great answer .. Just may you please tell me why did you say <i>"Made sure that this div is before the actual password input"</i>? I put that <i>div</i> after that actual password input and still it works.. So why did you mention that?</span></text><author><a class="comment-user" href="/users/6381081/martin-aj" title="1,391 reputation">Martin AJ</a></author></comment><comment><text><span class="comment-copy">Hey, am sorry, I wouldn't be sure about the purpose, as I moved to another project.  What I think it was, that we wanted to have this hidden but also apply all the interactions which user was doing with actual input shown on UI. So, as soon as user does something on input, which is visible, we copied the interaction to the hidden one and passed on the data.</span></text><author><a class="comment-user" href="/users/1122463/whyato8" title="845 reputation">whyAto8</a></author></comment><comment><text><span class="comment-copy">Works for Google Chrome 53, iOS10 Safari, and IE11.  This was a serious pain in the butt to track down.  Definite up-vote!!</span></text><author><a class="comment-user" href="/users/1992235/poloholeset" title="120 reputation">PoloHoleSet</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>You can prevent the browser from matching the forms up by randomizing the name used for the password field on each show.  Then the browser sees a password for the same the url, but can't be sure it's the <em>same password</em>.  Maybe it's controlling something else.</p>
<p><strong>Update:</strong> note that this should be <em>in addition to</em> using autocomplete or other tactics, not a replacement for them, for the reasons indicated by others.</p>
<p>Also note that this will only prevent the browser from <em>auto-completing</em> the password. It won't prevent it from <em>storing</em> the password in whatever level of arbitrary the security the browser chooses to use.</p>
</div></text><author><a href="/users/3043/joel-coehoorn">Joel Coehoorn</a></author><comments><comment><text><span class="comment-copy">[@Joel](#32409) that might prevent the form from being auto-populated but would that prevent the browser from then asking to save the password for this <i>supposed</i> new form?</span></text><author><a class="comment-user" href="/users/792/joseph-pecoraro" title="2,522 reputation">Joseph Pecoraro</a></author></comment><comment><text><span class="comment-copy">I don't believe this will work now. In FF 13, I have a form with several password fields, all with different names. FF, once it saves a password for that page, sticks the saved password into ALL of the password fields. It does not care what the name of the fields are (I have "new_password" and "old_password" for example, and the saved password gets dumped into both of them). In this particular form I don't have a username to save the password against - just two password fields, in case that makes a difference.</span></text><author><a class="comment-user" href="/users/218208/jason" title="1,063 reputation">Jason</a></author></comment><comment><text><span class="comment-copy">Nods @Jason, giving the password field a new UUID for a name each time did nothing to defeat the browser's attempts to fill it in.</span></text><author><a class="comment-user" href="/users/1347608/f-p-freely" title="325 reputation">F. P. Freely</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Use real <a href="http://en.wikipedia.org/wiki/Two-factor_authentication" rel="noreferrer">two-factor authentication</a> to avoid the sole dependency on passwords which might be stored in many more places than the user's browser cache.</p>
</div></text><author><a href="/users/4918/david-schmitt">David Schmitt</a></author><comments><comment><text><span class="comment-copy">btw it's authentication not authentification</span></text><author><a class="comment-user" href="/users/191463/jonathan" title="32,837 reputation">Jonathan.</a></author></comment><comment><text><span class="comment-copy">@Jonathan Pity, i prefer <i>authentification</i></span></text><author><a class="comment-user" href="/users/12597/ian-boyd" title="94,195 reputation">Ian Boyd</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I have tested that adding autocomplete="off" in form tag in all major browsers. In fact, Most of the peoples in US using IE8 so far.</p>
<ol>
<li>IE8, IE9, IE10, Firefox, Safari are works fine. 

<blockquote>
<p>Browser not asking "save password". 
  Also, previously saved username &amp; password not populated.</p>
</blockquote></li>
<li>Chrome &amp; IE 11 not supporting the autocomplete="off" feature</li>
<li>FF supporting the autocomplete="off". but sometimes existing saved
credentials are populated.</li>
</ol>
<p><strong>Updated on June 11, 2014</strong></p>
<p>Finally, below is a cross browser solution using javascript and it is working fine in all browsers.</p>
<p>Need to remove "form" tag in login form. After client side validation, put that credentials in hidden form and submit it.</p>
<p>Also, add two methods. one for validation "validateLogin()" and another for listening enter event while click enter in textbox/password/button "checkAndSubmit()". because now login form does not have a form tag, so enter event not working here.</p>
<p><strong>HTML</strong></p>
<pre><code>&lt;form id="HiddenLoginForm" action="" method="post"&gt;
&lt;input type="hidden" name="username" id="hidden_username" /&gt;
&lt;input type="hidden" name="password" id="hidden_password" /&gt;
&lt;/form&gt;

Username: &lt;input type="text" name="username" id="username" onKeyPress="return checkAndSubmit(event);" /&gt; 
Password: &lt;input type="text" name="password" id="password" onKeyPress="return checkAndSubmit(event);" /&gt; 
&lt;input type="button" value="submit" onClick="return validateAndLogin();" onKeyPress="return checkAndSubmit(event);" /&gt; 
</code></pre>
<p><strong>Javascript</strong></p>
<pre><code>//For validation- you can modify as you like
function validateAndLogin(){
  var username = document.getElementById("username");
  var password = document.getElementById("password");

  if(username  &amp;&amp; username.value == ''){
    alert("Please enter username!");
    return false;
  }

  if(password &amp;&amp; password.value == ''){
    alert("Please enter password!");
    return false;
  }

  document.getElementById("hidden_username").value = username.value;
  document.getElementById("hidden_password").value = password.value;
  document.getElementById("HiddenLoginForm").submit();
}

//For enter event
function checkAndSubmit(e) {
 if (e.keyCode == 13) {
   validateAndLogin();
 }
}
</code></pre>
<p>Good luck!!!</p>
</div></text><author><a href="/users/1387002/asik">Asik</a></author><comments><comment><text><span class="comment-copy">Although this answer provide useful information, it does not really answer the question of <i>how</i> to stop browsers from saving passwords.</span></text><author><a class="comment-user" href="/users/3155705/jw-lim" title="1,224 reputation">JW Lim</a></author></comment><comment><text><span class="comment-copy">@JW Lim, I have updated the answer. Please look into it. Thanks!</span></text><author><a class="comment-user" href="/users/1387002/asik" title="4,925 reputation">Asik</a></author></comment><comment><text><span class="comment-copy">Seems to be not working in safari.</span></text><author><a class="comment-user" href="/users/1488110/sivakumar" title="190 reputation">Sivakumar</a></author></comment><comment><text><span class="comment-copy">@Sivakumar, Ok please include the OS and version of Safari. so that other people aware of the same. it was working in my system (windows 8, Safary 5)</span></text><author><a class="comment-user" href="/users/1387002/asik" title="4,925 reputation">Asik</a></author></comment><comment><text><span class="comment-copy">@Asik Safari 8.0.3 and Mac OS 10.10</span></text><author><a class="comment-user" href="/users/1488110/sivakumar" title="190 reputation">Sivakumar</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Firefox does not properly obey the <code>autocomplete=off</code> attribute when you switch fields with Tab.
The only way you could stop that is to add a fake hidden password field which tricks the browser to populate the password there.</p>
<pre><code>&lt;input type="text" id="username" name="username"/&gt;
&lt;input type="password" id="prevent_autofill" style="display:none"/&gt;
&lt;input type="password" id="password" name="password"/&gt;
</code></pre>
<p>It is an ugly hack, use it only if you really need it.</p>
<p>Note: this will effectively stop password saving, because FF will "save" the value of <code>#prevent_autofill</code> (which is empty). This way user's password is better secured. However it is an ugly hack because you change the browser behavior, which should be considered bad practice.</p>
</div></text><author><a href="/users/623288/venimus">venimus</a></author><comments><comment><text><span class="comment-copy">Still works in Firefox 35.0.1</span></text><author><a class="comment-user" href="/users/2986757/luke" title="205 reputation">Luke</a></author></comment><comment><text><span class="comment-copy">What's the point in preventing the browser from filling in the password but allowing it to store it? It only tricks the user into thinking that their password isn't stored while they're actually vulnerable.</span></text><author><a class="comment-user" href="/users/445517/codesinchaos" title="78,763 reputation">CodesInChaos</a></author></comment><comment><text><span class="comment-copy">This way it won't actually store your password, because you type into the other box, which is ignored by FF. Instead it will store an empty string.</span></text><author><a class="comment-user" href="/users/623288/venimus" title="4,141 reputation">venimus</a></author></comment><comment><text><span class="comment-copy">@CodesInChaos IMHO you should reconsider your downvote, because your concern is not valid</span></text><author><a class="comment-user" href="/users/623288/venimus" title="4,141 reputation">venimus</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Not really - the only thing you could realistically do is offer advice on the site; maybe, before their first time signing in, you could show them a form with information indicating that it is not recommended that they allow the browser to store the password.</p>
<p>Then the user will immediately follow the advice, write down the password on a post-it note and tape it to their monitor.</p>
</div></text><author><a href="/users/1790/jason-bunting">Jason Bunting</a></author><comments><comment><text><span class="comment-copy">You have to remember this is a <i>government</i> site, and such things are politically charged. If someone up high says, "it must not work like this", then what is realistic is not a part of the equation. The problem may be moved to Post-It notes, but the policy on those is for a different department to handle - the problem has been moved on ;-) And I'm actually being serious.</span></text><author><a class="comment-user" href="/users/218208/jason" title="1,063 reputation">Jason</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Just add <strong>readonly onfocus="this.removeAttribute('readonly');"</strong> besides <strong>autocomplete="off"</strong> to the input(s) that you do not want to remember form data (<code>username</code>, <code>password</code>, etc.) as shown below. </p>
<pre><code>&lt;input type="text" name="UserName" autocomplete="off" readonly 
    onfocus="this.removeAttribute('readonly');" &gt;

&lt;input type="password" name="Password" autocomplete="off" readonly 
    onfocus="this.removeAttribute('readonly');" &gt;
</code></pre>
<p>Tested on the latest versions of the major browsers i.e. <code>Google Chrome</code>, <code>Mozilla Firefox</code>, <code>Microsoft Edge</code>, etc. and works like a charm. Hope this helps...</p>
</div></text><author><a href="/users/1604048/murat-y%c4%b1ld%c4%b1z">Murat Yıldız</a></author><comments><comment><text><span class="comment-copy">Not working in Firefox 49.0.1</span></text><author><a class="comment-user" href="/users/2074346/kishoresahas" title="2,314 reputation">KishoreSahas</a></author></comment><comment><text><span class="comment-copy">@KishoreSahas I have just tested on <b>Firefox 49.0.1</b> and and seen that it is working as on the previous Firefox versions.</span></text><author><a class="comment-user" href="/users/1604048/murat-y%c4%b1ld%c4%b1z" title="3,410 reputation">Murat Yıldız</a></author></comment><comment><text><span class="comment-copy">@KishoreSahas Could you please post your code so that I can check?</span></text><author><a class="comment-user" href="/users/1604048/murat-y%c4%b1ld%c4%b1z" title="3,410 reputation">Murat Yıldız</a></author></comment><comment><text><span class="comment-copy">@Murat Yıldız: I have to implement the same and I followed your code.It is working fine for me in all browsers. Thank you !</span></text><author><a class="comment-user" href="/users/808409/sree" title="186 reputation">Sree</a></author></comment><comment><text><span class="comment-copy">@Sree I am happy that it was helpful for you :)</span></text><author><a class="comment-user" href="/users/1604048/murat-y%c4%b1ld%c4%b1z" title="3,410 reputation">Murat Yıldız</a></author></comment><comment><text><span class="comment-copy">@MuratYıldız : I have done actually. Thank you !</span></text><author><a class="comment-user" href="/users/808409/sree" title="186 reputation">Sree</a></author></comment><comment><text><span class="comment-copy">I just tested this and it didn't work for Firefox (52.0) unfortunately. It let me save the password at my first login, and let me log back in with the saved login a second time. After that, it did prefill it when I tabbed to the password field sometimes, but other times not (not sure what's up there). I see the password in "Saved Logins..." area and you can have it show you the password there. It did seem to work for Chrome (56.0).</span></text><author><a class="comment-user" href="/users/620054/mikato" title="456 reputation">mikato</a></author></comment><comment><text><span class="comment-copy">Just tested <b>Mozilla Firefox 52.0</b>, <b>Google Chrome 57.0</b>, <b>Microsoft Edge 38.1</b> and working like a charm!..</span></text><author><a class="comment-user" href="/users/1604048/murat-y%c4%b1ld%c4%b1z" title="3,410 reputation">Murat Yıldız</a></author></comment><comment><text><span class="comment-copy">@mikato Maybe you have applied something wrong, please retry again and let me know if it is working...</span></text><author><a class="comment-user" href="/users/1604048/murat-y%c4%b1ld%c4%b1z" title="3,410 reputation">Murat Yıldız</a></author></comment><comment><text><span class="comment-copy">@MuratYıldız Strangely it seemed that my own Firefox web browser could save the password still, but other people also with Firefox said that they could no longer save the password. But now, several days later, I also cannot save my password. So I guess it worked and somehow my browser had a delayed reaction. That might make me blame caching, but it seems strange still.</span></text><author><a class="comment-user" href="/users/620054/mikato" title="456 reputation">mikato</a></author></comment><comment><text><span class="comment-copy">@mikato I am happy that your problem has finally been solved and you make it work properly :)</span></text><author><a class="comment-user" href="/users/1604048/murat-y%c4%b1ld%c4%b1z" title="3,410 reputation">Murat Yıldız</a></author></comment><comment><text><span class="comment-copy">@mikato On the other hand, if it is helpful for you please do not forget to vote up so that other people can also benefit from this answer. Thanks...</span></text><author><a class="comment-user" href="/users/1604048/murat-y%c4%b1ld%c4%b1z" title="3,410 reputation">Murat Yıldız</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>What I have been doing is a combination of autocomplete="off" and clearing password fields using a javascript / jQuery.</p>
<p>jQuery Example:</p>
<pre><code>$(function() { 
    $('#PasswordEdit').attr("autocomplete", "off");
    setTimeout('$("#PasswordEdit").val("");', 50); 
});
</code></pre>
<p>By using <code>setTimeout()</code> you can wait for the browser to complete the field before you clear it, otherwise the browser will always autocomplete after you've clear the field.</p>
</div></text><author><a href="/users/283958/howard-young">Howard Young</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>if autocomplete="off" is not working...remove the form tag and use a div tag instead, then pass the form values using jquery to the server. This worked for me.</p>
</div></text><author><a href="/users/735597/nikhil-dinesh">Nikhil Dinesh</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Just so people realise - the 'autocomplete' attribute works most of the time, but power users can get around it using a bookmarklet.</p>
<p>Having a browser save your passwords actually increases protection against keylogging, so possibly the safest option is to save passwords in the browser but protect them with a master password (at least in Firefox).</p>
</div></text><author><a href="/users/605867/thrawn">Thrawn</a></author><comments><comment><text><span class="comment-copy"><i>"but power users can get around it"</i> - that is applicable to most application features, web or not, and shouldn't be a reason to limit the system. People can also write their passwords on post-its and put it on their monitor, you can only do so much for security from the application perspective, and providing meaningful default behaviour (not saving it locally) is a start.</span></text><author><a class="comment-user" href="/users/1729885/niels-keurentjes" title="28,387 reputation">Niels Keurentjes</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Markus raised a great point.  I decided to look up the <code>autocomplete</code> attribute and got the following: </p>
<blockquote>
<p>The only downside to using this
  attribute is that it is not standard
  (it works in IE and Mozilla browsers),
  and would cause XHTML validation to
  fail. I think this is a case where
  it's reasonable to break validation
  however.  <em>(<a href="http://www.petefreitag.com/item/481.cfm" rel="nofollow noreferrer">source</a>)</em></p>
</blockquote>
<p>So I would have to say that although it doesn't work 100% across the board it is handled in the major browsers so its a great solution.</p>
</div></text><author><a href="/users/792/joseph-pecoraro">Joseph Pecoraro</a></author><comments><comment><text><span class="comment-copy">i'm having this problem of validating as per the w3c standards. The thing is I want this functionality for a Mobile banking website. I've an assumption that mobile browsers are strict enough and may sometimes mess up the form if some invalid attribute is being used. What do you recommend in this case?</span></text><author><a class="comment-user" href="/users/282345/asgs" title="2,733 reputation">asgs</a></author></comment><comment><text><span class="comment-copy">I think that is an old style of thinking. Many recent mobile browsers are built off of WebKit and either support or gracefully ignore this attribute. I am not aware of how other countries, or browsers in older cell phones handle this but gracefully handling attributes / elements that are not known is fundamental to the a good browser. It "future proofs" the browser to not break as the web evolves. It may fall behind (not implementing new features) but it won't break. Hope that helps =)</span></text><author><a class="comment-user" href="/users/792/joseph-pecoraro" title="2,522 reputation">Joseph Pecoraro</a></author></comment><comment><text><span class="comment-copy">It should be rather a comment to the referred answer than an answer to the question itself.</span></text><author><a class="comment-user" href="/users/73603/t%c3%b6r%c3%b6k-g%c3%a1bor" title="18,731 reputation">Török Gábor</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I have a work around, which may help. </p>
<p>You could make a custom font hack. So, make a custom font, with all the characters as a dot / circle / star for example. Use this as a custom font for your website. Check how to do this in inkscape: <a href="http://www.youtube.com/watch?v=_KX-e6sijGE" rel="nofollow">how to make your own font</a></p>
<p>Then on your log in form use:</p>
<pre><code>&lt;form autocomplete='off'  ...&gt;
   &lt;input type="text" name="email" ...&gt;
   &lt;input type="text" name="password" class="password" autocomplete='off' ...&gt;
   &lt;input type=submit&gt;
&lt;/form&gt;
</code></pre>
<p>Then add your css:</p>
<pre><code>@font-face {
    font-family: 'myCustomfont';
    src: url('myCustomfont.eot');
    src: url('myCustomfont?#iefix') format('embedded-opentype'),
         url('myCustomfont.woff') format('woff'),
         url('myCustomfont.ttf') format('truetype'),
         url('myCustomfont.svg#myCustomfont') format('svg');
    font-weight: normal;
    font-style: normal;

}
.password {
  font-family:'myCustomfont';
}
</code></pre>
<p>Pretty cross browser compatible. I have tried IE6+, FF, Safari and Chrome. Just make sure that the oet font that you convert does not get corrupted. Hope it helps?</p>
</div></text><author><a href="/users/198762/dai-bok">Dai Bok</a></author><comments><comment><text><span class="comment-copy">really neat solution there is a password font <a href="http://www.director-online.com/dougwiki/index.php?title=Password_Font_%28ttf%29" rel="nofollow noreferrer">here</a></span></text><author><a class="comment-user" href="/users/2578037/andrew" title="6,482 reputation">andrew</a></author></comment><comment><text><span class="comment-copy">If you use such a solution you need to take into account that users can freely copy the text entered into this look-alike password field. Copy and cut functions are disabled on real password fields.</span></text><author><span class="comment-user">user246645</span></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>My js (jquery) workaround is to <strong>change password input type to text on form submit</strong>. The password could become visible for a second, so I also hide the input just before that. <strong>I would rather not use this for login forms</strong>, but it is useful (together with autocomplete="off") for example inside administration part of the website.</p>
<p>Try putting this inside a console (with jquery), before you submit the form.</p>
<pre class="lang-js prettyprint prettyprinted" style=""><code><span class="pln">$</span><span class="pun">(</span><span class="str">'form'</span><span class="pun">).</span><span class="pln">submit</span><span class="pun">(</span><span class="kwd">function</span><span class="pun">(</span><span class="pln">event</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    $</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">).</span><span class="pln">find</span><span class="pun">(</span><span class="str">'input[type=password]'</span><span class="pun">).</span><span class="pln">css</span><span class="pun">(</span><span class="str">'visibility'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'hidden'</span><span class="pun">).</span><span class="pln">attr</span><span class="pun">(</span><span class="str">'type'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'text'</span><span class="pun">);</span><span class="pln">
</span><span class="pun">});</span></code></pre>
<p>Tested on Chrome 44.0.2403.157 (64-bit).</p>
</div></text><author><a href="/users/1102219/ovalek">ovalek</a></author><comments><comment><text><span class="comment-copy">This actually works. This prevents the browser from saving the password. To prevent showing the password you could wrap the input field in a hidden div. And you can already do this if the DOM is loaded, no need to wait until you submit the form.</span></text><author><a class="comment-user" href="/users/1181067/ferry-kranenburg" title="1,381 reputation">Ferry Kranenburg</a></author></comment><comment><text><span class="comment-copy">Works on IE 11.0.9600.18161 !</span></text><author><a class="comment-user" href="/users/355438/lu55" title="8,458 reputation">Lu55</a></author></comment><comment><text><span class="comment-copy">Not work on FF 43.0.4</span></text><author><a class="comment-user" href="/users/1041457/vikram-saini" title="644 reputation">Vikram Saini</a></author></comment><comment><text><span class="comment-copy">That is true. Now I tried this in FF 44.0.2 and this hack doesn't work anymore... what a shame. In Chrome this still works.</span></text><author><a class="comment-user" href="/users/1102219/ovalek" title="47 reputation">ovalek</a></author></comment><comment><text><span class="comment-copy">You could replace the input[type=submit] or button[type=submit] with a regular button[type=button] and do this in the onclick handler. If no [type=submit] is present in the form, it will also prevent the form from being submitted with the enter key and the save password prompt from showing up.</span></text><author><a class="comment-user" href="/users/273865/steven-don" title="1,957 reputation">Steven Don</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>One way I know is to use (for instance) JavaScript to copy the value out of the password field before submitting the form.</p>
<p>The main problem with this is that the solution is tied to JavaScript.</p>
<p>Then again, if it can be tied to JavaScript you might as well hash the password on the client-side before sending a request to the server.</p>
</div></text><author><a href="/users/1830/huppie">Huppie</a></author><comments><comment><text><span class="comment-copy">Hashing on the client side is no substitute for hashing on the server side.  I'm uncertain as to whether it's any help at all (if done in addition).</span></text><author><a class="comment-user" href="/users/638544/brilliand" title="7,749 reputation">Brilliand</a></author></comment><comment><text><span class="comment-copy">Allowing hashing on the client side is dangerous because it means that an attacker doesn't need to crack the password from the hash, they can just use the hash to log in. The hash becomes password-equivalent.</span></text><author><a class="comment-user" href="/users/3408/rjmunro" title="15,778 reputation">rjmunro</a></author></comment><comment><text><span class="comment-copy">I agree with Brilliand that the hash on the client is useful only if you also have a hash on the server before saving the password in your database. However, having a hash on the client side can help a certain amount of problems with men in the middle. This being said, since the code will be available (at least on public sites) to hackers, it probably isn't as useful as it may seem.</span></text><author><a class="comment-user" href="/users/212378/alexis-wilke" title="7,751 reputation">Alexis Wilke</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The real problem is much deeper than just adding attributes to your HTML - this is common security concern, that's why people invented hardware keys and other crazy things for security. </p>
<p>Imagine you have autocomplete="off" perfectly working in all browsers. Would that help with security? Of course, no. Users will write down their passwords in textbooks, on stickers attached to their monitor where every office visitor can see them, save them to text files on the desktop and so on.</p>
<p>Generally, web application and web developer isn't responsible in any way for end-user security. End-users can protect themselves only. Ideally, they MUST keep all passwords in their head and use password reset functionality (or contact administrator) in case they forgot it. Otherwise there always will be a risk that password can be seen and stolen somehow.</p>
<p>So either you have some crazy security policy with hardware keys (like, some banks offer for Internet-banking which basically employs two-factor authentication) or NO SECURITY basically. Well, this is a bit over exaggerated of course. It's important to understand what are you trying to protect against:</p>
<ol>
<li>Not authorised access. Simplest login form is enough basically. There sometimes additional measures taken like random security questions, CAPTCHAs, password hardening etc.</li>
<li>Credential sniffing. HTTPS is A MUST if people access your web application from public Wi-Fi hotspots etc. Mention that even having HTTPS, your users need to change their passwords regularly. </li>
<li>Insider attack. There are two many examples of such, starting from simple stealing of your passwords from browser or those that you have written down somewhere on the desk (does not require any IT skills) and ending with session forging and intercepting local network traffic (even encrypted) and further accessing web application just like it was another end-user.</li>
</ol>
<p>In this particular post, I can see inadequate requirements put on developer which he will never be able to resolve due to the nature of the problem - end-user security. My subjective point is that developer should basically say NO and point on requirement problem rather than wasting time on such tasks, honestly. This does not absolutely make your system more secure, it will rather lead to the cases with stickers on monitors. Unfortunately, some bosses hear only what they want to hear. However, if I was you I would try to explain where the actual problem is coming from, and that autocomplete="off" would not resolve it unless it will force users to keep all their passwords exclusively in their head! Developer on his end cannot protect users completely, users need to know how to use system and at the same time do not expose their sensitive/secure information and this goes far beyond authentication. </p>
</div></text><author><a href="/users/372939/ruruskyi">ruruskyi</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>The simplest way to solve this problem is to place INPUT fields outside the FORM tag and add two hidden fields inside the FORM tag. Then in a submit event listener before the form data gets submitted to server copy values from visible input to the invisible ones.</p>
<p>Here's an example (you can't run it here, since the form action is not set to a real login script):</p>
<p></p><div class="snippet" data-hide="false" data-lang="js">
<div class="snippet-code">
<pre class="snippet-code-html lang-html prettyprint prettyprinted" style=""><code><span class="dec">&lt;!doctype html&gt;</span><span class="pln">
</span><span class="tag">&lt;html&gt;</span><span class="pln">
</span><span class="tag">&lt;head&gt;</span><span class="pln">
  </span><span class="tag">&lt;title&gt;</span><span class="pln">Login &amp; Save password test</span><span class="tag">&lt;/title&gt;</span><span class="pln">
  </span><span class="tag">&lt;meta</span><span class="pln"> </span><span class="atn">charset</span><span class="pun">=</span><span class="atv">"utf-8"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;script</span><span class="pln"> </span><span class="atn">src</span><span class="pun">=</span><span class="atv">"//ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"</span><span class="tag">&gt;&lt;/script&gt;</span><span class="pln">
</span><span class="tag">&lt;/head&gt;</span><span class="pln">

  </span><span class="tag">&lt;body&gt;</span><span class="pln">
      </span><span class="com">&lt;!-- the following fields will show on page, but are not part of the form --&gt;</span><span class="pln">
      </span><span class="tag">&lt;input</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"username"</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"text"</span><span class="pln"> </span><span class="atn">placeholder</span><span class="pun">=</span><span class="atv">"Username"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
      </span><span class="tag">&lt;input</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"password"</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"password"</span><span class="pln"> </span><span class="atn">placeholder</span><span class="pun">=</span><span class="atv">"Password"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">

      </span><span class="tag">&lt;form</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"loginForm"</span><span class="pln"> </span><span class="atn">action</span><span class="pun">=</span><span class="atv">"login.aspx"</span><span class="pln"> </span><span class="atn">method</span><span class="pun">=</span><span class="atv">"post"</span><span class="tag">&gt;</span><span class="pln">
        </span><span class="com">&lt;!-- thw following two fields are part of the form, but are not visible --&gt;</span><span class="pln">
        </span><span class="tag">&lt;input</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"username"</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"username"</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"hidden"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
        </span><span class="tag">&lt;input</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"password"</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"password"</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"hidden"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
        </span><span class="com">&lt;!-- standard submit button --&gt;</span><span class="pln">
        </span><span class="tag">&lt;button</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"submit"</span><span class="tag">&gt;</span><span class="pln">Login</span><span class="tag">&lt;/button&gt;</span><span class="pln">
      </span><span class="tag">&lt;/form&gt;</span><span class="pln">

    </span><span class="tag">&lt;script&gt;</span><span class="pln">
      </span><span class="com">// attache a event listener which will get called just before the form data is sent to server</span><span class="pln">
      $</span><span class="pun">(</span><span class="str">'form'</span><span class="pun">).</span><span class="pln">submit</span><span class="pun">(</span><span class="kwd">function</span><span class="pun">(</span><span class="pln">ev</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'xxx'</span><span class="pun">);</span><span class="pln">
        </span><span class="com">// read the value from the visible INPUT and save it to invisible one</span><span class="pln">
        </span><span class="com">// ... so that it gets sent to the server</span><span class="pln">
        $</span><span class="pun">(</span><span class="str">'#username'</span><span class="pun">).</span><span class="pln">val</span><span class="pun">(</span><span class="pln">$</span><span class="pun">(</span><span class="str">'.username'</span><span class="pun">).</span><span class="pln">val</span><span class="pun">());</span><span class="pln">
        $</span><span class="pun">(</span><span class="str">'#password'</span><span class="pun">).</span><span class="pln">val</span><span class="pun">(</span><span class="pln">$</span><span class="pun">(</span><span class="str">'.password'</span><span class="pun">).</span><span class="pln">val</span><span class="pun">());</span><span class="pln">
      </span><span class="pun">});</span><span class="pln">
    </span><span class="tag">&lt;/script&gt;</span><span class="pln">

  </span><span class="tag">&lt;/body&gt;</span><span class="pln">
</span><span class="tag">&lt;/html&gt;</span></code></pre>
<div class="snippet-result"><div class="snippet-ctas"><button type="button"><span class="icon-play-white _hover"></span> Run code snippet</button><input class="copySnippet btn-secondary" style="display: none;" type="button" value="Copy snippet to answer"/><button class="hideResults btn-clear" style="display: none;" type="button">Hide results</button><div class="popout-code"><a class="snippet-expand-link">Expand snippet</a></div></div><div class="snippet-result-code" style="display: none;"><iframe class="snippet-box-edit" frameborder="0" name="bbc55d5b-f0ee-8929-95ac-722da640a7f5" sandbox="allow-forms allow-modals allow-scripts"></iframe></div></div></div>
</div>
<p></p>
</div></text><author><a href="/users/268905/knee-cola">knee-cola</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Facing the same HIPAA issue and found a relatively easy solution,</p>
<ol>
<li><p>Create a hidden password field with the field name as an array.</p>
<pre><code>&lt;input type="password" name="password[]" style="display:none" /&gt;
</code></pre></li>
<li><p>Use the same array for the actual password field.</p>
<pre><code>&lt;input type="password" name="password[]" /&gt;
</code></pre></li>
</ol>
<p>The browser (Chrome) may prompt you to "Save password" but regardless if the user selects save, the next time they login the password will auto-populate the hidden password field, the zero slot in the array, leaving the 1st slot blank.</p>
<p>I tried defining the array, such as "password[part2]" but it still remembered. I think it throws it off if it's an unindexed array because it has no choice but to drop it in the first spot.</p>
<p>Then you use your programming language of choice to access the array, PHP for example,</p>
<pre><code>echo $_POST['password'][1];
</code></pre>
</div></text><author><a href="/users/4240993/mike">Mike</a></author><comments><comment><text><span class="comment-copy">With this you are hiding a security issue - the password's hash is still being stored in the browser's cache.</span></text><author><a class="comment-user" href="/users/1522292/alexander-burakevych" title="1,376 reputation">Alexander Burakevych</a></author></comment><comment><text><span class="comment-copy">Could you please clarify? The password would be sent as plain-text using POST. As far as I have read, POST requests cannot be cached. Are you saying there is an alternative to using POST to send data? Or are you saying that the password is stored in the browser, because it's not storing the password but the empty value at the beginning of the array, have you tested this method?</span></text><author><a class="comment-user" href="/users/4240993/mike" title="107 reputation">Mike</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I tried above <code>autocomplete="off"</code> and yet anything successful. if you are using angular js my recommendation is to go with button and the ng-click. </p>
<pre><code>&lt;button type="button" class="" ng-click="vm.login()" /&gt;
</code></pre>
<p>This already have a accepted answer im adding this if someone cant solve the problem with the accepted answer he can go with my mechanism. </p>
<p>Thanks for the question and the answers. </p>
</div></text><author><a href="/users/853671/ambarox">ambarox</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Because autocomplete="off" does not work for password fields, one must rely on javascript. Here's a simple solution based on answers found here.</p>
<p>Add the attribute data-password-autocomplete="off" to your password field:</p>
<pre><code>&lt;input type="password" data-password-autocomplete="off"&gt;
</code></pre>
<p>Include the following JS:</p>
<pre><code>$(function(){
    $('[data-password-autocomplete="off"]').each(function() {
        $(this).prop('type', 'text');
        $('&lt;input type="password"/&gt;').hide().insertBefore(this);
        $(this).focus(function() {
            $(this).prop('type', 'password');
        });
    });     
});
</code></pre>
<p>This solution  works for both Chrome and FF.</p>
</div></text><author><a href="/users/1892887/mfernandes">mfernandes</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I tested lots of solutions. Dynamic password field name, multiple password fields (invisible for fake ones), changing input type from "text" to "password", autocomplete="off", autocomplete="new-password",... but nothing solved it with recent browser.</p>
<p>To get rid of password remember, I finally treated the password as input field, and "blur" the text typed. </p>
<p>It is less "safe" than a native password field since selecting the typed text would show it as clear text, but password is not remembered. It also depends on having Javascript activated.</p>
<p>You will have estimate the risk of using below proposal vs password remember option from navigator.</p>
<p>While password remember can be managed (disbaled per site) by the user, it's fine for a personal computer, not for a "public" or shared computer.</p>
<p>I my case it's for a ERP running on shared computers, so I'll give it a try to my solution below. </p>
<pre><code>&lt;input style="background-color: rgb(239, 179, 196); color: black; text-shadow: none;" name="password" size="10" maxlength="30" onfocus="this.value='';this.style.color='black'; this.style.textShadow='none';" onkeypress="this.style.color='transparent'; this.style.textShadow='1px 1px 6px green';" autocomplete="off" type="text"&gt;
</code></pre>
</div></text><author><a href="/users/2838910/cedric-simon">Cedric Simon</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<blockquote>
<p>Is there a way for a site to tell the browser not to offer to remember passwords?</p>
</blockquote>
<p>The website tells the browser that it is a password by using <code>&lt;input type="password"&gt;</code>.  So if you <em>must</em> do this from a website perspective then you would have to change that.  (Obviously I don't recommend this).</p>
<p>The best solution would be to have the user configure their browser so it won't remember passwords.</p>
</div></text><author><a href="/users/792/joseph-pecoraro">Joseph Pecoraro</a></author><comments><comment><text><span class="comment-copy">How is it obvious that you do not recommend changing a input type field? An elaboration of security issues would be helpful.</span></text><author><a class="comment-user" href="/users/36093/karl" title="4,635 reputation">Karl</a></author></comment><comment><text><span class="comment-copy">@karl: because having to type the password in the open allows "shoulder surfing", the process of gleaning a password by looking at the screen whil it is being typed.</span></text><author><a class="comment-user" href="/users/4918/david-schmitt" title="38,529 reputation">David Schmitt</a></author></comment><comment><text><span class="comment-copy">Not just human shoulder surfing, but spyware or viruses can watch your screen and see what has been typed in plaintext fields.</span></text><author><a class="comment-user" href="/users/36093/karl" title="4,635 reputation">Karl</a></author></comment><comment><text><span class="comment-copy">@karl: If you've got spyware/virus on your computer then no amount of asterisk protection is going to save you. It's no more difficult for an installed app to intercept what's being typed into a 'password' field than it is to do the same for a plain-text field.</span></text><author><a class="comment-user" href="/users/2114/markus-olsson" title="17,346 reputation">Markus Olsson</a></author></comment><comment><text><span class="comment-copy">Also, if the browser sees a regular text input instead of a password input, it's likely to stash the password in the <i>form autocomplete</i> database instead of the password database ... and then suggest it or even autofill it on some unrelated website!  So you're actually even worse off than when you started.</span></text><author><a class="comment-user" href="/users/388520/zwol" title="75,820 reputation">zwol</a></author></comment><comment><text><span class="comment-copy">"So if you must do this from a website perspective then you would have to change that" - but how???</span></text><author><a class="comment-user" href="/users/2783091/user2783091" title="343 reputation">user2783091</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>If you do not want to trust the autocomplete flag, you can make sure that the user types in the box using the onchange event. The code below is a simple HTML form. The hidden form element password_edited starts out set to 0. When the value of password is changed, the JavaScript at the top (pw_edited function) changes the value to 1. When the button is pressed, it checks the valueenter code here before submitting the form. That way, even if the browser ignores you and autocompletes the field, the user cannot pass the login page without typing in the password field. Also, make sure to blank the password field when focus is set. Otherwise, you can add a character at the end, then go back and remove it to trick the system. I recommend adding the autocomplete="off" to password in addition, but this example shows how the backup code works.</p>
<pre><code>&lt;html&gt;
  &lt;head&gt;
    &lt;script&gt;
      function pw_edited() {
        document.this_form.password_edited.value = 1;
      }
      function pw_blank() {
        document.this_form.password.value = "";
      }
      function submitf() {
        if(document.this_form.password_edited.value &lt; 1) {
          alert("Please Enter Your Password!");
        }
        else {
         document.this_form.submit();
        }
      }
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;form name="this_form" method="post" action="../../cgi-bin/yourscript.cgi?login"&gt;
      &lt;div style="padding-left:25px;"&gt;
        &lt;p&gt;
          &lt;label&gt;User:&lt;/label&gt;
          &lt;input name="user_name" type="text" class="input" value="" size="30" maxlength="60"&gt;
        &lt;/p&gt;
        &lt;p&gt;
          &lt;label&gt;Password:&lt;/label&gt;
          &lt;input name="password" type="password" class="input" size="20" value="" maxlength="50" onfocus="pw_blank();" onchange="pw_edited();"&gt;
        &lt;/p&gt;
        &lt;p&gt;
          &lt;span id="error_msg"&gt;&lt;/span&gt;
        &lt;/p&gt;
        &lt;p&gt;
          &lt;input type="hidden" name="password_edited" value="0"&gt;
          &lt;input name="submitform" type="button" class="button" value="Login" onclick="return submitf();"&gt;
        &lt;/p&gt;
      &lt;/div&gt;
    &lt;/form&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
</div></text><author><a href="/users/1431092/tom">Tom</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>i think by putting autocomplete="off" does not help at all</p>
<p>i have alternative solution,</p>
<pre><code>&lt;input type="text" name="preventAutoPass" id="preventAutoPass" style="display:none" /&gt;
</code></pre>
<p>add this before your password input. </p>
<p>eg:<code>&lt;input type="text" name="txtUserName" id="txtUserName" /&gt;
&lt;input type="text" name="preventAutoPass" id="preventAutoPass" style="display:none" /&gt;
&lt;input type="password" name="txtPass" id="txtPass" autocomplete="off" /&gt;</code></p>
<p>this does not prevent browser ask and save the password. but it prevent the password to be filled in.</p>
<p>cheer</p>
</div></text><author><a href="/users/3168622/biau">Biau</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>autocomplete="off" does not work for disabling the password manager in Firefox 31 and most likely not in some earlier versions, too.</p>
<p>Checkout the discussion at mozilla about this issue:
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=956906" rel="nofollow">https://bugzilla.mozilla.org/show_bug.cgi?id=956906</a></p>
<p>We wanted to use a second password field to enter a one-time password generated by a token. Now we are using a text input instead of a password input. :-(</p>
</div></text><author><a href="/users/1555826/andreas-stankewitz">Andreas Stankewitz</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I was given a similar task to disable the auto-filling up of login name and passwords by browser, after lot of trial and errors i found the below solution to be optimal. Just add the below controls before your original controls.</p>
<pre><code>&lt;input type="text" style="display:none"&gt;
&lt;input type="text" name="OriginalLoginTextBox"&gt;

&lt;input type="password" style="display:none"&gt;
&lt;input type="text" name="OriginalPasswordTextBox"&gt;
</code></pre>
<p>This is working fine for IE11 and Chrome 44.0.2403.107 </p>
</div></text><author><a href="/users/3732989/sheiky">Sheiky</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>autocomplete="off" works for most modern browsers, but another method I used that worked successfully with Epiphany (a WebKit-powered browser for GNOME) is to store a randomly generated prefix in session state (or a hidden field, I happened to have a suitable variable in session state already), and use this to alter the name of the fields. Epiphany still wants to save the password, but when going back to the form it won't populate the fields.</p>
</div></text><author><a href="/users/709813/peter-nelson">Peter Nelson</a></author><comments><comment><text><span class="comment-copy">That's even worse than storing them the usual way, since now the user doesn't see that the password was saved while not preventing an attacker from extracting the password from the store.</span></text><author><a class="comment-user" href="/users/445517/codesinchaos" title="78,763 reputation">CodesInChaos</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I haven't had any issues using this method:</p>
<p>Use autocomplete="off", add a hidden password field and then another non-hidden one.  The browser tries to auto complete the hidden one if it doesn't respect autocomplete="off"</p>
</div></text><author><a href="/users/427387/spechal">Spechal</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Another solution is to make the POST using an hidden form where all the input are of type hidden. The visible form will use input of type "password". The latter form will never be submitted and so the browser can't intercept at all the operation of login.</p>
</div></text><author><a href="/users/277389/lord-of-the-goo">Lord of the Goo</a></author><comments/></answer></answers></post>