<?xml version="1.0" encoding="utf-8"?>
<post><title>PHP Session Security - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>What are some guidelines for maintaining responsible session security with PHP?  There's information all over the web and it's about time it all landed in one place!</p>
</div></text><author><a href="/users/1039608/mattytommo">mattytommo</a></author><comments/></question><answers><answer><text><div class="post-text" itemprop="text">
<p>There are a couple of things to do in order to keep your session secure:</p>
<ol>
<li>Use SSL when authenticating users or performing sensitive operations.</li>
<li>Regenerate the session id whenever the security level changes (such as logging in). You can even regenerate the session id every request if you wish.</li>
<li>Have sessions time out</li>
<li>Don't use register globals</li>
<li>Store authentication details on the server. That is, don't send details such as username in the cookie.</li>
<li>Check the <code>$_SERVER['HTTP_USER_AGENT']</code>. This adds a small barrier to session hijacking. You can also check the IP address. But this causes problems for users that have changing IP address due to load balancing on multiple internet connections etc (which is the case in our environment here).</li>
<li>Lock down access to the sessions on the file system or use custom session handling</li>
<li>For sensitive operations consider requiring logged in users to provide their authenication details again</li>
</ol>
</div></text><author><a href="/users/486/grom">grom</a></author><comments><comment><text><span class="comment-copy">Using SSL only for some operations is not enough, unless you have separate sessions for encrypted and unencrypted traffic.  If you use single session over HTTPS and HTTP, attacker will steal it on first non-HTTPS request.</span></text><author><a class="comment-user" href="/users/27009/kornel" title="66,242 reputation">Kornel</a></author></comment><comment><text><span class="comment-copy">I agree with porneL.  Also, for number 6, if an attacker has your session id, wouldn't they also have access to your user agent?</span></text><author><a class="comment-user" href="/users/37309/chad" title="1,240 reputation">Chad</a></author></comment><comment><text><span class="comment-copy">If you regenerate the session id then the session id that an attacker steals on a non-HTTPS request is useless.</span></text><author><a class="comment-user" href="/users/486/grom" title="10,174 reputation">grom</a></author></comment><comment><text><span class="comment-copy">-1 the user agent is trivial to spoof.  What you are describing wastes code and is not a security system.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">Damn i wish i could give you another -1 for use of ssl.  At no point can the cookie be leaked over http,  thats laid out in OWASP A3.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">@The Rook, yes the User Agent can be spoofed. Its just one small little barrier. And what do you mean by at no point the cookie can be leaked over http. Yes it can be stolen. http is plain text.</span></text><author><a class="comment-user" href="/users/486/grom" title="10,174 reputation">grom</a></author></comment><comment><text><span class="comment-copy">@grom the only barrier is the one in your mind,  you are stopping no attack.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">@The Rook, it may be a trivial barrier (the attacker can capture a victim's user-agent using their own site) and relies on security through obscurity but it is still one extra barrier. If the User-Agent HTTP was to change during the session use, it would be extremely suspicious and most likely an attack. I never said you can use it alone. If you combine it with the other techniques you have a much more secure site.</span></text><author><a class="comment-user" href="/users/486/grom" title="10,174 reputation">grom</a></author></comment><comment><text><span class="comment-copy">@grom I think its like putting a piece of scotch tape across your door and saying it will prevent people from breaking in.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">If you're checking the user agent, you'll block all requests from IE8 users when they toggle compatibility mode.  See the fun I had tracking down this problem in my own code: <a href="http://serverfault.com/questions/200018/http-302-problem-on-ie7">serverfault.com/questions/200018/http-302-problem-on-ie7</a>.  I'm taking the user agent check out, because it's such a trivial thing to spoof, as others have said.</span></text><author><a class="comment-user" href="/users/40842/bestattendance" title="6,799 reputation">bestattendance</a></author></comment><comment><text><span class="comment-copy">Don't regenerate session on every request. It's susceptible to race conditions and you'll lose session sooner or later.</span></text><author><a class="comment-user" href="/users/27009/kornel" title="66,242 reputation">Kornel</a></author></comment><comment><text><span class="comment-copy">@grom Doesn't Chrome change it's user-agent automatically when it upgrades silently in the background while the user is using the browser? In this way you are blocking out real users for no real good reason. Don't forget that enhanced usability is also enhanced security.</span></text><author><a class="comment-user" href="/users/632951/pacerier" title="33,795 reputation">Pacerier</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>One guideline is to call <a href="http://www.php.net/session_regenerate_id" rel="nofollow noreferrer">session_regenerate_id</a> every time a session's security level changes.  This helps prevent session hijacking.</p>
</div></text><author><a href="/users/59/saint-groceon">saint_groceon</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>My two (or more) cents:</p>
<ul>
<li>Trust no one</li>
<li>Filter input, escape output (cookie, session data are your input too)</li>
<li>Avoid XSS (keep your HTML well formed, take a look at <a href="http://phptal.org">PHPTAL</a> or <a href="http://htmlpurifier.org/">HTMLPurifier</a>)</li>
<li><a href="http://en.wikipedia.org/wiki/Defense_in_Depth_%28computing%29">Defense in depth</a></li>
<li>Do not expose data</li>
</ul>
<p>There is a tiny but good book on this topic: <a href="http://phpsecurity.org/">Essential PHP Security by Chris Shiflett</a>.</p>
<p><a href="http://shiflett.org/images/essential-php-security-small.png">Essential PHP Security http://shiflett.org/images/essential-php-security-small.png</a></p>
<p>On the home page of the book you will find some interesting code examples and sample chapters.</p>
<p>You may use technique mentioned above (IP &amp; UserAgent), described here: <a href="http://devzone.zend.com/article/11906">How to avoid identity theft</a></p>
</div></text><author><a href="/users/234780/takeshin">takeshin</a></author><comments><comment><text><span class="comment-copy">+1 for XSS-prevention. Without that it's impossible to protect against CSRF, and thus somebody can "ride" the session without even getting the session ID.</span></text><author><a class="comment-user" href="/users/27009/kornel" title="66,242 reputation">Kornel</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I think one of the major problems (which is being addressed in PHP 6) is register_globals. Right now one of the standard methods used to avoid <code>register_globals</code> is to use the <code>$_REQUEST</code>, <code>$_GET</code> or <code>$_POST</code> arrays.</p>
<p>The "correct" way to do it (as of 5.2, although it's a little buggy there, but stable as of 6, which is coming soon) is through <a href="http://us.php.net/filter" rel="nofollow noreferrer">filters</a>.</p>
<p>So instead of:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">$username </span><span class="pun">=</span><span class="pln"> $_POST</span><span class="pun">[</span><span class="str">"username"</span><span class="pun">];</span></code></pre>
<p>you would do:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">$username </span><span class="pun">=</span><span class="pln"> filter_input</span><span class="pun">(</span><span class="pln">INPUT_POST</span><span class="pun">,</span><span class="pln"> </span><span class="str">'username'</span><span class="pun">,</span><span class="pln"> FILTER_SANITIZE_STRING</span><span class="pun">);</span></code></pre>
<p>or even just:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">$username </span><span class="pun">=</span><span class="pln"> filter_input</span><span class="pun">(</span><span class="pln">INPUT_POST</span><span class="pun">,</span><span class="pln"> </span><span class="str">'username'</span><span class="pun">);</span></code></pre>
</div></text><author><a href="/users/58/cmcculloh">cmcculloh</a></author><comments><comment><text><span class="comment-copy">This has no relation to the question at all.</span></text><author><a class="comment-user" href="/users/85616/the-pixel-developer" title="8,616 reputation">The Pixel Developer</a></author></comment><comment><text><span class="comment-copy">Really? Then why in the accepted answer do they mention not to use register globals? Wouldn't, as far as most run-of-the-mill developers are concerned, register globals and form variable handling fall under the umbrella of "sessions" even if it isn't technically part of the "session" object?</span></text><author><a class="comment-user" href="/users/58/cmcculloh" title="19,416 reputation">cmcculloh</a></author></comment><comment><text><span class="comment-copy">-1 This does not answer the question.</span></text><author><a class="comment-user" href="/users/181894/tomas" title="3,664 reputation">Tomas</a></author></comment><comment><text><span class="comment-copy">I agree, this does not <i>fully</i> answer the question, but it is definitely PART of the answer to the question. Again, this fleshes out a bullet point in the accepted answer, "Don't use register globals". This tells what to do instead.</span></text><author><a class="comment-user" href="/users/58/cmcculloh" title="19,416 reputation">cmcculloh</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p><a href="http://www.acros.si/papers/session_fixation.pdf" rel="nofollow noreferrer">This session fixation paper</a> has very good pointers where attack may come. See also <a href="http://en.wikipedia.org/wiki/Session_fixation" rel="nofollow noreferrer">session fixation page at Wikipedia</a>.</p>
</div></text><author><a href="/users/71964/raspi">raspi</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Using IP address isn't really the best idea in my experience. For example; my office has two IP addresses that get used depending on load and we constantly run into issues using IP addresses. </p>
<p>Instead, I've opted for storing the sessions in a separate database for the domains on my servers. This way no one on the file system has access to that session info. This was really helpful with phpBB before 3.0 (they've since fixed this) but it's still a good idea  I think.</p>
</div></text><author><a href="/users/538/eric-lamb">Eric Lamb</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>This is pretty trivial and obvious, but be sure to <a href="http://www.php.net/session_destroy" rel="nofollow noreferrer">session_destroy</a> after every use. This can be difficult to implement if the user does not log out explicitly, so a timer can be set to do this.</p>
<p>Here is a good <a href="http://www.elated.com/articles/javascript-timers-with-settimeout-and-setinterval/" rel="nofollow noreferrer">tutorial</a> on setTimer() and clearTimer().</p>
</div></text><author><a href="/users/50/helloandre">helloandre</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>The main problem with PHP sessions and security (besides session hijacking) comes with what environment you are in. By default PHP stores the session data in a file in the OS's temp directory. Without any special thought or planning this is a world readable directory so all of your session information is public to anyone with access to the server.</p>
<p>As for maintaining sessions over multiple servers. At that point it would be better to switch PHP to user handled sessions where it calls your provided functions to CRUD (create, read, update, delete) the session data. At that point you could store the session information in a database or memcache like solution so that all application servers have access to the data.</p>
<p>Storing your own sessions may also be advantageous if you are on a shared server because it will let you store it in the database which you often times have more control over then the filesystem.</p>
</div></text><author><a href="/users/200/john-downey">John Downey</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I set my sessions up like this-</p>
<p>on the log in page:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">$_SESSION</span><span class="pun">[</span><span class="str">'fingerprint'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> md5</span><span class="pun">(</span><span class="pln">$_SERVER</span><span class="pun">[</span><span class="str">'HTTP_USER_AGENT'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">.</span><span class="pln"> PHRASE </span><span class="pun">.</span><span class="pln"> $_SERVER</span><span class="pun">[</span><span class="str">'REMOTE_ADDR'</span><span class="pun">]);</span></code></pre>
<p>(phrase defined on a config page)</p>
<p>then on the header that is throughout the rest of the site:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">session_start</span><span class="pun">();</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$_SESSION</span><span class="pun">[</span><span class="str">'fingerprint'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> md5</span><span class="pun">(</span><span class="pln">$_SERVER</span><span class="pun">[</span><span class="str">'HTTP_USER_AGENT'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">.</span><span class="pln"> PHRASE </span><span class="pun">.</span><span class="pln"> $_SERVER</span><span class="pun">[</span><span class="str">'REMOTE_ADDR'</span><span class="pun">]))</span><span class="pln"> </span><span class="pun">{</span><span class="pln">       
    session_destroy</span><span class="pun">();</span><span class="pln">
    header</span><span class="pun">(</span><span class="str">'Location: http://website login page/'</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">exit</span><span class="pun">();</span><span class="pln">     
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/852876/chad">Chad</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<h1>php.ini</h1>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">session</span><span class="pun">.</span><span class="pln">cookie_httponly </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pln">
change session name </span><span class="kwd">from</span><span class="pln"> </span><span class="kwd">default</span><span class="pln"> PHPSESSID</span></code></pre>
<h1>eq Apache add header:</h1>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">X</span><span class="pun">-</span><span class="pln">XSS</span><span class="pun">-</span><span class="typ">Protection</span><span class="pln">    </span><span class="lit">1</span></code></pre>
</div></text><author><a href="/users/979474/user956584">user956584</a></author><comments><comment><text><span class="comment-copy">Can you elaborate?</span></text><author><a class="comment-user" href="/users/997407/domino" title="3,108 reputation">domino</a></author></comment><comment><text><span class="comment-copy">httpd.conf -&gt; &lt;FilesMatch "\.(php|phtml|aspx|htm|html)$"&gt;Header set X-XSS-Protection "1"&lt;/FilesMatch&gt;</span></text><author><a class="comment-user" href="/users/979474/user956584" title="2,758 reputation">user956584</a></author></comment><comment><text><span class="comment-copy">Be aware that <code>X-XSS-Protection</code> isn't really useful at all. In fact, the protecting algorithm itself could actually be exploited, making it worse than before.</span></text><author><a class="comment-user" href="/users/632951/pacerier" title="33,795 reputation">Pacerier</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I would check both IP and User Agent to see if they change</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$_SESSION</span><span class="pun">[</span><span class="str">'user_agent'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> $_SERVER</span><span class="pun">[</span><span class="str">'HTTP_USER_AGENT'</span><span class="pun">]</span><span class="pln">
    </span><span class="pun">||</span><span class="pln"> $_SESSION</span><span class="pun">[</span><span class="str">'user_ip'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> $_SERVER</span><span class="pun">[</span><span class="str">'REMOTE_ADDR'</span><span class="pun">])</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="com">//Something fishy is going on here?</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/1384652/teifion">Teifion</a></author><comments><comment><text><span class="comment-copy">IP can legitimately change if user is behind load-balanced proxy farm.</span></text><author><a class="comment-user" href="/users/27009/kornel" title="66,242 reputation">Kornel</a></author></comment><comment><text><span class="comment-copy">And user_agent can change every time a user upgrades their browser.</span></text><author><a class="comment-user" href="/users/69079/scotts" title="2,532 reputation">scotts</a></author></comment><comment><text><span class="comment-copy">@scotts I agree with the IP part but for the browser upgrade, you would set the session when they login so I don't see how they would upgrade there browser without creating a new session once they login again.</span></text><author><a class="comment-user" href="/users/143030/jasondavis" title="18,570 reputation">JasonDavis</a></author></comment><comment><text><span class="comment-copy">I believe the user_agent can also change when toggling between compatibly mode in IE8. It's also very easy to fake.</span></text><author><a class="comment-user" href="/users/70568/heather-herbert" title="682 reputation">Heather Herbert</a></author></comment><comment><text><span class="comment-copy">Yep but what about users that had static IP eq GSM and is changed every half hour. So, stored IP in Session + host name, WHEN IP != REMOTE_ADDR check host and compare hostanmes eq. 12.12.12.holand.nl-&gt; when is holand.nl == true. But some host had IP based hostname Then need compare mask 88.99.XX.XX</span></text><author><a class="comment-user" href="/users/979474/user956584" title="2,758 reputation">user956584</a></author></comment><comment><text><span class="comment-copy">@jasondavis There is a browser called Chrome.</span></text><author><a class="comment-user" href="/users/632951/pacerier" title="33,795 reputation">Pacerier</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>If you you use <a href="http://www.php.net/manual/en/function.session-set-save-handler.php" rel="nofollow noreferrer">session_set_save_handler()</a> you can set your own session handler. For example you could store your sessions in the database. Refer to the php.net comments for examples of a database session handler.</p>
<p>DB sessions are also good if you have multiple servers otherwise if you are using file based sessions you would need to make sure that each webserver had access to the same filesystem to read/write the sessions.</p>
</div></text><author><a href="/users/796/ejunker">ejunker</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>You need to be sure the session data are safe. By looking at your php.ini or using phpinfo() you can find you session settings. _session.save_path_ tells you where they are saved.</p>
<p>Check the permission of the folder and of its parents. It shouldn't be public (/tmp) or be accessible by other websites on your shared server.</p>
<p>Assuming you still want to use php session, You can set php to use an other folder by changing _session.save_path_ or save the data in the database by changing _session.save_handler_ .</p>
<p>You might be able to set _session.save_path_ in your php.ini (some providers allow it) or for apache + mod_php, in a .htaccess file in your site root folder:
<code>php_value session.save_path "/home/example.com/html/session"</code>. You can also set it at run time with _session_save_path()_ .</p>
<p>Check <a href="http://shiflett.org/articles/storing-sessions-in-a-database" rel="nofollow noreferrer">Chris Shiflett's tutorial</a> or <a href="http://framework.zend.com/manual/en/zend.session.savehandler.dbtable.html" rel="nofollow noreferrer">Zend_Session_SaveHandler_DbTable</a> to set and alternative session handler.</p>
</div></text><author><a href="/users/1771/dinoboff">Dinoboff</a></author><comments/></answer></answers></post>