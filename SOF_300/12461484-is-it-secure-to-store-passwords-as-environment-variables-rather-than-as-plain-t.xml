<?xml version="1.0" encoding="utf-8"?>
<post><title>ruby on rails - Is it secure to store passwords as environment variables (rather than as plain text) in config files? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I work on a few apps in rails, django (and a little bit of php), and one of the things that I started doing in some of them is storing database and other passwords as environment variables  rather than plain text in certain config files (or in settings.py, for django apps).</p>
<p>In discussing this with one of my collaborators, he suggested this is a poor practice - that perhaps this isn't as perfectly secure as it might at first seem.</p>
<p>So, I would like to know - is this a secure practice? Is it more secure to store passwords as plain text in these files (making sure, of course, not to leave these files in public repos or anything)?</p>
</div></text><author><a href="/users/722890/jay">jay</a></author><comments><comment><text><span class="comment-copy">Heroku mandates you get database passwords from environment vars - they must have considered these risks pointed out here but still seems to be the winning option.</span></text><author><a class="comment-user" href="/users/150412/lincoln-b" title="1,784 reputation">Lincoln B</a></author></comment><comment><text><span class="comment-copy">How are you loading the environmental variable? Is it from a file?</span></text><author><a class="comment-user" href="/users/939547/jsarma" title="567 reputation">jsarma</a></author></comment><comment><text><span class="comment-copy">My old verification on this question: <a href="http://security.stackexchange.com/questions/20282/is-passing-sensitive-data-through-the-process-environment-secure/" title="is passing sensitive data through the process environment secure">security.stackexchange.com/questions/20282/…</a></span></text><author><a class="comment-user" href="/users/884463/david-tonhofer" title="3,926 reputation">David Tonhofer</a></author></comment><comment><text><span class="comment-copy">Same env vars and files in the user home folder paradigm for AWS. [<a href="http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#cli-config-files]" rel="nofollow noreferrer">docs.aws.amazon.com/cli/latest/userguide/…</a></span></text><author><a class="comment-user" href="/users/2788374/lucian-ciufudean" title="146 reputation">lucian ciufudean</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>On a more theoretical level, I tend to think about levels for security in the following ways (in order of increasing strength) :</p>
<ul>
<li>No security.  Plain text.  Anyone that knows where to look, can access the data.</li>
<li>Security by Obfuscation.  You store the data (plaintext) someplace tricky, like an environment variable, or in a file that is meant to look like a configuration file.  An attacker will eventually figure out what's going on, or stumble across it.</li>
<li>Security provided by encryption that is trivial to break, (think caesar cipher!).</li>
<li>Security provided by encryption that can be broken with some effort.</li>
<li>Security provided by encryption that is impractical to break given current hardware.</li>
<li>The most secure system is one that no can use! :)</li>
</ul>
<p>Environment variables are <em>more</em> secure than plaintext files, because they are volatile/disposable, not saved;
   i.e. if you set only a local environment variable, like "set pwd=whatever," and then run the script, 
   with something that exits your command shell at the end of the script, then the variable no longer exists. 
Your case falls into the first two, which I'd say is fairly insecure.  If you were going to do this, I wouldn't recommend deploying outside your immediate intranet/home network, and then only for testing purposes.</p>
</div></text><author><a href="/users/459082/john-carter">John Carter</a></author><comments><comment><text><span class="comment-copy">And where is the comparison between environment variables and plain text files?</span></text><author><a class="comment-user" href="/users/243870/killiands" title="13,264 reputation">KillianDS</a></author></comment><comment><text><span class="comment-copy">I'd say plain text is "No Security", and using environment variables is "By Obfuscation" -- your essentially putting them somewhere where people likely won't look, or might not recognize them as passwords, but if they do you're hosed.</span></text><author><a class="comment-user" href="/users/459082/john-carter" title="4,006 reputation">John Carter</a></author></comment><comment><text><span class="comment-copy">Interesting. Thanks very much for this response. So environment variables aren't that much better than plain text, then?</span></text><author><a class="comment-user owner" href="/users/722890/jay" title="4,287 reputation">jay</a></author></comment><comment><text><span class="comment-copy">Also, for the three options "Security provided by encryption that..." how do these systems work? Eg, I need my site to be able to use mailers and amazon aws; as I understand it, I the app to have access to the username and password to link to these.</span></text><author><a class="comment-user owner" href="/users/722890/jay" title="4,287 reputation">jay</a></author></comment><comment><text><span class="comment-copy">It depends on the operating system -- At best case, environment variables are as vulnerable as plaintext files, but likely are worse.  With plaintext files you can set the read permissions on the files/directories to protect them.  IIRC for environment variables, they live in the memory space for the shell process, so an enterprising cracker could scan that space looking for them.</span></text><author><a class="comment-user" href="/users/459082/john-carter" title="4,006 reputation">John Carter</a></author></comment><comment><text><span class="comment-copy">And there are many ways to write an environment variable.</span></text><author><a class="comment-user" href="/users/150412/lincoln-b" title="1,784 reputation">Lincoln B</a></author></comment><comment><text><span class="comment-copy">The problem is the environmental variables have to be read from somewhere on startup, right? If it's being read from a plaintext file, you're in the same place you were before in terms of security. Does Heroku provide a way to specify an environmental variable through their GUI dashboard interface, so the variable will be automatically loaded on server restart? If this could be done securely, it would be a really nice feature to save the app from storing the password in a file. I use AWS, and I don't think it has this option.</span></text><author><a class="comment-user" href="/users/939547/jsarma" title="567 reputation">jsarma</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>As mentioned before, both methods do not provide any layer of additional "security" once your system is compromised. <strong>I believe that one of the strongest reasons to favor environment variables is version control</strong>: I've seen way too many database configurations etc. being accidentially stored in the version control system like GIT for every other developer to see (and whoops! it happened to me as well ...).</p>
<p>Not storing your passwords in files makes it impossible for them to be stored in the version control system.</p>
</div></text><author><a href="/users/795572/emrass">emrass</a></author><comments><comment><text><span class="comment-copy">A pretty reasonable alternative to <i>not</i> storing secret configuration settings in version control is storing them in a version control repository or project <i>separate</i> from the repository for the code.</span></text><author><a class="comment-user" href="/users/173497/kenny-evitt" title="4,418 reputation">Kenny Evitt</a></author></comment><comment><text><span class="comment-copy">@KennyEvitt that still leaves unsecured, plaintext passwords in a shared location that anyone with access to the repository can find and no way to track who accessed it.</span></text><author><a class="comment-user" href="/users/606725/fistoffury" title="1,914 reputation">FistOfFury</a></author></comment><comment><text><span class="comment-copy">@FistOfFury Sure, anyone with access to the repository ... can access the repository. The point of storing secrets in a <i>separate</i> repository is exactly so that one could control access to those secrets differently than the code itself. But repositories can be secured, e.g. you can store the secrets encrypted in the 'shared location'. And you could even track info about access to the repository in the shared location. But, of course, allowing anyone to access info implies that they can copy that info and thus access it anytime in the future without restriction or tracking.</span></text><author><a class="comment-user" href="/users/173497/kenny-evitt" title="4,418 reputation">Kenny Evitt</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Anytime you have to store a password, it is insecure. Period. There's no way to store an un-encrypted password securely. Now which of environment variables vs. config files is more "secure" is perhaps debatable. IMHO, if your system is compromised, it doesn't really matter where it's stored, a diligent hacker can track it down.</p>
</div></text><author><a href="/users/654031/chris-pratt">Chris Pratt</a></author><comments><comment><text><span class="comment-copy">For environment variables, I am expecting unix here... Environment variables are way less secure than files. Anyone can check the environment of a running process, but files can at least have ACLs.</span></text><author><a class="comment-user" href="/users/34771/vatine" title="14,616 reputation">Vatine</a></author></comment><comment><text><span class="comment-copy">Given that the developer has to store these passwords this isn't a terrifically helpful answer. Where do you suggest that he does store them?</span></text><author><a class="comment-user" href="/users/400790/peter-nixey" title="7,201 reputation">Peter Nixey</a></author></comment><comment><text><span class="comment-copy">@PeterNixey: That's the point. If he <i>has</i> to store them, then he can store them wherever he darn well pleases. He might as well make it the  sysmessage at login. Insecure is insecure. Once you've thrown security out the window, it's an open field.</span></text><author><a class="comment-user" href="/users/654031/chris-pratt" title="113,755 reputation">Chris Pratt</a></author></comment><comment><text><span class="comment-copy">@Vatine really Windows is more secure than *nix in this case? In Windows, User Environment Variables are only accessible to that user and to admin.</span></text><author><a class="comment-user" href="/users/223478/neil-mcguigan" title="25,771 reputation">Neil McGuigan</a></author></comment><comment><text><span class="comment-copy">@NeilMcGuigan There may be some differences between unix environments, but in the general case, yes, if you can see the arguments given to a binary, you can see the environment of the binary. Also, the process-listing program usually needs to have complete system privileges (although that is less true, these days).</span></text><author><a class="comment-user" href="/users/34771/vatine" title="14,616 reputation">Vatine</a></author></comment><comment><text><span class="comment-copy">@ChrisPratt are you suggesting there's a better alternative? If I want to deploy a web server that needs to connect to a DB what else would I do to give the password to the web server?</span></text><author><a class="comment-user" href="/users/64421/ben-mccann" title="8,016 reputation">Ben McCann</a></author></comment><comment><text><span class="comment-copy">It depends on your environment. In an ASP.NET environment, you can private key encrypt your database credentials. Other environments may offer similar functionality. Sometimes, you may not have a choice; my only point was that the question, in general, is a useless intellectual thought exercise -- plain text passwords are insecure, period. Trying to figure out which of various insecure methods is somewhat more secure than the other insecure method is a waste of time.</span></text><author><a class="comment-user" href="/users/654031/chris-pratt" title="113,755 reputation">Chris Pratt</a></author></comment><comment><text><span class="comment-copy">@Vatine Places exposing environment variables have permissions, too. Try <code>cat /proc/1/environ</code> for example.</span></text><author><a class="comment-user" href="/users/945780/chris-down" title="452 reputation">Chris Down</a></author></comment><comment><text><span class="comment-copy">@ChrisDown Try <code>ps axe</code> to see that being bypassed.</span></text><author><a class="comment-user" href="/users/34771/vatine" title="14,616 reputation">Vatine</a></author></comment><comment><text><span class="comment-copy">@Vatine Really? I don't see any environment for processes not owned by me in <code>ps axe</code>. <code>strace -e open ps axe</code> shows it's getting this info from <code>/proc/[pid]/environ</code>, which has permission enforcement (hence a bunch of <code>open("/proc/19795/environ", O_RDONLY)   = -1 EACCES (Permission denied)</code>).</span></text><author><a class="comment-user" href="/users/945780/chris-down" title="452 reputation">Chris Down</a></author></comment><comment><text><span class="comment-copy">Huh. Look at that, a problem has finally been fixed (used to be that <code>ps</code> was setuid and would happily show you the environment of pretty much everything).</span></text><author><a class="comment-user" href="/users/34771/vatine" title="14,616 reputation">Vatine</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Sorry I didn't have enough rep to comment, but I also wanted to add that if you're not careful, your shell might capture that password in it's command history as well. So running something like <code>$ pwd=mypassword my_prog</code> manually isn't as ephemeral as you might have hoped. </p>
</div></text><author><a href="/users/2607578/brianclements">brianclements</a></author><comments/></answer></answers></post>