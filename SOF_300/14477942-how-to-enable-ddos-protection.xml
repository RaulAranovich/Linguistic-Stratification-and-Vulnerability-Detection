<?xml version="1.0" encoding="utf-8"?>
<post><title>php - How to enable DDoS protection? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>DDoS (Distributed Denial of Service Attacks) are generally blocked on a server level right?</p>
<p>Is there a way to block it on a PHP level, or at least reduce it?</p>
<p>If not, what is the fastest and most common way to stop DDoS attacks?</p>
</div></text><author><a href="/users/342740/prix">Prix</a></author><comments><comment><text><span class="comment-copy">From having nothing better, <a href="https://modules.apache.org/archive/search.php?query=true" rel="nofollow noreferrer">here</a> there is a list of Apache modules that might potentially help. It seems not very rich, however, and the two projects of four (as searched by 'dos') appear pointing to nowhere.</span></text><author><a class="comment-user" href="/users/1439305/h22" title="11,426 reputation">h22</a></author></comment><comment><text><span class="comment-copy">Something like this? <a href="http://mod-antiloris.sourceforge.net/" rel="nofollow noreferrer">mod-antiloris.sourceforge.net</a></span></text><author><a class="comment-user" href="/users/362780/k-gun" title="5,892 reputation">K-Gun</a></author></comment><comment><text><span class="comment-copy">Edited my answer to have specific answers to your questions.</span></text><author><a class="comment-user" href="/users/1395668/andrew-alcock" title="15,223 reputation">Andrew Alcock</a></author></comment><comment><text><span class="comment-copy">A DDOS is successful when the system can no longer process all the request the attack is throwing at it. If you add code in your application that checks each request for "Is this a DDOS attack" then that code is actually doing more harm then good, because it just takes a little bit more resources for each request. This would only work in a very restrictive environment where anonymous request arent allowed anyway.</span></text><author><a class="comment-user" href="/users/434949/hugo-delsing" title="9,354 reputation">Hugo Delsing</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>DDOS is a family of attacks which overwhelm key systems in the datacenter including:</p>
<ul>
<li>The hosting center's network connection to the internet</li>
<li>The hosting center's internal network and routers</li>
<li>Your firewall and load balancers</li>
<li>Your web servers, application servers and database.</li>
</ul>
<p>Before you start on building your DDOS defence, consider what the worst-case value-at-risk is. For a non-critical, free-to-use service for a small community, the total value at risk might be peanuts. For a paid-for, public-facing, mission-critical system for an established multi-billion dollar business, the value might be the worth of the company. In this latter case, you shouldn't be using StackExchange :) Anyway, to defend against DDOS, you need a defence in-depth approach:</p>
<ol>
<li><strong>Work with your hosting center</strong> to understand the services they offer, including IP and port filtering at their network connections to the internet and firewall services they offer. This is critical: Many sites are pulled from the internet <em>by the hosting company</em> as the hosting company deals with the data center-wide disruption caused by the DDOS to one customer. Also, during an DDOS attack, you will be working very closely with the hosting center's staff, so know their emergency numbers and be on good terms with them :) They should be able to block of whole international regions, completely block specific services or network protocols and other broad-spectrum defensive measures, or alternatively allow only whitelisted IPs (depending on your business model)</li>
<li>While on the hosting center - use a <strong><a href="http://en.wikipedia.org/wiki/Content_delivery_network" rel="noreferrer">Content Delivery Network</a></strong> to distribute (mainly static) services close to your end users and hide your real servers from the DDOS architects. The full CDN is too big for a DDOS to take out all nodes in all countries; if the DDOS is focused on one country, at least other users are still OK. </li>
<li><p>Keep all your systems and software packages <strong>updated with the latest security patches</strong> - and I mean all of them:</p>
<ul>
<li>Managed switches - yup these sometimes need updating</li>
<li>Routers</li>
<li>Firewalls</li>
<li>Load balancers</li>
<li>Operating systems</li>
<li>Web servers</li>
<li>Languages and their libraries</li>
</ul></li>
<li><p>Ensure that you have a <strong>good firewall or security appliance</strong> set up <em>and regularly reviewed by a qualified security expert</em>. Strong rules on the firewall are a good defence against many simple attacks. It's also useful to be able to manage bandwidth available for each open service.</p></li>
<li><p>Have good <strong><a href="http://en.wikipedia.org/wiki/Network_monitoring" rel="noreferrer">network monitoring tools</a></strong> in place - this can help you understand: </p>
<ul>
<li>That you're under attack rather than simply being under heavy load</li>
<li>Where the attack is coming from (which may include countries you don't normally do business with) and </li>
<li>What the attack actually is (ports, services, protocols, IPs and packet contents)</li>
</ul></li>
<li><p>The attack might simply be heavy use of legitimate web site services (eg hitting 'legal' URIs running queries or inserting/updating/deleting data) - thousands or millions of requests coming from tens to millions of different IP addresses will bring a site to its knees. Alternatively, some services might be so expensive to run that only a few requests cause a DOS - think a really expensive report. So you need good <strong>application level monitoring</strong> of what is going on:</p>
<ul>
<li>Which services have been invoked and what arguments/data are sent (i.e. logging in your application)</li>
<li>Which users are doing the invoking and from which IPs (i.e. logging in your application)</li>
<li>What queries and inserts/updates/deletes the DB is performing</li>
<li>Load average, CPU utilization, disk i/o, network traffic on all computers (and VMs) in your system</li>
<li>Making sure that all this information is easily retrievable and that you can correlate logs from different computers and services (i.e. ensure all computers are time synchronized using ntp).</li>
</ul></li>
<li><p><strong>Sensible constraints and limits in your application</strong>. For example, you might:</p>
<ul>
<li>Use a QoS feature in the load balancer to send all anonymous sessions to separate application servers in your cluster, while logged-on users use another set. This prevents an application-level anonymous DDOS taking out valuable customers</li>
<li>Using a strong CAPCHA to protect anonymous services</li>
<li>Session timeouts</li>
<li>Have a session-limit or rate-limit on certain types of request like reports. Ensure that you can turn off anonymous access if necessary</li>
<li>Ensure that a user has a limit to the number of concurrent sessions (to prevent a hacked account logging on a million times)</li>
<li>Have different database application users for different services (eg transactional use vs. reporting use) and use database resource management to prevent one type of web request from overwhelming all others </li>
<li>If possible make these constraints dynamic, or at least configurable. This way, while you are under attack, you can set aggressive temporary limits in place ('throttling' the attack), such as only one session per user, and no anonymous access. This is certainly not great for your customers, but a lot better than having no service at all.</li>
</ul></li>
<li><p>Last, but not least, write a <strong>DOS Response Plan</strong> document and get this internally reviewed by all relevant parties: Business, Management, the SW dev team, the IT team and a security expert. The process of writing the document will cause you and your team to think through the issues and help you to be prepared if the worst should happen at 3am on your day off. The document should cover (among other things):</p>
<ul>
<li>What is at risk, and the cost to the business</li>
<li>Measures taken to protect the assets</li>
<li>How an attack is detected</li>
<li>The planned response and escalation procedure</li>
<li>Processes to keep the system and this document up-to-date</li>
</ul></li>
</ol>
<p>So, preamble aside, here are some specific answers:</p>
<blockquote>
<p>DDOS are generally blocked on a server level, right?</p>
</blockquote>
<p>Not really - most of the worst DDOS attacks are low-level (at the IP packet level) and are handled by routing rules, firewalls, and security devices developed to handle DDOS attacks.</p>
<blockquote>
<p>Is there a way to block it on a PHP level, or at least reduce it?</p>
</blockquote>
<p>Some DDOS attacks are aimed at the application itself, sending valid URIs and HTTP requests. When the rate of requests goes up, your server(s) begin to struggle and you will have an SLA outage. In this case, there are things you can do at the PHP level:</p>
<ul>
<li><p>Application level monitoring: Ensure each service/page logs requests in a way that you can see what is going on (so you can take actions to mitigate the attack). Some ideas:</p>
<ul>
<li><p>Have a log format that you can easily load into a log tool (or Excel or similar), and parse with command-line tools (grep, sed, awk). Remember that a DDOS will generate millions of lines of log. You will likely need to slice'n'dice your logs (especially with respect to URI, time, IP and user) to work out what is going on, and need to generate data such as:</p>
<ul>
<li>What URIs are being accessed</li>
<li>What URIs are failing at a high rate (a likely indicator of the specific URIs the attackers are attacking) </li>
<li>Which users are accessing the service</li>
<li>How many IPs are each user accessing the service from</li>
<li>What URIs are anonymous users accessing</li>
<li>What arguments are being used for a given service</li>
<li>Audit a specific users actions</li>
</ul></li>
<li><p>Log the IP address of each request. DON'T reverse DNS this - ironically the cost of doing this makes a DDOS easier for the attackers</p></li>
<li>Log the whole URI and HTTP method, eg "GET <a href="http://example.com/path/to/service?arg1=ddos" rel="noreferrer">http://example.com/path/to/service?arg1=ddos</a>"</li>
<li>Log the User ID if present</li>
<li>Log important HTTP arguments</li>
</ul></li>
<li><p>Sensible rate limits: You might implement limits on how many requests a given IP or User can make in a given time period. Could a legitimate customer make more than 10 requests per second? Can anonymous users access expensive reports at all?</p></li>
<li><p>CAPTCHA for anonymous access: Implement a CAPTCHA for all anonymous requests to verify that the user is a person, not a DDOS bot.</p></li>
</ul>
<blockquote>
<p>What's the fastest and most common way to stop DDOS attacks?</p>
</blockquote>
<p>The fastest is probably to give in to the blackmail, although this might not be desirable. </p>
<p>Otherwise, the first thing you to do is contact your hosting and/or CDN provider and work with them (if they haven't contacted you already asking what the hell is going on...). When a DDOS occurs, it will likely collaterally affect other customers of the hosting provider, and the provider may be under considerable pressure to shut down your site simply to protect their resources. Be prepared to share your logs (any and all information) with the provider; these logs, combined with their network monitors, may together provide enough information to block/mitigate the attack.</p>
<p>If you are expecting a DDOS, it's a very good idea to qualify your hosting provider on the level of protection they can provide. They should have DDOS experience and tools to mitigate it - understand their tools, processes and escalation procedures. Also ask about what support the hosting provider has from <em>their</em> upstream providers. These services might mean more up-front or monthly cost, but treat this as an insurance policy.</p>
<p>While under attack, you will need to grab your logs and mine them - try and work out the pattern of the attack. You should consider switching off anonymous access and throttling the services under attack (i.e. decrease the application's rate limit for the service). </p>
<p>If lucky and you have a small, fixed customer-base, you might be able to determine your valid customers IP addresses. If this is the case, you might switch to a white-list approach for a short while. Make sure all your customers know this is going on so they can call if they need to access from a new IP :)</p>
<hr/>
<p><a href="http://stackoverflow.com/users/11173/doug-mcclean">Doug McClean</a> has some great advice at: <a href="http://stackoverflow.com/a/1029613/1395668">http://stackoverflow.com/a/1029613/1395668</a></p>
</div></text><author><a href="/users/1395668/andrew-alcock">Andrew Alcock</a></author><comments><comment><text><span class="comment-copy">Amazing Answer. Very Details !!! I learned so much by just reading this.</span></text><author><a class="comment-user" href="/users/4480164/ihue" title="8,544 reputation">ihue</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>According the PHP part of the question;</p>
<p>Although I don't rely on PHP for this, it could be implemented but needs to consider all these possiblities or more;</p>
<ol>
<li>Attacker may change IP for each request</li>
<li>Attacker may pass parameter(s) to URI that target site doesn't care these parameter(s)</li>
<li>Attacker may restart the session before expiry
...</li>
</ol>
<p>Simple pseudo;</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pun">&lt;?</span><span class="pln">php
</span><span class="com">// Assuming session is already started</span><span class="pln">
$uri </span><span class="pun">=</span><span class="pln"> md5</span><span class="pun">(</span><span class="pln">$_SERVER</span><span class="pun">[</span><span class="str">'REQUEST_URI'</span><span class="pun">]);</span><span class="pln">
$exp </span><span class="pun">=</span><span class="pln"> </span><span class="lit">3</span><span class="pun">;</span><span class="pln"> </span><span class="com">// 3 seconds</span><span class="pln">
$hash </span><span class="pun">=</span><span class="pln"> $uri </span><span class="pun">.</span><span class="str">'|'</span><span class="pun">.</span><span class="pln"> time</span><span class="pun">();</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">isset</span><span class="pun">(</span><span class="pln">$_SESSION</span><span class="pun">[</span><span class="str">'ddos'</span><span class="pun">]))</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    $_SESSION</span><span class="pun">[</span><span class="str">'ddos'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $hash</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

list</span><span class="pun">(</span><span class="pln">$_uri</span><span class="pun">,</span><span class="pln"> $_exp</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> explode</span><span class="pun">(</span><span class="str">'|'</span><span class="pun">,</span><span class="pln"> $_SESSION</span><span class="pun">[</span><span class="str">'ddos'</span><span class="pun">]);</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$_uri </span><span class="pun">==</span><span class="pln"> $uri </span><span class="pun">&amp;&amp;</span><span class="pln"> time</span><span class="pun">()</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> $_exp </span><span class="pun">&lt;</span><span class="pln"> $exp</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    header</span><span class="pun">(</span><span class="str">'HTTP/1.1 503 Service Unavailable'</span><span class="pun">);</span><span class="pln">
    </span><span class="com">// die('Easy!');</span><span class="pln">
    </span><span class="kwd">die</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="com">// Save last request</span><span class="pln">
$_SESSION</span><span class="pun">[</span><span class="str">'ddos'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $hash</span><span class="pun">;</span><span class="pln">
</span><span class="pun">?&gt;</span></code></pre>
</div></text><author><a href="/users/362780/k-gun">K-Gun</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>The php level is too late in the request chain. </p>
<p>Putting your apache server behind an open source appliance may be a good option for you. </p>
<p><a href="http://tengine.taobao.org/" rel="nofollow">http://tengine.taobao.org/</a> has some documentation and source code more modules aimed at DDOS prevention. It is a expansion of nginx, so you can easily set it up as a reverse proxy for your apache instance.</p>
<p>See: <a href="http://blog.zhuzhaoyuan.com/2012/01/a-mechanism-to-help-write-web-application-firewalls-for-nginx/" rel="nofollow">http://blog.zhuzhaoyuan.com/2012/01/a-mechanism-to-help-write-web-application-firewalls-for-nginx/</a> for how to fight collision has DoS attacks.</p>
<p>Totally forgot too, <a href="http://www.cloudflare.com" rel="nofollow">http://www.cloudflare.com</a> is one the top free web application firewall, they have free and paid plans and will save your ass from DDOS we use it for alot of our high traffic sites just for its caching capabilities. It is awsome!</p>
</div></text><author><a href="/users/1052788/j-mcnally">j_mcnally</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>DDoS is best handled by very expensive, purpose-built network appliances. Hosts are generally not good at doing DDoS protection because they are subject to relatively low performance, state exhaustion, limited bandwidth, etc. Use of iptables, apache mods, and similar services can help in some situations if you have no access to DDoS mitigation hardware or a DDoS mitigation service, but it is far from ideal and still leaves you at risk of attack.</p>
</div></text><author><a href="/users/2022361/ryan">ryan</a></author><comments><comment><text><span class="comment-copy">We need a solution, and if there is no an ideal solution, were need partial solutions. Nobody needs an advice of kind "you just cannot do this".</span></text><author><a class="comment-user" href="/users/1439305/h22" title="11,426 reputation">h22</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>You can not do this in PHP level. DDOS is a kind of attack that send too many requests to your webserver. Your webserver will reject request before it call your PHP script.</p>
<p>If you are using Apache, here is some tips from Apache:
<a href="http://httpd.apache.org/docs/trunk/misc/security_tips.html" rel="nofollow">http://httpd.apache.org/docs/trunk/misc/security_tips.html</a></p>
</div></text><author><a href="/users/1066514/ndlinh">ndlinh</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>There are plugins you can use in apache for ddos/dos. 
Good start here
<a href="http://www.debianadmin.com/how-to-protect-apache-against-dosddos-or-brute-force-attacks.html" rel="nofollow">http://www.debianadmin.com/how-to-protect-apache-against-dosddos-or-brute-force-attacks.html</a></p>
<p>If you're on LEMP, you can check here. 
<a href="http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html" rel="nofollow">http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html</a></p>
<p>These are good inexpensive starting points.</p>
</div></text><author><a href="/users/1255825/jasong">JasonG</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>How about something like this on PHP side:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="com">//if user does not change IP, then ban the IP when more than 10 requests per second are detected in 1 second</span><span class="pln">
$limitps </span><span class="pun">=</span><span class="pln"> </span><span class="lit">10</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">isset</span><span class="pun">(</span><span class="pln">$_SESSION</span><span class="pun">[</span><span class="str">'first_request'</span><span class="pun">])){</span><span class="pln">
    $_SESSION</span><span class="pun">[</span><span class="str">'requests'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
    $_SESSION</span><span class="pun">[</span><span class="str">'first_request'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $_SERVER</span><span class="pun">[</span><span class="str">'REQUEST_TIME'</span><span class="pun">];</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
$_SESSION</span><span class="pun">[</span><span class="str">'requests'</span><span class="pun">]++;</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$_SESSION</span><span class="pun">[</span><span class="str">'requests'</span><span class="pun">]&gt;=</span><span class="lit">10</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> strtotime</span><span class="pun">(</span><span class="pln">$_SERVER</span><span class="pun">[</span><span class="str">'REQUEST_TIME'</span><span class="pun">])-</span><span class="pln">strtotime</span><span class="pun">(</span><span class="pln">$_SESSION</span><span class="pun">[</span><span class="str">'first_request'</span><span class="pun">])&lt;=</span><span class="lit">1</span><span class="pun">){</span><span class="pln">
    </span><span class="com">//write the IP to a banned_ips.log file and configure your server to retrieve the banned ips from there - now you will be handling this IP outside of PHP</span><span class="pln">
    $_SESSION</span><span class="pun">[</span><span class="str">'banip'</span><span class="pun">]==</span><span class="lit">1</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">elseif</span><span class="pun">(</span><span class="pln">strtotime</span><span class="pun">(</span><span class="pln">$_SERVER</span><span class="pun">[</span><span class="str">'REQUEST_TIME'</span><span class="pun">])-</span><span class="pln">strtotime</span><span class="pun">(</span><span class="pln">$_SESSION</span><span class="pun">[</span><span class="str">'first_request'</span><span class="pun">])</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">2</span><span class="pun">){</span><span class="pln">
    $_SESSION</span><span class="pun">[</span><span class="str">'requests'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
    $_SESSION</span><span class="pun">[</span><span class="str">'first_request'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $_SERVER</span><span class="pun">[</span><span class="str">'REQUEST_TIME'</span><span class="pun">];</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$_SESSION</span><span class="pun">[</span><span class="str">'banip'</span><span class="pun">]==</span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    header</span><span class="pun">(</span><span class="str">'HTTP/1.1 503 Service Unavailable'</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">die</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/450504/nvg">NVG</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Do <strong>NOT</strong> use PHP-based protection, it's horrible and will hardly have an impact at all! Configure your webserver to rate-limit requests, for example in Nginx using the limit_req module (<a href="http://nginx.org/en/docs/http/ngx_http_limit_req_module.html" rel="nofollow">http://nginx.org/en/docs/http/ngx_http_limit_req_module.html</a>)</p>
<p>Although, I would recommend using CloudFlare to combat layer-4 - however not layer-7 based attacks unless you're willing to pay.</p>
</div></text><author><a href="/users/3762944/justlloyd">JustLloyd</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p><strong>Anti DDOS</strong> steps:</p>
<ul>
<li>The very first important thing is to identify the ddos attack first. Identifying the ddos attack more early means more better for your server .</li>
<li>Getting better bandwidth available for your server. Always keep more than enough bandwidth which is required to for your server. This won’t prevent DDOS attack but it will take longer time. By which you will get some extra time to act.</li>
<li>If you own your own web server then you can defend at network parameter by  rate limit your router, add filters to drop packets to different sources of attacks, time out half opened connections more aggressively. Also set lower SYN, ICMP and UDP flood drop thresholds.</li>
<li>If you don’t have much idea about these things, then go and contact your hosting providers quickly. They can try their best prevent the DDOS attacks.</li>
<li>There are also Special DDOS mitigation service provided by <strong>Cloudflare</strong> and many other companies. By which they can help you to prevent the DDOS attacks. Also many companies offer cheap <strong>ddos protection</strong> and <strong>dos protection</strong>.</li>
</ul>
<p>For more <a href="http://buckydroid.com/ddos-attack-protection-mitigation/" rel="nofollow noreferrer">http://buckydroid.com/ddos-attack-protection-mitigation/</a> (<a href="http://buckydroid.com/ddos-attack-protection-mitigation/" rel="nofollow noreferrer">http://buckydroid.com/ddos-attack-protection-mitigation/</a>) </p>
</div></text><author><a href="/users/7100892/iamnoob">IamNOOB</a></author><comments/></answer></answers></post>