<?xml version="1.0" encoding="utf-8"?>
<post><title>java - Encrypt Password in Configuration Files? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I have a program that reads server information from a configuration file and would like to encrypt the password in that configuration that can be read by my program and decrypted.</p>
<p>Requirments:</p>
<ul>
<li>Encrypt plaintext password to be stored in the file</li>
<li>Decrypt the encrypted password read in from the file from my program</li>
</ul>
<p>Any reccomendations on how i would go about doing this? I was thinking of writing my own algorithm but i feel it would be terribly insecure.</p>
</div></text><author><a href="/users/1816580/artjom-b">Artjom B.</a></author><comments/></question><answers><answer><text><div class="post-text" itemprop="text">
<p>A simple way of doing this is to use Password Based Encryption in Java. This allows you to encrypt and decrypt a text by using a password.</p>
<p>This basically means initializing a <code>javax.crypto.Cipher</code> with algorithm <code>"AES/CBC/PKCS5Padding"</code> and getting a key from <code>javax.crypto.SecretKeyFactory</code> with the <code>"PBKDF2WithHmacSHA512"</code> algorithm.</p>
<p>Here is a code example (updated to replace the less secure MD5-based variant):</p>
<pre class="lang-java prettyprint prettyprinted" style=""><code><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">io</span><span class="pun">.</span><span class="typ">IOException</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">io</span><span class="pun">.</span><span class="typ">UnsupportedEncodingException</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">security</span><span class="pun">.</span><span class="typ">AlgorithmParameters</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">security</span><span class="pun">.</span><span class="typ">GeneralSecurityException</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">security</span><span class="pun">.</span><span class="typ">NoSuchAlgorithmException</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">security</span><span class="pun">.</span><span class="pln">spec</span><span class="pun">.</span><span class="typ">InvalidKeySpecException</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">Base64</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> javax</span><span class="pun">.</span><span class="pln">crypto</span><span class="pun">.</span><span class="typ">Cipher</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> javax</span><span class="pun">.</span><span class="pln">crypto</span><span class="pun">.</span><span class="typ">SecretKey</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> javax</span><span class="pun">.</span><span class="pln">crypto</span><span class="pun">.</span><span class="typ">SecretKeyFactory</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> javax</span><span class="pun">.</span><span class="pln">crypto</span><span class="pun">.</span><span class="pln">spec</span><span class="pun">.</span><span class="typ">IvParameterSpec</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> javax</span><span class="pun">.</span><span class="pln">crypto</span><span class="pun">.</span><span class="pln">spec</span><span class="pun">.</span><span class="typ">PBEKeySpec</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> javax</span><span class="pun">.</span><span class="pln">crypto</span><span class="pun">.</span><span class="pln">spec</span><span class="pun">.</span><span class="typ">SecretKeySpec</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ProtectedConfigFile</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">String</span><span class="pln"> password </span><span class="pun">=</span><span class="pln"> </span><span class="typ">System</span><span class="pun">.</span><span class="pln">getProperty</span><span class="pun">(</span><span class="str">"password"</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">password </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">IllegalArgumentException</span><span class="pun">(</span><span class="str">"Run with -Dpassword=&lt;password&gt;"</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="com">// The salt (probably) can be stored along with the encrypted data</span><span class="pln">
        </span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> salt </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">String</span><span class="pun">(</span><span class="str">"12345678"</span><span class="pun">).</span><span class="pln">getBytes</span><span class="pun">();</span><span class="pln">

        </span><span class="com">// Decreasing this speeds down startup time and can be useful during testing, but it also makes it easier for brute force attackers</span><span class="pln">
        </span><span class="kwd">int</span><span class="pln"> iterationCount </span><span class="pun">=</span><span class="pln"> </span><span class="lit">40000</span><span class="pun">;</span><span class="pln">
        </span><span class="com">// Other values give me java.security.InvalidKeyException: Illegal key size or default parameters</span><span class="pln">
        </span><span class="kwd">int</span><span class="pln"> keyLength </span><span class="pun">=</span><span class="pln"> </span><span class="lit">128</span><span class="pun">;</span><span class="pln">
        </span><span class="typ">SecretKeySpec</span><span class="pln"> key </span><span class="pun">=</span><span class="pln"> createSecretKey</span><span class="pun">(</span><span class="typ">System</span><span class="pun">.</span><span class="pln">getProperty</span><span class="pun">(</span><span class="str">"password"</span><span class="pun">).</span><span class="pln">toCharArray</span><span class="pun">(),</span><span class="pln">
                salt</span><span class="pun">,</span><span class="pln"> iterationCount</span><span class="pun">,</span><span class="pln"> keyLength</span><span class="pun">);</span><span class="pln">

        </span><span class="typ">String</span><span class="pln"> originalPassword </span><span class="pun">=</span><span class="pln"> </span><span class="str">"secret"</span><span class="pun">;</span><span class="pln">
        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Original password: "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> originalPassword</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">String</span><span class="pln"> encryptedPassword </span><span class="pun">=</span><span class="pln"> encrypt</span><span class="pun">(</span><span class="pln">originalPassword</span><span class="pun">,</span><span class="pln"> key</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Encrypted password: "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> encryptedPassword</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">String</span><span class="pln"> decryptedPassword </span><span class="pun">=</span><span class="pln"> decrypt</span><span class="pun">(</span><span class="pln">encryptedPassword</span><span class="pun">,</span><span class="pln"> key</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Decrypted password: "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> decryptedPassword</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">SecretKeySpec</span><span class="pln"> createSecretKey</span><span class="pun">(</span><span class="kwd">char</span><span class="pun">[]</span><span class="pln"> password</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> salt</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> iterationCount</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> keyLength</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">NoSuchAlgorithmException</span><span class="pun">,</span><span class="pln"> </span><span class="typ">InvalidKeySpecException</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">SecretKeyFactory</span><span class="pln"> keyFactory </span><span class="pun">=</span><span class="pln"> </span><span class="typ">SecretKeyFactory</span><span class="pun">.</span><span class="pln">getInstance</span><span class="pun">(</span><span class="str">"PBKDF2WithHmacSHA512"</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">PBEKeySpec</span><span class="pln"> keySpec </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">PBEKeySpec</span><span class="pun">(</span><span class="pln">password</span><span class="pun">,</span><span class="pln"> salt</span><span class="pun">,</span><span class="pln"> iterationCount</span><span class="pun">,</span><span class="pln"> keyLength</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">SecretKey</span><span class="pln"> keyTmp </span><span class="pun">=</span><span class="pln"> keyFactory</span><span class="pun">.</span><span class="pln">generateSecret</span><span class="pun">(</span><span class="pln">keySpec</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SecretKeySpec</span><span class="pun">(</span><span class="pln">keyTmp</span><span class="pun">.</span><span class="pln">getEncoded</span><span class="pun">(),</span><span class="pln"> </span><span class="str">"AES"</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> encrypt</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> property</span><span class="pun">,</span><span class="pln"> </span><span class="typ">SecretKeySpec</span><span class="pln"> key</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">GeneralSecurityException</span><span class="pun">,</span><span class="pln"> </span><span class="typ">UnsupportedEncodingException</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">Cipher</span><span class="pln"> pbeCipher </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Cipher</span><span class="pun">.</span><span class="pln">getInstance</span><span class="pun">(</span><span class="str">"AES/CBC/PKCS5Padding"</span><span class="pun">);</span><span class="pln">
        pbeCipher</span><span class="pun">.</span><span class="pln">init</span><span class="pun">(</span><span class="typ">Cipher</span><span class="pun">.</span><span class="pln">ENCRYPT_MODE</span><span class="pun">,</span><span class="pln"> key</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">AlgorithmParameters</span><span class="pln"> parameters </span><span class="pun">=</span><span class="pln"> pbeCipher</span><span class="pun">.</span><span class="pln">getParameters</span><span class="pun">();</span><span class="pln">
        </span><span class="typ">IvParameterSpec</span><span class="pln"> ivParameterSpec </span><span class="pun">=</span><span class="pln"> parameters</span><span class="pun">.</span><span class="pln">getParameterSpec</span><span class="pun">(</span><span class="typ">IvParameterSpec</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> cryptoText </span><span class="pun">=</span><span class="pln"> pbeCipher</span><span class="pun">.</span><span class="pln">doFinal</span><span class="pun">(</span><span class="pln">property</span><span class="pun">.</span><span class="pln">getBytes</span><span class="pun">(</span><span class="str">"UTF-8"</span><span class="pun">));</span><span class="pln">
        </span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> iv </span><span class="pun">=</span><span class="pln"> ivParameterSpec</span><span class="pun">.</span><span class="pln">getIV</span><span class="pun">();</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> base64Encode</span><span class="pun">(</span><span class="pln">iv</span><span class="pun">)</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="str">":"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> base64Encode</span><span class="pun">(</span><span class="pln">cryptoText</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> base64Encode</span><span class="pun">(</span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> bytes</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Base64</span><span class="pun">.</span><span class="pln">getEncoder</span><span class="pun">().</span><span class="pln">encodeToString</span><span class="pun">(</span><span class="pln">bytes</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> decrypt</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> string</span><span class="pun">,</span><span class="pln"> </span><span class="typ">SecretKeySpec</span><span class="pln"> key</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">GeneralSecurityException</span><span class="pun">,</span><span class="pln"> </span><span class="typ">IOException</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">String</span><span class="pln"> iv </span><span class="pun">=</span><span class="pln"> string</span><span class="pun">.</span><span class="pln">split</span><span class="pun">(</span><span class="str">":"</span><span class="pun">)[</span><span class="lit">0</span><span class="pun">];</span><span class="pln">
        </span><span class="typ">String</span><span class="pln"> property </span><span class="pun">=</span><span class="pln"> string</span><span class="pun">.</span><span class="pln">split</span><span class="pun">(</span><span class="str">":"</span><span class="pun">)[</span><span class="lit">1</span><span class="pun">];</span><span class="pln">
        </span><span class="typ">Cipher</span><span class="pln"> pbeCipher </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Cipher</span><span class="pun">.</span><span class="pln">getInstance</span><span class="pun">(</span><span class="str">"AES/CBC/PKCS5Padding"</span><span class="pun">);</span><span class="pln">
        pbeCipher</span><span class="pun">.</span><span class="pln">init</span><span class="pun">(</span><span class="typ">Cipher</span><span class="pun">.</span><span class="pln">DECRYPT_MODE</span><span class="pun">,</span><span class="pln"> key</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">IvParameterSpec</span><span class="pun">(</span><span class="pln">base64Decode</span><span class="pun">(</span><span class="pln">iv</span><span class="pun">)));</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">String</span><span class="pun">(</span><span class="pln">pbeCipher</span><span class="pun">.</span><span class="pln">doFinal</span><span class="pun">(</span><span class="pln">base64Decode</span><span class="pun">(</span><span class="pln">property</span><span class="pun">)),</span><span class="pln"> </span><span class="str">"UTF-8"</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> base64Decode</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> property</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">IOException</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Base64</span><span class="pun">.</span><span class="pln">getDecoder</span><span class="pun">().</span><span class="pln">decode</span><span class="pun">(</span><span class="pln">property</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>One problem remains: Where should you store the password that you use to encrypt the passwords? You can store it in the source file and obfuscate it, but it's not too hard to find it again. Alternatively, you can give it as a system property when you start the Java process (<code>-DpropertyProtectionPassword=...</code>).</p>
<p>The same issue remains if you use the KeyStore, which also is protected by a password. Basically, you will need to have one master password somewhere, and it's pretty hard to protect.</p>
</div></text><author><a href="/users/27658/johannes-brodwall">Johannes Brodwall</a></author><comments><comment><text><span class="comment-copy">Thanks for the code example, it's pretty much how i ended up doing it. In regards to the password that protects the passwords i ran into that same problem, i went witht the obfuscate it method for now but havnt come up with an acceptable solution yet, thanks for your suggestions.</span></text><author><a class="comment-user owner" href="/users/104998/petey-b" title="5,021 reputation">Petey B</a></author></comment><comment><text><span class="comment-copy">Theoretically, you could store that password as a system property, and read it at runtime. Assuming you only have access to that account / server, that would be the ultimate way to do it. Not to mention you could have different files, for different environments, and different property passwords for each.</span></text><author><a class="comment-user" href="/users/8528/spencer-kormos" title="4,547 reputation">Spencer Kormos</a></author></comment><comment><text><span class="comment-copy">"Alternatively, you can give it as a system property when you start the Java process (-DpropertyProtectionPassword=...)". Note that this would make it possible to extract the password using "ps fax" on (GNU/Linux)/UNIX.</span></text><author><a class="comment-user" href="/users/260805/ztyx" title="3,817 reputation">Ztyx</a></author></comment><comment><text><span class="comment-copy">Why do you encode to Base64?</span></text><author><a class="comment-user" href="/users/126280/cheetah" title="4,348 reputation">Cheetah</a></author></comment><comment><text><span class="comment-copy">@Ben It's common practice to encode to Base64 to allow you to store the resultant value in a text-file or string-based database column, or similar.</span></text><author><a class="comment-user" href="/users/15393/rb" title="25,119 reputation">RB.</a></author></comment><comment><text><span class="comment-copy">Does this solution mean that if an attacker has access to your source code, they can decrypt the passwords?</span></text><author><a class="comment-user" href="/users/1068446/dwjohnston" title="953 reputation">dwjohnston</a></author></comment><comment><text><span class="comment-copy">yes @dwjohnston , access to your code they can decrypt. but you could save the secret key (SecretKey) to a file that lives outside of your source code.</span></text><author><a class="comment-user" href="/users/436183/jeryl-cook" title="364 reputation">Jeryl Cook</a></author></comment><comment><text><span class="comment-copy">Use MD5 or other hash algorythm. That will give you the best security.</span></text><author><a class="comment-user" href="/users/5113030/v-7" title="72 reputation">V.7</a></author></comment><comment><text><span class="comment-copy">Hashing is better if you need to verify a secret. But when you need to store a secret you will need to submit to another system, hashing doesn't help.</span></text><author><a class="comment-user" href="/users/27658/johannes-brodwall" title="5,282 reputation">Johannes Brodwall</a></author></comment><comment><text><span class="comment-copy">@V.7 nope.  MD5 is absolutely not secure for password hashing and was never designed for that purpose.  Never use it for that.  These days, Argon2 is best.  See <a href="https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet" rel="nofollow noreferrer">owasp.org/index.php/Password_Storage_Cheat_Sheet</a> and  <a href="https://paragonie.com/blog/2016/02/how-safely-store-password-in-2016" rel="nofollow noreferrer">paragonie.com/blog/2016/02/how-safely-store-password-in-2016</a></span></text><author><a class="comment-user" href="/users/116810/kimball-robinson" title="2,117 reputation">Kimball Robinson</a></author></comment><comment><text><span class="comment-copy">@MaartenBodewes Thank you for pointing me in the direection of PBKDF2. I learned stuff both about the algorithm and the theory around slow hashes. Good stuff to learn.  I've updated the code - I hope you like the new version better.</span></text><author><a class="comment-user" href="/users/27658/johannes-brodwall" title="5,282 reputation">Johannes Brodwall</a></author></comment><comment><text><span class="comment-copy">Much better this way. Of course a secure random salt and an iteration count of a (conservative, low end) of 40K would be nicer, but at least you've indicated these things in the comments and PBKDF2 and AES/CBC are definite improvements. I think it is great how you handled this, by updating the answer; I'll at remove the warning. Voted up your comment so that people aren't surprised to find the updated code (they can look at the edits to find the old code I suppose). Might be a good idea to clean up your old comments as well.</span></text><author><a class="comment-user" href="/users/589259/maarten-bodewes" title="47,642 reputation">Maarten Bodewes</a></author></comment><comment><text><span class="comment-copy">Thanks for the vote! I'm happy to learn - that's why we're here. :-) I updated the iteration count to 40k and changed the comment to reflect this. I've also deleted an earlier comment. Regarding the salt: Is it correct that the salt can be stored in the prop files with the encrypted properties? I also wonder if you have any insights into why other key-lengths than 128 (and 132, it turns out) throw exception.</span></text><author><a class="comment-user" href="/users/27658/johannes-brodwall" title="5,282 reputation">Johannes Brodwall</a></author></comment><comment><text><span class="comment-copy">@dwjohnston - I've updated the code example to avoid the possible confusion with hardcoding the password. Hope this makes it clearer.</span></text><author><a class="comment-user" href="/users/27658/johannes-brodwall" title="5,282 reputation">Johannes Brodwall</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Yes, definitely don't write your own algorithm. Java has lots of cryptography APIs.</p>
<p>If the OS you are installing upon has a keystore, then you could use that to store your crypto keys that you will need to encrypt and decrypt the sensitive data in your configuration or other files.</p>
</div></text><author><a href="/users/17832/jeebee">JeeBee</a></author><comments><comment><text><span class="comment-copy">+1 for using a KeyStore! It's nothing more than obfuscation if you're storing the key in the Jar file.</span></text><author><a class="comment-user" href="/users/1030/ninesided" title="16,946 reputation">ninesided</a></author></comment><comment><text><span class="comment-copy">If all that is needed is not to have the password stored in clear text, then keystores are overkill.</span></text><author><a class="comment-user" href="/users/53897/thorbj%c3%b8rn-ravn-andersen" title="51,173 reputation">Thorbjørn Ravn Andersen</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Check out <a href="http://www.jasypt.org/" rel="noreferrer">jasypt</a>, which is a library offering basic encryption capabilities with minimum effort.</p>
</div></text><author><a>NONE</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I think that the best approach is to ensure that your config file (containing your password) is <em>only accessible to a specific user account</em>. For example, you might have an application specific user <code>appuser</code> to which only trusted people have the password (and to which they <code>su</code> to).</p>
<p>That way, there's no annoying cryptography overhead and you still have a password which is secure.</p>
<p><strong>EDIT:</strong> <em>I am assuming that you are not exporting your application configuration outside of a trusted environment (which I'm not sure would make any sense, given the question)</em> </p>
</div></text><author><a href="/users/16853/oxbow-lakes">oxbow_lakes</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Well to solve the problems of master password - the best approach is not to store the password anywhere, the application should encrypt passwords for itself - so that only it can decrypt them. So if I was using a .config file I would do the following, <strong>mySettings.config</strong>:</p>
<blockquote>
<p>encryptTheseKeys=secretKey,anotherSecret</p>
<p>secretKey=unprotectedPasswordThatIputHere</p>
<p>anotherSecret=anotherPass</p>
<p>someKey=unprotectedSettingIdontCareAbout</p>
</blockquote>
<p>so I would read in the keys that are mentioned in the
encryptTheseKeys, apply the Brodwalls example from above on them and
write them back to the file with a marker of some sort (lets say <strong>crypt:</strong>) to let the application know not to do it again, the output would look like this:</p>
<blockquote>
<p>encryptTheseKeys=secretKey,anotherSecret</p>
<p>secretKey=<strong>crypt:ii4jfj304fjhfj934fouh938</strong></p>
<p>anotherSecret=<strong>crypt:jd48jofh48h</strong></p>
<p>someKey=unprotectedSettingIdontCareAbout</p>
</blockquote>
<p>Just make sure to keep the originals in your own secure place... </p>
</div></text><author><a href="/users/1007231/user1007231">user1007231</a></author><comments><comment><text><span class="comment-copy">Yeah, this is from 3 years ago. To avoid the master key, I ended up using RSA keys issued from our internal CA. Access to the private key is protected by being encrypted with a finger print of the machine hardware.</span></text><author><a class="comment-user owner" href="/users/104998/petey-b" title="5,021 reputation">Petey B</a></author></comment><comment><text><span class="comment-copy">I see, sounds pretty solid. nice.</span></text><author><a class="comment-user" href="/users/1007231/user1007231" title="61 reputation">user1007231</a></author></comment><comment><text><span class="comment-copy">@user1007231 - Where to keep - "Just make sure to keep the originals in your own secure place..." ?</span></text><author><a class="comment-user" href="/users/1406510/nanosoft" title="612 reputation">nanosoft</a></author></comment><comment><text><span class="comment-copy">@PeteyB - Didn't understood ? Can you point me to some links that can enlighten me. Thanks</span></text><author><a class="comment-user" href="/users/1406510/nanosoft" title="612 reputation">nanosoft</a></author></comment><comment><text><span class="comment-copy">@nanosoft - Get a "Aegis Secure Key USB" and store in a text doc there or on paper in your wallet</span></text><author><a class="comment-user" href="/users/1007231/user1007231" title="61 reputation">user1007231</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The big point, and the elephant in the room and all that, is that <em>if your application can get hold of the password, then a hacker with access to the box can get hold of it too!</em></p>
<p>The only way somewhat around this, is that the application asks for the "master password" on the console using Standard Input, and then uses this to decrypt the passwords stored on file. Of course, this completely makes is impossible to have the application start up unattended along with the OS when it boots.</p>
<p>However, even with this level of annoyance, if a hacker manages to get root access (or even just access as the user running your application), he could dump the memory and find the password there.</p>
<p><strong>The thing to ensure, is to not let the entire company have access to the production server (and thereby to the passwords), and make sure that it is impossible to crack this box!</strong></p>
</div></text><author><a href="/users/39334/stolsvik">stolsvik</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I have created a simple PropertyEncryptor in Java. It can encrypt your property files during the build. Then you can decrypt it using an EncryptionHelper in your programs. You can find the source codes in this location <a href="http://devpinoy.org/blogs/jakelite/archive/2009/07/14/encrypting-passwords-in-java-property-files.aspx" rel="nofollow noreferrer">http://devpinoy.org/blogs/jakelite/archive/2009/07/14/encrypting-passwords-in-java-property-files.aspx</a></p>
</div></text><author><a href="/users/64244/jake-stateresa">jake.stateresa</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Try using ESAPIs Encryption methods. Its easy to configure and you can also easily change your keys.</p>
<p><a href="http://owasp-esapi-java.googlecode.com/svn/trunk_doc/latest/org/owasp/esapi/Encryptor.html" rel="nofollow">http://owasp-esapi-java.googlecode.com/svn/trunk_doc/latest/org/owasp/esapi/Encryptor.html</a></p>
<p>You </p>
<p>1)encrypt
2)decrypt
3)sign
4)unsign
5)hashing 
6)time based signatures and much more with just one library.</p>
</div></text><author><a href="/users/1679541/rohit-salecha">Rohit Salecha</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Depending on how secure you need the configuration files or how reliable your application is, <a href="http://activemq.apache.org/encrypted-passwords.html" rel="nofollow">http://activemq.apache.org/encrypted-passwords.html</a> may be a good solution for you. </p>
<p>If you are not too afraid of the password being decrypted and it can be really simple to configure using a bean to store the password key. However, if you need more security you can set an environment variable with the secret and remove it after launch. With this you have to worry about the application / server going down and not application not automatically relaunching.</p>
</div></text><author><a href="/users/618580/cprescott">CPrescott</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>See what is available in Jetty for storing password (or hashes) in configuration files, and consider if the OBF encoding might be useful for you.  Then see in the source how it is done.</p>
<p><a href="http://www.eclipse.org/jetty/documentation/current/configuring-security-secure-passwords.html" rel="nofollow noreferrer">http://www.eclipse.org/jetty/documentation/current/configuring-security-secure-passwords.html</a></p>
</div></text><author><a href="/users/53897/thorbj%c3%b8rn-ravn-andersen">Thorbjørn Ravn Andersen</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>If you are using <strong>java 8</strong> the use of the internal Base64 encoder and decoder can be avoided by replacing</p>
<p><code>return new BASE64Encoder().encode(bytes);</code></p>
<p>with</p>
<p><code>return Base64.getEncoder().encodeToString(bytes);</code></p>
<p>and </p>
<p><code>return new BASE64Decoder().decodeBuffer(property);</code></p>
<p>with</p>
<p><code>return Base64.getDecoder().decode(property);</code></p>
<p>Note that this solution doesn't protect your data as the methods for decrypting are stored in the same place. It just makes it more difficult to break. Mainly it avoids to print it and show it to everybody by mistake.</p>
</div></text><author><a href="/users/4199243/antonio-raposo">Antonio Raposo</a></author><comments><comment><text><span class="comment-copy">Base64 is not encryption.</span></text><author><a class="comment-user" href="/users/88122/jwilleke" title="5,016 reputation">jwilleke</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Based on the comments here I've written a <a href="http://makina-corpus.com/blog/metier/2015/chiffrer-les-mots-de-passe-dans-les-fichiers-de-configuration-avec-talend" rel="nofollow">tutorial on how to cipher/crypt and uncrypt passwords in .properties configuration files using Talend Data Integration</a>.</p>
<p>It is in french, but 2 ways are proposed using Jasypt or the above example of Johannes. The code may interest you.</p>
</div></text><author><a href="/users/2739782/mordicusetcubitus">MordicusEtCubitus</a></author><comments/></answer></answers></post>