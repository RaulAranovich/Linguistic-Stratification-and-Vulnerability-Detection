<?xml version="1.0" encoding="utf-8"?>
<post><title>security - difference between gcc -D_FORTIFY_SOURCE=1 and -D_FORTIFY_SOURCE=2 - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>Can someone point out the difference between gcc -D_FORTIFY_SOURCE=1 and -D_FORTIFY_SOURCE=2? I guess =2 is more secure? I haven't been able to find a list which lists differences point by point.</p>
<p>I have also read that -D_FORTIFY_SOURCE=2 should be used with -O2, otherwise not all features would be available. Also here i haven't found a list which would specify the regressions in detail. I would especially be interested to compile with -Os as the target is a device with not so much flash memory.</p>
<p>Any hints on where this is documented welcome!</p>
</div></text><author><a href="/users/256610/frank-meerk%c3%b6tter">Frank Meerk√∂tter</a></author><comments><comment><text><span class="comment-copy">Not sure if you have seen these so: (1) The patch which included GCC support for this (with some details on differences between <code>=1</code> and <code>=2</code>) is <a href="http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html" rel="nofollow noreferrer"><b>here</b></a>; (2) The 'feature test macros' man page with an entry about <code>_FORTIFY_SOURCE</code> is <a href="http://www.kernel.org/doc/man-pages/online/pages/man7/feature_test_macros.7.html" rel="nofollow noreferrer"><b>here</b></a>.</span></text><author><a class="comment-user" href="/users/274261/arjunshankar" title="13,809 reputation">ArjunShankar</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>From the manual page for the Feature Test Macros (<a href="http://man7.org/linux/man-pages/man7/feature_test_macros.7.html" rel="nofollow noreferrer"><code>man 7 feature_test_macros</code></a>)</p>
<blockquote>
<h3><strong><code>_FORTIFY_SOURCE</code></strong> (since glibc 2.3.4)</h3>
<p>Defining this macro causes some lightweight checks to be performed to detect some buffer overflow errors when employing various string and memory manipulation functions (for example, <code>memcpy</code>, <code>memset</code>, <code>stpcpy</code>, <code>strcpy</code>, <code>strncpy</code>, <code>strcat</code>, <code>strncat</code>, <code>sprintf</code>, <code>snprintf</code>, <code>vsprintf</code>,  <code>vsnprintf</code>, <code>gets</code>, and wide character variants thereof). For some functions, argument consistency is checked; for example, a check is made that <code>open</code> has been supplied with a <em>mode</em> argument when the specified flags include <strong><code>O_CREAT</code></strong>. Not all problems are detected, just some common cases.</p>
<p>If <strong><code>_FORTIFY_SOURCE</code></strong> is set to 1, with compiler optimization level 1 (<em><code>gcc -O1</code></em>) and above, checks that shouldn't change the behavior of conforming programs are performed.</p>
<p>With <strong><code>_FORTIFY_SOURCE</code></strong> set to 2, some more checking is added, but some conforming programs might fail.</p>
<p>Some of the checks can be performed at compile time (via macros logic implemented in header files), and result in compiler warnings; other checks take place at run time, and result in a run-time error if the check fails.</p>
<p>Use of this macro requires compiler support, available with <code>gcc</code> since version 4.0.</p>
</blockquote>
<p>Moreover, the article <a href="https://access.redhat.com/blogs/766093/posts/1976213" rel="nofollow noreferrer">Enhance application security with FORTIFY_SOURCE</a> (March 2014) says:</p>
<ul>
<li><code>gcc -D_FORTIFY_SOURCE=1</code> adds checks at compile-time only (some headers are necessary as <code>#include &lt;string.h&gt;</code>)</li>
<li><code>gcc -D_FORTIFY_SOURCE=2</code> also adds checks at run-time (detected buffer overflow terminates the program)</li>
</ul>
<p>Essentially, <code>_FORTIFY_SOURCE</code> level 2 is more secure, but is a slightly riskier compilation strategy; if you use it, make sure you have very strong regression tests for your compiled code to prove the compiler hasn't introduced any unexpected behaviour.</p>
</div></text><author><a href="/users/2381850/colonel-panic">Colonel Panic</a></author><comments><comment><text><span class="comment-copy">Is there any indication, on when the conforming programs might fail?</span></text><author><a class="comment-user" href="/users/857990/user857990" title="327 reputation">user857990</a></author></comment></comments></answer></answers></post>