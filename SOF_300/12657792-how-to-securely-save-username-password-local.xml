<?xml version="1.0" encoding="utf-8"?>
<post><title>c# - How to securely save username/password (local)? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>
I'm making a Windows application, which you need to log into first.<br/>
The account details consist of username and password, and they need to be saved locally.<br/>
It's just a matter of security, so other people using the same computer can't see everyone's personal data.<br/>
<strong>What is the best/most secure way to save this data?</strong>
</p>
<p>
<em>I don't want to use a database, so I tried some things with Resource files.<br/>
But since I'm kind of new with this, I'm not entirely sure of what I'm doing and where I should be looking for a solution.</em>
</p>
</div></text><author><a href="/users/3739391/iliketocode">iliketocode</a></author><comments><comment><text><span class="comment-copy">First of all, don't save the password. Hash it (possibly with a salt value), and save that instead.</span></text><author><a class="comment-user" href="/users/751090/carlosfigueira" title="59,995 reputation">carlosfigueira</a></author></comment><comment><text><span class="comment-copy">"Users" you mean regular Windows users or something else? (I think you mean some of you own "users" as regular Windows user already can't see each other's data...)</span></text><author><a class="comment-user" href="/users/477420/alexei-levenkov" title="75,204 reputation">Alexei Levenkov</a></author></comment><comment><text><span class="comment-copy">I have edited your title. Please see, "<a href="http://meta.stackexchange.com/questions/19190/">Should questions include “tags” in their titles?</a>", where the consensus is "no, they should not".</span></text><author><a class="comment-user" href="/users/76337/john-saunders" title="141,017 reputation">John Saunders</a></author></comment><comment><text><span class="comment-copy">@John Saunders Alright, excuse my ignorance.</span></text><author><a class="comment-user owner" href="/users/1201615/robin" title="407 reputation">Robin</a></author></comment><comment><text><span class="comment-copy">any final solution with full source code?</span></text><author><a class="comment-user" href="/users/206730/kiquenet" title="5,657 reputation">Kiquenet</a></author></comment><comment><text><span class="comment-copy">@Kiquenet I'm sorry, I don't have the code anymore.</span></text><author><a class="comment-user owner" href="/users/1201615/robin" title="407 reputation">Robin</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>If you are just going to verify/validate the entered user name and password, use the <a href="http://msdn.microsoft.com/en-us/library/system.security.cryptography.rfc2898derivebytes.aspx">Rfc2898DerivedBytes</a> class (also known as Password Based Key Derivation Function 2  or PBKDF2). This is more secure than using encryption like Triple DES or AES because there is no practical way to go from the result of RFC2898DerivedBytes back to the password. You can only go from a password to the result. See <a href="http://stackoverflow.com/questions/12529574/is-it-ok-to-use-sha1-hash-of-password-as-a-salt-when-deriving-encryption-key-and">Is it ok to use SHA1 hash of password as a salt when deriving encryption key and IV from password string?</a> for an example and discussion for .Net or <a href="http://stackoverflow.com/questions/12338514/string-encrypt-decrypt-with-password-c-sharp-metro-style">String encrypt / decrypt with password c# Metro Style</a> for WinRT/Metro.</p>
<p>If you are storing the password for reuse, such as supplying it to a third party, use the <a href="http://msdn.microsoft.com/en-us/library/ms995355.aspx">Windows Data Protection API (DPAPI)</a>. This uses operating system generated and protected keys and the <a href="http://en.wikipedia.org/wiki/Triple_DES">Triple DES</a> encryption algorithm to encrypt and decrypt information. This means your application does not have to worry about generating and protecting the encryption keys, a major concern when using cryptography.</p>
<p>In C#, use the <a href="http://msdn.microsoft.com/en-us/library/system.security.cryptography.protecteddata.aspx">System.Security.Cryptography.ProtectedData</a> class. For example, to encrypt a piece of data, use <a href="http://msdn.microsoft.com/en-us/library/system.security.cryptography.protecteddata.protect.aspx"><code>ProtectedData.Protect()</code></a>:</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="com">// Data to protect. Convert a string to a byte[] using Encoding.UTF8.GetBytes().</span><span class="pln">
</span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> plaintext</span><span class="pun">;</span><span class="pln"> 

</span><span class="com">// Generate additional entropy (will be used as the Initialization vector)</span><span class="pln">
</span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> entropy </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">byte</span><span class="pun">[</span><span class="lit">20</span><span class="pun">];</span><span class="pln">
using</span><span class="pun">(</span><span class="typ">RNGCryptoServiceProvider</span><span class="pln"> rng </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">RNGCryptoServiceProvider</span><span class="pun">())</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    rng</span><span class="pun">.</span><span class="typ">GetBytes</span><span class="pun">(</span><span class="pln">entropy</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> ciphertext </span><span class="pun">=</span><span class="pln"> </span><span class="typ">ProtectedData</span><span class="pun">.</span><span class="typ">Protect</span><span class="pun">(</span><span class="pln">plaintext</span><span class="pun">,</span><span class="pln"> entropy</span><span class="pun">,</span><span class="pln">
    </span><span class="typ">DataProtectionScope</span><span class="pun">.</span><span class="typ">CurrentUser</span><span class="pun">);</span></code></pre>
<p>Store the entropy and ciphertext securely, such as in a file or registry key with permissions set so only the current user can read it. To get access to the original data, use <a href="http://msdn.microsoft.com/en-us/library/system.security.cryptography.protecteddata.unprotect.aspx"><code>ProtectedData.Unprotect()</code></a>:</p>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> plaintext</span><span class="pun">=</span><span class="pln"> </span><span class="typ">ProtectedData</span><span class="pun">.</span><span class="typ">Unprotect</span><span class="pun">(</span><span class="pln">ciphertext</span><span class="pun">,</span><span class="pln"> entropy</span><span class="pun">,</span><span class="pln">
    </span><span class="typ">DataProtectionScope</span><span class="pun">.</span><span class="typ">CurrentUser</span><span class="pun">);</span></code></pre>
<p>Note that there are additional security considerations. For example, avoid storing secrets like passwords as a <code>string</code>. Strings are immutable, being they cannot be notified in memory so someone looking at the application's memory or a memory dump may see the password. Use <a href="http://msdn.microsoft.com/en-us/library/system.security.securestring.aspx">SecureString</a> or a byte[] instead and remember to dispose or zero them as soon as the password is no longer needed.</p>
</div></text><author><a href="/users/1634846/akton">akton</a></author><comments><comment><text><span class="comment-copy">Hi, I tried this, but I got an error at entropy = rng.GetBytes(20) saying: Cannot convert from int to byte[]</span></text><author><a class="comment-user owner" href="/users/1201615/robin" title="407 reputation">Robin</a></author></comment><comment><text><span class="comment-copy">@CrispyGMR I have fixed that piece of code in the answer. Good catch.</span></text><author><a class="comment-user" href="/users/1634846/akton" title="11,211 reputation">akton</a></author></comment><comment><text><span class="comment-copy">Thanks a lot. I used md5 for hashing at first, but I was kind of sceptical about it. This seems way more secure. One more question though. I want to save quite some data like this in a text file. I see that it's just a bunch of random characters when I open my file, but is it safe enough to do this? Or do you recommend another way of storing the data?</span></text><author><a class="comment-user owner" href="/users/1201615/robin" title="407 reputation">Robin</a></author></comment><comment><text><span class="comment-copy">If you are just validating an entered password, use RFC2898DerivedBytes instead (question updated with link and short explanation). Storing encrypted data in a text file is sufficient assuming only trusted users and the application have access to the file. If a malicious person gets access to the file, they could attempt to brute force the values stored there. Make sure to keep the keys safe (or use DPAPI as mentioned above).</span></text><author><a class="comment-user" href="/users/1634846/akton" title="11,211 reputation">akton</a></author></comment><comment><text><span class="comment-copy">Seems that the class is now known as Rfc2898DeriveBytes (small letters, .net 4.5 and 4.6) and can be found here:  Namespace:  System.Security.Cryptography Assembly:  mscorlib (in mscorlib.dll)</span></text><author><a class="comment-user" href="/users/651787/dashu" title="213 reputation">Dashu</a></author></comment><comment><text><span class="comment-copy">@akton when I try this code I see this error: <code>'RNGCryptoServiceProvider': type used in a using statement must be implicitly convertible to 'System.IDisposable'</code> - this is after copying your code exactly - do you have any advice? thank you!</span></text><author><a class="comment-user" href="/users/4671754/bassie" title="2,046 reputation">Bassie</a></author></comment><comment><text><span class="comment-copy">@Bassie <code>RNGCryptoServiceProvider</code> inherits from <code>RandomNumberGenerator</code>, which implements <code>IDisposable</code>. I confirmed this code works under Visual Studio 2015 with .Net 4.5 and .Net 4.6. Are you sure you are using the version in the <code>System.Security.Cryptography</code> namespace?</span></text><author><a class="comment-user" href="/users/1634846/akton" title="11,211 reputation">akton</a></author></comment><comment><text><span class="comment-copy">@akton the issue was that my solution was targeting .Net-3.5 rather than 4.5 - thanks for the pointer</span></text><author><a class="comment-user" href="/users/4671754/bassie" title="2,046 reputation">Bassie</a></author></comment><comment><text><span class="comment-copy">@Bassie According to the documentation (<a href="https://msdn.microsoft.com/en-us/library/system.security.cryptography.randomnumbergenerator%28v=vs.90%29.aspx" rel="nofollow noreferrer">msdn.microsoft.com/en-us/library/…</a>), <code>RandomNumberGenerator</code> does not implement <code>IDisposable</code> in .Net 3.5. Remove the using block and you should be fine.</span></text><author><a class="comment-user" href="/users/1634846/akton" title="11,211 reputation">akton</a></author></comment><comment><text><span class="comment-copy">Very informative, however I think the whole point of using <code>ProtectedData</code> is so that I don't need worry about <i>Store the entropy and ciphertext securely, ... so only the current user can read it</i>.  I think it offers simplicity in that I can store them however is convenient and still only the CurrentUser can decrypt it.  The <code>entropy</code> parameter is also optional and appears similar to an IV where uniqueness matters more than secrecy.  As such, the value could probably omitted or hard coded into the program in situations where the variation and update of plaintext is infrequent.</span></text><author><a class="comment-user" href="/users/1036728/antak" title="5,958 reputation">antak</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I have used this before and I think in order to make sure credential persist and in a best secure way is </p>
<ol>
<li>you can write them to the app config file using the <code>ConfigurationManager</code> class</li>
<li>securing the password using the <code>SecureString</code> class</li>
<li>then encrypting it using tools in the <code>Cryptography</code> namespace.</li>
</ol>
<p>This link will be of great help I hope : <a href="http://weblogs.asp.net/jgalloway/archive/2008/04/13/encrypting-passwords-in-a-net-app-config-file.aspx" rel="nofollow noreferrer">Click here</a></p>
</div></text><author><a href="/users/1460468/pordi">pordi</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>DPAPI is just for this purpose.  Use DPAPI to encrypt the password the first time the user enters is, store it in a secure location (User's registry, User's application data directory, are some choices). Whenever the app is launched, check the location to see if your key exists, if it does use DPAPI to decrypt it and allow access, otherwise deny it.</p>
</div></text><author><a href="/users/1556110/swiftgp">swiftgp</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Using <code>RFC2898DeriveBytes</code> with a non trivial iteration count should be better than using a straight hash function for authentication purposes. The <code>Rfc2898DeriveBytes</code> class can be used to produce a derived key from a base key and other parameters. <code>Rfc2898DeriveBytes</code> is an implementation of PBKDF2. PBKDF2 uses a pseudorandom function and a configurable number of iterations to derive a cryptographic key from a password. Because this process is difficult to reverse but can also be configured to be slow to compute, key derivation functions are ideally suited for password hashing use cases. More about...<a href="http://net-informations.com/q/faq/encrypt.html" rel="nofollow">Password Encryption</a></p>
<p>George</p>
</div></text><author><a href="/users/4947712/rajesh">Rajesh</a></author><comments/></answer></answers></post>