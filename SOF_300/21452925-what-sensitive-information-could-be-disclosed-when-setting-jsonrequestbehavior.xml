<?xml version="1.0" encoding="utf-8"?>
<post><title>asp.net mvc - What 'sensitive information' could be disclosed when setting JsonRequestBehavior to AllowGet - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I've been getting the same old error every time I test a new <code>URL</code> from my browser's address bar when I'm <code>returning Json</code> (using the built-in <code>MVC JsonResult helper</code>):</p>
<blockquote>
<p>This request has been blocked because sensitive information could be disclosed to third party web sites when this is used in a <code>GET request</code>. To allow <code>GET requests</code>, set <code>JsonRequestBehavior</code> to <code>AllowGet</code>.</p>
</blockquote>
<p>Rather than grunt in acknowledgement and fire up Fiddler to do a post request, this time, I'm wondering exactly what it is that a <code>GET</code> request exposes that a <code>POST</code> request doesn't?</p>
</div></text><author><a href="/users/2441741/syed-ali-hassan">Syed Ali hassan</a></author><comments/></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Say your website has a <code>GetUser</code> web method:</p>
<p><code>http://www.example.com/User/GetUser/32</code></p>
<p>which returns a JSON response:</p>
<pre class="lang-json prettyprint prettyprinted" style=""><code><span class="pun">{</span><span class="pln"> </span><span class="str">"Name"</span><span class="pun">:</span><span class="pln"> </span><span class="str">"John Doe"</span><span class="pln"> </span><span class="pun">}</span></code></pre>
<p>If this method accepts only POST requests, then the content will only be returned to the browser if an AJAX request is made to <code>http://www.example.com/User/GetUser/32</code> using the POST method. Note that unless you have implemented <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS" rel="nofollow noreferrer">CORS</a>, the browser will protect the data from other domains making this request to yours.</p>
<p>However, if you allowed GET requests then as well as making an AJAX request similar to the above with GET instead of POST, a malicious user could include your JSON in the context of their own site by using a <code>script</code> tag in the HTML. e.g. on <code>www.evil.com</code>:
</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="tag">&lt;script</span><span class="pln"> </span><span class="atn">src</span><span class="pun">=</span><span class="atv">"http://www.example.com/User/GetUser/32"</span><span class="tag">&gt;&lt;/script&gt;</span></code></pre>
<p>This JavaScript should be useless to <code>www.evil.com</code> because there should be no way of reading the object returned by your web method. However, due to bugs in old versions of browsers (e.g. Firefox 3), it is possible for JavaScript prototype objects to be redefined and make it possible for <code>www.evil.com</code> to read your data returned by your method. This is known as JSON Hijacking.</p>
<p>See <a href="https://security.stackexchange.com/q/7001/8340">this post</a> for some methods of preventing this. However, it is not a known problem with the later versions of modern browsers (Firefox, Chrome, IE).</p>
</div></text><author><a href="/users/413180/silverlightfox">SilverlightFox</a></author><comments><comment><text><span class="comment-copy">Nice post, but if you include an [Authorize] tag to the controller you don't need to worry about security. Hope this code will help someone, Json(returnMsg, JsonRequestBehavior.AllowGet)</span></text><author><a class="comment-user" href="/users/1506710/dhanuka777" title="3,188 reputation">Dhanuka777</a></author></comment><comment><text><span class="comment-copy">@Dhanuka777: Not true unfortunately. <a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29" rel="nofollow noreferrer">CSRF</a> attacks could be possible if the method has side effects (e.g. <code>www.example.com/User/DeleteUser/32</code>) as the request will include the cookies neccessary for authentication as they are coming from the victim's machine. <code>[Authorize]</code> will not save you from the attack detailed here in the case of a very old browser either - it is the user themselves visiting <code>www.evil.com</code> so the request <code>www.evil.com</code> makes to <code>www.example.com</code> will contain the authorisation cookie.</span></text><author><a class="comment-user" href="/users/413180/silverlightfox" title="17,301 reputation">SilverlightFox</a></author></comment><comment><text><span class="comment-copy">Am I right that in case when the method does not has any side effects it is safe to just use <code>[Authorize]</code> and enable GET requests?</span></text><author><a class="comment-user" href="/users/707926/ps-ttf" title="915 reputation">ps_ttf</a></author></comment><comment><text><span class="comment-copy">@ps_ttf: If there are no side effects, <a href="http://security.stackexchange.com/a/115826/8340">you don't need to protect the method from CSRF, although also be wary of long running requests that use up server resources</a>. Also, due to the threat of JSON Hijacking, your approach would be vulnerable in <i>very old</i> browsers only.</span></text><author><a class="comment-user" href="/users/413180/silverlightfox" title="17,301 reputation">SilverlightFox</a></author></comment><comment><text><span class="comment-copy">And if the action has any side effects it should never be invoked using the GET method â€” the convention is to use GET just for reading the data and all side-effecting operations should use POST, PUT, DELETE, etc. In other words, I just think that this 'sensitive information' error message is misleading. If the developer uses the GET method the way it should be used then everything is fine! :)</span></text><author><a class="comment-user" href="/users/707926/ps-ttf" title="915 reputation">ps_ttf</a></author></comment><comment><text><span class="comment-copy">@ps_ttf: It's not misleading because sensitive information could be disclosed if your site happens to support very old browsers (although you could argue users on these browsers would have other, much worse security problems to deal with). Remember that <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html" rel="nofollow noreferrer">using a non-safe method</a> also requires that these methods have protection against CSRF.</span></text><author><a class="comment-user" href="/users/413180/silverlightfox" title="17,301 reputation">SilverlightFox</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>in your return use the following:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="typ">Json</span><span class="pun">(</span><span class="str">"you result"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">JsonRequestBehavior</span><span class="pun">.</span><span class="typ">AllowGet</span><span class="pun">);</span></code></pre>
</div></text><author><a href="/users/1166597/oldtrain">OldTrain</a></author><comments><comment><text><span class="comment-copy">How does this actually answer the question of the OP? All this answer does is tell everyone how to get around the exception..</span></text><author><a class="comment-user" href="/users/1794106/eaglei22" title="555 reputation">eaglei22</a></author></comment><comment><text><span class="comment-copy">Yeah use it.. It's like try catch with an empty catch. DON'T use this guys (before you understand the risks). -1'd</span></text><author><a class="comment-user" href="/users/944592/sotn" title="692 reputation">sotn</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<blockquote>
<p>By default, the ASP.NET MVC framework does not allow you to respond to
  an HTTP GET request with a JSON payload. If you need to send JSON in
  response to a GET, you'll need to explicitly allow the behavior by
  using <code>JsonRequestBehavior.AllowGet</code> as the second parameter to the Json
  method. However, there is a chance a malicious user can gain access to
  the JSON payload through a process known as JSON Hijacking. You do not
  want to return sensitive information using JSON in a GET request.</p>
</blockquote>
<p>Read <a href="http://haacked.com/archive/2009/06/25/json-hijacking.aspx/"><code>JSON Hijacking</code></a> from Phil Haack</p>
</div></text><author><a href="/users/1559213/murali-murugesan">Murali Murugesan</a></author><comments><comment><text><span class="comment-copy">Great post. Good reason why you should use HTTPS.</span></text><author><a class="comment-user" href="/users/545657/pqsk" title="839 reputation">pqsk</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>When we want to return a json object to client from MVC application, we should explicit specify JsonRequestBehavior.AllowGet when returning an object. As a result, I return json data as below to overcome the issue:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Json</span><span class="pun">(</span><span class="pln">yourObjectData</span><span class="pun">,</span><span class="pln"> </span><span class="typ">JsonRequestBehavior</span><span class="pun">.</span><span class="typ">AllowGet</span><span class="pun">);</span></code></pre>
</div></text><author><a href="/users/6377399/loc-huynh">Loc Huynh</a></author><comments/></answer></answers></post>