<?xml version="1.0" encoding="utf-8"?>
<post><title>security - What's the best method for sanitizing user input with PHP? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>Is there a catchall function somewhere that works well for sanitizing user input for SQL injection and XSS attacks, while still allowing certain types of html tags?</p>
</div></text><author><a href="/users/3664960/davejal">davejal</a></author><comments><comment><text><span class="comment-copy">Nowadays, to avoid sql injection, use PDO or MySQLi.</span></text><author><a class="comment-user" href="/users/938236/francisco-presencia" title="5,484 reputation">Francisco Presencia</a></author></comment><comment><text><span class="comment-copy">Using PDO or MySQLi isn't enough.  If you build your SQL statements with untrusted data, like <code>select * from users where name='$name'</code>, then it doesn't matter if you use PDO or MySQLi or MySQL.  You are still in danger.  You must use parametrized queries or, if you must, use escaping mechanisms on your data, but that is much less preferable.</span></text><author><a class="comment-user" href="/users/8454/andy-lester" title="54,915 reputation">Andy Lester</a></author></comment><comment><text><span class="comment-copy">@AndyLester Are you implying that someone uses PDO without prepared statements? :)</span></text><author><span class="comment-user">user1537415</span></author></comment><comment><text><span class="comment-copy">I'm saying that "Use PDO or MySQLi" is not information enough to explain to novices on how to safely use them.  You and I know that prepared statements matter, but I do not assume that everyone who reads this question will know it.  That is why I added the explicit instructions.</span></text><author><a class="comment-user" href="/users/8454/andy-lester" title="54,915 reputation">Andy Lester</a></author></comment><comment><text><span class="comment-copy">So the use of PDO::prepare() or PDO::quote() is the right answer in this case?</span></text><author><a class="comment-user" href="/users/410624/krizajb" title="352 reputation">krizajb</a></author></comment><comment><text><span class="comment-copy">Andy's comment is entirely valid. I converted my mysql website to PDO recently thinking that I was now somehow safe from injection attacks. It was only during the process I realised that some of my sql statements were still built using user input. I then fixed that using prepared statements. To a complete novice, it's not fully clear that there is a distinction as many experts throw out the comment about using PDO but don't specify the need for prepared statements. The assumption being that this is obvious. But not to a novice.</span></text><author><a class="comment-user" href="/users/2576839/ghostrider" title="585 reputation">GhostRider</a></author></comment><comment><text><span class="comment-copy">guess, this answer works: <a href="http://stackoverflow.com/questions/60174/how-can-i-prevent-sql-injection-in-php/12710285#12710285" title="how can i prevent sql injection in php">stackoverflow.com/questions/60174/â€¦</a></span></text><author><a class="comment-user" href="/users/2679066/quicker" title="1,147 reputation">Quicker</a></author></comment><comment><text><span class="comment-copy">@Christian: GhostRider and AndyLester are right. Let this be a lesson in communication. I was a novice once and it sucked because experts flat out don't know how to communicate.</span></text><author><a class="comment-user" href="/users/508558/ocdev" title="833 reputation">OCDev</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>It's a common misconception that user input can be filtered. PHP even has a (now deprecated) "feature", called magic-quotes, that builds on this idea. It's nonsense. Forget about filtering (Or cleaning, or whatever people call it).</p>
<p>What you should do, to avoid problems is quite simple: Whenever you embed a string within foreign code, you must escape it, according to the rules of that language. For example, if you embed a string in some SQL targeting MySql, you must escape the string with MySql's function for this purpose (<a href="http://de1.php.net/manual/en/mysqli.real-escape-string.php" rel="noreferrer"><code>mysqli_real_escape_string</code></a>).</p>
<p>Another example is HTML: If you embed strings within HTML markup, you must escape it with <a href="http://php.net/manual/function.htmlspecialchars.php" rel="noreferrer"><code>htmlspecialchars</code></a>. This means that every single <code>echo</code> or <code>print</code> statement should use <code>htmlspecialchars</code>.</p>
<p>A third example could be shell commands: If you are going to embed strings (Such as arguments) to external commands, and call them with <a href="http://php.net/manual/function.exec.php" rel="noreferrer"><code>exec</code></a>, then you must use <a href="http://php.net/manual/function.escapeshellcmd.php" rel="noreferrer"><code>escapeshellcmd</code></a> and <a href="http://php.net/manual/function.escapeshellarg.php" rel="noreferrer"><code>escapeshellarg</code></a>.</p>
<p>And so on and so forth ...</p>
<p>The <em>only</em> case where you need to actively filter data, is if you're accepting preformatted input. Eg. if you let your users post HTML markup, that you plan to display on the site. However, you should be wise to avoid this at all cost, since no matter how well you filter it, it will always be a potential security hole.</p>
</div></text><author><a href="/users/18180/troelskn">troelskn</a></author><comments><comment><text><span class="comment-copy">"This means that every single echo or print statement should use htmlspecialchars" - of course, you mean "every ... statement outputting user input"; htmlspecialchars()-ifying "echo 'Hello, world!';" would be crazy ;)</span></text><author><a class="comment-user" href="/users/5058/bobby-jack" title="10,381 reputation">Bobby Jack</a></author></comment><comment><text><span class="comment-copy">Excellent concise answer! I cringe when I hear about sanitizing input with no regard to the context.</span></text><author><a class="comment-user" href="/users/26180/cory-house" title="6,912 reputation">Cory House</a></author></comment><comment><text><span class="comment-copy">There's one case where I think filtering is the right solution: UTF-8. You don't want invalid UTF-8 sequences all over your application (you might get different error recovery depending on code path), and UTF-8 can be filtered (or rejected) easily.</span></text><author><a class="comment-user" href="/users/27009/kornel" title="66,242 reputation">Kornel</a></author></comment><comment><text><span class="comment-copy">@porneL: Yes, and it can also be worthwhile to filter out control characters other than newline at this point. However given that most PHP apps can't even get the HTML-escaping right yet I'm not going to push the overlong UTF-8 sequence issue (they're only really an issue in IE6 pre-Service-Pack-2 and old Operas).</span></text><author><a class="comment-user" href="/users/18936/bobince" title="387,698 reputation">bobince</a></author></comment><comment><text><span class="comment-copy">Although your answer is helpful, HTML can and is successfully filtered for XSS in numerous applications. E.g. Comment systems in blog software such as WordPress.</span></text><author><a class="comment-user" href="/users/3779/steve-clay" title="5,768 reputation">Steve Clay</a></author></comment><comment><text><span class="comment-copy">I realize this is an old question, but as of PHP 5.2.0 PHP has introduced Filters (<a href="http://www.php.net/manual/en/book.filter.php" rel="nofollow noreferrer">php.net/manual/en/book.filter.php</a>) and the function filter_var(), which when passed a value and an appropriate filter will either sanitize or validate the supplied user input.</span></text><author><a class="comment-user" href="/users/134030/david-o" title="347 reputation">David O.</a></author></comment><comment><text><span class="comment-copy">@david 5.2.0 was out when I made this answer.</span></text><author><a class="comment-user" href="/users/18180/troelskn" title="77,344 reputation">troelskn</a></author></comment><comment><text><span class="comment-copy">@troelskn: Thanks.  This is a great explanation, and I appreciate the concise answer.</span></text><author><a class="comment-user" href="/users/281460/jwir3" title="3,074 reputation">jwir3</a></author></comment><comment><text><span class="comment-copy">Hi Troels -- Thanks for the answer. Most of the frameworks &amp; languages I use every day, including PHP, Javascript and the Apache web server, have failed spectacularly at 'sanitizing' input in the past (magic quotes OMG!), and if they can't get it right, what chance do I have? Currently, I use prepared statements for all SQL I ever write, and for html I use a variant of htmlspecialchars, and frankly I'm still not 100% sure I'm not missing something. Security is HARD.</span></text><author><a class="comment-user" href="/users/57068/jens-roland" title="22,312 reputation">Jens Roland</a></author></comment><comment><text><span class="comment-copy">@Jens Roland -- You're quite right; Security is hard. Trying to delegate it to a framework is probably not a good strategy. Much better to actually understand what we're dealing with. It sounds like you have the most common bases covered though.</span></text><author><a class="comment-user" href="/users/18180/troelskn" title="77,344 reputation">troelskn</a></author></comment><comment><text><span class="comment-copy">But will mysql_real_escape_string properly handle the following:  $sub = mysql_real_escape_string("%something"); // still %something  mysql_query("SELECT * FROM messages WHERE subject LIKE '{$sub}%'");  ...?</span></text><author><a class="comment-user" href="/users/422845/jbyrd" title="1,400 reputation">jbyrd</a></author></comment><comment><text><span class="comment-copy">@jbyrd - no, LIKE uses a specialised regexp language. You will have to escape your input string twice - once for the regexp and once for the mysql string encoding. It's code within code within code.</span></text><author><a class="comment-user" href="/users/18180/troelskn" title="77,344 reputation">troelskn</a></author></comment><comment><text><span class="comment-copy">And escaping % and the like for SQL is most often overlooked...</span></text><author><a class="comment-user" href="/users/372654/halil-%c3%96zg%c3%bcr" title="10,650 reputation">Halil Ã–zgÃ¼r</a></author></comment><comment><text><span class="comment-copy">before you use <code>mysql_real_escape_string</code> , you should be connected to a database.</span></text><author><a class="comment-user" href="/users/567854/ijas" title="4,520 reputation">IJas</a></author></comment><comment><text><span class="comment-copy">At this moment <code>mysql_real_escape_string</code> is deprecated. It's considered good practice nowadays to use <a href="http://bobby-tables.com/php.html" rel="nofollow noreferrer">prepared statements</a> to prevent SQL injection. So switch to either MySQLi or PDO.</span></text><author><a class="comment-user" href="/users/258127/marcel-korpel" title="17,718 reputation">Marcel Korpel</a></author></comment><comment><text><span class="comment-copy">I haven't touched PHP for a long while; coming back to it and seeing this answer about the deprecation of magic quotes makes me happy.</span></text><author><a class="comment-user" href="/users/510036/qix" title="5,673 reputation">Qix</a></author></comment><comment><text><span class="comment-copy">While useful, this doesn't answer the actual question.  They wanted to allow some HTML tags in the input.  The only advice here on how to do that is to consider not allowing them by using htmlspecialchars.  Supporting them may be some sort of customer requirement.  I have seen a number of websites that support some HTML markup (e.g. slashdot.org) on input, so I can only assume it's possible.</span></text><author><a class="comment-user" href="/users/861178/jbo5112" title="664 reputation">jbo5112</a></author></comment><comment><text><span class="comment-copy">@troelskn <code>The only case where you need to actively filter data, is if you're accepting preformatted input. Eg. if you let your users post HTML markup, that you plan to display on the site.</code> but if you don't sanitize the input (a $_POST for example), then a user can always input html right? So... Here you are saying that you should sanitize every user input, because a user can enter html code anywhere if you don't sanitize it. Or have i gotten this wrong somehow?</span></text><author><a class="comment-user" href="/users/1286942/jo-smo" title="1,944 reputation">Jo Smo</a></author></comment><comment><text><span class="comment-copy">@tastro No, you don't sanitize when data is input - you sanitize when it's used. E.g. as late as possible. That will give you the best level of security.</span></text><author><a class="comment-user" href="/users/18180/troelskn" title="77,344 reputation">troelskn</a></author></comment><comment><text><span class="comment-copy">@troelskn could you tell me <code>why</code> it will give me the best level of security if i do it as late as possible? Thanks!</span></text><author><a class="comment-user" href="/users/1286942/jo-smo" title="1,944 reputation">Jo Smo</a></author></comment><comment><text><span class="comment-copy">Because you limit the attack surface. If you sanitize early (when input), you have to be certain that there are no other holes in the application where bad data could enter through. Whereas if you do it late, then your output function doesn't have to "trust" that it is given safe data - it simply assumes that everything is unsafe.</span></text><author><a class="comment-user" href="/users/18180/troelskn" title="77,344 reputation">troelskn</a></author></comment><comment><text><span class="comment-copy">@troelskn can you include "escape" code for each of the examples?</span></text><author><a class="comment-user" href="/users/2359957/soaring-code" title="339 reputation">Soaring Code</a></author></comment><comment><text><span class="comment-copy">Question: Would you need to sanitize/validate user input if you were using that input to make a curl post request?</span></text><author><span class="comment-user">user1893702</span></author></comment><comment><text><span class="comment-copy">@sudosoul probably not. Depending on how you pass data to curl, you will need to serialize/encode it properly though.</span></text><author><a class="comment-user" href="/users/18180/troelskn" title="77,344 reputation">troelskn</a></author></comment><comment><text><span class="comment-copy">Should I infer from this answer that (arbitrary) input categorically cannot be filtered? I don't follow.</span></text><author><a class="comment-user" href="/users/446106/mwfearnley" title="603 reputation">mwfearnley</a></author></comment><comment><text><span class="comment-copy">@troelskn you really need to update this post.</span></text><author><a class="comment-user" href="/users/727208/tere%c5%a1ko" title="44,303 reputation">tereÅ¡ko</a></author></comment><comment><text><span class="comment-copy">@tereÅ¡ko how so?</span></text><author><a class="comment-user" href="/users/18180/troelskn" title="77,344 reputation">troelskn</a></author></comment><comment><text><span class="comment-copy">@troelskn I was mostly thinking about the SQL part. As in: use of prepared statements instead of escaping.</span></text><author><a class="comment-user" href="/users/727208/tere%c5%a1ko" title="44,303 reputation">tereÅ¡ko</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Do not try to prevent SQL injection by sanitizing input data.</p>
<p>Instead, <strong>do not allow data to be used in creating your SQL code</strong>.  Use Prepared Statements (i.e. using parameters in a template query) that uses bound variables.  It is the only way to be guaranteed against SQL injection.</p>
<p>Please see my website <a href="http://bobby-tables.com/" rel="noreferrer">http://bobby-tables.com/</a> for more about preventing SQL injection.</p>
</div></text><author><a href="/users/8454/andy-lester">Andy Lester</a></author><comments><comment><text><span class="comment-copy">Or visit the <a href="http://php.net/manual/en/pdo.prepared-statements.php" rel="nofollow noreferrer">official documentation</a> and learn PDO and prepared statements.  Tiny learning curve, but if you know SQL pretty well, you'll have no trouble adapting.</span></text><author><a class="comment-user" href="/users/721073/a-coder" title="2,762 reputation">a coder</a></author></comment><comment><text><span class="comment-copy">For the specific case of SQL Injection, <i>this</i> is the correct answer!</span></text><author><a class="comment-user" href="/users/2224584/scott-arciszewski" title="15,046 reputation">Scott Arciszewski</a></author></comment><comment><text><span class="comment-copy">Note that prepared statements don't add any security, parameterised queries do. They just happen to be very easy to use together in PHP.</span></text><author><a class="comment-user" href="/users/156755/basic" title="17,013 reputation">Basic</a></author></comment><comment><text><span class="comment-copy">Its not the only guaranteed way. Hex the input and unhex in query will prevent also. Also hex attacks are not possible if you use hexing right.</span></text><author><a class="comment-user" href="/users/4346951/ramon-bakker" title="473 reputation">Ramon Bakker</a></author></comment><comment><text><span class="comment-copy">What if you're inputting something specialized, like email addresses or usernames?</span></text><author><a class="comment-user" href="/users/1067120/black-stormy" title="302 reputation">Black_Stormy</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>No.  You can't generically filter data without any context of what it's for.  Sometimes you'd want to take a SQL query as input and sometimes you'd want to take HTML as input.</p>
<p>You need to filter input on a whitelist -- ensure that the data matches some specification of what you expect.  Then you need to escape it before you use it, depending on the context in which you are using it.</p>
<p>The process of escaping data for SQL - to prevent SQL injection - is very different from the process of escaping data for (X)HTML, to prevent XSS.</p>
</div></text><author><a href="/users/7548/daniel-papasian">Daniel Papasian</a></author><comments><comment><text><span class="comment-copy">+1 "You can't generically filter data without any context of what it's for."  Should be repeated more often.</span></text><author><a class="comment-user" href="/users/385273/ben" title="21,081 reputation">Ben</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>PHP has the new nice filter_input functions now, that for instance liberate you from finding 'the ultimate e-mail regex' now that there is a built-in FILTER_VALIDATE_EMAIL type</p>
<p>My own filter class (uses javascript to highlight faulty fields) can be initiated by either an ajax request or normal form post. (see the example below)
    

</p><pre class="default prettyprint prettyprinted" style=""><code><span class="com">/**
 *  Pork.FormValidator
 *  Validates arrays or properties by setting up simple arrays. 
 *  Note that some of the regexes are for dutch input!
 *  Example:
 * 
 *  $validations = array('name' =&gt; 'anything','email' =&gt; 'email','alias' =&gt; 'anything','pwd'=&gt;'anything','gsm' =&gt; 'phone','birthdate' =&gt; 'date');
 *  $required = array('name', 'email', 'alias', 'pwd');
 *  $sanatize = array('alias');
 *
 *  $validator = new FormValidator($validations, $required, $sanatize);
 *                  
 *  if($validator-&gt;validate($_POST))
 *  {
 *      $_POST = $validator-&gt;sanatize($_POST);
 *      // now do your saving, $_POST has been sanatized.
 *      die($validator-&gt;getScript()."&lt;script type='text/javascript'&gt;alert('saved changes');&lt;/script&gt;");
 *  }
 *  else
 *  {
 *      die($validator-&gt;getScript());
 *  }   
 *  
 * To validate just one element:
 * $validated = new FormValidator()-&gt;validate('blah@bla.', 'email');
 * 
 * To sanatize just one element:
 * $sanatized = new FormValidator()-&gt;sanatize('&lt;b&gt;blah&lt;/b&gt;', 'string');
 * 
 * @package pork
 * @author SchizoDuckie
 * @copyright SchizoDuckie 2008
 * @version 1.0
 * @access public
 */</span><span class="pln">
</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">FormValidator</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> $regexes </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Array</span><span class="pun">(</span><span class="pln">
            </span><span class="str">'date'</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="str">"^[0-9]{1,2}[-/][0-9]{1,2}[-/][0-9]{4}\$"</span><span class="pun">,</span><span class="pln">
            </span><span class="str">'amount'</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="str">"^[-]?[0-9]+\$"</span><span class="pun">,</span><span class="pln">
            </span><span class="str">'number'</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="str">"^[-]?[0-9,]+\$"</span><span class="pun">,</span><span class="pln">
            </span><span class="str">'alfanum'</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="str">"^[0-9a-zA-Z ,.-_\\s\?\!]+\$"</span><span class="pun">,</span><span class="pln">
            </span><span class="str">'not_empty'</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="str">"[a-z0-9A-Z]+"</span><span class="pun">,</span><span class="pln">
            </span><span class="str">'words'</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="str">"^[A-Za-z]+[A-Za-z \\s]*\$"</span><span class="pun">,</span><span class="pln">
            </span><span class="str">'phone'</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="str">"^[0-9]{10,11}\$"</span><span class="pun">,</span><span class="pln">
            </span><span class="str">'zipcode'</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="str">"^[1-9][0-9]{3}[a-zA-Z]{2}\$"</span><span class="pun">,</span><span class="pln">
            </span><span class="str">'plate'</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="str">"^([0-9a-zA-Z]{2}[-]){2}[0-9a-zA-Z]{2}\$"</span><span class="pun">,</span><span class="pln">
            </span><span class="str">'price'</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="str">"^[0-9.,]*(([.,][-])|([.,][0-9]{2}))?\$"</span><span class="pun">,</span><span class="pln">
            </span><span class="str">'2digitopt'</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="str">"^\d+(\,\d{2})?\$"</span><span class="pun">,</span><span class="pln">
            </span><span class="str">'2digitforce'</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="str">"^\d+\,\d\d\$"</span><span class="pun">,</span><span class="pln">
            </span><span class="str">'anything'</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="str">"^[\d\D]{1,}\$"</span><span class="pln">
    </span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> $validations</span><span class="pun">,</span><span class="pln"> $sanatations</span><span class="pun">,</span><span class="pln"> $mandatories</span><span class="pun">,</span><span class="pln"> $errors</span><span class="pun">,</span><span class="pln"> $corrects</span><span class="pun">,</span><span class="pln"> $fields</span><span class="pun">;</span><span class="pln">


    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> __construct</span><span class="pun">(</span><span class="pln">$validations</span><span class="pun">=</span><span class="pln">array</span><span class="pun">(),</span><span class="pln"> $mandatories </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">(),</span><span class="pln"> $sanatations </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">())</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        $this</span><span class="pun">-&gt;</span><span class="pln">validations </span><span class="pun">=</span><span class="pln"> $validations</span><span class="pun">;</span><span class="pln">
        $this</span><span class="pun">-&gt;</span><span class="pln">sanatations </span><span class="pun">=</span><span class="pln"> $sanatations</span><span class="pun">;</span><span class="pln">
        $this</span><span class="pun">-&gt;</span><span class="pln">mandatories </span><span class="pun">=</span><span class="pln"> $mandatories</span><span class="pun">;</span><span class="pln">
        $this</span><span class="pun">-&gt;</span><span class="pln">errors </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">();</span><span class="pln">
        $this</span><span class="pun">-&gt;</span><span class="pln">corrects </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">();</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="com">/**
     * Validates an array of items (if needed) and returns true or false
     *
     */</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> validate</span><span class="pun">(</span><span class="pln">$items</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        $this</span><span class="pun">-&gt;</span><span class="pln">fields </span><span class="pun">=</span><span class="pln"> $items</span><span class="pun">;</span><span class="pln">
        $havefailures </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">foreach</span><span class="pun">(</span><span class="pln">$items </span><span class="kwd">as</span><span class="pln"> $key</span><span class="pun">=&gt;</span><span class="pln">$val</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">if</span><span class="pun">((</span><span class="pln">strlen</span><span class="pun">(</span><span class="pln">$val</span><span class="pun">)</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> array_search</span><span class="pun">(</span><span class="pln">$key</span><span class="pun">,</span><span class="pln"> $this</span><span class="pun">-&gt;</span><span class="pln">validations</span><span class="pun">)</span><span class="pln"> </span><span class="pun">===</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> array_search</span><span class="pun">(</span><span class="pln">$key</span><span class="pun">,</span><span class="pln"> $this</span><span class="pun">-&gt;</span><span class="pln">mandatories</span><span class="pun">)</span><span class="pln"> </span><span class="pun">===</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">)</span><span class="pln"> 
            </span><span class="pun">{</span><span class="pln">
                $this</span><span class="pun">-&gt;</span><span class="pln">corrects</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $key</span><span class="pun">;</span><span class="pln">
                </span><span class="kwd">continue</span><span class="pun">;</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
            $result </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">self</span><span class="pun">::</span><span class="pln">validateItem</span><span class="pun">(</span><span class="pln">$val</span><span class="pun">,</span><span class="pln"> $this</span><span class="pun">-&gt;</span><span class="pln">validations</span><span class="pun">[</span><span class="pln">$key</span><span class="pun">]);</span><span class="pln">
            </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">$result </span><span class="pun">===</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                $havefailures </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span><span class="pln">
                $this</span><span class="pun">-&gt;</span><span class="pln">addError</span><span class="pun">(</span><span class="pln">$key</span><span class="pun">,</span><span class="pln"> $this</span><span class="pun">-&gt;</span><span class="pln">validations</span><span class="pun">[</span><span class="pln">$key</span><span class="pun">]);</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
            </span><span class="kwd">else</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                $this</span><span class="pun">-&gt;</span><span class="pln">corrects</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $key</span><span class="pun">;</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">return</span><span class="pun">(!</span><span class="pln">$havefailures</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="com">/**
     *
     *  Adds unvalidated class to thos elements that are not validated. Removes them from classes that are.
     */</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> getScript</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">if</span><span class="pun">(!</span><span class="pln">empty</span><span class="pun">(</span><span class="pln">$this</span><span class="pun">-&gt;</span><span class="pln">errors</span><span class="pun">))</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            $errors </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">();</span><span class="pln">
            </span><span class="kwd">foreach</span><span class="pun">(</span><span class="pln">$this</span><span class="pun">-&gt;</span><span class="pln">errors </span><span class="kwd">as</span><span class="pln"> $key</span><span class="pun">=&gt;</span><span class="pln">$val</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> $errors</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"'INPUT[name={$key}]'"</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

            $output </span><span class="pun">=</span><span class="pln"> </span><span class="str">'$$('</span><span class="pun">.</span><span class="pln">implode</span><span class="pun">(</span><span class="str">','</span><span class="pun">,</span><span class="pln"> $errors</span><span class="pun">).</span><span class="str">').addClass("unvalidated");'</span><span class="pun">;</span><span class="pln"> 
            $output </span><span class="pun">.=</span><span class="pln"> </span><span class="str">"new FormValidator().showMessage();"</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">if</span><span class="pun">(!</span><span class="pln">empty</span><span class="pun">(</span><span class="pln">$this</span><span class="pun">-&gt;</span><span class="pln">corrects</span><span class="pun">))</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            $corrects </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">();</span><span class="pln">
            </span><span class="kwd">foreach</span><span class="pun">(</span><span class="pln">$this</span><span class="pun">-&gt;</span><span class="pln">corrects </span><span class="kwd">as</span><span class="pln"> $key</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> $corrects</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"'INPUT[name={$key}]'"</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
            $output </span><span class="pun">.=</span><span class="pln"> </span><span class="str">'$$('</span><span class="pun">.</span><span class="pln">implode</span><span class="pun">(</span><span class="str">','</span><span class="pun">,</span><span class="pln"> $corrects</span><span class="pun">).</span><span class="str">').removeClass("unvalidated");'</span><span class="pun">;</span><span class="pln">   
        </span><span class="pun">}</span><span class="pln">
        $output </span><span class="pun">=</span><span class="pln"> </span><span class="str">"&lt;script type='text/javascript'&gt;{$output} &lt;/script&gt;"</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">return</span><span class="pun">(</span><span class="pln">$output</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">


    </span><span class="com">/**
     *
     * Sanatizes an array of items according to the $this-&gt;sanatations
     * sanatations will be standard of type string, but can also be specified.
     * For ease of use, this syntax is accepted:
     * $sanatations = array('fieldname', 'otherfieldname'=&gt;'float');
     */</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> sanatize</span><span class="pun">(</span><span class="pln">$items</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">foreach</span><span class="pun">(</span><span class="pln">$items </span><span class="kwd">as</span><span class="pln"> $key</span><span class="pun">=&gt;</span><span class="pln">$val</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">array_search</span><span class="pun">(</span><span class="pln">$key</span><span class="pun">,</span><span class="pln"> $this</span><span class="pun">-&gt;</span><span class="pln">sanatations</span><span class="pun">)</span><span class="pln"> </span><span class="pun">===</span><span class="pln"> </span><span class="kwd">false</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> </span><span class="pun">!</span><span class="pln">array_key_exists</span><span class="pun">(</span><span class="pln">$key</span><span class="pun">,</span><span class="pln"> $this</span><span class="pun">-&gt;</span><span class="pln">sanatations</span><span class="pun">))</span><span class="pln"> </span><span class="kwd">continue</span><span class="pun">;</span><span class="pln">
            $items</span><span class="pun">[</span><span class="pln">$key</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">self</span><span class="pun">::</span><span class="pln">sanatizeItem</span><span class="pun">(</span><span class="pln">$val</span><span class="pun">,</span><span class="pln"> $this</span><span class="pun">-&gt;</span><span class="pln">validations</span><span class="pun">[</span><span class="pln">$key</span><span class="pun">]);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">return</span><span class="pun">(</span><span class="pln">$items</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">


    </span><span class="com">/**
     *
     * Adds an error to the errors array.
     */</span><span class="pln"> 
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> addError</span><span class="pun">(</span><span class="pln">$field</span><span class="pun">,</span><span class="pln"> $type</span><span class="pun">=</span><span class="str">'string'</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        $this</span><span class="pun">-&gt;</span><span class="pln">errors</span><span class="pun">[</span><span class="pln">$field</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $type</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="com">/**
     *
     * Sanatize a single var according to $type.
     * Allows for static calling to allow simple sanatization
     */</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> sanatizeItem</span><span class="pun">(</span><span class="pln">$var</span><span class="pun">,</span><span class="pln"> $type</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        $flags </span><span class="pun">=</span><span class="pln"> NULL</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">switch</span><span class="pun">(</span><span class="pln">$type</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">case</span><span class="pln"> </span><span class="str">'url'</span><span class="pun">:</span><span class="pln">
                $filter </span><span class="pun">=</span><span class="pln"> FILTER_SANITIZE_URL</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">case</span><span class="pln"> </span><span class="str">'int'</span><span class="pun">:</span><span class="pln">
                $filter </span><span class="pun">=</span><span class="pln"> FILTER_SANITIZE_NUMBER_INT</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">case</span><span class="pln"> </span><span class="str">'float'</span><span class="pun">:</span><span class="pln">
                $filter </span><span class="pun">=</span><span class="pln"> FILTER_SANITIZE_NUMBER_FLOAT</span><span class="pun">;</span><span class="pln">
                $flags </span><span class="pun">=</span><span class="pln"> FILTER_FLAG_ALLOW_FRACTION </span><span class="pun">|</span><span class="pln"> FILTER_FLAG_ALLOW_THOUSAND</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">case</span><span class="pln"> </span><span class="str">'email'</span><span class="pun">:</span><span class="pln">
                $var </span><span class="pun">=</span><span class="pln"> substr</span><span class="pun">(</span><span class="pln">$var</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">254</span><span class="pun">);</span><span class="pln">
                $filter </span><span class="pun">=</span><span class="pln"> FILTER_SANITIZE_EMAIL</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">case</span><span class="pln"> </span><span class="str">'string'</span><span class="pun">:</span><span class="pln">
            </span><span class="kwd">default</span><span class="pun">:</span><span class="pln">
                $filter </span><span class="pun">=</span><span class="pln"> FILTER_SANITIZE_STRING</span><span class="pun">;</span><span class="pln">
                $flags </span><span class="pun">=</span><span class="pln"> FILTER_FLAG_NO_ENCODE_QUOTES</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">

        </span><span class="pun">}</span><span class="pln">
        $output </span><span class="pun">=</span><span class="pln"> filter_var</span><span class="pun">(</span><span class="pln">$var</span><span class="pun">,</span><span class="pln"> $filter</span><span class="pun">,</span><span class="pln"> $flags</span><span class="pun">);</span><span class="pln">        
        </span><span class="kwd">return</span><span class="pun">(</span><span class="pln">$output</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="com">/** 
     *
     * Validates a single var according to $type.
     * Allows for static calling to allow simple validation.
     *
     */</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> validateItem</span><span class="pun">(</span><span class="pln">$var</span><span class="pun">,</span><span class="pln"> $type</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">array_key_exists</span><span class="pun">(</span><span class="pln">$type</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">self</span><span class="pun">::</span><span class="pln">$regexes</span><span class="pun">))</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            $returnval </span><span class="pun">=</span><span class="pln">  filter_var</span><span class="pun">(</span><span class="pln">$var</span><span class="pun">,</span><span class="pln"> FILTER_VALIDATE_REGEXP</span><span class="pun">,</span><span class="pln"> array</span><span class="pun">(</span><span class="str">"options"</span><span class="pun">=&gt;</span><span class="pln"> array</span><span class="pun">(</span><span class="str">"regexp"</span><span class="pun">=&gt;</span><span class="str">'!'</span><span class="pun">.</span><span class="kwd">self</span><span class="pun">::</span><span class="pln">$regexes</span><span class="pun">[</span><span class="pln">$type</span><span class="pun">].</span><span class="str">'!i'</span><span class="pun">)))</span><span class="pln"> </span><span class="pun">!==</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">return</span><span class="pun">(</span><span class="pln">$returnval</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        $filter </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">switch</span><span class="pun">(</span><span class="pln">$type</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">case</span><span class="pln"> </span><span class="str">'email'</span><span class="pun">:</span><span class="pln">
                $var </span><span class="pun">=</span><span class="pln"> substr</span><span class="pun">(</span><span class="pln">$var</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">254</span><span class="pun">);</span><span class="pln">
                $filter </span><span class="pun">=</span><span class="pln"> FILTER_VALIDATE_EMAIL</span><span class="pun">;</span><span class="pln">    
            </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">case</span><span class="pln"> </span><span class="str">'int'</span><span class="pun">:</span><span class="pln">
                $filter </span><span class="pun">=</span><span class="pln"> FILTER_VALIDATE_INT</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">case</span><span class="pln"> </span><span class="str">'boolean'</span><span class="pun">:</span><span class="pln">
                $filter </span><span class="pun">=</span><span class="pln"> FILTER_VALIDATE_BOOLEAN</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">case</span><span class="pln"> </span><span class="str">'ip'</span><span class="pun">:</span><span class="pln">
                $filter </span><span class="pun">=</span><span class="pln"> FILTER_VALIDATE_IP</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">case</span><span class="pln"> </span><span class="str">'url'</span><span class="pun">:</span><span class="pln">
                $filter </span><span class="pun">=</span><span class="pln"> FILTER_VALIDATE_URL</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$filter </span><span class="pun">===</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">)</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> </span><span class="kwd">false</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> filter_var</span><span class="pun">(</span><span class="pln">$var</span><span class="pun">,</span><span class="pln"> $filter</span><span class="pun">)</span><span class="pln"> </span><span class="pun">!==</span><span class="pln"> </span><span class="kwd">false</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> </span><span class="kwd">true</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">       



</span><span class="pun">}</span></code></pre>
<p>Of course, keep in mind that you need to do your sql query escaping too depending on what type of db your are using (mysql_real_escape_string() is useless for an sql server for instance). You probably want to handle this automatically at your appropriate application layer like an ORM. Also, as mentioned above: for outputting to html use the other php dedicated functions like htmlspecialchars ;)</p>
<p>For really allowing HTML input with like stripped classes and/or tags depend on one of the dedicated xss validation packages. DO NOT WRITE YOUR OWN REGEXES TO PARSE HTML!</p>
</div></text><author><a href="/users/18077/schizoduckie">SchizoDuckie</a></author><comments><comment><text><span class="comment-copy">This looks like it might be a handy script for validating inputs, but it is <i>completely</i> irrelevant to the question.</span></text><author><a class="comment-user" href="/users/3408/rjmunro" title="15,778 reputation">rjmunro</a></author></comment><comment><text><span class="comment-copy">s/sanatize/sanitize/g;</span></text><author><a class="comment-user" href="/users/1992193/brock-hensley" title="2,529 reputation">Brock Hensley</a></author></comment><comment><text><span class="comment-copy">s/sanitize/sanitise/g;</span></text><author><a class="comment-user" href="/users/102616/christian" title="2,271 reputation">Christian</a></author></comment><comment><text><span class="comment-copy">tea and crumpets ? sanitise : sanitize</span></text><author><a class="comment-user" href="/users/1483670/ch1pn3ss" title="61 reputation">ch1pn3ss</a></author></comment><comment><text><span class="comment-copy">sanitize? more like satanize</span></text><author><a class="comment-user" href="/users/528590/kaiserjohaan" title="3,576 reputation">KaiserJohaan</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>No, there is not.</p>
<p>First of all, SQL injection is an input filtering problem, and XSS is an output escaping one - so you wouldn't even execute these two operations at the same time in the code lifecycle.</p>
<p>Basic rules of thumb</p>
<ul>
<li>For SQL query, bind parameters (as with PDO) or use a driver-native escaping function for query variables (such as <code>mysql_real_escape_string()</code>)</li>
<li>Use <code>strip_tags()</code> to filter out unwanted HTML</li>
<li>Escape all other output with <code>htmlspecialchars()</code> and be mindful of the 2nd and 3rd parameters here.</li>
</ul>
</div></text><author><a href="/users/8815/peter-bailey">Peter Bailey</a></author><comments><comment><text><span class="comment-copy">So you only use strip_tags() or htmlspecialchars() when you know that the input has HTML that you want to get rid of or escape respectively - you are not using it for any security purpose right? Also, when you do the bind, what does it do for stuff like Bobby Tables? "Robert'); DROP TABLE Students;--" Does it just escape the quotes?</span></text><author><a class="comment-user" href="/users/257233/robert-mark-bram" title="1,464 reputation">Robert Mark Bram</a></author></comment><comment><text><span class="comment-copy">If you have user data that will go into a database and later be displayed on web pages, isn't it usually read a lot more than it's written?  To me, it makes more sense to filter it once (as input) before you store it, instead of having to filter it every time you display it.  Am I missing something or did a bunch of people vote for needless performance overhead in this and the accepted answer?</span></text><author><a class="comment-user" href="/users/861178/jbo5112" title="664 reputation">jbo5112</a></author></comment><comment><text><span class="comment-copy">Best answer for me. It's short and addresses the question well if you ask me. Is it possible to attack PHP somehow via $_POST or $_GET with some injection or is this impossible?</span></text><author><a class="comment-user" href="/users/1286942/jo-smo" title="1,944 reputation">Jo Smo</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>To address the XSS issue, take a look at <a href="http://www.htmlpurifier.org" rel="noreferrer">HTML Purifier</a>. It is fairly configurable and has a decent track record.</p>
<p>As for the SQL injection attacks, make sure you check the user input, and then run it though mysql_real_escape_string(). The function won't defeat all injection attacks, though, so it is important that you check the data before dumping it into your query string.</p>
<p>A better solution is to use prepared statements. The <a href="http://www.php.net/pdo" rel="noreferrer">PDO library</a> and mysqli extension support these.</p>
</div></text><author><a href="/users/15099/jasonbar">jasonbar</a></author><comments><comment><text><span class="comment-copy">there is no "best way" to do something like sanitizing input.. Use some library, html purifier is good. These libraries have been pounded on many times. So it is much more bulletproof than anything ou can come up yourself</span></text><author><a class="comment-user" href="/users/2976/paan" title="3,905 reputation">paan</a></author></comment><comment><text><span class="comment-copy">See also <a href="http://www.bioinformatics.org/phplabware/internal_utilities/htmLawed/" rel="nofollow noreferrer">bioinformatics.org/phplabware/internal_utilities/htmLawed</a> . From my understanding WordPress uses an older version, <a href="http://core.trac.wordpress.org/browser/tags/2.9.2/wp-includes/kses.php" rel="nofollow noreferrer">core.trac.wordpress.org/browser/tags/2.9.2/wp-includes/kses.â€Œâ€‹php</a></span></text><author><a class="comment-user" href="/users/3779/steve-clay" title="5,768 reputation">Steve Clay</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>PHP 5.2 introduced the <strong>filter_var</strong> function.</p>
<p>It supports a great deal of SANITIZE, VALIDATE filters.</p>
<p><a href="http://php.net/manual/en/function.filter-var.php" rel="noreferrer">http://php.net/manual/en/function.filter-var.php</a></p>
</div></text><author><a href="/users/436899/dangel">dangel</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>One trick that can help in the specific circumstance where you have a page like <code>/mypage?id=53</code> and you use the id in a WHERE clause is to ensure that id definitely is an integer, like so:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">isset</span><span class="pun">(</span><span class="pln">$_GET</span><span class="pun">[</span><span class="str">'id'</span><span class="pun">]))</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  $id </span><span class="pun">=</span><span class="pln"> $_GET</span><span class="pun">[</span><span class="str">'id'</span><span class="pun">];</span><span class="pln">
  settype</span><span class="pun">(</span><span class="pln">$id</span><span class="pun">,</span><span class="pln"> </span><span class="str">'integer'</span><span class="pun">);</span><span class="pln">
  $result </span><span class="pun">=</span><span class="pln"> mysql_query</span><span class="pun">(</span><span class="str">"SELECT * FROM mytable WHERE id = '$id'"</span><span class="pun">);</span><span class="pln">
  </span><span class="com"># now use the result</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>But of course that only cuts out one specific attack, so read all the other answers. (And yes I know that the code above isn't great, but it shows the specific defence.)</p>
</div></text><author><a href="/users/3189/hamish-downer">Hamish Downer</a></author><comments><comment><text><span class="comment-copy">I use $id = intval($id) instead :)</span></text><author><a class="comment-user" href="/users/617146/silentbang" title="2,748 reputation">Silentbang</a></author></comment><comment><text><span class="comment-copy">Casting integer is a good way to ensure only numerical data is inserted.</span></text><author><a class="comment-user" href="/users/272501/nn2" title="4,848 reputation">nn2</a></author></comment><comment><text><span class="comment-copy"><code>$id = (int)$_GET['id']</code> and <code>$que = sprintf('SELECT ... WHERE id="%d"', $id)</code> is good too</span></text><author><a class="comment-user" href="/users/1713660/vladkras" title="6,274 reputation">vladkras</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>What you are describing here is two separate issues: </p>
<ol>
<li>Sanitizing / filtering of user input data.</li>
<li>Escaping output.</li>
</ol>
<p>1) User input should always be assumed to be bad.</p>
<p>Using prepared statements, or/and filtering with mysql_real_escape_string is definitely a must.
PHP also has filter_input built in which is a good place to start.</p>
<p>2) This is a large topic, and it depends on the context of the data being output. For HTML there are solutions such as htmlpurifier out there.
as a rule of thumb, always escape anything you output.</p>
<p>Both issues are far too big to go into in a single post, but there are lots of posts which go into more detail:</p>
<p><a href="http://shiflett.org/articles" rel="noreferrer">Methods PHP output</a></p>
<p><a href="https://www.lazycat.org/php-output-escaping.html" rel="noreferrer">Safer PHP output</a></p>
</div></text><author><a href="/users/1185624/andrew">Andrew</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>If you're using PostgreSQL, the input from PHP can be escaped with pg_escape_string()</p>
<blockquote>
<p>$username = pg_escape_string($_POST['username']);</p>
</blockquote>
<p>From the documentation (<a href="http://php.net/manual/es/function.pg-escape-string.php" rel="nofollow">http://php.net/manual/es/function.pg-escape-string.php</a>):</p>
<blockquote>
<p>pg_escape_string() escapes a string for querying the database. It returns an escaped string in the PostgreSQL format without quotes.</p>
</blockquote>
</div></text><author><a href="/users/2325440/alejandro-silva">Alejandro Silva</a></author><comments><comment><text><span class="comment-copy"><b><a href="https://php.net/manual/es/function.pg-escape-literal.php" rel="nofollow noreferrer">pg_escape_literal()</a></b> is the recommended function to use for PostgreSQL.</span></text><author><a class="comment-user" href="/users/1592648/cryptic-%e3%83%84" title="12,286 reputation">cryptic ãƒ„</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Just wanted to add that on the subject of output escaping, if you use php DOMDocument to make your html output it will automatically escape in the right context. An attribute (value="") and the inner text of a &lt;span&gt; are not equal.
To be safe against XSS read this:
<a href="https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet" rel="nofollow">OWASP XSS Prevention Cheat Sheet</a></p>
</div></text><author><a href="/users/2810995/user138720">user138720</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Easiest way to avoid mistakes in sanitizing input and escaping data is using PHP framework like <a href="http://symfony.com/" rel="nofollow">Symphony</a>, <a href="http://nette.org/en/" rel="nofollow">Nette</a> etc. or part of that framework (templating engine, database layer, ORM).</p>
<p>Templating engine like <a href="http://twig.sensiolabs.org/" rel="nofollow">Twig</a> or Latte has output escaping on by default - you don't have to solve manually if you have properly escaped your output depending on context (HTML or Javascript part of web page).</p>
<p>Framework is automatically sanitizing input and you should't use $_POST, $_GET or $_SESSION variables directly, but through mechanism like routing, session handling etc.</p>
<p>And for database (model) layer there are ORM frameworks like Doctrine or wrappers around PDO like Nette Database.</p>
<p>You can read more about it here - <a href="http://stackoverflow.com/questions/2964140/what-is-a-framework-what-does-it-do-why-do-we-need-a-framework">What is a framework? What does it do? Why do we need a framework</a></p>
</div></text><author><a href="/users/5112619/ond%c5%99ej-%c5%a0otek">OndÅ™ej Å otek</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>There is the filter extension (<a href="http://devolio.com/blog/archives/413-Data-Filtering-Using-PHPs-Filter-Functions-Part-one.html" rel="nofollow noreferrer">howto-link</a>, <a href="http://php.net/filter" rel="nofollow noreferrer">manual</a>), which works pretty well with all GPC variables. It's not a magic-do-it-all thing though, you will still have to use it.</p>
</div></text><author><a href="/users/2859/till">Till</a></author><comments/></answer></answers></post>