<?xml version="1.0" encoding="utf-8"?>
<post><title>What should every programmer know about security? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I am an IT student and I am now in the 3rd year in university. Until now we've been studing a lot of subjects related to computers in general (programming, algorithms, computer architecture, maths, etc).</p>
<p>I am very sure that nobody can learn every thing about security but sure there is a "minimum" knowledge every programmer or IT student should know about it and my question is what is this minimum knowledge?</p>
<p>Can you suggest some e-books or courses or anything can help to start with this road?</p>
</div></text><author><a href="/users/255971">M.H</a></author><comments><comment><text><span class="comment-copy">Quite similar to <a href="http://stackoverflow.com/questions/325862/what-are-the-most-common-security-mistakes-programmers-make" title="what are the most common security mistakes programmers make">stackoverflow.com/questions/325862/…</a></span></text><author><a class="comment-user" href="/users/14637/thomas" title="91,127 reputation">Thomas</a></author></comment><comment><text><span class="comment-copy">Rule #1: Never trust user's input. Not even if it's your Grandmother</span></text><author><a class="comment-user" href="/users/166712/anthony-forloney" title="56,128 reputation">Anthony Forloney</a></author></comment><comment><text><span class="comment-copy">..and this thread also has the great information - <a href="http://stackoverflow.com/questions/72394/what-should-a-developer-know-before-building-a-public-web-site" title="what should a developer know before building a public web site">stackoverflow.com/questions/72394/…</a></span></text><author><a class="comment-user" href="/users/242940/sripathi-krishnan" title="22,613 reputation">Sripathi Krishnan</a></author></comment><comment><text><span class="comment-copy">my question isn't only about programmers and their mistakes,also about IT and computer science students</span></text><author><a class="comment-user owner" href="/users/255971/mohammad-al-hammod" title="2,961 reputation">Mohammad AL Hammod</a></author></comment><comment><text><span class="comment-copy">Watch your error messages. While you want to be user friendly, the difference between "This account does not exist" and "The password is invalid" can be dangerous in some cases.</span></text><author><a class="comment-user" href="/users/123695/michael-mior" title="18,457 reputation">Michael Mior</a></author></comment><comment><text><span class="comment-copy">See <a href="http://news.ycombinator.com/item?id=3940286" rel="nofollow noreferrer">news.ycombinator.com/item?id=3940286</a> for advice from a security researcher and tester.</span></text><author><a class="comment-user" href="/users/181298/jacob" title="3,167 reputation">Jacob</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Principles to keep in mind if you want your applications to be secure: </p>
<ul>
<li><strong>Never trust any input!</strong> </li>
<li><a href="http://www.ibm.com/developerworks/library/l-sp2.html" rel="noreferrer">Validate input</a>  from all untrusted sources - use whitelists not blacklists</li>
<li>Plan for security from the start - it's not something you can bolt on at the end </li>
<li>Keep it simple - complexity increases the likelihood of security holes</li>
<li>Keep your <a href="http://en.wikipedia.org/wiki/Attack_surface" rel="noreferrer">attack surface</a> to a minimum</li>
<li>Make sure you <a href="http://www.owasp.org/index.php/Fail_securely" rel="noreferrer">fail securely</a></li>
<li>Use <a href="https://buildsecurityin.us-cert.gov/bsi/articles/knowledge/principles/347-BSI.html" rel="noreferrer">defence in depth</a></li>
<li>Adhere to the principle of <a href="https://buildsecurityin.us-cert.gov/bsi/articles/knowledge/principles/351-BSI.html" rel="noreferrer">least privilege</a> </li>
<li>Use <a href="http://www.owasp.org/index.php/Threat_Risk_Modeling" rel="noreferrer">threat modelling</a></li>
<li><a href="http://www.cgisecurity.com/owasp/html/ch04s09.html" rel="noreferrer">Compartmentalize</a> - so your system is not all or nothing </li>
<li>Hiding secrets is hard - and secrets hidden in code won't stay secret for long</li>
<li>Don't write your own crypto</li>
<li>Using crypto doesn't mean you're secure (attackers will look for a weaker link)</li>
<li>Be aware of <a href="http://www.linuxjournal.com/article/6701" rel="noreferrer">buffer overflows</a> and how to protect against them</li>
</ul>
<p>There are some excellent books and articles online about making your applications secure:</p>
<ul>
<li><a href="http://rads.stackoverflow.com/amzn/click/0735617228" rel="noreferrer"><strong>Writing Secure Code 2nd Edition</strong></a> - I think every programmer should read this</li>
<li><a href="http://rads.stackoverflow.com/amzn/click/020172152X" rel="noreferrer">Building Secure Software: How to Avoid Security Problems the Right Way </a></li>
<li><a href="http://rads.stackoverflow.com/amzn/click/0596003943" rel="noreferrer">Secure Programming Cookbook</a></li>
<li><a href="https://docs.google.com/viewer?url=http://www.usenix.org/events/sec04/tech/slides/mcgraw.pdf" rel="noreferrer">Exploiting Software</a></li>
<li><a href="http://www.cl.cam.ac.uk/%7Erja14/book.html" rel="noreferrer">Security Engineering</a> - an excellent read</li>
<li><a href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/index.html" rel="noreferrer">Secure Programming for Linux and Unix HOWTO</a></li>
</ul>
<p><strong>Train your developers on application security best pratices</strong> </p>
<p><a href="http://www.codebashing.com/sql_demo" rel="noreferrer" title="Codebashing">Codebashing</a> (paid)</p>
<p><a href="https://www.securityinnovation.com/training/application-security" rel="noreferrer">Security Innovation</a>(paid)</p>
<p><a href="https://www.securitycompass.com/training/" rel="noreferrer">Security Compass</a> (paid)</p>
<p><a href="https://www.owasp.org/index.php/OWASP/Training/OWASP_WebGoat_Project" rel="noreferrer">OWASP WebGoat</a> (free)</p>
</div></text><author><a href="/users/319119">bignum</a></author><comments><comment><text><span class="comment-copy">+1 "exploiting software: how to break code" is a great book,  however that slide show you linked to is horrible.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">However, unfortunately it's almost impossible to instantiate the principle of least privilege in any modern system. For example, the Linux kernel (source I'm currently using) contains over 9.4 million lines of C code and over 400K lines of assembly, all of which run in an unrestricted context. A simple miscalculation (perhaps intentional) in one of these millions of lines will compromise the entire system. Perhaps in the next century or two a solution will emerge, perhaps not, as nobody actually cares about creating secure OS/languages/frameworks.</span></text><author><a class="comment-user" href="/users/80243/l%cc%b2%cc%b3o%cc%b2%cc%b3%cc%b3n%cc%b2%cc%b3%cc%b3g%cc%b2%cc%b3%cc%b3p%cc%b2%cc%b3o%cc%b2%cc%b3%cc%b3k%cc%b2%cc%b3%cc%b3e%cc%b2%cc%b3%cc%b3" title="8,609 reputation">L̲̳o̲̳̳n̲̳̳g̲̳̳p̲̳o̲̳̳k̲̳̳e̲̳̳</a></author></comment><comment><text><span class="comment-copy">I'd add "The Web Application Hacker's Handbook" to that list.</span></text><author><a class="comment-user" href="/users/18424/casey" title="4,075 reputation">casey</a></author></comment><comment><text><span class="comment-copy">Replace "Never trust user input!" to "Never trust any input!". Inputs coming from other software should be treated the same as user input - for example, in website logging most people wouldn't think of User-Agent / browser ID field as 'user input' but it can just as easily contain, say, a SQL injection.</span></text><author><a class="comment-user" href="/users/366553/peteris" title="852 reputation">Peteris</a></author></comment><comment><text><span class="comment-copy">@L̲̳o̲̳̳n̲̳̳g̲̳̳p̲̳o̲̳̳k̲̳̳e̲̳̳ Well, there is that Microsoft Research experimental OS (Singularity) built on .NET, which targeted safety as a primary goal (no buffer overflows, yay!). No process memory sharing, no code self-modification, even the device drivers are just another software isolated process in .NET. Quite an interesting concept, but it would be very hard to push this to people (most importantly, it pretty much can't do backwards compatibility with existing software or even drivers; a bit like the first 10 years of Linux :D ).</span></text><author><a class="comment-user" href="/users/3032289/luaan" title="42,820 reputation">Luaan</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Rule #1 of security for programmers: <strong>Don't roll your own</strong></p>
<p>Unless you are yourself a security expert and/or cryptographer, <em>always</em> use a well-designed, well-tested, and mature security platform, framework, or library to do the work for you. These things have spent years being thought out, patched, updated, and examined by experts and hackers alike. You want to gain those advantages, not dismiss them by trying to reinvent the wheel.</p>
<p>Now, that's not to say you don't need to learn anything about security. You certainly need to know enough to understand what you're doing and make sure you're using the tools correctly. However, if you ever find yourself about to start writing your own cryptography algorithm, authentication system, input sanitizer, etc, stop, take a step back, and remember rule #1.</p>
</div></text><author><a href="/posts/2794045/revisions" id="history-2794045" title="show revision history for this post">
        Tyler McHenry
        </a></author><comments><comment><text><span class="comment-copy">This is a bad rule in my opinion.  You can essentially be targeted just because of the platform you select, rather than any real interest in your assets.  Think about all of the security holes that are found in 3rd party platforms, and all of the products that are instantly vulnerable just because they use it.  I wouldn't be so quick to trust my security to a 3rd party.</span></text><author><a class="comment-user" href="/users/353988/fosco" title="28,552 reputation">Fosco</a></author></comment><comment><text><span class="comment-copy">I think this is a good rule for Crypto - rolling your own encryption is a recipe for disaster. But rolling your own blog engine might be more secure as Fosco points out - if you roll your own you are less likely to be caught by automated attacks that wordpress installs have to deal with.</span></text><author><a class="comment-user" href="/users/284168/james-p-mcgrath" title="1,320 reputation">James P McGrath</a></author></comment><comment><text><span class="comment-copy">When it comes to crypto, this rule is absolutely correct. Don't write your own crypto, period.  When it comes to using 3rd party platforms, it depends. Some platforms are inherently more secure, some platforms are inherently less secure, and most platforms probably provide some security features but also some known attack vectors. Take the recent <a href="http://news.ycombinator.com/item?id=3663197" rel="nofollow noreferrer">Rails vulnerability that caused a security hole at github</a>. Undoubtedly Rails provides many many security features, but it also has some powerful features with insecure defaults.</span></text><author><a class="comment-user" href="/users/299313/michael-kopinsky" title="651 reputation">Michael Kopinsky</a></author></comment><comment><text><span class="comment-copy">When it comes to crypto, don't roll your own – <i>but do understand the thing you are using.</i> If you don't understand why using the same encryption key for RC4 for two messages is a horrible idea, read up before using any stream cipher, for example.</span></text><author><a class="comment-user" href="/users/254252/christopher-creutzig" title="7,387 reputation">Christopher Creutzig</a></author></comment><comment><text><span class="comment-copy">Even after the HeartBleed bug it is apparent this is a good rule. Imagine how hard it would have been to a find a heatbleed-like bug in a custom or proprietary project. If you roll your own, you are just hiding behind obscurity and won't know what bugs could be being exploited.</span></text><author><a class="comment-user" href="/users/17315/sqeaky" title="1,186 reputation">Sqeaky</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p><strong>Every programmer should know how to write exploit code.</strong></p>
<p>Without knowing how systems are exploited you are accidentally stopping vulnerabilities.  Knowing how to patch code is absolutely meaningless unless you know how to test your patches.   Security isn't just a bunch of thought experiments,  you must be scientific and test your experiments.</p>
</div></text><author><a href="/users/183528">rook</a></author><comments><comment><text><span class="comment-copy">I'd argue this is not necessary at all. Just adhere to the principle: if the attacker can cause a memory corruption of any kind, consider yourself owned. No need to get into the details of actually writing (working) exploits.</span></text><author><a class="comment-user" href="/users/62459/newgre" title="3,443 reputation">newgre</a></author></comment><comment><text><span class="comment-copy">@newgre not every vulnerability is a buffer overflow.   There are a few thousand vulnerabilities covered by the Common Weakness Enumeration system.   A programmer needs to understand the mind of the attacker or he will unknowing make mistakes.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">I know that not every one of them is a buffer overflow, but anything that is usually referred to as an "exploit" is based on some kind of memory corruption: buffer overflows, double-frees, heap overflows, integer related overflows, format strings, etc. Of course there are other things such as logic bugs, but that wasn't the topic of this answer to begin with.</span></text><author><a class="comment-user" href="/users/62459/newgre" title="3,443 reputation">newgre</a></author></comment><comment><text><span class="comment-copy">@newgre  That is one type of exploit,  but today more exploits are written to leverage web application flaws than memory corruption issues. Exploits are written leveraging SQL Injection,  Local File include,  CSRF,  and XSS,  these are the common problems.  (Source: <a href="http://www.exploit-db.com/" rel="nofollow noreferrer">exploit-db.com</a>)</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">Ok, that's what I was referring to as "logic bugs". I took the "exploit code" in this answer as "shellcode" (which btw is not really uncommon, maybe the answer should be more clear about the specific meaning of "exploit code" in this context).</span></text><author><a class="comment-user" href="/users/62459/newgre" title="3,443 reputation">newgre</a></author></comment><comment><text><span class="comment-copy">@newgre I disagree,  shellcode is a payload and for this exercise the shellcode could be a simple hello world.  Executing that payload is the hard part. All the while you need ask your self what elements does the attacker need in order for this process to be successful?</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">I agree to it, if you yourself can write exploits, you can understand as to what can go to a hackers mind at the max!</span></text><author><a class="comment-user" href="/users/556087/linuxeasy" title="3,292 reputation">linuxeasy</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p><strong>Security is a process, not a product.</strong></p>
<p>Many seem to forget about this obvious matter of fact.</p>
</div></text><author><a href="/posts/2802097/revisions" id="history-2802097" title="show revision history for this post">
        eteubert
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I suggest reviewing <a href="http://www.sans.org/top25-programming-errors/" rel="noreferrer"><strong><em>CWE/SANS TOP 25 Most Dangerous Programming Errors</em></strong></a>.  It was updated for 2010 with the promise of regular updates in the future.  The <a href="http://www.sans.org/top25-programming-errors/2009/" rel="noreferrer">2009</a> revision is available as well.</p>
<p>From <a href="http://cwe.mitre.org/top25/index.html" rel="noreferrer">http://cwe.mitre.org/top25/index.html</a></p>
<blockquote>
<p>The 2010 CWE/SANS Top 25 Most Dangerous Programming Errors is a list of the most widespread and critical programming errors that can lead to serious software vulnerabilities. They are often easy to find, and easy to exploit. They are dangerous because they will frequently allow attackers to completely take over the software, steal data, or prevent the software from working at all.</p>
<p>The Top 25 list is a tool for education and awareness to help programmers to prevent the kinds of vulnerabilities that plague the software industry, by identifying and avoiding all-too-common mistakes that occur before software is even shipped. Software customers can use the same list to help them to ask for more secure software. Researchers in software security can use the Top 25 to focus on a narrow but important subset of all known security weaknesses. Finally, software managers and CIOs can use the Top 25 list as a measuring stick of progress in their efforts to secure their software.</p>
</blockquote>
</div></text><author><a href="/posts/2798988/revisions" id="history-2798988" title="show revision history for this post">
        jschmier
        </a></author><comments><comment><text><span class="comment-copy">Note that the top 4 errors on that list (and a bunch of the others as well) are all the same error -- trusting input.</span></text><author><a class="comment-user" href="/users/16406/chris-dodd" title="66,680 reputation">Chris Dodd</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>A good starter course might be the MIT course in <a href="http://courses.csail.mit.edu/6.857" rel="noreferrer">Computer Networks and Security</a>.  One thing that I would suggest is to not forget about privacy.  Privacy, in some senses, is really foundational to security and isn't often covered in technical courses on security.  You might find some material on privacy in this course on <a href="http://groups.csail.mit.edu/mac/classes/6.805/" rel="noreferrer">Ethics and the Law</a> as it relates to the internet.</p>
</div></text><author><a href="/users/12950">tvanfosson</a></author><comments><comment><text><span class="comment-copy">The MIT course link doesn't work</span></text><author><a class="comment-user" href="/users/8715/antoniocs" title="4,716 reputation">AntonioCS</a></author></comment><comment><text><span class="comment-copy">Links fixed (for now).  Thanks.</span></text><author><a class="comment-user" href="/users/12950/tvanfosson" title="371,941 reputation">tvanfosson</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The Web Security team at Mozilla put together a <a href="https://wiki.mozilla.org/WebAppSec/Secure_Coding_Guidelines">great guide</a>, which we abide by in the development of our sites and services.</p>
</div></text><author><a href="/posts/10488930/revisions" id="history-10488930" title="show revision history for this post">
        Potch
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>The importance of secure defaults in frameworks and APIs:</p>
<ul>
<li>Lots of early web frameworks didn't escape html by default in templates and had XSS problems because of this</li>
<li>Lots of early web frameworks made it easier to concatenate SQL than to create parameterized queries leading to lots of SQL injection bugs.</li>
<li>Some versions of Erlang (R13B, maybe others) don't verify ssl peer certificates by default and there are probably lots of erlang code that is susceptible to SSL MITM attacks</li>
<li>Java's XSLT transformer by default allows execution of arbitrary java code. There has been many serious security bugs created by this.</li>
<li>Java's XML parsing APIs by default allow the parsed document to read arbitrary files on the filesystem. More fun :)</li>
</ul>
</div></text><author><a href="/posts/9870978/revisions" id="history-9870978" title="show revision history for this post">
        benmmurphy
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>You should know about the three A's. Authentication, Authorization, Audit. Classical mistake is to authenticate a user, while not checking if user is authorized to perform some action, so a user may look at other users private photos, the mistake Diaspora did. Many, many more people forget about Audit, you need, in a secure system, to be able to tell who did what and when. </p>
</div></text><author><a href="/posts/9869518/revisions" id="history-9869518" title="show revision history for this post">
        rapadura
        </a></author><comments><comment><text><span class="comment-copy">Not all authorization requires authentication.  <a href="http://www.hpl.hp.com/techreports/2009/HPL-2009-30.pdf" rel="nofollow noreferrer">"From ABAC to ZBAC"</a> contrasts NBAC (authentication based) access control with solutions that do not require authentication.  "IBAC, RBAC, ABAC and even CBAC – Claims Based Access Control all rely on authentication  ...  For simplicity this  paper treats them as single solution and ignores those versions that have implemented aspects of  the ZBAC architecture.  They are collectively referred to  as autheNtication Based Access  Control (NBAC)."</span></text><author><a class="comment-user" href="/users/20394/mike-samuel" title="79,660 reputation">Mike Samuel</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<ul>
<li>Remember that you (the programmer) has to secure all parts, but the attacker only has to succeed in finding one kink in your armour.</li>
<li>Security is an example of "unknown unknowns". Sometimes you won't know what the possible security flaws are (until afterwards).</li>
<li>The difference between a bug and a security hole depends on the intelligence of the attacker.</li>
</ul>
</div></text><author><a href="/posts/10487708/revisions" id="history-10487708" title="show revision history for this post">
        Rory
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I would add the following: </p>
<ul>
<li>How digital signatures and digital certificates work</li>
<li>What's sandboxing</li>
</ul>
<p>Understand how different attack vectors work:</p>
<ul>
<li>Buffer overflows/underflows/etc on native code</li>
<li>Social engineerring</li>
<li>DNS spoofing</li>
<li>Man-in-the middle</li>
<li>CSRF/XSS et al</li>
<li>SQL injection</li>
<li>Crypto attacks (ex: exploiting weak crypto algorithms such as DES)</li>
<li>Program/Framework errors (ex: github's <a href="https://github.com/rails/rails/issues/5228#issuecomment-4261542" rel="nofollow">latest</a> security flaw)</li>
</ul>
<p>You can easily google for all of this. This will give you a good foundation.
If you want to see web app vulnerabilities, there's a project called <a href="http://google-gruyere.appspot.com/" rel="nofollow">google gruyere</a> that shows you how to exploit a working web app.</p>
</div></text><author><a href="/users/22992">Miguel Ping</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>when you are building any enterprise or any of your own software,you should just think like a hacker.as we know hackers are also not expert in all the things,but when they find any vulnerability they start digging into it by gathering information about all the things and finally attack on our software.so for preventing such attacks we should follow some well known rules like:</p>
<ul>
<li>always try to break your codes(use cheatsheets &amp; google the things for more informations).</li>
<li>be updated for security flaws in your programming field.</li>
<li>and as mentioned above never trust in any type of user or automated inputs.</li>
<li>use opensource applications(their most security flaws are known and solved).</li>
</ul>
<p>you can find more security resource on the following links:</p>
<ul>
<li><a href="http://www.owasp.org" rel="nofollow">owasp security</a></li>
<li><a href="http://www.cert.org" rel="nofollow">CERT Security</a></li>
<li><a href="http://www.sans.org/security-resources/" rel="nofollow">SANS Security</a></li>
<li><a href="http://news.netcraft.com/" rel="nofollow">netcraft</a></li>
<li><a href="http://www.securityspace.com/sspace/index.html" rel="nofollow">SecuritySpace</a></li>
<li><a href="http://www.openwall.com/" rel="nofollow">openwall</a></li>
<li><a href="http://phpsec.org/library/" rel="nofollow">PHP Sec</a></li>
<li><a href="http://thehackernews.com" rel="nofollow">thehackernews</a>(keep updating yourself)</li>
</ul>
<p>for more information google about your application vendor security flows.</p>
</div></text><author><a href="/users/1628330">rahul_pratap</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<ol>
<li>Why is is important.</li>
<li>It is all about trade-offs.</li>
<li>Cryptography is largely a distraction from security.</li>
</ol>
</div></text><author><a href="/posts/2794036/revisions" id="history-2794036" title="show revision history for this post">
        Richard
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>For general information on security, I highly recommend reading <a href="http://www.schneier.com/" rel="nofollow">Bruce Schneier</a>.  He's got a website, his <a href="http://www.schneier.com/crypto-gram.html" rel="nofollow">crypto-gram newsletter</a>, several <a href="http://www.schneier.com/books.html" rel="nofollow">books</a>, and has done lots of <a href="http://www.schneier.com/news.html" rel="nofollow">interviews</a>.  </p>
<p>I would also get familiar with social engineering (and <a href="https://twitter.com/#%21/kevinmitnick" rel="nofollow">Kevin Mitnick</a>).</p>
<p>For a good (and pretty entertaining) book on how security plays out in the real world, I would recommend the excellent (although a bit dated) <a href="http://rads.stackoverflow.com/amzn/click/1416507787" rel="nofollow">'The Cuckoo's Egg'</a> by Cliff Stoll.</p>
</div></text><author><a href="/posts/10520317/revisions" id="history-10520317" title="show revision history for this post">
        Dan Esparza
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Also be sure to check out the <a href="https://www.owasp.org/index.php/Top_10_2013-Top_10" rel="nofollow">OWASP Top 10 List</a> for a categorization of all the main attack vectors/vulnerabilities.</p>
<p>These things are fascinating to read about. Learning to think like an attacker will train you of what to think about as you're writing your own code.</p>
</div></text><author><a href="/users/299313">Michael Kopinsky</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Salt and hash your users' passwords. Never save them in plaintext in your database.</p>
</div></text><author><a href="/posts/10497015/revisions" id="history-10497015" title="show revision history for this post">
        Abdull
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Just wanted to share this for web developers:</p>
<p>security-guide-for-developers<br/><a href="https://github.com/FallibleInc/security-guide-for-developers" rel="nofollow">https://github.com/FallibleInc/security-guide-for-developers</a></p>
</div></text><author><a href="/posts/38529147/revisions" id="history-38529147" title="show revision history for this post">
        Destrif
        </a></author><comments/></answer></answers></post>