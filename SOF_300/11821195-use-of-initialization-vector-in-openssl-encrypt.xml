<?xml version="1.0" encoding="utf-8"?>
<post><title>php - Use of Initialization Vector in openssl_encrypt - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I had a look at <a href="http://stackoverflow.com/questions/1391132/two-way-encryption-in-php">this</a> question, and wanted to do it for myself. When I ran this code (taken straight from <a href="http://stackoverflow.com/a/6639179/962144">this answer</a>):</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">$textToEncrypt </span><span class="pun">=</span><span class="pln"> </span><span class="str">"My super secret information."</span><span class="pun">;</span><span class="pln">
$encryptionMethod </span><span class="pun">=</span><span class="pln"> </span><span class="str">"AES-256-CBC"</span><span class="pun">;</span><span class="pln">  </span><span class="com">// AES is used by the U.S. gov't to encrypt top secret documents.</span><span class="pln">
$secretHash </span><span class="pun">=</span><span class="pln"> </span><span class="str">"25c6c7ff35b9979b151f2136cd13b0ff"</span><span class="pun">;</span><span class="pln">

</span><span class="com">//To encrypt</span><span class="pln">
$encryptedMessage </span><span class="pun">=</span><span class="pln"> openssl_encrypt</span><span class="pun">(</span><span class="pln">$textToEncrypt</span><span class="pun">,</span><span class="pln"> $encryptionMethod</span><span class="pun">,</span><span class="pln"> $secretHash</span><span class="pun">,</span><span class="pln"> </span><span class="str">'1234567812345678'</span><span class="pun">);</span><span class="pln">

</span><span class="com">//To Decrypt</span><span class="pln">
$decryptedMessage </span><span class="pun">=</span><span class="pln"> openssl_decrypt</span><span class="pun">(</span><span class="pln">$encryptedMessage</span><span class="pun">,</span><span class="pln"> $encryptionMethod</span><span class="pun">,</span><span class="pln"> $secretHash</span><span class="pun">);</span><span class="pln">

</span><span class="com">//Result</span><span class="pln">
echo </span><span class="str">"Encrypted: $encryptedMessage &lt;br&gt;Decrypted: $decryptedMessage"</span><span class="pun">;</span></code></pre>
<p>However I get the warning</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">openssl_encrypt</span><span class="pun">():</span><span class="pln"> </span><span class="typ">Using</span><span class="pln"> an empty </span><span class="typ">Initialization</span><span class="pln"> </span><span class="typ">Vector</span><span class="pln"> </span><span class="pun">(</span><span class="pln">iv</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">is</span><span class="pln"> potentially insecure </span><span class="kwd">and</span><span class="pln"> </span><span class="kwd">not</span><span class="pln"> recommended</span></code></pre>
<p>So I went and had a look at the <a href="http://www.php.net/manual/en/function.openssl-encrypt.php">docs</a>, but there 'is no documentation'. I found this <a href="http://www.php.net/manual/en/function.openssl-encrypt.php#99188">comment</a>, but still no mention of what the Initialization Vector should be and how I should use it. Can anyone enlighten me?</p>
<p>I know I could have done some more Googleing, but Stackoverflow comes up first in so many search results I thought this question might be useful to anyone else who was having this problem.</p>
</div></text><author><a href="/users/510036/qix">Qix</a></author><comments><comment><text><span class="comment-copy">Did you lookup what <a href="http://en.wikipedia.org/wiki/Initialization_vector" rel="nofollow noreferrer">initialization vector</a> means?</span></text><author><a class="comment-user" href="/users/451969/jared-farrish" title="36,334 reputation">Jared Farrish</a></author></comment><comment><text><span class="comment-copy">Yes, but I was wondering how this should be best implemented in PHP.</span></text><author><a class="comment-user owner" href="/users/962144/alfo" title="2,363 reputation">Alfo</a></author></comment><comment><text><span class="comment-copy">An empty IV is <b>bad</b>. It's what led to the whole Debian/OpenSSH fiasco a while back.</span></text><author><a class="comment-user" href="/users/20862/ignacio-vazquez-abrams" title="478,668 reputation">Ignacio Vazquez-Abrams</a></author></comment><comment><text><span class="comment-copy">Try: <a href="http://www.php.net/manual/en/function.openssl-encrypt.php#99188" rel="nofollow noreferrer">php.net/manual/en/function.openssl-encrypt.php#99188</a> See the last argument, <code>$iv</code>.</span></text><author><a class="comment-user" href="/users/451969/jared-farrish" title="36,334 reputation">Jared Farrish</a></author></comment><comment><text><span class="comment-copy">@JaredFarrish yes, as I say I've read the docs. It doesn't really reveal anything about the problem I'm facing.</span></text><author><a class="comment-user owner" href="/users/962144/alfo" title="2,363 reputation">Alfo</a></author></comment><comment><text><span class="comment-copy">EDIT: Oops, just realized you already linked to it too. Are you looking for what kind of value to pass as <code>$iv</code>?</span></text><author><a class="comment-user" href="/users/451969/jared-farrish" title="36,334 reputation">Jared Farrish</a></author></comment><comment><text><span class="comment-copy">Also note, <code>$iv</code> is relatively new (v. 5.3.3), so I'm sure some older demonstrations could be out of date/obsolete.</span></text><author><a class="comment-user" href="/users/451969/jared-farrish" title="36,334 reputation">Jared Farrish</a></author></comment><comment><text><span class="comment-copy">@JaredFarrish yes, that's what I'm asking. I should have been more clear :)</span></text><author><a class="comment-user owner" href="/users/962144/alfo" title="2,363 reputation">Alfo</a></author></comment><comment><text><span class="comment-copy">Well, here's something a unique demonstration: <a href="https://bugs.php.net/bug.php?id=60798" rel="nofollow noreferrer">bugs.php.net/bug.php?id=60798</a> And here's another using <a href="http://www.yiiframework.com/forum/index.php/topic/26435-aes-encryption/page__view__findpost__p__127538" rel="nofollow noreferrer"><code>openssl_random_pseudo_bytes(openssl_cipher_iv_length($method‌​))</code></a> and <code>$method = 'aes-128-ecb'</code>.</span></text><author><a class="comment-user" href="/users/451969/jared-farrish" title="36,334 reputation">Jared Farrish</a></author></comment><comment><text><span class="comment-copy">Someone else mentioned this in a comment on one of the answers, but your most immediate problem is that the Initialization Vector (you're using '1234567812345678') is supposed to be the 4th parameter of openssl_encrypt(), not the third.  You need pass a 0 value for the options first.  Same for including it when you call openssl_decrypt().</span></text><author><a class="comment-user" href="/users/1257764/orrd" title="2,707 reputation">orrd</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>An IV is generally a random number that guarantees the encrypted text is unique.</p>
<p>To explain why it's needed, let's pretend we have a database of people's names encrypted with the key 'secret' and no IV.</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="lit">1</span><span class="pln"> </span><span class="typ">John</span><span class="pln"> dsfa9p8y098hasdf
</span><span class="lit">2</span><span class="pln"> </span><span class="typ">Paul</span><span class="pln"> po43pokdfgpo3k4y
</span><span class="lit">3</span><span class="pln"> </span><span class="typ">John</span><span class="pln"> dsfa9p8y098hasdf</span></code></pre>
<p>If John 1 knows his cipher text (dsfa9p8y098hasdf) and has access to the other cipher texts, he can easily find other people named John.</p>
<p>Now in actuality, an encryption mode that requires an IV will always use one. If you don't specify an IV, it's automatically set to a bunch of null bytes. Imagine the first example but with a constant IV (00000000).</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="lit">1</span><span class="pln"> </span><span class="typ">John</span><span class="pln"> dsfa9p8y098hasdf </span><span class="lit">00000000</span><span class="pln">
</span><span class="lit">2</span><span class="pln"> </span><span class="typ">Paul</span><span class="pln"> po43pokdfgpo3k4y </span><span class="lit">00000000</span><span class="pln">
</span><span class="lit">3</span><span class="pln"> </span><span class="typ">John</span><span class="pln"> dsfa9p8y098hasdf </span><span class="lit">00000000</span></code></pre>
<p>To prevent repeated cipher texts, we can encrypt the names using the same 'secret' key and random IV's:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="lit">1</span><span class="pln"> </span><span class="typ">John</span><span class="pln"> sdf875n90mh28458 </span><span class="lit">45gh3546</span><span class="pln">
</span><span class="lit">2</span><span class="pln"> </span><span class="typ">Paul</span><span class="pln"> fg9087n5b60987nf </span><span class="lit">56897ngq</span><span class="pln">
</span><span class="lit">3</span><span class="pln"> </span><span class="typ">John</span><span class="pln"> gjhn0m89456vnler </span><span class="lit">8907345f</span></code></pre>
<p>As you can see, the two 'John' cipher texts are now different. Each IV is unique and has influenced the encryption process making the end result unique as well. John 1 now has no idea what user 3's name is.</p>
<p>Decryption requires the use of the same IV the text was encrypted with of course, which is why it must be stored in the database. The IV is of no use without the key so transmitting or storing it with the encrypted text is of no concern.</p>
<p>This is an overly simplistic example, but the truth is, not using IV's has serious security ramifications.</p>
<hr/>
<p>Now your code appears to be setting the IV (1234567812345678) but not using it on decryption. That's certain to fail.</p>
<p>You also may want to utilize some of PHP's IV generation functions. I think this should work for you:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">$iv_size </span><span class="pun">=</span><span class="pln"> mcrypt_get_iv_size</span><span class="pun">(</span><span class="pln">MCRYPT_RIJNDAEL_128</span><span class="pun">,</span><span class="pln"> MCRYPT_MODE_CBC</span><span class="pun">);</span><span class="pln">
$iv </span><span class="pun">=</span><span class="pln"> mcrypt_create_iv</span><span class="pun">(</span><span class="pln">$iv_size</span><span class="pun">,</span><span class="pln"> MCRYPT_RAND</span><span class="pun">);</span><span class="pln">
$encryptedMessage </span><span class="pun">=</span><span class="pln"> openssl_encrypt</span><span class="pun">(</span><span class="pln">$textToEncrypt</span><span class="pun">,</span><span class="pln"> $encryptionMethod</span><span class="pun">,</span><span class="pln"> $secretHash</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> $iv</span><span class="pun">);</span><span class="pln">
$decryptedMessage </span><span class="pun">=</span><span class="pln"> openssl_decrypt</span><span class="pun">(</span><span class="pln">$encryptedMessage</span><span class="pun">,</span><span class="pln"> $encryptionMethod</span><span class="pun">,</span><span class="pln"> $secretHash</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> $iv</span><span class="pun">);</span></code></pre>
<p>For storage/transmission, you can simply concatenate the IV and cipher text like so:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">$data </span><span class="pun">=</span><span class="pln"> $iv</span><span class="pun">.</span><span class="pln">$encryptedMessage</span><span class="pun">;</span></code></pre>
<p>Then on retrieval, pull the IV out for decryption:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">$iv_size </span><span class="pun">=</span><span class="pln"> mcrypt_get_iv_size</span><span class="pun">(</span><span class="pln">MCRYPT_RIJNDAEL_128</span><span class="pun">,</span><span class="pln"> MCRYPT_MODE_CBC</span><span class="pun">);</span><span class="pln">
$iv </span><span class="pun">=</span><span class="pln"> substr</span><span class="pun">(</span><span class="pln">$data</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> $iv_size</span><span class="pun">);</span><span class="pln">
$decryptedMessage </span><span class="pun">=</span><span class="pln"> openssl_decrypt</span><span class="pun">(</span><span class="pln">substr</span><span class="pun">(</span><span class="pln">$data</span><span class="pun">,</span><span class="pln"> $iv_size</span><span class="pun">),</span><span class="pln"> $encryptionMethod</span><span class="pun">,</span><span class="pln"> $secretHash</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> $iv</span><span class="pun">);</span></code></pre>
<hr/>
<p>For more info, check out PHP's Mcrypt library. It's quite full featured and has tons of examples, many of which can help you out with openssh encryption implementations.
<a href="http://php.net/manual/en/function.mcrypt-encrypt.php">http://php.net/manual/en/function.mcrypt-encrypt.php</a></p>
</div></text><author><a href="/users/430151/joel-mellon">Joel Mellon</a></author><comments><comment><text><span class="comment-copy">I should also mention that you need the mcrypt library installed. For Ubuntu/Debian: apt-get install php5-mcrypt Fedora: yum install php5-mcrypt</span></text><author><a class="comment-user" href="/users/430151/joel-mellon" title="1,933 reputation">Joel Mellon</a></author></comment><comment><text><span class="comment-copy">Awesome explanation. I believe you're missing the 4th parameter for openssl_encrypt/decrypt. IV is the 5th</span></text><author><a class="comment-user" href="/users/888821/thilo-savage" title="956 reputation">Thilo Savage</a></author></comment><comment><text><span class="comment-copy">Right you are. I added some falsy zeros. Thanks.</span></text><author><a class="comment-user" href="/users/430151/joel-mellon" title="1,933 reputation">Joel Mellon</a></author></comment><comment><text><span class="comment-copy">If you're going to send the encrypted data via an HTML form, be sure to bookend the PHP code with base64_encode/base64_decode and set the form enctype="multipart/form-data" so that you don't have encoding issues since the IV is binary.</span></text><author><a class="comment-user" href="/users/301168/beau" title="1,430 reputation">Beau</a></author></comment><comment><text><span class="comment-copy">@Beau: excellent point. Another thing to consider is escaping the cipher text when inserting into a database. Cipher texts can include quotes which conflict with SQL queries. Base64 encoding is one way since you're guaranteed alphanumeric characters...but of course you're increasing the data size. Standard SQL injection prevention methods should be employed, eg. <code>mysql_real_escape_string()</code> (although soon to be depreciated).</span></text><author><a class="comment-user" href="/users/430151/joel-mellon" title="1,933 reputation">Joel Mellon</a></author></comment><comment><text><span class="comment-copy">@sudopeople: Likewise for storing this in a database you should use a VARBINARY, BINARY or BLOB datatype and not a varchar or text. A more modern technique for preventing SQL Injection is to use PDO prepared statements.</span></text><author><a class="comment-user" href="/users/301168/beau" title="1,430 reputation">Beau</a></author></comment><comment><text><span class="comment-copy">@Beau All good points. When you start using (proper) frameworks you forget that you don't have to remember all these little details anymore.</span></text><author><a class="comment-user" href="/users/430151/joel-mellon" title="1,933 reputation">Joel Mellon</a></author></comment><comment><text><span class="comment-copy">I also want to add that there's a tendency to intermix random and unique. IVs need to be <i>unique</i> to work properly. I don't really stress this in my answer...although I do recommend using whatever IV generation tools are available in your language/library (eg. <code>mcrypt_create_iv</code>) as a pretty safe bet.</span></text><author><a class="comment-user" href="/users/430151/joel-mellon" title="1,933 reputation">Joel Mellon</a></author></comment><comment><text><span class="comment-copy">Having in mind all the recent found OpenSSL breaches it this function safe?</span></text><author><a class="comment-user" href="/users/1549092/gtodorov" title="893 reputation">GTodorov</a></author></comment><comment><text><span class="comment-copy">So if my key is already random, generated with <code>openssl_random_pseudo_bytes()</code>, then I don't really need an <code>iv</code>, is that correct?</span></text><author><a class="comment-user" href="/users/24894/kovshenin" title="13,326 reputation">kovshenin</a></author></comment><comment><text><span class="comment-copy">@kovshenin Well, no actually. An IV is technically not so much random as it is unique. Random (especially pseudo random) functions are capable of generating the same string and encryption is capable of generating the same ciphertext with different keys and/or different data. You may be fine in your case, but if you really need to guarantee they're unique, setting an IV (correctly!) is about as good as you can get.</span></text><author><a class="comment-user" href="/users/430151/joel-mellon" title="1,933 reputation">Joel Mellon</a></author></comment><comment><text><span class="comment-copy">it has to be <code>MCRYPT_RIJNDAEL_128</code></span></text><author><a class="comment-user" href="/users/2011284/circle" title="1,171 reputation">CIRCLE</a></author></comment><comment><text><span class="comment-copy">thanks @CIRCLE because i'm getting error openssl_encrypt(): IV passed is 32 bytes long which is longer than the 16 expected by selected cipher</span></text><author><a class="comment-user" href="/users/128761/vee" title="1,482 reputation">vee</a></author></comment><comment><text><span class="comment-copy">Thank you for this simple and to the point explanation. Helped me make sense of things.</span></text><author><a class="comment-user" href="/users/295019/racl101" title="870 reputation">racl101</a></author></comment><comment><text><span class="comment-copy">Wow, so well explained. Kudos.</span></text><author><a class="comment-user" href="/users/2294225/stephan-v" title="1,603 reputation">Stephan-v</a></author></comment><comment><text><span class="comment-copy">So this is basically what a salt is for hashing?</span></text><author><a class="comment-user" href="/users/2048874/loilo" title="474 reputation">Loilo</a></author></comment><comment><text><span class="comment-copy">@Loilo It's analogous, yes. See <a href="http://security.stackexchange.com/questions/6058/is-real-salt-the-same-as-initialization-vectors" title="is real salt the same as initialization vectors">security.stackexchange.com/questions/6058/…</a></span></text><author><a class="comment-user" href="/users/430151/joel-mellon" title="1,933 reputation">Joel Mellon</a></author></comment></comments></answer></answers></post>