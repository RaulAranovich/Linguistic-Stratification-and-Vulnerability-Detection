<?xml version="1.0" encoding="utf-8"?>
<post><title>security - Top Hashing and Encryption Algorithms? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I know many web projects still use the older MD5() or SHA1() when creating hashes. However, in my projects I have been using SHA256 for stronger/longer hashes since when I last checked there was some question about which hashes were the best ones to use. So I just chose the government standard (at the time).</p>
<p>However, I'm wondering if in the last couple years we now have a more recommended hashing algos? </p>
<p>Here are some common hashing algorithms:</p>
<pre><code>md4/5, sha, ripemd, whirlpool, tiger, snefru, gost, adler32, crc32, haval
</code></pre>
<p>Which are different from encryption algorithms such as:</p>
<pre><code>3DES, ARCFOUR, BLOWFISH, CAST_256, CRYPT, DES, DES_COMPAT, ENIGMA, GOST, IDEA, 
LOKI97, MARS, PANAMA, RIJNDAEL, RC6_256, SAFER64, SAFER128, SAFERPLUS,
SERPENT, SKIPJACK, TEAN, THREEWAY, TRIPLEDES, TWOFISH, WAKE, XTEA,
</code></pre>
<p>As a side note, I've heard RIJNDAEL won a competition and will be replacing DES in some applications and blowfish has also had some nice things said about it.</p>
</div></text><author><a href="/users/99923">Xeoncross</a></author><comments><comment><text><span class="comment-copy">I recommend you the book "Applied Cryptography" <a href="http://www.amazon.com/Applied-Cryptography-Protocols-Algorithms-Source/dp/0471117099" rel="nofollow noreferrer">amazon.com/Applied-Cryptography-Protocols-Algorithms-Source/‌​dp/…</a></span></text><author><a class="comment-user" href="/users/632951/pacerier" title="33,795 reputation">Pacerier</a></author></comment><comment><text><span class="comment-copy"><b><i>WARNING: This question/answer is old! By the time you read it, old algorithms may be broken, and new ones may have been made! Take this advice with a grain of salt!</i></b> It's not <i>necessarily</i> wrong, but in the world of crypto, things change quickly.</span></text><author><a class="comment-user" href="/users/1863564/qpaystaxes" title="4,071 reputation">QPaysTaxes</a></author></comment><comment><text><span class="comment-copy">Related, you can find source for both Intel SHA intrinsics and ARMv8 SHA intrinsics at <a href="http://github.com/noloader/SHA-Intrinsics" rel="nofollow noreferrer">Noloader GitHub | SHA-Intrinsics</a>. They are C source files, and provide the compress function for SHA-1, SHA-224 and SHA-256. The intrinsic based implementations increase throughput approximately 3x to 4x for SHA-1, and approximately 6x to 12x for SHA-224 and SHA-256.</span></text><author><a class="comment-user" href="/users/608639/jww" title="41,097 reputation">jww</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Quick answer: For encryption, use AES/Rijndael with a key size of 256, for hashing use SHA-256 or higher.</p>
<p><strong>Encryption</strong></p>
<p>AES is a standard of using the Rijndael cipher, and is the most widely-accepted encryption algorithm. It is not necessarily the most secure mathematically. The only known attacks on it right now are side-channel attacks, but that's the fault of the implementation or platform you are encrypting on.</p>
<p>The Rijndael cipher was chosen because it seems to be the most performant algorithm in a variety of different systems of all bit sizes tested, and it is also extraordinarily secure. If you have control over your systems, replacing government-standard DES encryption with AES will be a great step.</p>
<p>Other highly-secure ciphers are Twofish, Serpent and RC6.</p>
<p>The following ciphers are outdated and either deprecated in favor of a newer cipher, or are a travesty of computer science: DES, Triple DES, Blowfish, and MARS.</p>
<p><strong>Hashing</strong></p>
<p>My assumption is that you're hashing with the intent of security, since you're asking the question specifically with security in mind.</p>
<p>As others have said, Md4/MD5 are relatively "easy" to break, and the SHA-1 hash has weaknesses in certain situations as well. CRC is commonly used for error detection, so maybe not the best choice for hashing per se.</p>
<p>For a hash, you basically just want to choose the largest block size possible, and use a salt value to avoid rainbow attacks. SHA-256 and above are still considered very secure, although your implementation is always the weak point with hashing.</p>
</div></text><author><a href="/posts/3076766/revisions" id="history-3076766" title="show revision history for this post">
        Jordan
        </a></author><comments><comment><text><span class="comment-copy">CRC is useless for security.</span></text><author><a class="comment-user" href="/users/49246/starblue" title="39,841 reputation">starblue</a></author></comment><comment><text><span class="comment-copy">I agree with you starblue, and my post said that. Should I rephrase to be more clear?</span></text><author><a class="comment-user" href="/users/311339/jordan" title="19,855 reputation">Jordan</a></author></comment><comment><text><span class="comment-copy">I like how you listed blowfish</span></text><author><a class="comment-user" href="/users/257493/incognito" title="13,664 reputation">Incognito</a></author></comment><comment><text><span class="comment-copy">Yes, Twofish supersedes Blowfish.</span></text><author><a class="comment-user" href="/users/311339/jordan" title="19,855 reputation">Jordan</a></author></comment><comment><text><span class="comment-copy">It's ridiculous hyperbole to suggest that DES is a 'travesty' of computer science. Given when it was created, and the state of public (eg university) knowledge of cryptoscience at that time, it's a near marvel that it was as secure as it has proven to be. Maybe I'm having a sense-of-humour failure though?</span></text><author><a class="comment-user" href="/users/201727/neil" title="893 reputation">Neil</a></author></comment><comment><text><span class="comment-copy">@Neil, I think you may have just read more into what I wrote than is actually there. I didn't say each of those ciphers was ALL of those things, I simply listed them all out and said they were obsolete, deprecated, or a travesty. DES and Triple DES are obsolete and deprecated, Blowfish is outdated in favor of Twofish and is a travesty (although it was unpatented, so it gets some street cred), and MARS was just not very good.</span></text><author><a class="comment-user" href="/users/311339/jordan" title="19,855 reputation">Jordan</a></author></comment><comment><text><span class="comment-copy">SHA is not the right answer for hashing passwords or anything else high risk with low usage frequency. Use a hash that requires lots of CPU and/or memory. Bcrypt is a good example. It makes brute forcing orders of magnitude harder, even on distributed computing platforms</span></text><author><a class="comment-user" href="/users/156755/basic" title="17,013 reputation">Basic</a></author></comment><comment><text><span class="comment-copy">@Basic that's good advice but there's no mention of passwords in either the question or my answer.</span></text><author><a class="comment-user" href="/users/311339/jordan" title="19,855 reputation">Jordan</a></author></comment><comment><text><span class="comment-copy">True, but... Your first sentence implies SHA256 is the definitive choice for hashing. Googlers might not investigate further, hence the comment. In any case, good answer aside from that. If you'd care to make your first statement a little weaker, I'll happily reverse my vote</span></text><author><a class="comment-user" href="/users/156755/basic" title="17,013 reputation">Basic</a></author></comment><comment><text><span class="comment-copy">That's not what I said. I said "for hashing use SHA-256 or higher", which even though this answer is 5 years old, I still consider to be sound advice. I don't recommend other options for hashing, generally speaking.</span></text><author><a class="comment-user" href="/users/311339/jordan" title="19,855 reputation">Jordan</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>There is a competition for the new SHA-3 going on at <a href="http://csrc.nist.gov/groups/ST/hash/sha-3/index.html" rel="nofollow noreferrer">NIST</a>. There are entries by some famous cryptographers such as Knudsen and Schneier.</p>
<p>The winner is <a href="https://en.wikipedia.org/wiki/SHA-3" rel="nofollow noreferrer">Keccak</a>, which is being standardized at the moment. The others from the final group are probably good to use too. You can look for the properties you want.
If you want to use the winner, you can tune some parameters to make it more secure and less fast (although that won't be SHA-3 anymore).</p>
</div></text><author><a href="/users/276473">Juri Robl</a></author><comments><comment><text><span class="comment-copy">+1 just use sha256 until sha3 finishes up in 2012.</span></text><author><a class="comment-user" href="/users/238419/blueraja-danny-pflughoeft" title="48,164 reputation">BlueRaja - Danny Pflughoeft</a></author></comment><comment><text><span class="comment-copy">How'd that end up? (3 years later)</span></text><author><a class="comment-user" href="/users/531856/sman" title="819 reputation">sMaN</a></author></comment><comment><text><span class="comment-copy">@sMaN Updated the post</span></text><author><a class="comment-user" href="/users/276473/juri-robl" title="3,412 reputation">Juri Robl</a></author></comment><comment><text><span class="comment-copy">Thanks @Juri. I did look it up, but thought it'd be good to have a record here since this was my 1st point of reference even after 3 years of the question being answered</span></text><author><a class="comment-user" href="/users/531856/sman" title="819 reputation">sMaN</a></author></comment><comment><text><span class="comment-copy">I know this is very old, but based on what I've heard and read, most people are recommending that you don't use sha-3. Sha-3 is preimage resistant, collision resistant, and functions well to provide a signature for the data supplied. However, it's too fast. The hash function is based entirely off of boolean operations and thus it's extremely quick. Because of its basis on boolean operations, it also is vulnerable to GPU speed hashing. GPU Sha-3 tools have already been released since February.</span></text><author><a class="comment-user" href="/users/2694511/spencerd" title="2,086 reputation">SpencerD</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>For cryptographic hashing DO NOT use SHA/MD5 those are intended and designed for data integrity, not security. Because of this they are intended to run fast so that you can create data integrity hashes quickly and compare quickly. This makes tools like this (<a href="http://www.openwall.com/john/">http://www.openwall.com/john/</a>) very easy and quick to run. Instead use one of the hash functions designed for security as they allow you to specify how secure you want your hash to be by making the hash run slower. BCrypt is a popular example of this</p>
</div></text><author><a href="/posts/30358691/revisions" id="history-30358691" title="show revision history for this post">
        waterfoul
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I don't know about most of those, but DES by itself is not secure (see <a href="http://en.wikipedia.org/wiki/Data_Encryption_Standard" rel="nofollow noreferrer">The Wikipedia article</a>). Triple DES might be all right, but the standard these days is AES (formerly known as Rijndael), so I would go with that instead.</p>
<p>Also, I notice you didn't include RSA or public key elliptic-curve cryptosystems in your list. I imagine that's because you know they aren't suitable for what you want, but if you haven't thought about them then you might want to consider them.</p>
</div></text><author><a href="/posts/3076587/revisions" id="history-3076587" title="show revision history for this post">
        Noah Lavine
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>The purpose of a hash is to uniquely represent some data by a number. All of the mentioned hash algorithms do that quite well. Md4 can be reversed in a few hours on a Pentium4. Md5 can be reversed in certain situations. However, that doesn't mean you shouldn't use any of those algorithms, it just means you should be aware of the algorithm you're using and what you're using it for. </p>
<p>So the recommendation is the same as it's always been: use the appropriate algorithm for the data that you are hashing / encrypting. </p>
<p>(You forgot to include ROT13 in the encryption list)</p>
</div></text><author><a href="/posts/3076714/revisions" id="history-3076714" title="show revision history for this post">
        Seth
        </a></author><comments><comment><text><span class="comment-copy">To give an example of when MD5 might be appropriate: If you're doing checksums to ensure file integrity. To give an example of when it's not: If you're doing password hashing, to authenticate.</span></text><author><a class="comment-user" href="/users/1863564/qpaystaxes" title="4,071 reputation">QPaysTaxes</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>If I may add my 2 cents: my understanding is that AES is the standard, and/or
the committee that hosts the encryption contests, and that e Rijndael is the
winner - ie, the implementation of AES. So to say one is a subset of the other
is an orthogonal viewpoint. "DES is not secure" is an understatement, hardware
boards have long existed that crack DES in something like a few hours. I</p>
<p>I would like to bend (expand) the question at hand to ask, is it better to
re-encrypt encrypted text? I have implemented (in the Z Directory c=+
library, available here: <a href="http://www.vettrasoft.com/zd_get.php" rel="nofollow">http://www.vettrasoft.com/zd_get.php</a> ) an object
that does multiple encryption; here is an example:</p>
<pre><code>// MULTI-LAYERED [DES+Rijndael(AES)] ENCRYPTION:
#include "z_crypt.h"
void main()
{
    int ie;
    string_o sins("This text will be encrypted with Rijndael\n");
    string_o sout, sret;
    string_o skey1("this password has 32 characters.");
    string_o skey2("fun juxtaposition of words maybe");
    multicrypt_o x;
    x.set_uucoding (multicrypt_o::UU_YES_STRIPPED);
    x.add_crypto ("aes", skey1, "", &amp;ie);
    x.add_crypto ("des", skey2, "", &amp;ie);
    x.encrypt (sins, sout, &amp;ie);        // sout: encrypted string
    x.decrypt (sout, sret, &amp;ie);        // sret: decrypted str (==sins)
}
</code></pre>
<p>The multicrypt object takes up to about 7 encryption algorithms, including
DES, AES, RSA, Chambers-Ratgen, even a custom Vettrasoft-proprietary
algorithm; you can select individual passwords for each one and order
them as you wish. However I recall reading someone professing to be an
expert claim that re-encrypting adds no value. Any comments?</p>
</div></text><author><a href="/posts/18728306/revisions" id="history-18728306" title="show revision history for this post">
        gorth
        </a></author><comments><comment><text><span class="comment-copy">Yes using multiple encryption algorithms is truly the best way to go if you are looking for security, though obviously you will sacrifice speed for the security. I also like to say that Triple DES is not that terrible as people make it out to be, the main security flaw with TDES is that it uses a fairly small key size compared to AES. Also with multiple encryption using some really old encryption algorithms on top of aes or pgp might not be a bad idea, as people tend to forget about the outdated algorithms and that in itself might make the cracking that much harder.</span></text><author><a class="comment-user" href="/users/1661566/man-person" title="518 reputation">Man Person</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Dont use MD5 or SHA1 if you need security, since they have been broken. The SHA2 family is alright.</p>
<p>A subset of RIJNDAEL is the AES specification (since 2002). BLOWFISH, CAST_256, GOST, IDEA,MARS, RC6_256, SAFERPLUS, SERPENT, TWOFISH are alright to be used, although most sites use rc4/5 and aes. the rest are more or less useless, even though many of them are good</p>
<p>and you repeated some of the names in your list</p>
</div></text><author><a href="/users/341683">calccrypto</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>The algorithms you list are primarily for commercial applications.  There are a number of <a href="http://en.wikipedia.org/wiki/NSA_cryptography" rel="nofollow noreferrer">others</a> that the <a href="http://en.wikipedia.org/wiki/National_Security_Agency" rel="nofollow noreferrer">NSA</a> has approved for different uses for the U.S. Federal government.  Some of the Type 1 algorithms are actually classified (e.g. <a href="http://en.wikipedia.org/wiki/BATON" rel="nofollow noreferrer">BATON</a>).</p>
<p>Also, the <a href="http://en.wikipedia.org/wiki/Advanced_Encryption_Standard" rel="nofollow noreferrer">Advanced Encryption Standard (AES)</a> is actually a subest of the possible <a href="http://www.tropsoft.com/strongenc/rijndael.htm" rel="nofollow noreferrer">Rijndael modes</a>. The AES specification calls for 128, 192 or 256 bit key sizes and 128 bit block sizes. Rijndael can also operate on block sizes of 192 or 256 bits which are not part of the AES standard.</p>
</div></text><author><a href="/users/248123">andand</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p><strong>Hashing</strong></p>
<p>I've defaulted to using SHA256 these days; I won't touch MD5, and I'll only use SHA1 on legacy projects if I have no choice. I think SHA512 is going a little overboard for basic hashing, though it has its uses.</p>
<p><strong>Encryption</strong></p>
<p>I use AES256 encryption for most projects, although I have worked with 3DES in the past. </p>
<p>You know, I don't think I've seen DES used in a project in the last couple of years.</p>
<p>I don't really feel the need to change either Hashing or Encryption unless NIST recommend it.</p>
</div></text><author><a href="/posts/3076268/revisions" id="history-3076268" title="show revision history for this post">
        Damien Dennehy
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>AES is the way to go for encryption. In addition to the other reasons cited here Intel and AMD are including <a href="http://en.wikipedia.org/wiki/AES_instruction_set" rel="nofollow noreferrer">hardware support</a> in future processors. The instructions are available in a couple of processors available today although I don't know if any compilers in major use currently include replacing calls to an AES library with SSE intrinsics in an optimization pass. Certainly there will be a time when if you rev your compiler the functionality will be there and your code will just run faster.</p>
</div></text><author><a href="/posts/3076626/revisions" id="history-3076626" title="show revision history for this post">
        Steve
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I use Turbocrypt for my family photos. Serpent is stronger then AES. I also use whirlpool. I would never use anything NSA approved. AES is already on its way down. Veracrypt is also pretty good if you want to encrypt you family pictures.</p>
</div></text><author><a href="/users/5485313">user5485313</a></author><comments/></answer></answers></post>