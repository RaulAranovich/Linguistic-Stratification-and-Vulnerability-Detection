<?xml version="1.0" encoding="utf-8"?>
<post><title>security - Generating a random password in php - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I am trying to generate a random password in php. </p>
<p>However I am getting all 'a's and the return type is of type array and I would like it to be a string. Any ideas on how to correct the code?</p>
<p>Thanks.</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="kwd">function</span><span class="pln"> randomPassword</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    $alphabet </span><span class="pun">=</span><span class="pln"> </span><span class="str">"abcdefghijklmnopqrstuwxyzABCDEFGHIJKLMNOPQRSTUWXYZ0123456789"</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">8</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        $n </span><span class="pun">=</span><span class="pln"> rand</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="pln"> count</span><span class="pun">(</span><span class="pln">$alphabet</span><span class="pun">)-</span><span class="lit">1</span><span class="pun">);</span><span class="pln">
        $pass</span><span class="pun">[</span><span class="pln">$i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $alphabet</span><span class="pun">[</span><span class="pln">$n</span><span class="pun">];</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> $pass</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/2224584/scott-arciszewski">Scott Arciszewski</a></author><comments><comment><text><span class="comment-copy">None of the answers use a <a href="http://stackoverflow.com/a/31107425/2224584">secure random number generator</a>, which you want for a password.</span></text><author><a class="comment-user" href="/users/2224584/scott-arciszewski" title="15,046 reputation">Scott Arciszewski</a></author></comment><comment><text><span class="comment-copy">Visitors should be getting potentially-security-related information from a source that can be updated properly, not a question that's closed to new answers. I'm deleting the answers to this duplicate so that visitors will read the answers to the open question instead. (If this question is ever reopened, answers will be undeleted.)</span></text><author><a class="comment-user" href="/users/1114/jeremy-banks" title="59,154 reputation">Jeremy Banks<span class="mod-flair" title="moderator">♦</span></a></author></comment><comment><text><span class="comment-copy">@JeremyBanks Nowhere does the question state a <i>cryptographically secure</i> password is required. For some people, the answers using <code>/dev/random</code> are enough as the question doesn't ask for a "<i>secure</i>" password (and shouldn't be edited to contain that as it would alter the meaning of the original question). Although I'm all for security, I think this carpet bomb wasn't thought through fully. Like using <code>mysql_*</code>, the answers are still valid, but should be marked as insecure. Perhaps this is something that SO needs to include as extra software - the ability to <i>warn</i> of insecure code?</span></text><author><a class="comment-user" href="/users/736809/jimbo" title="17,054 reputation">Jimbo</a></author></comment><comment><text><span class="comment-copy">Passwords come with implicit security requirements; namely, unpredictability. You cannot get this property with a weak PRNG, you must use a CSPRNG if you wish to generate one randomly.</span></text><author><a class="comment-user" href="/users/2224584/scott-arciszewski" title="15,046 reputation">Scott Arciszewski</a></author></comment><comment><text><span class="comment-copy">Passwords come with different requirements - one person's "extremely complex and confusing" password is another person's secure password. It depends entirely on the use-case (an in-house project that will remain in-house, on a small dev team, won't need <i>as much</i> thought put into security to get the software working for them asap).</span></text><author><a class="comment-user" href="/users/736809/jimbo" title="17,054 reputation">Jimbo</a></author></comment><comment><text><span class="comment-copy">"<code>Passwords come with different requirements - one person's "extremely complex and confusing" password is another person's secure password.</code>" And my advice for users is to <a href="https://paragonie.com/blog/2015/06/guide-securing-your-business-s-online-presence-for-non-experts" rel="nofollow noreferrer">use a password manager</a> and only bother remembering one "extremely complex and confusing password".</span></text><author><a class="comment-user" href="/users/2224584/scott-arciszewski" title="15,046 reputation">Scott Arciszewski</a></author></comment><comment><text><span class="comment-copy">I mean - the security aspects of implementing a secure password may cause the solution become unnecessarily complex - hence why a few of these weren't too bad. Not the password itself. These answers could always have been edited or commented on stating they're not <i>the best way</i>.</span></text><author><a class="comment-user" href="/users/736809/jimbo" title="17,054 reputation">Jimbo</a></author></comment><comment><text><span class="comment-copy">@Jimbo The primary purpose of a duplicate question is to act as a signpost to find the target question, where the information is supposed to be. I wouldn't delete all of these answers in another context, but in this case they're not supposed to be the source of information anyway. (Not <i>all</i> passwords need to be secure, but many do, and it's important to provide good security advice to the users that do need it.)</span></text><author><a class="comment-user" href="/users/1114/jeremy-banks" title="59,154 reputation">Jeremy Banks<span class="mod-flair" title="moderator">♦</span></a></author></comment><comment><text><span class="comment-copy">I still think more people are going to search for random passwords than random strings then - perhaps this could be changed...</span></text><author><a class="comment-user" href="/users/736809/jimbo" title="17,054 reputation">Jimbo</a></author></comment><comment><text><span class="comment-copy">@JeremyBanks Can you please reinstate the answers to this question?  Just because it is a duplicate it does not mean the answers are wrong (I accidentally voted to reopen, I agree it is a duplicate). It makes no sense to delete the answers, Consider instead removing this question and migrating the answers to the other question (I have seen it done before).</span></text><author><a class="comment-user" href="/users/561731/neal" title="97,990 reputation">Neal</a></author></comment><comment><text><span class="comment-copy">Also @JeremyBanks the answers on the supposed "duplicate" are just as "insecure"</span></text><author><a class="comment-user" href="/users/561731/neal" title="97,990 reputation">Neal</a></author></comment><comment><text><span class="comment-copy">@JeremyBanks if you want something to not be reopened, lock it. Otherwise 99% people will reopen it and create a whole mess. Personally I totally disagree with deleting highly scored answers just like that, but can't fight you over this</span></text><author><a class="comment-user" href="/users/447356/shadow-wizard" title="50,581 reputation">Shadow Wizard</a></author></comment><comment><text><span class="comment-copy">@ShadowWizard I don't have any objection to the question being reopened, and didn't don't want to lock it to prevent that. My concern was specifically with the difficulties of updating information on a closed questions, conflicting with the dangers of spreading bad security-related information. If the question is reopened, so newer answers can be added to compete with the existing ones, that concern is eliminated.</span></text><author><a class="comment-user" href="/users/1114/jeremy-banks" title="59,154 reputation">Jeremy Banks<span class="mod-flair" title="moderator">♦</span></a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<blockquote>
<p><strong>Security warning</strong>: <code>rand()</code> is not a cryptographically secure pseudorandom number generator. Look elsewhere for <a href="http://stackoverflow.com/a/31284266/2224584">generating a cryptographically secure pseudorandom string in PHP</a>.</p>
</blockquote>
<p>Try this (use <code>strlen</code> instead of <code>count</code>, because <code>count</code> on a string is always <code>1</code>):</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="kwd">function</span><span class="pln"> randomPassword</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    $alphabet </span><span class="pun">=</span><span class="pln"> </span><span class="str">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'</span><span class="pun">;</span><span class="pln">
    $pass </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">();</span><span class="pln"> </span><span class="com">//remember to declare $pass as an array</span><span class="pln">
    $alphaLength </span><span class="pun">=</span><span class="pln"> strlen</span><span class="pun">(</span><span class="pln">$alphabet</span><span class="pun">)</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> </span><span class="com">//put the length -1 in cache</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">8</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        $n </span><span class="pun">=</span><span class="pln"> rand</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="pln"> $alphaLength</span><span class="pun">);</span><span class="pln">
        $pass</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $alphabet</span><span class="pun">[</span><span class="pln">$n</span><span class="pun">];</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> implode</span><span class="pun">(</span><span class="pln">$pass</span><span class="pun">);</span><span class="pln"> </span><span class="com">//turn the array into a string</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>Demo: <a href="http://codepad.org/UL8k4aYK" rel="noreferrer">http://codepad.org/UL8k4aYK</a></p>
</div></text><author><a href="/users/561731">Neal</a></author><comments><comment><text><span class="comment-copy">Seems more straightforward to use <code>$pass .= $alphabet[$n]</code>.</span></text><author><a class="comment-user" href="/users/259778/matthew" title="35,249 reputation">Matthew</a></author></comment><comment><text><span class="comment-copy">@konforce, yes true, but i just went with the array way the op had, there is nothing really wrong with it.</span></text><author><a class="comment-user" href="/users/561731/neal" title="97,990 reputation">Neal</a></author></comment><comment><text><span class="comment-copy">@KarlLaurentiusRoos I don't understand, why is <code>[]</code> enough? Is that statement some kind of implicit append function?</span></text><author><a class="comment-user" href="/users/772985/pat-needham" title="792 reputation">Pat Needham</a></author></comment><comment><text><span class="comment-copy">@Pat: yes, I'm presuming you're coming from some other language :) <code>$array[] = </code> is the same thing as <code>$array[count($array)] = </code> in PHP.</span></text><author><a class="comment-user" href="/users/517616/karl-laurentius-roos" title="3,166 reputation">Karl Laurentius Roos</a></author></comment><comment><text><span class="comment-copy">Generating <i>password</i> using <i>rand</i> is a really bad idea. It's not a secure PRNG. (and no <code>mt_rand</code> isn't better either)</span></text><author><a class="comment-user" href="/users/445517/codesinchaos" title="78,763 reputation">CodesInChaos</a></author></comment><comment><text><span class="comment-copy">@CodesInChaos I was just going off the OP's code. This question has nothing to do with the security of <code>rand</code>....</span></text><author><a class="comment-user" href="/users/561731/neal" title="97,990 reputation">Neal</a></author></comment><comment><text><span class="comment-copy">The question is about <i>generating a password</i>. Code to generate a password clearly needs to use secure random numbers.</span></text><author><a class="comment-user" href="/users/445517/codesinchaos" title="78,763 reputation">CodesInChaos</a></author></comment><comment><text><span class="comment-copy">@CodesInChaos The title <i>might</i> say that, but the answer is that the OP's code had an error. Whatever ^_^</span></text><author><a class="comment-user" href="/users/561731/neal" title="97,990 reputation">Neal</a></author></comment><comment><text><span class="comment-copy">Perhaps this alternative would be a more suitable RNG: <a href="http://www.php.net/manual/en/function.openssl-random-pseudo-bytes.php#104322" rel="nofollow noreferrer">php.net/manual/en/…</a></span></text><author><a class="comment-user" href="/users/1449436/daniel-perv%c3%a1n" title="1,238 reputation">Daniel Perván</a></author></comment><comment><text><span class="comment-copy">For the same reason as this is <b>not</b> a duplicate question, this answer is incorrect, since the question is about <i>generating a password</i> and <b>not</b> a <i>random string</i>. This answer provides a terribly insecure approach to generating a password. Please use @user3260409's answer below, where <code>openssl_random_pseudo_bytes()</code> is used instead of <code>rand()</code></span></text><author><a class="comment-user" href="/users/1352806/sorry-im-a-n00b" title="581 reputation">Sorry-Im-a-N00b</a></author></comment><comment><text><span class="comment-copy">This answer is insecure, can you please put a disclaimer on it and direct people to <a href="http://stackoverflow.com/a/31107425/2224584">this answer which uses a CSPRNG</a>? Thanks :) @CodesInChaos What do you think of the linked answer?</span></text><author><a class="comment-user" href="/users/2224584/scott-arciszewski" title="15,046 reputation">Scott Arciszewski</a></author></comment><comment><text><span class="comment-copy">@ScottArciszewski Please do not edit my answer with random updates. If you feel it is incorrect then post your own answer.</span></text><author><a class="comment-user" href="/users/561731/neal" title="97,990 reputation">Neal</a></author></comment><comment><text><span class="comment-copy">I've seen your insecure code <b>in production</b> and want to stop it at the source. You <b>NEED</b> cryptographically secure randomness for passwords.</span></text><author><a class="comment-user" href="/users/2224584/scott-arciszewski" title="15,046 reputation">Scott Arciszewski</a></author></comment><comment><text><span class="comment-copy">All of these "It's unsafe!!!" screams are solely based on the <i>assumption</i> the attackers knows how you generate your passwords. (If they do, you have bigger problems than those passwords) Just make sure you randomize your input (<code>$alphabet</code>), then this is safe enough.</span></text><author><a class="comment-user" href="/users/1835379/cerbrus" title="39,394 reputation">Cerbrus</a></author></comment><comment><text><span class="comment-copy">@Cerbrus You're proposing a substitution cipher, trivially breaks under a known-plaintext attack. The attacker simply needs to sign up a couple of times and note both the time of the signup and their password and recovers the permutation from that.</span></text><author><a class="comment-user" href="/users/445517/codesinchaos" title="78,763 reputation">CodesInChaos</a></author></comment><comment><text><span class="comment-copy">As the answer is now community wiki community contributions are encouraged so I reinstated Scott's.</span></text><author><a class="comment-user" href="/users/73226/martin-smith" title="285,277 reputation">Martin Smith</a></author></comment><comment><text><span class="comment-copy">@MartinSmith the only point in Scott's edit is to promote his post... I am editing ur edit again to remove the needless promotion...</span></text><author><a class="comment-user" href="/users/561731/neal" title="97,990 reputation">Neal</a></author></comment><comment><text><span class="comment-copy">@Neal No, the only point of my edit was to point people directly towards a secure answer. Which, now that this is a Community-protected question rather than a closed one, I can just supply my own here.</span></text><author><a class="comment-user" href="/users/2224584/scott-arciszewski" title="15,046 reputation">Scott Arciszewski</a></author></comment><comment><text><span class="comment-copy">Can someone explain how an attack on this insecure method would work? I know that the numbers produced by rand() are not secure random numbers, but I still have trouble wrapping my head around how someone would exploit this. Does it make any difference if you assume that a potential attacker can not sign up themselves to receive multiple passwords for analysis?</span></text><author><a class="comment-user" href="/users/1638560/christian" title="192 reputation">Christian</a></author></comment><comment><text><span class="comment-copy">That password is secure enough compared to the user's pet name :)</span></text><author><a class="comment-user" href="/users/1372973/heroselohim" title="525 reputation">Heroselohim</a></author></comment><comment><text><span class="comment-copy">I prefer this method over RandomLib because I am not forced to use Composer.</span></text><author><a class="comment-user" href="/users/2311074/adam" title="1,007 reputation">Adam</a></author></comment><comment><text><span class="comment-copy">Use <code>openssl_random_pseudo_bytes()</code> or <code>random_byte()</code></span></text><author><a class="comment-user" href="/users/4118983/jeroen-bellemans" title="1,240 reputation">Jeroen Bellemans</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I know you are trying to generate your password in a specific way, but you might want to look at this method as well...</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">$bytes </span><span class="pun">=</span><span class="pln"> openssl_random_pseudo_bytes</span><span class="pun">(</span><span class="lit">2</span><span class="pun">);</span><span class="pln">

$pwd </span><span class="pun">=</span><span class="pln"> bin2hex</span><span class="pun">(</span><span class="pln">$bytes</span><span class="pun">);</span></code></pre>
<p>It's taken from the php.net site and it creates a string which is twice the length of the number you put in the openssl_random_pseudo_bytes function. So the above would create a password 4 characters long.</p>
<p>In short...</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">$pwd </span><span class="pun">=</span><span class="pln"> bin2hex</span><span class="pun">(</span><span class="pln">openssl_random_pseudo_bytes</span><span class="pun">(</span><span class="lit">4</span><span class="pun">));</span></code></pre>
<p>Would create a password 8 characters long.</p>
<p>Note however that the password only contains numbers 0-9 and small cap letters a-f!</p>
</div></text><author><a href="/users/3260409/user3260409">user3260409</a></author><comments><comment><text><span class="comment-copy">If you want a password that's uppercase, lowercase, and numbers, try this: <a href="https://gist.github.com/zyphlar/7217f566fc83a9633959" rel="nofollow noreferrer">gist.github.com/zyphlar/7217f566fc83a9633959</a></span></text><author><a class="comment-user" href="/users/1076092/willbradley" title="371 reputation">willbradley</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<h3>TL;DR:</h3>
<ul>
<li>Use <a href="https://github.com/ircmaxell/RandomLib" rel="noreferrer">RandomLib</a>.</li>
<li>If you can't use RandomLib, use <code>random_int()</code> and the given <code>random_str()</code>.</li>
<li>If you don't have <code>random_int()</code>, use <a href="https://github.com/paragonie/random_compat" rel="noreferrer">random_compat</a>.</li>
</ul>
<h3>Explanation:</h3>
<p>Since you are generating a <strong>password</strong>, you need to ensure that the password you generate is unpredictable, and the only way to ensure this property is present in your implementation is to use a <a href="https://paragonie.com/blog/2015/07/how-safely-generate-random-strings-and-integers-in-php" rel="noreferrer"><strong>cryptographically secure pseudorandom number generator</strong></a> (CSPRNG).</p>
<p>The requirement for a CSPRNG can be relaxed for the general case of random strings, but not when security is involved.</p>
<p>The simple, secure, and correct answer to password generation in PHP is to use <a href="https://github.com/ircmaxell/RandomLib" rel="noreferrer">RandomLib</a> and don't reinvent the wheel. This library has been audited by industry security experts, as well as myself.</p>
<p>For developers who prefer inventing your own solution, PHP 7.0.0 will provide <a href="https://secure.php.net/random_int" rel="noreferrer"><code>random_int()</code></a> for this purpose. If you're still on PHP 5.x, we wrote a <a href="https://github.com/paragonie/random_compat" rel="noreferrer">PHP 5 polyfill for <code>random_int()</code></a> so you can use the new API before PHP 7 is released. Using our <code>random_int()</code> polyfill is <em>probably</em> safer than writing your own implementation.</p>
<p>With a secure random integer generator on hand, generating a secure random string is easier than pie:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pun">&lt;?</span><span class="pln">php
</span><span class="com">/**
 * Generate a random string, using a cryptographically secure 
 * pseudorandom number generator (random_int)
 * 
 * For PHP 7, random_int is a PHP core function
 * For PHP 5.x, depends on https://github.com/paragonie/random_compat
 * 
 * @param int $length      How many characters do we want?
 * @param string $keyspace A string of all possible characters
 *                         to select from
 * @return string
 */</span><span class="pln">
</span><span class="kwd">function</span><span class="pln"> random_str</span><span class="pun">(</span><span class="pln">
    $length</span><span class="pun">,</span><span class="pln">
    $keyspace </span><span class="pun">=</span><span class="pln"> </span><span class="str">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><span class="pln">
</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    $str </span><span class="pun">=</span><span class="pln"> </span><span class="str">''</span><span class="pun">;</span><span class="pln">
    $max </span><span class="pun">=</span><span class="pln"> mb_strlen</span><span class="pun">(</span><span class="pln">$keyspace</span><span class="pun">,</span><span class="pln"> </span><span class="str">'8bit'</span><span class="pun">)</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$max </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Exception</span><span class="pun">(</span><span class="str">'$keyspace must be at least two characters long'</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i </span><span class="pun">&lt;</span><span class="pln"> $length</span><span class="pun">;</span><span class="pln"> </span><span class="pun">++</span><span class="pln">$i</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        $str </span><span class="pun">.=</span><span class="pln"> $keyspace</span><span class="pun">[</span><span class="pln">random_int</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="pln"> $max</span><span class="pun">)];</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> $str</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/2224584/scott-arciszewski">Scott Arciszewski</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Tiny code with <strong>2 line.</strong></p>
<p>demo: <a href="http://codepad.org/5rHMHwnH">http://codepad.org/5rHMHwnH</a></p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="kwd">function</span><span class="pln"> rand_string</span><span class="pun">(</span><span class="pln"> $length </span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    $chars </span><span class="pun">=</span><span class="pln"> </span><span class="str">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> substr</span><span class="pun">(</span><span class="pln">str_shuffle</span><span class="pun">(</span><span class="pln">$chars</span><span class="pun">),</span><span class="lit">0</span><span class="pun">,</span><span class="pln">$length</span><span class="pun">);</span><span class="pln">

</span><span class="pun">}</span><span class="pln">

echo rand_string</span><span class="pun">(</span><span class="lit">8</span><span class="pun">);</span></code></pre>
<blockquote>
<p>with rand_string you can define how much character will be create.</p>
</blockquote>
</div></text><author><a href="/users/1008675/bsq">BSQ</a></author><comments><comment><text><span class="comment-copy">Nice, though you won't get any repeated characters using this approach, which might be undesirable.</span></text><author><a class="comment-user" href="/users/1714/hobo" title="5,690 reputation">Hobo</a></author></comment><comment><text><span class="comment-copy">This function is terrible for generating long passwords. First, if $length is longer than the $chars string, then you will not receive a string as long as the length you input, but the length of the chars string. Also, you are guaranteed only 1 of each character with no duplicates. It also does not guarantee the use of a capital letter or a number which is quite often a requirement (except of course if your length is more than 26 due to the previous fault)</span></text><author><a class="comment-user" href="/users/1385833/programster" title="3,544 reputation">Programster</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>In one line:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">substr</span><span class="pun">(</span><span class="pln">str_shuffle</span><span class="pun">(</span><span class="str">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span><span class="pun">)</span><span class="pln"> </span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">,</span><span class="pln"> </span><span class="lit">10</span><span class="pln"> </span><span class="pun">)</span></code></pre>
</div></text><author><a href="/users/785515/la-chouette">la_chouette</a></author><comments><comment><text><span class="comment-copy">+1 for shortest Answer</span></text><author><a class="comment-user" href="/users/2652018/steel-brain" title="1,870 reputation">Steel Brain</a></author></comment><comment><text><span class="comment-copy">This prevents re-use of the same letters as they just shuffle around but don't occur more than once.</span></text><author><a class="comment-user" href="/users/1650180/nickdnk" title="907 reputation">nickdnk</a></author></comment><comment><text><span class="comment-copy">Needless to say, nobody should be optimizing their password generation function based on line count. Even if the RNG this used were secure (it's not), avoiding repeated characters while generating a 10-character password brings you down from ~52 bits of entropy to ~50 bits of entropy (~4x faster to crack). If you extended this out to 20 characters, the non-repetition would bring you down from ~103 bits to ~94 bits (~512x faster to crack).</span></text><author><a class="comment-user" href="/users/1114/jeremy-banks" title="59,154 reputation">Jeremy Banks<span class="mod-flair" title="moderator">♦</span></a></author></comment><comment><text><span class="comment-copy">This method reminds me of the <a href="https://www.youtube.com/watch?v=V4V2bpZlqx8" rel="nofollow noreferrer">flaw in the Enigma code</a> Lol</span></text><author><a class="comment-user" href="/users/2568469/hatef" title="1,540 reputation">Hatef</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>If you are on PHP7 you could use the <a href="http://php.net/manual/en/function.random-int.php"><code>random_int()</code></a> function:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="kwd">function</span><span class="pln"> generate_password</span><span class="pun">(</span><span class="pln">$length </span><span class="pun">=</span><span class="pln"> </span><span class="lit">20</span><span class="pun">){</span><span class="pln">
  $chars </span><span class="pun">=</span><span class="pln">  </span><span class="str">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'</span><span class="pun">.</span><span class="pln">
            </span><span class="str">'0123456789`-=~!@#$%^&amp;*()_+,./&lt;&gt;?;:[]{}\|'</span><span class="pun">;</span><span class="pln">

  $str </span><span class="pun">=</span><span class="pln"> </span><span class="str">''</span><span class="pun">;</span><span class="pln">
  $max </span><span class="pun">=</span><span class="pln"> strlen</span><span class="pun">(</span><span class="pln">$chars</span><span class="pun">)</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$i</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i </span><span class="pun">&lt;</span><span class="pln"> $length</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++)</span><span class="pln">
    $str </span><span class="pun">.=</span><span class="pln"> $chars</span><span class="pun">[</span><span class="pln">random_int</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="pln"> $max</span><span class="pun">)];</span><span class="pln">

  </span><span class="kwd">return</span><span class="pln"> $str</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<blockquote>
<p>Old answer below:</p>
</blockquote>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="kwd">function</span><span class="pln"> generate_password</span><span class="pun">(</span><span class="pln">$length </span><span class="pun">=</span><span class="pln"> </span><span class="lit">20</span><span class="pun">){</span><span class="pln">
  $chars </span><span class="pun">=</span><span class="pln">  </span><span class="str">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'</span><span class="pun">.</span><span class="pln">
            </span><span class="str">'0123456789`-=~!@#$%^&amp;*()_+,./&lt;&gt;?;:[]{}\|'</span><span class="pun">;</span><span class="pln">

  $str </span><span class="pun">=</span><span class="pln"> </span><span class="str">''</span><span class="pun">;</span><span class="pln">
  $max </span><span class="pun">=</span><span class="pln"> strlen</span><span class="pun">(</span><span class="pln">$chars</span><span class="pun">)</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$i</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i </span><span class="pun">&lt;</span><span class="pln"> $length</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++)</span><span class="pln">
    $str </span><span class="pun">.=</span><span class="pln"> $chars</span><span class="pun">[</span><span class="pln">mt_rand</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="pln"> $max</span><span class="pun">)];</span><span class="pln">

  </span><span class="kwd">return</span><span class="pln"> $str</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/508666/peehaa">PeeHaa</a></author><comments><comment><text><span class="comment-copy">don't use <code>mt_rand</code> to generate a password.</span></text><author><a class="comment-user" href="/users/445517/codesinchaos" title="78,763 reputation">CodesInChaos</a></author></comment><comment><text><span class="comment-copy">@CodesInChaos it's better than rand() which is what the above example uses. openssl_random_pseudo_bytes() is preferred according to the PHP manual.</span></text><author><a class="comment-user" href="/users/1076092/willbradley" title="371 reputation">willbradley</a></author></comment><comment><text><span class="comment-copy">@willbradley The quality of the seed is just as bad for <code>mt_rand</code>, so it's still unsuitable for any security use.</span></text><author><a class="comment-user" href="/users/445517/codesinchaos" title="78,763 reputation">CodesInChaos</a></author></comment><comment><text><span class="comment-copy">you see this is what annoys me +ChaosInCodes. You haven't looked at the question, you've just made some generic statements repeated a load of poorly held beliefs. In short: right piece of advice for a totally different question. Random passwords are fine. They are probably "x" use only. Quite honestly if you are designing your system without timed lockouts and DOS detection and "x tries then -&gt; locked" then you are doing it wrong. IT is IMPOSSIBLE to guess a mt_rand password with such measures in place. Conversely using mt_rand will not make it EASIER to brute force a password. It just won't.</span></text><author><a class="comment-user" href="/users/3865138/mr-heelis" title="529 reputation">Mr Heelis</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Your best bet is the <strong><a href="https://github.com/ircmaxell/RandomLib">RandomLib library by ircmaxell</a></strong>.</p>
<p>Usage example:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">$factory </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">RandomLib</span><span class="pln">\Factory</span><span class="pun">;</span><span class="pln">
$generator </span><span class="pun">=</span><span class="pln"> $factory</span><span class="pun">-&gt;</span><span class="pln">getGenerator</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SecurityLib</span><span class="pln">\Strength</span><span class="pun">(</span><span class="typ">SecurityLib</span><span class="pln">\Strength</span><span class="pun">::</span><span class="pln">MEDIUM</span><span class="pun">));</span><span class="pln">

$passwordLength </span><span class="pun">=</span><span class="pln"> </span><span class="lit">8</span><span class="pun">;</span><span class="pln"> </span><span class="com">// Or more</span><span class="pln">
$randomPassword </span><span class="pun">=</span><span class="pln"> $generator</span><span class="pun">-&gt;</span><span class="pln">generateString</span><span class="pun">(</span><span class="pln">$passwordLength</span><span class="pun">);</span></code></pre>
<p>It produces strings which are more strongly random than the normal randomness functions like <code>shuffle()</code> and <code>rand()</code> (which is what you generally want for sensitive information like passwords, salts and keys).</p>
</div></text><author><a href="/users/871050/madara-uchiha">Madara Uchiha</a></author><comments><comment><text><span class="comment-copy">This is the correct answer. Don't use <code>rand()</code> or <code>mt_rand()</code>.</span></text><author><a class="comment-user" href="/users/2224584/scott-arciszewski" title="15,046 reputation">Scott Arciszewski</a></author></comment><comment><text><span class="comment-copy">It may be the most secure answer (not sure how it compares to <code>random_bytes</code>), but that doesn't make <code>rand</code> answers incorrect.</span></text><author><a class="comment-user" href="/users/1835379/cerbrus" title="39,394 reputation">Cerbrus</a></author></comment><comment><text><span class="comment-copy"><a href="https://paragonie.com/blog/2015/07/how-safely-generate-random-strings-and-integers-in-php" rel="nofollow noreferrer"><code>rand</code> is not a good choice for passwords</a></span></text><author><a class="comment-user" href="/users/2224584/scott-arciszewski" title="15,046 reputation">Scott Arciszewski</a></author></comment><comment><text><span class="comment-copy">@Cerbrus: Sure this answer doesn't make answers using <code>rand()</code> incorrect. They are incorrect all on their own!</span></text><author><a class="comment-user" href="/users/3204551/deduplicator" title="29,200 reputation">Deduplicator</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>You want <code>strlen($alphabet)</code>, not <code>count</code> of the constant <code>alphabet</code> (equivalent to <code>'alphabet'</code>).</p>
<p>However, <code>rand</code> is not a suitable random function for this purpose. Its output can easily be predicted as it is implicitly seeded with the current time. Additionally, <code>rand</code> is not cryptographically secure; it is therefore relatively easy to determine its internal state from output.</p>
<p>Instead, read from <code>/dev/urandom</code> to get cryptographically random data.</p>
</div></text><author><a href="/users/35070/phihag">phihag</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>This is basically the same as the much simpler <code>substr(md5(uniqid()), 0, 8);</code></p>
</div></text><author><a href="/users/454533/explosion-pills">Explosion Pills</a></author><comments><comment><text><span class="comment-copy">Except it's more secure against brute force attacks, because MD5 only uses lowercase A-F and 0-9.  If an attacker knew you were using this, they could narrow their brute-force search considerably, as there are only 4.2 billion possible 8-character passwords.  Using all letters (upper and lower) as well as digits gives 218,340 billion combinations.</span></text><author><a class="comment-user" href="/users/308237/malvineous" title="6,849 reputation">Malvineous</a></author></comment><comment><text><span class="comment-copy">@Malvineous But only when generated by a proper PRNG. I believe the seeding of <code>rand</code> and <code>mt_rand</code> is so bad that the effective entropy is even smaller that 32 bits.</span></text><author><a class="comment-user" href="/users/445517/codesinchaos" title="78,763 reputation">CodesInChaos</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I'm going to post an answer because some of the existing answers are close but have one of:</p>
<ul>
<li>a smaller character space than you wanted so that either brute-forcing is easier or the password must be longer for the same entropy</li>
<li>a <a href="https://en.wikipedia.org/wiki/Random_number_generation" rel="noreferrer">RNG</a> that isn't considered cryptographically secure</li>
<li>a requirement for some 3rd party library and I thought it might be interesting to show what it might take to do it yourself</li>
</ul>
<p>This answer will circumvent the <code>count/strlen</code> issue as the security of the generated password, at least IMHO, transcends how you're getting there.  I'm also going to assume PHP &gt; 5.3.0.</p>
<p>Let's break the problem down into the constituent parts which are:</p>
<ol>
<li>use some secure source of randomness to get random data</li>
<li>use that data and represent it as some printable string</li>
</ol>
<p>For the first part, PHP &gt; 5.3.0 provides the function <a href="http://php.net/manual/en/function.openssl-.random-pseudo-bytes.php" rel="noreferrer"><code>openssl_random_pseudo_bytes</code></a>. Note that whilst most systems use a cryptographically strong algorithm, you have to check so we'll use a wrapper:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="com">/**
 * @param int $length
 */</span><span class="pln">
</span><span class="kwd">function</span><span class="pln"> strong_random_bytes</span><span class="pun">(</span><span class="pln">$length</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    $strong </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln"> </span><span class="com">// Flag for whether a strong algorithm was used</span><span class="pln">
    $bytes </span><span class="pun">=</span><span class="pln"> openssl_random_pseudo_bytes</span><span class="pun">(</span><span class="pln">$length</span><span class="pun">,</span><span class="pln"> $strong</span><span class="pun">);</span><span class="pln">

    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> </span><span class="pun">!</span><span class="pln"> $strong</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="com">// System did not use a cryptographically strong algorithm </span><span class="pln">
        </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Exception</span><span class="pun">(</span><span class="str">'Strong algorithm not available for PRNG.'</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">        

    </span><span class="kwd">return</span><span class="pln"> $bytes</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>For the second part, we'll use <a href="http://php.net/manual/en/function.base64-encode.php" rel="noreferrer"><code>base64_encode</code></a> since it takes a byte string and will produce a series of characters that have an alphabet very close to the one specified in the original question. If we didn't mind having <code>+</code>, <code>/</code> and <code>=</code> characters appear in the final string and we want a result at least <code>$n</code> characters long, we could simply use:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">base64_encode</span><span class="pun">(</span><span class="pln">strong_random_bytes</span><span class="pun">(</span><span class="pln">intval</span><span class="pun">(</span><span class="pln">ceil</span><span class="pun">(</span><span class="pln">$n </span><span class="pun">*</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> </span><span class="lit">4</span><span class="pun">))));</span></code></pre>
<p>The <code>3/4</code> factor is due to the fact that base64 encoding results in a string that has a length at least a third bigger than the byte string. The result will be exact for <code>$n</code> being a multiple of 4 and up to 3 characters longer otherwise. Since the extra characters are predominantly the padding character <code>=</code>, if we for some reason had a constraint that the password be an exact length, then we can  truncate it to the length we want. This is especially because for a given <code>$n</code>, all  passwords would end with the same number of these, so that an attacker who had access to a result password, would have up to 2 less characters to guess.</p>
<hr/>
<p>For extra credit, if we wanted to meet the exact spec as in the OP's question then we would have to do a little bit more work. I'm going to forgo the base conversion approach here and go with a quick and dirty one. Both need to generate more randomness than will be used in the result anyway because of the 62 entry long alphabet.</p>
<p>For the extra characters in the result, we can simply discard them from the resulting string. If we start off with 8 bytes in our byte-string, then up to about 25% of the base64 characters would be these "undesirable" characters, so that simply discarding these characters results in a string no shorter than the OP wanted. Then we can simply truncate it to get down to the exact length:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">$dirty_pass </span><span class="pun">=</span><span class="pln"> base64_encode</span><span class="pun">(</span><span class="pln">strong_random_bytes</span><span class="pun">(</span><span class="lit">8</span><span class="pun">)));</span><span class="pln">
$pass </span><span class="pun">=</span><span class="pln"> substr</span><span class="pun">(</span><span class="pln">str_replace</span><span class="pun">([</span><span class="str">'/'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'+'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'='</span><span class="pun">],</span><span class="pln"> </span><span class="pun">[</span><span class="str">''</span><span class="pun">,</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln"> </span><span class="str">''</span><span class="pun">],</span><span class="pln"> $dirty_pass</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">8</span><span class="pun">);</span></code></pre>
<p>If you generate longer passwords, the padding character <code>=</code> forms a smaller and smaller proportion of the intermediate result so that you can implement a leaner approach, if draining the entropy pool used for the PRNG is a concern.</p>
</div></text><author><a href="/users/1852838/jeteon">jeteon</a></author><comments><comment><text><span class="comment-copy">Thanks for this addition. None of the existing answers noted that <code>openssl_random_pseudo_bytes</code> could produced a weak result. I didn't realize that was the case.</span></text><author><a class="comment-user" href="/users/1114/jeremy-banks" title="59,154 reputation">Jeremy Banks<span class="mod-flair" title="moderator">♦</span></a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p><code>base_convert(uniqid('pass', true), 10, 36);</code></p>
<p>eg. <code>e0m6ngefmj4</code></p>
<p><strong>EDIT</strong></p>
<p>As I've mentioned in comments, the length means that brute force attacks would work better against it then timing attacks so it's not really relevant to worry about "how secure the random generator was." Security, specifically for this use case, needs to complement usability so the above solution is actually good enough for the required problem.</p>
<p>However, just in case you stumbled upon this answer while searching for a secure random string generator (as I assume some people have based on the responses), for something such as generating tokens, here is how a generator of such codes would look like:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="kwd">function</span><span class="pln"> base64urlEncode</span><span class="pun">(</span><span class="pln">$data</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> rtrim</span><span class="pun">(</span><span class="pln">strtr</span><span class="pun">(</span><span class="pln">base64_encode</span><span class="pun">(</span><span class="pln">$data</span><span class="pun">),</span><span class="pln"> </span><span class="str">'+/'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'-_'</span><span class="pun">),</span><span class="pln"> </span><span class="str">'='</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">function</span><span class="pln"> secureId</span><span class="pun">(</span><span class="pln">$length </span><span class="pun">=</span><span class="pln"> </span><span class="lit">32</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">function_exists</span><span class="pun">(</span><span class="str">'openssl_random_pseudo_bytes'</span><span class="pun">))</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        $bytes </span><span class="pun">=</span><span class="pln"> openssl_random_pseudo_bytes</span><span class="pun">(</span><span class="pln">$length</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> rtrim</span><span class="pun">(</span><span class="pln">strtr</span><span class="pun">(</span><span class="pln">base64_encode</span><span class="pun">(</span><span class="pln">$bytes</span><span class="pun">),</span><span class="pln"> </span><span class="str">'+/'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'0a'</span><span class="pun">),</span><span class="pln"> </span><span class="str">'='</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="com">// fallback to system bytes</span><span class="pln">

        error_log</span><span class="pun">(</span><span class="str">"Missing support for openssl_random_pseudo_bytes"</span><span class="pun">);</span><span class="pln">

        $pr_bits </span><span class="pun">=</span><span class="pln"> </span><span class="str">''</span><span class="pun">;</span><span class="pln">

        $fp </span><span class="pun">=</span><span class="pln"> </span><span class="lit">@fopen</span><span class="pun">(</span><span class="str">'/dev/urandom'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'rb'</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$fp </span><span class="pun">!==</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            $pr_bits </span><span class="pun">.=</span><span class="pln"> </span><span class="lit">@fread</span><span class="pun">(</span><span class="pln">$fp</span><span class="pun">,</span><span class="pln"> $length</span><span class="pun">);</span><span class="pln">
            </span><span class="lit">@fclose</span><span class="pun">(</span><span class="pln">$fp</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">strlen</span><span class="pun">(</span><span class="pln">$pr_bits</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln"> $length</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            error_log</span><span class="pun">(</span><span class="str">'unable to read /dev/urandom'</span><span class="pun">);</span><span class="pln">
            </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> \Exception</span><span class="pun">(</span><span class="str">'unable to read /dev/urandom'</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">return</span><span class="pln"> base64urlEncode</span><span class="pun">(</span><span class="pln">$pr_bits</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/219755/srcspider">srcspider</a></author><comments><comment><text><span class="comment-copy">PS - this is PHP - just using \ to denote the global namespace.</span></text><author><a class="comment-user" href="/users/409852/bob-gregor" title="1,081 reputation">Bob Gregor</a></author></comment><comment><text><span class="comment-copy">Except that uniqid is not cryptographically secure. Use rand() instead: base_convert(rand(78364164096, 2821109907455), 10, 36);</span></text><author><a class="comment-user" href="/users/494643/benubird" title="6,066 reputation">Benubird</a></author></comment><comment><text><span class="comment-copy">@Benubird rand() is not cryptographically secure either, according to the PHP manual. The manual suggests openssl_random_pseudo_bytes() instead.</span></text><author><a class="comment-user" href="/users/1076092/willbradley" title="371 reputation">willbradley</a></author></comment><comment><text><span class="comment-copy">For most use cases, specifically where the attacker does not have access to the exact time, this is perfectly fine and produces a nice more-or-less human friendly "temporary" password. If we were to take this to the extreme the length here is far more troublesome then what function was used to generate the random number.</span></text><author><a class="comment-user" href="/users/219755/srcspider" title="6,081 reputation">srcspider</a></author></comment><comment><text><span class="comment-copy">I've added an example for generating fully secure strings, for those interested; but highly do not recommend using this when generating temporary passwords for users. Even using the secure version, the length problem still applies.</span></text><author><a class="comment-user" href="/users/219755/srcspider" title="6,081 reputation">srcspider</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Another one (linux only)</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="kwd">function</span><span class="pln"> randompassword</span><span class="pun">()</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    $fp </span><span class="pun">=</span><span class="pln"> fopen </span><span class="pun">(</span><span class="str">"/dev/urandom"</span><span class="pun">,</span><span class="pln"> </span><span class="str">'r'</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">$fp</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">die</span><span class="pln"> </span><span class="pun">(</span><span class="str">"Can't access /dev/urandom to get random data. Aborting."</span><span class="pun">);</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
    $random </span><span class="pun">=</span><span class="pln"> fread </span><span class="pun">(</span><span class="pln">$fp</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1024</span><span class="pun">);</span><span class="pln"> </span><span class="com"># 1024 bytes should be enough</span><span class="pln">
    fclose </span><span class="pun">(</span><span class="pln">$fp</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> trim </span><span class="pun">(</span><span class="pln">base64_encode </span><span class="pun">(</span><span class="pln"> md5 </span><span class="pun">(</span><span class="pln">$random</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">)),</span><span class="pln"> </span><span class="str">"="</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/2148128/askarel">Askarel</a></author><comments><comment><text><span class="comment-copy">Reading 1024 bytes to compress into a 128-bit cryptographic hash of the entropy is a little wasteful. Also, <code>fread()</code> buffers to 8192 bytes by default, so you're always going to read that many from <code>/dev/urandom</code> with the given code. This also won't work on Windows. Kudos for using a CSPRNG, though.</span></text><author><a class="comment-user" href="/users/2224584/scott-arciszewski" title="15,046 reputation">Scott Arciszewski</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Try This with Capital Letters, Small Letters, Numeric(s) and Special Characters</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="kwd">function</span><span class="pln"> generatePassword</span><span class="pun">(</span><span class="pln">$_len</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    $_alphaSmall </span><span class="pun">=</span><span class="pln"> </span><span class="str">'abcdefghijklmnopqrstuvwxyz'</span><span class="pun">;</span><span class="pln">            </span><span class="com">// small letters</span><span class="pln">
    $_alphaCaps  </span><span class="pun">=</span><span class="pln"> strtoupper</span><span class="pun">(</span><span class="pln">$_alphaSmall</span><span class="pun">);</span><span class="pln">                </span><span class="com">// CAPITAL LETTERS</span><span class="pln">
    $_numerics   </span><span class="pun">=</span><span class="pln"> </span><span class="str">'1234567890'</span><span class="pun">;</span><span class="pln">                            </span><span class="com">// numerics</span><span class="pln">
    $_specialChars </span><span class="pun">=</span><span class="pln"> </span><span class="str">'`~!@#$%^&amp;*()-_=+]}[{;:,&lt;.&gt;/?\'"\|'</span><span class="pun">;</span><span class="pln">   </span><span class="com">// Special Characters</span><span class="pln">

    $_container </span><span class="pun">=</span><span class="pln"> $_alphaSmall</span><span class="pun">.</span><span class="pln">$_alphaCaps</span><span class="pun">.</span><span class="pln">$_numerics</span><span class="pun">.</span><span class="pln">$_specialChars</span><span class="pun">;</span><span class="pln">   </span><span class="com">// Contains all characters</span><span class="pln">
    $password </span><span class="pun">=</span><span class="pln"> </span><span class="str">''</span><span class="pun">;</span><span class="pln">         </span><span class="com">// will contain the desired pass</span><span class="pln">

    </span><span class="kwd">for</span><span class="pun">(</span><span class="pln">$i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i </span><span class="pun">&lt;</span><span class="pln"> $_len</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">                                 </span><span class="com">// Loop till the length mentioned</span><span class="pln">
        $_rand </span><span class="pun">=</span><span class="pln"> rand</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="pln"> strlen</span><span class="pun">(</span><span class="pln">$_container</span><span class="pun">)</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span><span class="pln">                  </span><span class="com">// Get Randomized Length</span><span class="pln">
        $password </span><span class="pun">.=</span><span class="pln"> substr</span><span class="pun">(</span><span class="pln">$_container</span><span class="pun">,</span><span class="pln"> $_rand</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span><span class="pln">                </span><span class="com">// returns part of the string [ high tensile strength ;) ] </span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">return</span><span class="pln"> $password</span><span class="pun">;</span><span class="pln">       </span><span class="com">// Returns the generated Pass</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<blockquote>
<p>Let's Say we need 10 Digit Pass</p>
</blockquote>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">echo generatePassword</span><span class="pun">(</span><span class="lit">10</span><span class="pun">);</span><span class="pln">  </span></code></pre>
<p><strong><em>Example Output(s) :</em></strong> </p>
<p>,IZCQ_IV\7  </p>
<p>@wlqsfhT(d  </p>
<p>1!8+1\4@uD</p>
</div></text><author><a href="/users/5048798/sanjeev">Sanjeev</a></author><comments><comment><text><span class="comment-copy">the <code>rand</code> function is not actually cryptographically secure so it might be quite a risk to generate a password using it</span></text><author><a class="comment-user" href="/users/1852838/jeteon" title="1,034 reputation">jeteon</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Quick One. Simple, clean and consistent format if that is what you want</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">$pw </span><span class="pun">=</span><span class="pln"> chr</span><span class="pun">(</span><span class="pln">mt_rand</span><span class="pun">(</span><span class="lit">97</span><span class="pun">,</span><span class="lit">122</span><span class="pun">)).</span><span class="pln">mt_rand</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="lit">9</span><span class="pun">).</span><span class="pln">chr</span><span class="pun">(</span><span class="pln">mt_rand</span><span class="pun">(</span><span class="lit">97</span><span class="pun">,</span><span class="lit">122</span><span class="pun">)).</span><span class="pln">mt_rand</span><span class="pun">(</span><span class="lit">10</span><span class="pun">,</span><span class="lit">99</span><span class="pun">).</span><span class="pln">chr</span><span class="pun">(</span><span class="pln">mt_rand</span><span class="pun">(</span><span class="lit">97</span><span class="pun">,</span><span class="lit">122</span><span class="pun">)).</span><span class="pln">mt_rand</span><span class="pun">(</span><span class="lit">100</span><span class="pun">,</span><span class="lit">999</span><span class="pun">);</span></code></pre>
</div></text><author><a href="/users/2286556/cornelius-parkin">Cornelius Parkin</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>This is based off another answer on this page,  <a href="http://stackoverflow.com/a/21498316/525649">http://stackoverflow.com/a/21498316/525649</a></p>
<p>This answer generates just hex characters, <code>0-9,a-f</code>. For something that doesn't look like hex, try this:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">str_shuffle</span><span class="pun">(</span><span class="pln">
  rtrim</span><span class="pun">(</span><span class="pln">
    base64_encode</span><span class="pun">(</span><span class="pln">bin2hex</span><span class="pun">(</span><span class="pln">openssl_random_pseudo_bytes</span><span class="pun">(</span><span class="lit">5</span><span class="pun">))),</span><span class="pln">
    </span><span class="str">'='</span><span class="pln">
  </span><span class="pun">).</span><span class="pln"> 
  strtoupper</span><span class="pun">(</span><span class="pln">bin2hex</span><span class="pun">(</span><span class="pln">openssl_random_pseudo_bytes</span><span class="pun">(</span><span class="lit">7</span><span class="pun">))).</span><span class="pln">
  bin2hex</span><span class="pun">(</span><span class="pln">openssl_random_pseudo_bytes</span><span class="pun">(</span><span class="lit">13</span><span class="pun">))</span><span class="pln">
</span><span class="pun">)</span></code></pre>
<ul>
<li><code>base64_encode</code> returns a wider spread of alphanumeric chars</li>
<li><code>rtrim</code> removes the <code>=</code> sometimes at the end </li>
</ul>
<p>Examples:</p>
<ul>
<li><code>32eFVfGDg891Be5e7293e54z1D23110M3ZU3FMjb30Z9a740Ej0jz4</code></li>
<li><code>b280R72b48eOm77a25YCj093DE5d9549Gc73Jg8TdD9Z0Nj4b98760</code></li>
<li><code>051b33654C0Eg201cfW0e6NA4b9614ze8D2FN49E12Y0zY557aUCb8</code></li>
<li><code>y67Q86ffd83G0z00M0Z152f7O2ADcY313gD7a774fc5FF069zdb5b7</code></li>
</ul>
<p>This isn't very configurable for creating an interface for users, but for some purposes that's okay. Increase the number of chars to account for the lack of special characters.</p>
</div></text><author><a href="/users/525649/adam">Adam</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<ol>
<li>Create a file with this code in it.</li>
<li><p>Call it like in the comments.</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pun">&lt;?</span><span class="pln">php 

</span><span class="com">/**
* @usage  :
*       include_once($path . '/Password.php');
*       $Password = new Password;
*       $pwd = $Password-&gt;createPassword(10);
*       return $pwd;
* 
*/</span><span class="pln">

</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Password</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> createPassword</span><span class="pun">(</span><span class="pln">$length </span><span class="pun">=</span><span class="pln"> </span><span class="lit">15</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        $response </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[];</span><span class="pln">
        $response</span><span class="pun">[</span><span class="str">'pwd'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $this</span><span class="pun">-&gt;</span><span class="pln">generate</span><span class="pun">(</span><span class="pln">$length</span><span class="pun">);</span><span class="pln">
        $response</span><span class="pun">[</span><span class="str">'hashPwd'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> $this</span><span class="pun">-&gt;</span><span class="pln">hashPwd</span><span class="pun">(</span><span class="pln"> $response</span><span class="pun">[</span><span class="str">'pwd'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> $response</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> generate</span><span class="pun">(</span><span class="pln">$length </span><span class="pun">=</span><span class="pln"> </span><span class="lit">15</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        $chars </span><span class="pun">=</span><span class="pln"> </span><span class="str">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&amp;*(){}/?,&gt;&lt;"</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> substr</span><span class="pun">(</span><span class="pln">str_shuffle</span><span class="pun">(</span><span class="pln">$chars</span><span class="pun">),</span><span class="lit">0</span><span class="pun">,</span><span class="pln">$length</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> hashPwd</span><span class="pun">(</span><span class="pln">$pwd</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> hash</span><span class="pun">(</span><span class="str">'sha256'</span><span class="pun">,</span><span class="pln"> $pwd</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

</span><span class="pun">}</span><span class="pln">

</span><span class="pun">?&gt;</span></code></pre></li>
</ol>
</div></text><author><a href="/users/3070192/waz">waz</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Use this simple code for generate med-strong password 12 length </p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">$password_string </span><span class="pun">=</span><span class="pln"> </span><span class="str">'!@#$%*&amp;abcdefghijklmnpqrstuwxyzABCDEFGHJKLMNPQRSTUWXYZ23456789'</span><span class="pun">;</span><span class="pln">
$password </span><span class="pun">=</span><span class="pln"> substr</span><span class="pun">(</span><span class="pln">str_shuffle</span><span class="pun">(</span><span class="pln">$password_string</span><span class="pun">),</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">12</span><span class="pun">);</span></code></pre>
</div></text><author><a href="/users/1130378/pablo-martinez">Pablo Martinez</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I created a more comprehensive and secure password script. This will create a combination of two uppercase, two lowercase, two numbers and two special characters. Total 8 characters.</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">$char </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">range</span><span class="pun">(</span><span class="str">'A'</span><span class="pun">,</span><span class="str">'Z'</span><span class="pun">),</span><span class="pln">range</span><span class="pun">(</span><span class="str">'a'</span><span class="pun">,</span><span class="str">'z'</span><span class="pun">),</span><span class="pln">range</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="lit">9</span><span class="pun">),[</span><span class="str">'*'</span><span class="pun">,</span><span class="str">'%'</span><span class="pun">,</span><span class="str">'$'</span><span class="pun">,</span><span class="str">'#'</span><span class="pun">,</span><span class="str">'@'</span><span class="pun">,</span><span class="str">'!'</span><span class="pun">,</span><span class="str">'+'</span><span class="pun">,</span><span class="str">'?'</span><span class="pun">,</span><span class="str">'.'</span><span class="pun">]];</span><span class="pln">
$pw </span><span class="pun">=</span><span class="pln"> </span><span class="str">''</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">for</span><span class="pun">(</span><span class="pln">$a </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $a </span><span class="pun">&lt;</span><span class="pln"> count</span><span class="pun">(</span><span class="pln">$char</span><span class="pun">);</span><span class="pln"> $a</span><span class="pun">++)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    $randomkeys </span><span class="pun">=</span><span class="pln"> array_rand</span><span class="pun">(</span><span class="pln">$char</span><span class="pun">[</span><span class="pln">$a</span><span class="pun">],</span><span class="pln"> </span><span class="lit">2</span><span class="pun">);</span><span class="pln">
    $pw </span><span class="pun">.=</span><span class="pln"> $char</span><span class="pun">[</span><span class="pln">$a</span><span class="pun">][</span><span class="pln">$randomkeys</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]].</span><span class="pln">$char</span><span class="pun">[</span><span class="pln">$a</span><span class="pun">][</span><span class="pln">$randomkeys</span><span class="pun">[</span><span class="lit">1</span><span class="pun">]];</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
$userPassword </span><span class="pun">=</span><span class="pln"> str_shuffle</span><span class="pun">(</span><span class="pln">$pw</span><span class="pun">);</span></code></pre>
</div></text><author><a href="/users/3222119/monrejames">monrejames</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pun">&lt;?</span><span class="pln">php
    </span><span class="com">// We can generate without large code..</span><span class="pln">
    $length </span><span class="pun">=</span><span class="pln"> </span><span class="lit">8</span><span class="pun">;</span><span class="pln">
    $chars </span><span class="pun">=</span><span class="pln"> array_merge</span><span class="pun">(</span><span class="pln">range</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="lit">9</span><span class="pun">),</span><span class="pln"> range</span><span class="pun">(</span><span class="str">'a'</span><span class="pun">,</span><span class="str">'z'</span><span class="pun">),</span><span class="pln">range</span><span class="pun">(</span><span class="str">'A'</span><span class="pun">,</span><span class="str">'Z'</span><span class="pun">),[</span><span class="str">'!'</span><span class="pun">,</span><span class="str">'@'</span><span class="pun">,</span><span class="str">'#'</span><span class="pun">,</span><span class="str">'$'</span><span class="pun">,</span><span class="str">'%'</span><span class="pun">,</span><span class="str">'&amp;'</span><span class="pun">,</span><span class="str">'*'</span><span class="pun">,</span><span class="str">'?'</span><span class="pun">]);</span><span class="pln">
    </span><span class="com">//$chars = array_merge(range(0,1), range('A','Z'));</span><span class="pln">
    shuffle</span><span class="pun">(</span><span class="pln">$chars</span><span class="pun">);</span><span class="pln">
    $code </span><span class="pun">=</span><span class="pln"> implode</span><span class="pun">(</span><span class="pln">array_slice</span><span class="pun">(</span><span class="pln">$chars</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> $length</span><span class="pun">));</span><span class="pln">
    $arr </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">(</span><span class="pln">$code</span><span class="pun">);</span><span class="pln">
    $password </span><span class="pun">=</span><span class="pln"> implode</span><span class="pun">(</span><span class="str">""</span><span class="pun">,</span><span class="pln">$arr</span><span class="pun">);</span><span class="pln">
    echo $password</span><span class="pun">;</span></code></pre>
</div></text><author><a href="/users/6503565/yagnesh-bhalala">Yagnesh bhalala</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I've been meaning to try implementing my own "secure" and "random" password generator. </p>
<p>I thought it would be interesting and more flexible to provide a <code>length</code> and <code>type</code> parameter to the function.</p>
<p>Here is a function that performs a few checks to make sure the <code>length</code> is not too short or long (also allowing variable length). It also allows the ability to choose your password charset in the <code>type</code> parameter.</p>
<p>It returns <code>null</code> if the <code>length</code> or <code>type</code> are invalid and uses PHP's <code>mt_rand()</code> function which is more "random" than <code>rand()</code>.</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pun">&lt;?</span><span class="pln">php

</span><span class="com">/**
* Generates a random password with the given length and of the given type.
*
* @param int $length
* @param string $type 
* @return string | null
*/</span><span class="pln">
</span><span class="kwd">function</span><span class="pln"> random_password</span><span class="pun">(</span><span class="pln">$length</span><span class="pun">=</span><span class="lit">8</span><span class="pun">,</span><span class="pln"> $type</span><span class="pun">=</span><span class="str">'alpha_numeric'</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$length </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> $length </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">1024</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span><span class="pln">

    $lower </span><span class="pun">=</span><span class="pln"> </span><span class="str">'abcdefghijklmnopqrstuvwxy'</span><span class="pun">;</span><span class="pln">
    $upper </span><span class="pun">=</span><span class="pln"> strtoupper</span><span class="pun">(</span><span class="pln">$lower</span><span class="pun">);</span><span class="pln">
    $numbers </span><span class="pun">=</span><span class="pln"> </span><span class="str">'1234567890'</span><span class="pun">;</span><span class="pln">
    $dash </span><span class="pun">=</span><span class="pln"> </span><span class="str">'-'</span><span class="pun">;</span><span class="pln">
    $underscore </span><span class="pun">=</span><span class="pln"> </span><span class="str">'_'</span><span class="pun">;</span><span class="pln">
    $symbols </span><span class="pun">=</span><span class="pln"> </span><span class="str">'`~!@#$%^&amp;*()+=[]\\{}|:";\'&lt;&gt;?,./'</span><span class="pun">;</span><span class="pln">

    </span><span class="kwd">switch</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$type</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">case</span><span class="pln"> </span><span class="str">'lower'</span><span class="pun">:</span><span class="pln">
            $chars </span><span class="pun">=</span><span class="pln"> $lower</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">case</span><span class="pln"> </span><span class="str">'upper'</span><span class="pun">:</span><span class="pln">
            $chars </span><span class="pun">=</span><span class="pln"> $upper</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">case</span><span class="pln"> </span><span class="str">'numeric'</span><span class="pun">:</span><span class="pln">
            $chars </span><span class="pun">=</span><span class="pln"> $numbers</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">case</span><span class="pln"> </span><span class="str">'alpha'</span><span class="pun">:</span><span class="pln">
            $chars </span><span class="pun">=</span><span class="pln"> $lower </span><span class="pun">.</span><span class="pln"> $upper</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">case</span><span class="pln"> </span><span class="str">'symbol'</span><span class="pun">:</span><span class="pln">
            $chars </span><span class="pun">=</span><span class="pln"> $symbols </span><span class="pun">.</span><span class="pln"> $dash </span><span class="pun">.</span><span class="pln"> $underscore</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">case</span><span class="pln"> </span><span class="str">'alpha_numeric'</span><span class="pun">:</span><span class="pln">
            $chars </span><span class="pun">=</span><span class="pln"> $lower </span><span class="pun">.</span><span class="pln"> $upper </span><span class="pun">.</span><span class="pln"> $numbers</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">case</span><span class="pln"> </span><span class="str">'alpha_numeric_dash'</span><span class="pun">:</span><span class="pln">
            $chars </span><span class="pun">=</span><span class="pln"> $lower </span><span class="pun">.</span><span class="pln"> $upper </span><span class="pun">.</span><span class="pln"> $numbers </span><span class="pun">.</span><span class="pln"> $dash</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">case</span><span class="pln"> </span><span class="str">'alpha_numeric_underscore'</span><span class="pun">:</span><span class="pln">
            $chars </span><span class="pun">=</span><span class="pln"> $lower </span><span class="pun">.</span><span class="pln"> $upper </span><span class="pun">.</span><span class="pln"> $numbers </span><span class="pun">.</span><span class="pln"> $underscore</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">case</span><span class="pln"> </span><span class="str">'alpha_numeric_dash_underscore'</span><span class="pun">:</span><span class="pln">
            $chars </span><span class="pun">=</span><span class="pln"> $lower </span><span class="pun">.</span><span class="pln"> $upper </span><span class="pun">.</span><span class="pln"> $numbers </span><span class="pun">.</span><span class="pln"> $underscore </span><span class="pun">.</span><span class="pln"> $dash</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">case</span><span class="pln"> </span><span class="str">'all'</span><span class="pun">:</span><span class="pln">
            $chars </span><span class="pun">=</span><span class="pln"> $lower </span><span class="pun">.</span><span class="pln"> $upper </span><span class="pun">.</span><span class="pln"> $numbers </span><span class="pun">.</span><span class="pln"> $underscore </span><span class="pun">.</span><span class="pln"> $dash </span><span class="pun">.</span><span class="pln"> $symbols</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">default</span><span class="pun">:</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    $min </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
    $max </span><span class="pun">=</span><span class="pln"> strlen</span><span class="pun">(</span><span class="pln">$chars</span><span class="pun">)</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">

    $password </span><span class="pun">=</span><span class="pln"> </span><span class="str">''</span><span class="pun">;</span><span class="pln">

    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> $i </span><span class="pun">&lt;</span><span class="pln"> $length</span><span class="pun">;</span><span class="pln"> $i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        $random </span><span class="pun">=</span><span class="pln"> mt_rand</span><span class="pun">(</span><span class="pln">$min</span><span class="pun">,</span><span class="pln"> $max</span><span class="pun">);</span><span class="pln">
        $char </span><span class="pun">=</span><span class="pln"> substr</span><span class="pun">(</span><span class="pln">$chars</span><span class="pun">,</span><span class="pln"> $random</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span><span class="pln">
        $password </span><span class="pun">.=</span><span class="pln"> $char</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">return</span><span class="pln"> $password</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/5113832/bideowego">bideowego</a></author><comments/></answer></answers></post>