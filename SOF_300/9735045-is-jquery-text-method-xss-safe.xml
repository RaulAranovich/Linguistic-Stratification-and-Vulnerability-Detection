<?xml version="1.0" encoding="utf-8"?>
<post><title>javascript - Is jQuery .text() method XSS safe? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I have unescaped data from users. </p>
<p>So is it safe to use like this:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">var</span><span class="pln"> data </span><span class="pun">=</span><span class="pln"> </span><span class="str">'&lt;test&gt;a&amp;f"#&lt;/test&gt;'</span><span class="pun">;</span><span class="pln"> </span><span class="com">// example data from ajax response</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">typeof</span><span class="pun">(</span><span class="pln">data</span><span class="pun">)</span><span class="pln"> </span><span class="pun">===</span><span class="pln"> </span><span class="str">'string'</span><span class="pun">)</span><span class="pln">
    $</span><span class="pun">(</span><span class="str">'body'</span><span class="pun">).</span><span class="pln">text</span><span class="pun">(</span><span class="pln">data</span><span class="pun">);</span></code></pre>
<p>Can I use like this or there is some problems like encoding or some specific symbols that I should be careful and add more strict validation?</p>
</div></text><author><a href="/users/486349/vytautas">Vytautas</a></author><comments><comment><text><span class="comment-copy">Even though jQuery effectively escapes HTML elements when using <code>.text(data)</code>, something can be said for not having completely unescaped user defined HTML in your database at all. You should not have to trust your memory to use client side HTML escaping every time you use that database variable and neither should anyone ever using your code.   So I'd say, strip the html tags from the data before saving it to your database. Have some tests that ensure you can only save html stripped data for user defined fields. I don't really see the value of escaping vs. stripping in this case.</span></text><author><a class="comment-user" href="/users/497316/jorn-van-de-beek" title="134 reputation">Jorn van de Beek</a></author></comment><comment><text><span class="comment-copy">If user wants send html I don't want say to him sorry bro you can't. Maybe that is not html how should i know? whats wrong with saving in database not sanitized data? Why should I delete some parts or modify user data? If I do then how user will be able get his data exactly he submitted?</span></text><author><a class="comment-user owner" href="/users/486349/vytautas" title="2,544 reputation">Vytautas</a></author></comment><comment><text><span class="comment-copy">It's not about refusing to store dangerous data, it's about making dangerous data safe to store and use. Not many people will try to legitimately use HTML and those who do will see that their HTML is stripped soon enough. Stripping the html tags around text will still leave the text inside them.  You really have to modify user data that if that data can be dangerous to you and others. Don't leave it around in your database to be used accidentally.</span></text><author><a class="comment-user" href="/users/497316/jorn-van-de-beek" title="134 reputation">Jorn van de Beek</a></author></comment><comment><text><span class="comment-copy">If stackoverflow would save data as you say we wont be able to show html code in questions and answers..</span></text><author><a class="comment-user owner" href="/users/486349/vytautas" title="2,544 reputation">Vytautas</a></author></comment><comment><text><span class="comment-copy">If user posted that data he thinks he will be able to get it exactly same as posted not with stripped tags or something... am I wrong?</span></text><author><a class="comment-user owner" href="/users/486349/vytautas" title="2,544 reputation">Vytautas</a></author></comment><comment><text><span class="comment-copy">Ok that's a case where escaping is more useful than stripping. That does not take away that you should save your data in the database in a safe (stripped or escaped) form.</span></text><author><a class="comment-user" href="/users/497316/jorn-van-de-beek" title="134 reputation">Jorn van de Beek</a></author></comment><comment><text><span class="comment-copy">striping thing is really annoying.. Example on some blog comments someone wants to show example of html code and site is stripping html code user have to use  <code>[]</code> instead  of <code>&lt;&gt;</code> or  something.. That really annoys me. If user user posted that, then it should be displayed as it is.. am I wrong?</span></text><author><a class="comment-user owner" href="/users/486349/vytautas" title="2,544 reputation">Vytautas</a></author></comment><comment><text><span class="comment-copy">@JornvandeBeek: I have to disagree with you. If you are getting html tags in data where you don't want it, you should reject that data instead of making it safe. So no stripping. If however you are receiving data where anything is allowed, you need to escape it. But you cannot decide how to escape it when storing it in the database, because XSS defense depends on context. See the OWASP XSS prevention cheat sheet.</span></text><author><a class="comment-user" href="/users/5746/erlend" title="3,420 reputation">Erlend</a></author></comment><comment><text><span class="comment-copy">I just newer needed that if data is some username or something that is  allowing just some characters then I add validation and inform user about error.. but in other cases user can post what he wants I don't understand why should I remove that if user wants to post that? As long as I showing data correctly.. Or you have to inform user that data like <code>&lt; something here&gt;</code> will be deleted</span></text><author><a class="comment-user owner" href="/users/486349/vytautas" title="2,544 reputation">Vytautas</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>When you set the text of an element using the <code>text</code> method, jQuery uses <code>createTextNode</code> internally, which escapes all special characters.</p>
<p>From the <a href="http://api.jquery.com/text/#text2" rel="noreferrer">jQuery docs</a>:</p>
<blockquote>
<p>We need to be aware that this method escapes the string provided as
  necessary so that it will render correctly in HTML. To do so, it calls
  the DOM method <code>.createTextNode()</code>, which replaces special characters
  with their HTML entity equivalents (such as <code>&amp;lt;</code> for <code>&lt;</code>)</p>
</blockquote>
<p>So yes, it should be safe. Here's <a href="http://jsfiddle.net/TLu69/" rel="noreferrer">your example in jsfiddle</a>. Notice how the tags appear as literal text.</p>
</div></text><author><a href="/users/790695/james-allardice">James Allardice</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Because XSS attacks rely on being able to insert DOM nodes (<code>&lt;img /&gt;</code>, <code>&lt;script /&gt;</code>) etc, and <code>jQuery.fn.text()</code> does not support this, it is entirely XSS safe.</p>
<p>As you can see in this <a href="http://jsfiddle.net/XBYxu/" rel="noreferrer">basic example</a>, all would-be-HTML tags are encoded as a result of jQuery using <code>createTextNode</code> internally:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">jQuery</span><span class="pun">(</span><span class="str">'div'</span><span class="pun">).</span><span class="pln">text</span><span class="pun">(</span><span class="str">'&lt;test&gt;a&amp;f"#&lt;/test&gt;'</span><span class="pun">);​</span></code></pre>
<p>So that what is <em>actually</em> inserted is more equivilant to;</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">jQuery</span><span class="pun">(</span><span class="str">'div'</span><span class="pun">).</span><span class="pln">html</span><span class="pun">(</span><span class="str">'&amp;lt;test&amp;gt;a&amp;f"#&amp;lt;/test&amp;gt;'</span><span class="pun">);​</span></code></pre>
</div></text><author><a href="/users/444991/matt">Matt</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>You still have to be careful when inserting the result into the DOM - see: <a href="http://watchitlater.com/blog/2011/10/cross-site-scripting-vulnerability-with-javascript-and-jquery/" rel="noreferrer">Cross-Site Scripting vulnerability with JavaScript and JQuery</a>.</p>
<p>For setting the text of elements, however, text should be XSS safe.</p>
</div></text><author><a href="/users/232175/matthias">Matthias</a></author><comments><comment><text><span class="comment-copy">+1 This is quite important and often overlooked. To summarize : <code>JQuery text() returns unescaped payload which can result in the execution of malicious script if it's passed on to .after() or append() etc. methods</code></span></text><author><a class="comment-user" href="/users/781695/medorator" title="7,897 reputation">Medorator</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The author from <a href="http://benv.ca/2012/10/02/you-are-probably-misusing-DOM-text-methods/" rel="nofollow noreferrer">http://benv.ca/2012/10/02/you-are-probably-misusing-DOM-text-methods/</a> argues against using <code>createTextNode</code> or jQuery's <code>.text()</code>.</p>
<blockquote>
<p>...if you know the context in which you are injecting the value (i.e. not attributes), then this method is safe. My argument is that developers don’t understand those contexts well enough, and sooner or later they will get it wrong.</p>
</blockquote>
<p>It is better to use string replacement (of at least <code>&lt;</code>).</p>
<p>Some examples from well-secured libraries:</p>
<ul>
<li>Mustache <a href="https://github.com/janl/mustache.js/blob/master/mustache.js#L55" rel="nofollow noreferrer">https://github.com/janl/mustache.js/blob/master/mustache.js#L55</a></li>
<li>Angular <a href="https://github.com/angular/angular.js/blob/v1.3.14/src/ngSanitize/sanitize.js#L438" rel="nofollow noreferrer">https://github.com/angular/angular.js/blob/v1.3.14/src/ngSanitize/sanitize.js#L438</a></li>
</ul>
<p>The <a href="https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet#RULE_.231_-_HTML_Escape_Before_Inserting_Untrusted_Data_into_HTML_Element_Content" rel="nofollow noreferrer">#1 OWASP suggestion</a> is:</p>
<blockquote>
<p>RULE #1 - HTML Escape Before Inserting Untrusted Data into HTML Element Content</p>
</blockquote>
</div></text><author><a href="/users/1766230/luke">Luke</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Yes. It deals in text, not code.</p>
</div></text><author><a href="/users/19068/quentin">Quentin</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<blockquote>
<p>Unlike the .html() method, .text() can be used in both XML and HTML
  documents. The result of the .text() method is a string containing the
  combined text of all matched elements. (Due to variations in the HTML
  parsers in different browsers, the text returned may vary in newlines
  and other white space.)</p>
</blockquote>
<p><code>.text(data)</code> would strip the <code>&lt;test&gt;&lt;/test&gt;</code> away and leave you with <code>a&amp;f#</code></p>
</div></text><author><a href="/users/1098128/evilp">EvilP</a></author><comments><comment><text><span class="comment-copy">text not stripping anything just escaping so the result would be <code>&amp;lt;test&amp;gt;a&amp;f"#&amp;lt;/test&amp;gt;</code></span></text><author><a class="comment-user owner" href="/users/486349/vytautas" title="2,544 reputation">Vytautas</a></author></comment><comment><text><span class="comment-copy">do you have a proof for that ? Because I have used .text() many many many times and it always worked for me.</span></text><author><a class="comment-user" href="/users/1098128/evilp" title="6,041 reputation">EvilP</a></author></comment><comment><text><span class="comment-copy">check accepted answers fiddle example</span></text><author><a class="comment-user owner" href="/users/486349/vytautas" title="2,544 reputation">Vytautas</a></author></comment><comment><text><span class="comment-copy">Okay, than this only works for real jQuery Objects to extract the text from the elements.</span></text><author><a class="comment-user" href="/users/1098128/evilp" title="6,041 reputation">EvilP</a></author></comment></comments></answer></answers></post>