<?xml version="1.0" encoding="utf-8"?>
<post><title>c# - Storing credit card details - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I have a business requirement that forces me to store a customer's full credit card details (number, name, expiry date, CVV2) for a short period of time.</p>
<p>Rationale: If a customer calls to order a product and their credit card is declined on the spot you are likely to lose the sale. If you take their details, thank them for the transaction and then find that the card is declined, you can phone them back and they are more likely to find another way of paying for the product. If the credit card is accepted you clear the details from the order.</p>
<p>I cannot change this. The existing system stores the credit card details in clear text, and in the new system I am building to replace this I am clearly <em>not</em> going to replicate this!</p>
<p>My question, then, is how I can securely store a credit card for a short period of time. I obviously want some kind of encryption, but what's the best way to do this?</p>
<p>Environment: C#, WinForms, SQL-Server.</p>
</div></text><author><a href="/users/826/andrew">Andrew</a></author><comments><comment><text><span class="comment-copy">Why can't reps just be trained to pretend it worked and call again later?</span></text><author><a class="comment-user" href="/users/781/esteban-araya" title="15,700 reputation">Esteban Araya</a></author></comment><comment><text><span class="comment-copy">FYI - it is illegal to store CVV2 numbers for any amount of time and you can be heavily fined for doing so.</span></text><author><a class="comment-user" href="/users/21760/pyroglass" title="540 reputation">Pyroglass</a></author></comment><comment><text><span class="comment-copy">Which section of US law?</span></text><author><a class="comment-user" href="/users/26227/paul-nathan" title="26,625 reputation">Paul Nathan</a></author></comment><comment><text><span class="comment-copy">@Vlion: It's not due to legislation, it's due to the merchant agreement forbidding it.  Also note that the merchant agreement forbids storing the CVV2 (or CVC) number even in encrypted form.</span></text><author><a class="comment-user" href="/users/12711/michael-burr" title="252,148 reputation">Michael Burr</a></author></comment><comment><text><span class="comment-copy">It's not illegal, but it does violate the terms of the credit card processors.</span></text><author><a class="comment-user" href="/users/18255/cade-roux" title="66,662 reputation">Cade Roux</a></author></comment><comment><text><span class="comment-copy"><a href="https://www.pcisecuritystandards.org/pdfs/pcissc_overview.pdf" rel="nofollow noreferrer">pcisecuritystandards.org/pdfs/pcissc_overview.pdf</a>  page 2</span></text><author><a class="comment-user" href="/users/24229/mrchrister" title="2,833 reputation">MrChrister</a></author></comment><comment><text><span class="comment-copy">Err, there's no reason to store credit cards, given your rationale.</span></text><author><a class="comment-user" href="/users/17076/joe-van-dyk" title="4,163 reputation">Joe Van Dyk</a></author></comment><comment><text><span class="comment-copy">Apart from it being potentially illegal ans definitely against the rules of card processors, you open yourself up to huge risks if your database is compromised. If it can be proven you are at fault, you may well be sued for any lost monies.</span></text><author><a class="comment-user" href="/users/21862/blackwasp" title="3,686 reputation">BlackWasp</a></author></comment><comment><text><span class="comment-copy">Can you tell the nice people here which store it is?  (I dn't want to shop there).</span></text><author><a class="comment-user" href="/users/21862/blackwasp" title="3,686 reputation">BlackWasp</a></author></comment><comment><text><span class="comment-copy">@BlackWasp I left the company name out for obvious reasons.</span></text><author><a class="comment-user owner" href="/users/826/andrew" title="8,297 reputation">Andrew</a></author></comment><comment><text><span class="comment-copy">Don't store credit card numbers!!</span></text><author><a class="comment-user" href="/users/16076/mitch-wheat" title="225,410 reputation">Mitch Wheat</a></author></comment><comment><text><span class="comment-copy">So that's why Amazon doesn't ask for your CVV!</span></text><author><a class="comment-user" href="/users/108511/henri-watson" title="599 reputation">Henri Watson</a></author></comment><comment><text><span class="comment-copy">Can you store just the last four digits of the CC number? That's unique enough to convince your customer that they provided that info to you, but without needing to keep all of the digits.</span></text><author><a class="comment-user" href="/users/170383/david-r-tribble" title="7,108 reputation">David R Tribble</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Basically avoid by all means taking the responsiblity to save the CC details on your side, however I can assume you are using a thirdparty service to do your transaction such as PayPal/Verisign or whatever, most of them have API's that enables you to save CC credentials at their side, and they give you back a key that you can then use later to complete or initiate transactions, so they take care of the hard part, while all what you have to do is store this string key in your DB.</p>
</div></text><author><a href="/users/28120/bashmohandes">bashmohandes</a></author><comments><comment><text><span class="comment-copy">This is correct.  The term he is looking for with the card processor is Authorizing, this confirms the funds but does not capture them.</span></text><author><a class="comment-user" href="/users/24229/mrchrister" title="2,833 reputation">MrChrister</a></author></comment><comment><text><span class="comment-copy">He mentions completing transactions which would be 'Authorizing'. But he's also talking about a method for doing all kinds of transactions from one-offs to variable recurring transactions all with using the key from your third-party payment provider who is storing the customers billing details so that you don't have to.</span></text><author><a class="comment-user" href="/users/1253708/dean" title="2,181 reputation">Dean</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I don't believe it's actually illegal to store CVV info (in the sense that it's against any law), but it does violate Payment Card Industry rules, and they could impose any number of different sanctions.  So, your requirements could actually result in you not being able to accept credit cards ;-(</p>
</div></text><author><a href="/users/18255/cade-roux">Cade Roux</a></author><comments><comment><text><span class="comment-copy">I have read that the state of Nevada requires PCI compliance by law so it would only be illegal there, however in other sates your payment service provider will step in with their own version of a fine, so best to get into the straightjacket voluntarily anyway.</span></text><author><a class="comment-user" href="/users/921640/clearcrescendo" title="655 reputation">ClearCrescendo</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Andrew, you need to understand the <a href="https://www.pcisecuritystandards.org/security_standards/pci_dss.shtml" rel="noreferrer">PCI-DSS</a>, no small task.  Personally, I find it extremely vague but here is what I understand.</p>
<p>First off, from the scenario you describe I would attempt to authorize the card for the full amount and then if that failed I would store the customer's information (but not the cardholder data) so someone could contact the user.  Where I use to work some of our customers would only charge $1.00 and then void the transaction immediately, just to make sure the card was valid.  They would then process all orders manually.  </p>
<p>Where you will need to store the number is on a successful authorization.  The only number you need then is the credit card number and the transaction code (at least with every gateway I have ever worked with).</p>
<p>The standard, last time I looked at it, is not specific on encryption algorithms but instead makes it clear it should be currently unbreakable encryption.</p>
<p>Now, one thing you cannot do is store the CCV subsequent to authorization.  My understanding is that you can store it prior to authorization but I could never get anyone that would put that in writing.  Basically, you authorize the card, you better wipe it.</p>
<p>And it is not illegal at this point but if you get nailed they will bring the hammer down on you.  They have within their authority to level heavy fines against you, but it seems like what they usually do is put you in remediation.  If you don't comply I don't know what happens because everyone I have heard this happening to complied.  But then they really go up your booty with a microscope.</p>
<p>Ultimately, I believe their only stick they really have is to prevent you from accepting credit cards.  Most merchants I have worked with were scared to death of exactly that.</p>
</div></text><author><a href="/users/5551/flory">Flory</a></author><comments><comment><text><span class="comment-copy">"Most merchants I have worked with were scared to death of exactly that".  There are few things scarier to a business than, "we're taking away your ability to get money".</span></text><author><a class="comment-user" href="/users/12711/michael-burr" title="252,148 reputation">Michael Burr</a></author></comment><comment><text><span class="comment-copy">It's also against the scheme rules to charge $1.00 just to see if the card is valid.  You are only allowed to charge if you're providing a service or good.</span></text><author><a class="comment-user" href="/users/14663/ww" title="15,663 reputation">WW.</a></author></comment><comment><text><span class="comment-copy">In addition to revoking your acceptance, the main card schemes can levy some pretty large fines, which tend to put the icing on the cake for a lot of merchants.</span></text><author><a class="comment-user" href="/users/3542/rob" title="40,156 reputation">Rob</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>If you just want to store the string for a short period of time in memory, you can take a look at <a href="http://msdn.microsoft.com/en-us/library/system.security.securestring.aspx" rel="noreferrer">System.Security.SecureString</a>.</p>
<p>Taken from this <a href="http://stackoverflow.com/questions/122784/hidden-net-base-class-library-classes#123141">answer</a>:</p>
<blockquote>
<p>SecureString values are stored encrypted (obfuscated, rather), but most importantly, they are never swapped to disk and can be disposed of immediately when you're done with them.</p>
<p>They're tricky to use because you can only build them one character at a time (to encourage you to build them by capturing keystrokes as the user types their password), and require three lines of code to recover and then wipe their plain text, but when used properly they can make a program more secure by avoiding the virtual-memory vulnerability.</p>
<p>At the end of the example the SecureString is converted into a regular managed string, which makes it vulnerable again (be sure to use the try-catch-finally pattern to Zero the string after you're done with it). SecureString's use is in reducing the surface-area of attack by limiting the number of copies the Garbage Collector will make of the value, and reducing the likelihood of being written to the swap file.</p>
</blockquote>
<pre class="lang-cs prettyprint prettyprinted" style=""><code><span class="com">// Make a SecureString</span><span class="pln">
</span><span class="typ">SecureString</span><span class="pln"> sPassphrase </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SecureString</span><span class="pun">();</span><span class="pln">
</span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="str">"Please enter your passphrase"</span><span class="pun">);</span><span class="pln">
</span><span class="typ">ConsoleKeyInfo</span><span class="pln"> input </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">ReadKey</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln">
</span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">input</span><span class="pun">.</span><span class="typ">Key</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> </span><span class="typ">ConsoleKey</span><span class="pun">.</span><span class="typ">Enter</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
   sPassphrase</span><span class="pun">.</span><span class="typ">AppendChar</span><span class="pun">(</span><span class="pln">input</span><span class="pun">.</span><span class="typ">KeyChar</span><span class="pun">);</span><span class="pln">
   </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">Write</span><span class="pun">(</span><span class="str">'*'</span><span class="pun">);</span><span class="pln">
   input </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">ReadKey</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
sPassphrase</span><span class="pun">.</span><span class="typ">MakeReadOnly</span><span class="pun">();</span><span class="pln">

</span><span class="com">// Recover plaintext from a SecureString</span><span class="pln">
</span><span class="com">// Marshal is in the System.Runtime.InteropServices namespace</span><span class="pln">
</span><span class="kwd">try</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   </span><span class="typ">IntPtr</span><span class="pln"> ptrPassphrase </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Marshal</span><span class="pun">.</span><span class="typ">SecureStringToBSTR</span><span class="pun">(</span><span class="pln">sPassphrase</span><span class="pun">);</span><span class="pln">
   </span><span class="kwd">string</span><span class="pln"> uPassphrase </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Marshal</span><span class="pun">.</span><span class="typ">PtrToStringUni</span><span class="pun">(</span><span class="pln">ptrPassphrase</span><span class="pun">);</span><span class="pln">
   </span><span class="com">// ... use the string ...</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
</span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   </span><span class="com">// error handling</span><span class="pln">
</span><span class="pun">}</span><span class="pln"> 
</span><span class="kwd">finally</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   </span><span class="typ">Marshal</span><span class="pun">.</span><span class="typ">ZeroFreeBSTR</span><span class="pun">(</span><span class="pln">ptrPassphrase</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/15002/sallen">sallen</a></author><comments><comment><text><span class="comment-copy">so a securestring has no place in a web environment then?</span></text><author><a class="comment-user" href="/users/16940/simon-weaver" title="56,004 reputation">Simon_Weaver</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>If you are going to store credit card information you really need to be PCI compliant or you're just asking for trouble.</p>
<p>Having said that look at the cell level encryption available in SQL Server 2005 and above.  Coincidentally :) I have recently given a presentation with T-SQL samples on encryption with SQL Server 2005/2008 available here: <a href="http://moss.bennettadelson.com/Lists/Events/Attachments/9/June2008.zip" rel="nofollow noreferrer">http://moss.bennettadelson.com/Lists/Events/Attachments/9/June2008.zip</a> (Link location updated December 23, 2008)</p>
</div></text><author><a href="/users/4273/joe-kuemerle">Joe Kuemerle</a></author><comments><comment><text><span class="comment-copy">You definelty need to be PCI compliant and your probally better off relying upon a third party to process the credit cards.</span></text><author><a class="comment-user" href="/users/26160/joshberke" title="46,806 reputation">JoshBerke</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>It costs somewhere in the neighborhood of $30,000 to become properly compliant and to be able to do that kind of stuff.  You are better off using a 3rd party payment service.  Personally, I recommend Element Express, and they have a "Hosted" solution that bypasses the PCI-DSS PAPDB compliance.  I've had to convert to this for my own applications, even a Point of Sale machine!!!  It's a big pain, but we're a small company.</p>
<p><a href="http://www.elementps.com/software-providers/our-security-edge/hosted-payments/PA-DSS-Certification-vs-Elements-Hosted-Payments/" rel="nofollow noreferrer">http://www.elementps.com/software-providers/our-security-edge/hosted-payments/PA-DSS-Certification-vs-Elements-Hosted-Payments/</a></p>
<p>The above link has some good information about the costs associated with becoming compliant.  We have had customers ask us to store credit card numbers, and we won't do it because we could be fined as well.  Not good.  Don't open yourself up to liability.</p>
<p>Edit:</p>
<p>Additionally, if you DO decide to store the credit card information you definitely need to consider the forms of encryption you are going to use.  Symmetric ?  Asymmetric ?  </p>
<p>If you do Symmetric encryption (Passkey) then you open yourself up to some serious security vulnerabilities if the server(site) that has the key (needed to encrypt) is compromised in any way.  Remember, even compiled code won't hide a text key.</p>
<p>If you use Asymmetric encryption (public/private keypairs) then you run into some additional issues, but if the primary public facing server is compromised they will only have the <em>public key</em>, and if they also access your database.. they won't be able to decrpyt the contents.</p>
<p>The question then is, where do you store the private key ?  Do you have someone paste it in from their local computers when running admin functions.. have a separate application that runs on the desktop to view orders, etc.  </p>
<p>There are a lot of things to take into consideration.</p>
<p>Final note:  Use a payment gateway (Element Express, Authorize.NET, Paypal, etc.) and don't store any credit card info locally. :P</p>
<p>Here is a link about using X509 Asymmetric Encryption in C#:  <a href="http://www.csharpbydesign.com/2008/04/asymmetric-key-encryption-with.html" rel="nofollow noreferrer">http://www.csharpbydesign.com/2008/04/asymmetric-key-encryption-with.html</a></p>
</div></text><author><a href="/users/27472/matthew-m">Matthew M.</a></author><comments><comment><text><span class="comment-copy">Not true, you can be SAQ-D PCI compliant these days for just about $800/m there're many virtual dedicated solutions available. But ofcourse, you still have to do proper encryption and key management yourself.</span></text><author><a class="comment-user" href="/users/172637/3zzy" title="20,891 reputation">3zzy</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Agreed that you should avoid storing the data if you can. But maybe you <strong>are</strong> that third party? If so, get familiar with <a href="https://www.pcisecuritystandards.org/security_standards/pci_dss.shtml" rel="nofollow noreferrer">PCI standards</a>. Look around a bit on the site and you'll find the security measures you are <strong>required</strong> to implement.</p>
</div></text><author><a href="/users/7625/corbin-march">Corbin March</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Lets look at the requirement a little differently. Currently it looks like this:</p>
<p>As a product owner for website X i want the system to temporarily store a customers cc details so that i can recover a sale that was declined by the CC company</p>
<p>Ppl tend to think like that and request features in that manner. Now i think your requirement is more conveniently described as follows:</p>
<p>As a user i want website X to be able to retry payment for my purchase so i dont have the hassle of having to go thru the checkout process again coz that is a real pain in the...</p>
<p>So there's no explicit requirement for storing anything (on your side) is there? Its only implied</p>
<p>Payment providers can provide programmatic APIs to your merchant account and the ability to attempt a re-auth on a declined attempt. i think @bashmohandes eluded to this earlier</p>
<p>Not all payment providers can do this however i think its dependent on their relationships with the banks involved. Thats the stuff you want to avoid ie. having a close relationship with banks. </p>
<p>Scenario 1: Assuming all i said is true</p>
<p>You don't have to store anything but a reference to the authorization attempt. Some payment providers even give you a sweet backoffice tool so you dont have to make your own to do re-auths. I think paygate does this</p>
<p>Your best bet i believe is to interview a number of payment providers. they should know this stuff like the back of their hands. This is potentially a zero-code solution</p>
<p>Scenario 2: Assuming i'm like totally wrong but legally this storing CC stuff is ok</p>
<p>So you have to store that data somewhere temporarily. I advise:</p>
<ul>
<li>use a 2-way encryption method (naturally) that is non-vendor specific so you can use any language/platform to encrypt/decrypt</li>
<li>decouple the encrypt/decrypt service from your app and treat it like a black box</li>
<li>use public/private keys for authentication to this service</li>
<li>put this machine on a private network with its own elevated firewall rules (doesn't have to be a hardware firewall but hardware is better)</li>
<li>have your app servers communicate with this machine via ssl (you could get away with a self-signed cert since its on your private LAN)</li>
</ul>
<p>All i've suggested in scenario 2 is hurdles but eventually persistence wins the race to get to your data. The only way to absolutely secure data is to unplug your server from the ether but that option is a little radical :-)</p>
<p>Scenario 1 would be nice. Wouldn't it?</p>
</div></text><author><a href="/users/327869/phpslacker">phpslacker</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p><strong>Consider your t logs!</strong></p>
<p>If you explain to your customer the full impact (and remedial requirements if they are found out of compliance) then trust me, your 'business requirements' will change very quickly.</p>
<p>If you must store the credit card number (and I advance the thought here that there is no reasonable scenario where you should) and you intend to use a native encryption built-in to your database, then consider this:  what about your transaction logs?</p>
<p>If your transaction logs could reflect a credit card number in the clear, then you are out of compliance and should budget for a $10,000 to $50,000 forensic audit at your site if you get caught.  Budget for your own attorney in case your customer sues you because you should have known all this stuff.</p>
<p>So if you are going to store a credit card number, run the cipher in code so the transaction logs (insert or update) reflect a ciphered string, not the card number in the clear.</p>
<p>And don't even have a field or column in your database for CVV - encrypted or not - that forensic audit will reveal this (so will the logs) and then your customer is in BIG, BIG trouble.  They <em>will</em> pay a fine and <em>could</em> lose their ability to accept credit cards.  Your attorney will be very happy.</p>
</div></text><author><a href="/users/1664283/ron-robinson">Ron Robinson</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I have a blog post that deals with this exact situation of storing sensitive data in the database. The blog post uses a String Encryptor class that I built using a Triple DES algorithm but you can plug in your own if you would like.</p>
<p>The blog post contains the video and source code that was used. You can check it out at <a href="http://www.wrightin.gs/2008/11/how-to-encryptdecrypt-sensitive-column-contents-in-nhibernateactive-record-video.html" rel="nofollow noreferrer">http://www.wrightin.gs/2008/11/how-to-encryptdecrypt-sensitive-column-contents-in-nhibernateactive-record-video.html</a>. I think it will definitely solve your issue.</p>
</div></text><author><a href="/users/2779/jamie-wright">Jamie Wright</a></author><comments/></answer></answers></post>