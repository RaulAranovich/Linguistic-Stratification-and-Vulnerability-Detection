<?xml version="1.0" encoding="utf-8"?>
<post><title>security - Username and password in https url - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>Consider the URL:
<a href="https://foo:password@example.com" rel="noreferrer">https://foo:password@example.com</a></p>
<p>Does the username/password portion in the above example qualify as a "URL parameter", as defined in <a href="http://stackoverflow.com/questions/830074/can-a-username-and-password-be-sent-safely-over-https-via-url-parameters">this question</a>?</p>
</div></text><author><a href="/users/249543/jefflunt">jefflunt</a></author><comments/></question><answers><answer><text><div class="post-text" itemprop="text">
<p>When you put the username and password in front of the host, this data is not sent that way to the server. It is instead transformed to a request header depending on the authentication schema used. Most of the time this is going to be <a href="https://en.wikipedia.org/wiki/Basic_access_authentication" rel="noreferrer">Basic Auth</a> which I describe below. A similar (but significantly less often used) authentication scheme is <a href="https://en.wikipedia.org/wiki/Digest_access_authentication" rel="noreferrer">Digest Auth</a> which nowadays provides comparable security features.</p>
<p>With Basic Auth, the HTTP request from the question will look something like this:</p>
<pre><code>GET / HTTP/1.1
Host: example.com
Authorization: Basic Zm9vOnBhc3N3b3Jk
</code></pre>
<p>The hash like string you see there is created by the browser like this: <code>base64_encode(username + ":" + password)</code>.</p>
<p>To outsiders of the HTTPS transfer, this information is hidden (as everything else on the HTTP level). You should take care of logging on the client and all intermediate servers though. The username will normally be shown in server logs, but the password won't. This is not guaranteed though. When you call that URL on the client with e.g. <code>curl</code>, the username and password will be clearly visible on the process list and might turn up in the bash history file.</p>
<p>When you use <a href="http://stackoverflow.com/a/4980956">the approach by ayush</a>, the username and password will <strong>always</strong> turn up in server logs of your webserver, application server, caches, ... unless you specifically configure your servers to not log it. This only applies to servers being able to read the unencrypted http data, like your application server though.</p>
<p>Basic auth is standardized and implemented by browsers by showing this little username/password popup. When you put the username/passwort into an HTML form sent via GET or POST, you have to implement all the login/logout logic yourself (which might be an advantage). But you should <em>never</em> transfer usernames and passwords by GET parameters. If you have to, use POST instead. The prevents the logging of this data by default.</p>
<p>When implementing an authentication mechanism with a user/password entry form and a subsequent cookie-based session as it is commonly used today, you have to make sure that the password is either transported with POST requests or one of the standardized authentication schemes above only.</p>
<p>Concluding I could say, that transfering data that way over HTTPS is safe, as long as you take care that the password does not turn up in unexpected places. But that advice applies to every transfer of any password in any way.</p>
</div></text><author><a href="/users/421705/holger-just">Holger Just</a></author><comments><comment><text><span class="comment-copy">What do you mean when you say that the username and password will be clearly visible "on the process list"? Also, what about non-basic authentication schemes?</span></text><author><a class="comment-user" href="/users/632951/pacerier" title="33,795 reputation">Pacerier</a></author></comment><comment><text><span class="comment-copy">It means that every time, you specify the URL including the username and password in a command line (e.g. as a parameter to <code>curl</code>). All local processes, irregardless if the user they run at can see the URL in the system's processlist and gather them (e.g. via <code>ps aux</code>). This is an issue if you run untrusted code (or have the possibility for that, e.g via code injections). This is only an issue if the credentials are passed in the URL (or as additional headers in <code>curl</code>'s case), not if they are passed in the which then is pipe into curl. Normally, the other issues are more important than this.</span></text><author><a class="comment-user" href="/users/421705/holger-just" title="29,167 reputation">Holger Just</a></author></comment><comment><text><span class="comment-copy">Btw, do you mind elaborating more on alternative authentication schemes besides the basic one?</span></text><author><a class="comment-user" href="/users/632951/pacerier" title="33,795 reputation">Pacerier</a></author></comment></comments></answer></answers></post>