<?xml version="1.0" encoding="utf-8"?>
<post><title>security - When would I need a SecureString in .NET? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I'm trying to grok the purpose of .NET's SecureString.  From MSDN:</p>
<blockquote>
<p>An instance of the System.String class is both immutable and, when no longer needed, cannot be programmatically scheduled for garbage collection; that is, the instance is read-only after it is created and it is not possible to predict when the instance will be deleted from computer memory. Consequently, if a String object contains sensitive information such as a password, credit card number, or personal data, there is a risk the information could be revealed after it is used because your application cannot delete the data from computer memory.</p>
<p>A SecureString object is similar to a String object in that it has a text value. However, the value of a SecureString object is automatically encrypted, can be modified until your application marks it as read-only, and can be deleted from computer memory by either your application or the .NET Framework garbage collector.</p>
<p>The value of an instance of SecureString is automatically encrypted when the instance is initialized or when the value is modified. Your application can render the instance immutable and prevent further modification by invoking the MakeReadOnly method.</p>
</blockquote>
<p>Is the automatic encryption the big payoff? </p>
<p>And why can't I just say:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="typ">SecureString</span><span class="pln"> password </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SecureString</span><span class="pun">(</span><span class="str">"password"</span><span class="pun">);</span></code></pre>
<p>instead of</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="typ">SecureString</span><span class="pln"> </span><span class="kwd">pass</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SecureString</span><span class="pun">();</span><span class="pln">
</span><span class="kwd">foreach</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">char</span><span class="pln"> c </span><span class="kwd">in</span><span class="pln"> </span><span class="str">"password"</span><span class="pun">.</span><span class="typ">ToCharArray</span><span class="pun">())</span><span class="pln">
    </span><span class="kwd">pass</span><span class="pun">.</span><span class="typ">AppendChar</span><span class="pun">(</span><span class="pln">c</span><span class="pun">);</span></code></pre>
<p>What aspect of SecureString am I missing?</p>
</div></text><author><a href="/users/5640/geochet">GEOCHET</a></author><comments/></question><answers><answer><text><div class="post-text" itemprop="text">
<p>Some parts of the framework that currently use <code>SecureString</code>:</p>
<ul>
<li>WPF's <code>System.Windows.Controls.PasswordBox</code> control keeps the password as a SecureString internally (exposed as a copy through <code>PasswordBox::SecurePassword</code>)</li>
<li>The <code>System.Diagnostics.ProcessStartInfo::Password</code> property is a <code>SecureString</code></li>
<li>The constructor for <code>X509Certificate2</code> takes a <code>SecureString</code> for the password</li>
</ul>
<p>The main purpose is to reduce the attack surface, rather than eliminate it. <code>SecureStrings</code> are "pinned" in RAM so the Garbage Collector won't move it around or make copies of it. It also makes sure the plaintext won't get written to the Swap file or in core dumps. The encryption is more like obfuscation and won't stop a determined hacker, though, who would be able to find the symmetric key used to encrypt and decrypt it.</p>
<p>As others have said, the reason you have to create a <code>SecureString</code> character-by-character is because of the first obvious flaw of doing otherwise: you presumably have the secret value as a plain string already, so what's the point? </p>
<p><code>SecureString</code>s are the first step in solving a Chicken-and-Egg problem, so even though most current scenarios require converting them back into regular strings to make any use of them at all, their existence in the framework now means better support for them in the future - at least to a point where your program doesn't have to be the weak link.</p>
</div></text><author><a href="/users/5548/c-lawrence-wenham">C. Lawrence Wenham</a></author><comments><comment><text><span class="comment-copy">I ran across it looking at ProcessStartInfo's Password property; not even paying attention to the type, I just set it to a regular string until the compiler barked at me.</span></text><author><a class="comment-user owner" href="/users/2258/richard-morgan" title="5,050 reputation">Richard Morgan</a></author></comment><comment><text><span class="comment-copy">It wont be easy to find the symmetric encryption key, since SecureString is based on DPAPI, which doesnt exactly store a key in plaintext...</span></text><author><a class="comment-user" href="/users/10080/avid" title="10,324 reputation">AviD</a></author></comment><comment><text><span class="comment-copy">Also, it's not so much the chicken-and-egg problem, since it's not a replacement for encryption in storage - but its a workaround for immutable, managed .NET strings.</span></text><author><a class="comment-user" href="/users/10080/avid" title="10,324 reputation">AviD</a></author></comment><comment><text><span class="comment-copy">"you presumably have the secret value as a plain string already, so what's the point?"   Is there an answer to this question? It seems like at best it's a "better than nothing" solution if you intend to keep a password stored in memory for a prolonged period.</span></text><author><a class="comment-user" href="/users/263832/xr280xr" title="4,257 reputation">xr280xr</a></author></comment><comment><text><span class="comment-copy">What about having few simple code examples of usage? I believe I would better understand how and when to use it.</span></text><author><a class="comment-user" href="/users/1832488/codea" title="707 reputation">codea</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Lots of great answers; hereâ€™s a quick synopsis of what has been discussed.</p>
<p>Microsoft has implemented the SecureString class in an effort to provide better security with sensitive information (like credit cards, passwords, etc.).  It automatically provides:</p>
<ul>
<li>encryption (in case of memory dumps
or page caching) </li>
<li>pinning in memory</li>
<li>ability to mark as read-only (to prevent any further modifications) </li>
<li>safe construction by NOT allowing a constant string to be passed in</li>
</ul>
<p>Currently, SecureString is limited in use but expect better adoption in the future.</p>
<p>Based on this information, the constructor of the SecureString should not just take a string and slice it up to char array as having the string spelled out defeats the purpose of SecureString.</p>
<p>Additional info: </p>
<ul>
<li>A <a href="http://blogs.msdn.com/shawnfa/archive/2004/05/27/143254.aspx" rel="noreferrer">post</a> from the .NET Security
blog talking about much the same as
covered here. </li>
<li>And another <a href="http://blogs.msdn.com/shawnfa/archive/2006/11/01/securestring-redux.aspx" rel="noreferrer">one</a>
revisiting it and mentioning a tool
that CAN dump the contents of the
SecureString.</li>
</ul>
<p>Edit: I found it tough to pick the best answer as there's good information in many; too bad there is no assisted answer options.</p>
</div></text><author><a href="/users/2258/richard-morgan">Richard Morgan</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>There are very few scenarios where you can sensibly use SecureString in the current version of the Framework.  It's really only useful for interacting with unmanaged APIs - you can marshal it using Marshal.SecureStringToGlobalAllocUnicode. </p>
<p>As soon as you convert it to/from a System.String, you've defeated its purpose.</p>
<p>The MSDN <a href="http://msdn.microsoft.com/en-us/library/07b9wyhy.aspx" rel="noreferrer">sample</a> generates the SecureString a character at a time from console input and passes the secure string to an unmanaged API.  It's rather convoluted and unrealistic.</p>
<p>You might expect future versions of .NET to have more support for SecureString that will make it more useful, e.g.:</p>
<ul>
<li><p>SecureString Console.ReadLineSecure() or similar to read console input into a SecureString without all the convoluted code in the sample.</p></li>
<li><p>WinForms TextBox replacement that stores its TextBox.Text property as a secure string so that passwords can be entered securely.</p></li>
<li><p>Extensions to security-related APIs to allow passwords to be passed as SecureString.</p></li>
</ul>
<p>Without the above, SecureString will be of limited value.</p>
</div></text><author><a href="/users/13087/joe">Joe</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I believe the reason why you have to do character appending instead of one flat instantiation is because in the background passing "password" to the constructor of SecureString puts that "password" string in memory defeating the purpose of secure string. </p>
<p>By appending you are only putting a character at a time into memory which is likley not to be adjacent to each other physically making it much harder to reconstruct the original string. I could be wrong here but that's how it was explained to me. </p>
<p>The purpose of the class is to prevent secure data from being exposed via a memory dump or similar tool. </p>
</div></text><author><a href="/users/7018/joshreedschramm">JoshReedSchramm</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>MS found that on certain instances of causing the server (desktop, whatever) to crash there were times when the runtime environment would do a memory dump exposing the contents of what's in memory.  Secure String encrypts it in memory to prevent the attacker from being able to retrieve the contents of the string. </p>
</div></text><author><a href="/users/1942/kevin">Kevin</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Well, as the description states, the value is stored encrypted, with means that a memory dump of your process won't reveal the string's value (without some fairly serious work).</p>
<p>The reason you can't just construct a SecureString from a constant string is because then you <em>would</em> have an unencrypted version of the string in memory. Limiting you to creating the string in pieces reduces the risk of having the whole string in memory at once.</p>
</div></text><author><a href="/users/17826/mark-bessey">Mark Bessey</a></author><comments><comment><text><span class="comment-copy">If they are limiting the construction from a constant string, then the line foreach (char c in "password".ToCharArray()) would defeat that, no?  It should be pass.AppendChar('p'); pass.AppendChar('a');etc?</span></text><author><a class="comment-user owner" href="/users/2258/richard-morgan" title="5,050 reputation">Richard Morgan</a></author></comment><comment><text><span class="comment-copy">Yes, you can easily enough throw away what little protection SecureString gives you. They're trying to make it hard to completely shoot yourself in the foot. Obviously there has to be some way to get the value into and out of a SecureString, or you couldn't use it for anything.</span></text><author><a class="comment-user" href="/users/17826/mark-bessey" title="17,086 reputation">Mark Bessey</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>One of the big benefits of a SecureString is that it is supposed avoid the possibility of your data being stored to disk due to page caching.  If you have a password in memory and then load a large program or data set, your password may get written to the swap file as your program is paged out of memory.  With a SecureString, at least the data will not be sitting around indefinitely on your disk in clear text.</p>
</div></text><author><a href="/users/2470/jason-z">Jason Z</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<h2>Short Answer</h2>
<blockquote>
<p>why can't I just say:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="typ">SecureString</span><span class="pln"> password </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SecureString</span><span class="pun">(</span><span class="str">"password"</span><span class="pun">);</span></code></pre>
</blockquote>
<p>Because now you have <code>password</code> in memory; with no way to wipe it - which is exactly the point of <strong>SecureString</strong>.</p>
<h2>Long Answer</h2>
<p>The reason <strong>SecureString</strong> exists is because you cannot use <strong>ZeroMemory</strong> to wipe sensitive data when you're done with it. It exists to solve an issue that exists <strong>because</strong> of the CLR. </p>
<p>In a regular <em>native</em> application you would call <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa366877%28v=vs.85%29.aspx?f=255&amp;MSPPError=-2147217396" rel="nofollow noreferrer"><code>SecureZeroMemory</code></a>:</p>
<blockquote>
<p>Fills a block of memory with zeros.</p>
</blockquote>
<p><strong>Note</strong>: SecureZeroMemory is is identical to <code>ZeroMemory</code>, <a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223" rel="nofollow noreferrer">except the compiler won't optimize it away.</a></p>
<p>The problem is that you <strong>can't</strong> call <code>ZeroMemory</code> or <code>SecureZeroMemory</code> inside .NET. And in .NET strings are immutable; you can't even <em>overwrite</em> the contents of the string like you can do in other languages:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="com">//Wipe out the password</span><span class="pln">
</span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">&lt;</span><span class="pln">password</span><span class="pun">.</span><span class="typ">Length</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln">
   password</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> \0</span><span class="pun">;</span></code></pre>
<p>So what can you do? How do we provide the ability in .NET to wipe a password, or credit card number from memory when we're done with it?</p>
<p>The only way it can be done would be to place the string in some <em>native</em> memory block, where you <strong>can</strong> then call <code>ZeroMemory</code>. A native memory object such as:</p>
<ul>
<li>a BSTR</li>
<li>an HGLOBAL</li>
<li>CoTaskMem unmanaged memory</li>
</ul>
<h2>SecureString gives the lost ability back</h2>
<p>In .NET, Strings cannot be wiped when you are done with them:</p>
<ul>
<li>they are immutable; you cannot overwrite their contents</li>
<li>you cannot <code>Dispose</code> of them</li>
<li>their cleanup is at the mercy of the garbage collector</li>
</ul>
<p>SecureString exists as a way to pass around strings safety, and be able to guarantee their cleanup when you need to.</p>
<p>You asked the question:</p>
<blockquote>
<p>why can't I just say:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="typ">SecureString</span><span class="pln"> password </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SecureString</span><span class="pun">(</span><span class="str">"password"</span><span class="pun">);</span></code></pre>
</blockquote>
<p>Because now you have <code>password</code> in memory; with no way to wipe it. It's stuck there until the CLR happens to decide to re-use that memory. You've put us right back where we started; a running application with a password we can't get rid of, and where a memory dump (or Process Monitor) can see the password.</p>
<p>SecureString uses the Data Protection API to store the string encrypted in memory; that way the string will not exist in swapfiles, crash dumps, or even in the local variables window with a colleague looking over your should.</p>
<h2>How do i read the password?</h2>
<p>Then is the question: how do i interact with the string? You absolutely <strong>don't</strong> want a method like:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="typ">String</span><span class="pln"> connectionString </span><span class="pun">=</span><span class="pln"> secureConnectionString</span><span class="pun">.</span><span class="typ">ToString</span><span class="pun">()</span></code></pre>
<p>because now you're right back where you started - a password you cannot get rid of. You want to <strong>force</strong> developers to handle the sensitive string correctly -  so that it <em>can</em> be wiped from memory. </p>
<p>That is why .NET provides three handy helper functions to marshall a SecureString into a unmanaged memory:</p>
<ul>
<li><a href="https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.marshal.securestringtobstr%28v=vs.110%29.aspx" rel="nofollow noreferrer">SecureStringToBSTR</a> <em>(freed with <a href="https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.marshal.zerofreecotaskmemunicode%28v=vs.110%29.aspx" rel="nofollow noreferrer">ZeroFreeCoTaskMemUnicode</a>)</em></li>
<li><a href="https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.marshal.securestringtocotaskmemunicode%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396" rel="nofollow noreferrer">SecureStringToCoTaskMemUnicode</a> <em>(freed with <a href="https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.marshal.zerofreecotaskmemunicode%28v=vs.110%29.aspx" rel="nofollow noreferrer">ZeroFreeCoTaskMemUnicode</a>)</em></li>
<li><a href="https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.marshal.securestringtoglobalallocunicode%28v=vs.110%29.aspx" rel="nofollow noreferrer">SecureStringToGlobalAllocUnicode</a> <em>(freed with <a href="https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.marshal.zerofreeglobalallocunicode%28v=vs.110%29.aspx" rel="nofollow noreferrer">ZeroFreeGlobalAllocUnicode</a>)</em></li>
</ul>
<p>You convert the string into an unmanaged memory blob, handle it, and then wipe it again. </p>
<p>Some APIs accept <strong>SecureStrings</strong>. For example in ADO.net 4.5 the <strong>SqlConnection.Credential</strong> takes a set <strong>SqlCredential</strong>:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="typ">SqlCredential</span><span class="pln"> cred </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SqlCredential</span><span class="pun">(</span><span class="pln">userid</span><span class="pun">,</span><span class="pln"> password</span><span class="pun">);</span><span class="pln"> </span><span class="com">//password is SecureString</span><span class="pln">
</span><span class="typ">SqlConnection</span><span class="pln"> conn </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SqlConnection</span><span class="pun">(</span><span class="pln">connectionString</span><span class="pun">);</span><span class="pln">
conn</span><span class="pun">.</span><span class="typ">Credential</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> cred</span><span class="pun">;</span><span class="pln">
conn</span><span class="pun">.</span><span class="typ">Open</span><span class="pun">();</span></code></pre>
<p>You can also change the password within a Connection String:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="typ">SqlConnection</span><span class="pun">.</span><span class="typ">ChangePassword</span><span class="pun">(</span><span class="pln">connectionString</span><span class="pun">,</span><span class="pln"> cred</span><span class="pun">,</span><span class="pln"> newPassword</span><span class="pun">);</span></code></pre>
<p>And there are a lot of places inside .NET where they continue to accept a plain String for compatibility purposes, then quickly turn around an put it into a SecureString. </p>
<h2>How to put text into the SecureString?</h2>
<p>This still leaves the problem:</p>
<blockquote>
<p>How do i get a password into the SecureString in the first place?</p>
</blockquote>
<p>This is the challenge, but the point is to get you thinking about security. </p>
<p>Sometimes the functionality is already provided for you. For example, the WPF <strong>PasswordBox</strong> control can return you the entered password as a <strong>SecureString</strong> directly:</p>
<blockquote>
<h2><a href="https://msdn.microsoft.com/en-us/library/system.windows.controls.passwordbox.securepassword%28v=vs.110%29.aspx" rel="nofollow noreferrer">PasswordBox.SecurePassword Property</a></h2>
<p>Gets the password currently held by the <a href="https://msdn.microsoft.com/en-us/library/system.windows.controls.passwordbox%28v=vs.110%29.aspx" rel="nofollow noreferrer">PasswordBox</a> as a <a href="https://msdn.microsoft.com/en-us/library/system.security.securestring%28v=vs.110%29.aspx" rel="nofollow noreferrer">SecureString</a>.</p>
</blockquote>
<p>This is helpful because everywhere you used to pass around a raw string, you now have the type system complaining that SecureString is incompatible with String. You want to go as long as possible before having to convert your SecureString back into regular string. </p>
<p>Converting a SecureString is easy enough:</p>
<ul>
<li>SecureStringToBSTR</li>
<li>PtrToStringBSTR</li>
</ul>
<p>as in:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">CreateString</span><span class="pun">(</span><span class="typ">SecureString</span><span class="pln"> secureString</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="typ">IntPtr</span><span class="pln"> intPtr </span><span class="pun">=</span><span class="pln"> </span><span class="typ">IntPtr</span><span class="pun">.</span><span class="typ">Zero</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">secureString </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> secureString</span><span class="pun">.</span><span class="typ">Length</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">.</span><span class="typ">Empty</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">string</span><span class="pln"> result</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">try</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        intPtr </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Marshal</span><span class="pun">.</span><span class="typ">SecureStringToBSTR</span><span class="pun">(</span><span class="pln">secureString</span><span class="pun">);</span><span class="pln">
        result </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Marshal</span><span class="pun">.</span><span class="typ">PtrToStringBSTR</span><span class="pun">(</span><span class="pln">intPtr</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">finally</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">intPtr </span><span class="pun">!=</span><span class="pln"> </span><span class="typ">IntPtr</span><span class="pun">.</span><span class="typ">Zero</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">Marshal</span><span class="pun">.</span><span class="typ">ZeroFreeBSTR</span><span class="pun">(</span><span class="pln">intPtr</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> result</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>They just really don't want you doing it.</p>
<p>But how do i get a string into a SecureString? Well what you need to do is stop having a password in a <strong>String</strong> in the first place. You needed to have it in <em>something</em> else. Even a <code>Char[]</code> array would be helpful.</p>
<p>That's when you can append each character <strong>and</strong> wipe the plaintext when you're done:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="typ">PasswordArray</span><span class="pun">.</span><span class="typ">Length</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
   password</span><span class="pun">.</span><span class="typ">AppendChar</span><span class="pun">(</span><span class="typ">PasswordArray</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]);</span><span class="pln">
   </span><span class="typ">PasswordArray</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Char</span><span class="pun">)</span><span class="lit">0</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>You need your password stored in <strong>some</strong> memory that you can wipe. Load it into the SecureString from there.</p>
<hr/>
<p>tl;dr: <strong>SecureString</strong> exists to provide the equivalent of <strong>ZeroMemory</strong>.</p>
<p>Some people don't see the point in <a href="https://www.apple.com/business/docs/iOS_Security_Guide.pdf" rel="nofollow noreferrer">wiping the user's password from memory when a device is locked</a>, or wiping <a href="https://ostif.org/the-veracrypt-audit-results/" rel="nofollow noreferrer">wiping keystrokes from memory after they'authenticated</a>. Those people do not use SecureString.</p>
</div></text><author><a href="/users/12597/ian-boyd">Ian Boyd</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I guess it's because the string is meant to be secure, i.e. a hacker should not be able to read it. If you initialize it with a string, the hacker could read the original string.</p>
</div></text><author><a href="/users/20363/oregonghost">OregonGhost</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I would stop using SecureString .  Looks like PG guys are dropping support for it.  Possibly even pull it in the future - <a href="https://github.com/dotnet/apireviews/tree/master/2015-07-14-securestring" rel="nofollow">https://github.com/dotnet/apireviews/tree/master/2015-07-14-securestring</a> .</p>
<blockquote>
<p>We should remove encryption from  SecureString  across all platforms in .NET Core - We should obsolete  SecureString - We probably shouldn't expose  SecureString  in .NET Core</p>
</blockquote>
</div></text><author><a href="/users/1564317/joe-healy">Joe Healy</a></author><comments/></answer></answers></post>