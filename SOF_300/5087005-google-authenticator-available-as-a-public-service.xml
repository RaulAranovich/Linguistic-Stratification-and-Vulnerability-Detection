<?xml version="1.0" encoding="utf-8"?>
<post><title>security - Google Authenticator available as a public service? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>Is there public API for using the <a href="http://www.google.com/support/a/bin/answer.py?hl=en&amp;answer=1037451" rel="noreferrer">Google Authenticator</a> (two factor authentication) on self-running (e.g. LAMP stack) web apps?</p>
</div></text><author><a href="/users/365265/mate64">mate64</a></author><comments/></question><answers><answer><text><div class="post-text" itemprop="text">
<p>The <a href="http://code.google.com/p/google-authenticator/">project</a> is open source. I have not used it. But it's using a documented algorithm (noted in the RFC listed on the open source project page), and the authenticator implementations support multiple accounts.</p>
<p>The actual process is straightforward. The one time code is, essentially, a pseudo random number generator. A random number generator is a formula that once given a seed, or starting number, continues to create a stream of random numbers. Given a seed, while the numbers may be random to each other, the sequence itself is deterministic. So, once you have your device and the server "in sync" then the random numbers that the device creates, each time you hit the "next number button", will be the same, random, numbers the server expects.</p>
<p>A secure one time password system is more sophisticated than a random number generator, but the concept is similar. There are also other details to help keep the device and server in sync.</p>
<p>So, there's no need for someone else to host the authentication, like, say OAuth. Instead you need to implement that algorithm that is compatible with the apps that Google provides for the mobile devices. That software is (should be) available on the open source project.</p>
<p>Depending on your sophistication, you should have all you need to implement the server side of this process give the OSS project and the RFC. I do not know if there is a specific implementation for your server software (PHP, Java, .NET, etc.)</p>
<p>But, specifically, you don't need an offsite service to handle this.</p>
</div></text><author><a href="/users/13663/will-hartung">Will Hartung</a></author><comments><comment><text><span class="comment-copy">on the other hand, using an already existing, well known, easy to get solution available on many different mobile devices is of great benefit...(hint hint)</span></text><author><a class="comment-user" href="/users/1663987/user9999999" title="456 reputation">user9999999</a></author></comment><comment><text><span class="comment-copy">You mean SMS ? It is slow, unreliable and costly.</span></text><author><a class="comment-user" href="/users/319294/achraf-almouloudi" title="338 reputation">Achraf Almouloudi</a></author></comment><comment><text><span class="comment-copy">I blogged about how to implement Google Authenticator/RFC6238 compatible 2fa for websites in pure java: <a href="http://www.asaph.org/2016/04/google-authenticator-2fa-java.html" rel="nofollow noreferrer">asaph.org/2016/04/google-authenticator-2fa-java.html</a> (shameless plug)</span></text><author><a class="comment-user" href="/users/166339/asaph" title="103,182 reputation">Asaph</a></author></comment><comment><text><span class="comment-copy">FYI NIST is No Longer Recommending Two-Factor Authentication Using SMS as of August 2016. Nevermind the cost its considered insecure.</span></text><author><a class="comment-user" href="/users/145954/thedpq" title="336 reputation">TheDPQ</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The algorithm is documented in <a href="http://tools.ietf.org/html/rfc6238" rel="noreferrer">RFC6238</a>.  Goes a bit like this:</p>
<ul>
<li>your server gives the user a secret to install into Google Authenticator.  Google do this as a QR code documented <a href="https://github.com/google/google-authenticator/wiki/Key-Uri-Format" rel="noreferrer">here</a>.</li>
<li>Google Authenticator generates a 6 digit code by from a SHA1-HMAC of the Unix time and the secret (lots more detail on this in the RFC)</li>
<li>The server also knows the secret / unix time to verify the 6-digit code.</li>
</ul>
<p>I've had a play implementing the algorithm in javascript here: <a href="http://blog.tinisles.com/2011/10/google-authenticator-one-time-password-algorithm-in-javascript/" rel="noreferrer">http://blog.tinisles.com/2011/10/google-authenticator-one-time-password-algorithm-in-javascript/</a></p>
</div></text><author><a href="/users/109102/russau">russau</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>There are a variety of libraries for PHP (The LAMP Stack)</p>
<p><strong>PHP</strong></p>
<p><a href="https://code.google.com/p/ga4php/">https://code.google.com/p/ga4php/</a></p>
<p><a href="http://www.idontplaydarts.com/2011/07/google-totp-two-factor-authentication-for-php/">http://www.idontplaydarts.com/2011/07/google-totp-two-factor-authentication-for-php/</a></p>
<p>You should be careful when implementing two-factor auth, you need to ensure your clocks on the server and client are synchronized, that there is protection in place against brute-force attacks on the token and that the initial seed used is suitably large.</p>
</div></text><author><a href="/users/868690/james">James</a></author><comments><comment><text><span class="comment-copy">The content was great, but anyone using the first link should implement the SQL injection prevention methods, as there's some potential flaws. Look at the issues raised for the first one. Second link is perfect.</span></text><author><a class="comment-user" href="/users/1030580/septronic" title="671 reputation">Septronic</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>You can <strong>use my solution</strong>, posted as the answer to my question (there is <strong>full Python code</strong> and <strong>explanation</strong>):</p>
<blockquote>
<p><a href="http://stackoverflow.com/a/8549884/548696">Google Authenticator implementation in Python</a></p>
</blockquote>
<p>It is rather easy to implement it in PHP or Perl, I think. If you have any problems with this, please let me know.</p>
<p>I have also <a href="https://github.com/tadeck/onetimepass/">posted my code on GitHub</a> as Python module.</p>
</div></text><author><a href="/users/548696/tadeck">Tadeck</a></author><comments><comment><text><span class="comment-copy">A little after the fact... I just wanted to follow up by mentioning that there is a Perl module on CPAN: Auth::GoogleAuthenticator ( <a href="http://search.cpan.org/dist/Auth-GoogleAuthenticator/" rel="nofollow noreferrer">search.cpan.org/dist/Auth-GoogleAuthenticator</a> ).</span></text><author><a class="comment-user" href="/users/716443/davido" title="11,593 reputation">DavidO</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I found this: <a href="https://github.com/PHPGangsta/GoogleAuthenticator">https://github.com/PHPGangsta/GoogleAuthenticator</a>. I tested it and works fine for me.</p>
</div></text><author><a href="/users/1893983/user1893983">user1893983</a></author><comments><comment><text><span class="comment-copy">I think you would prefer <a href="https://github.com/RobThree/TwoFactorAuth" rel="nofollow noreferrer">github.com/RobThree/TwoFactorAuth</a>. It is based on the above library but is a huge improvement on it with more features and clearer documentation.</span></text><author><a class="comment-user" href="/users/1937344/ema4rl" title="447 reputation">Ema4rl</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Theres: <a href="https://www.gauthify.com" rel="nofollow">https://www.gauthify.com</a> that offers it as a service</p>
</div></text><author><a href="/users/553975/novicecoding">NoviceCoding</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Yes, need no network service, because Google Authenticator app won't communicate with the google server, it just keeps synced with the initital secret that your server generate(input into your phone from QR code) while the time pass.</p>
</div></text><author><a href="/users/264181/diyism">diyism</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>For those using Laravel, this <a href="https://github.com/sitepoint-editors/google-laravel-2FA" rel="nofollow noreferrer">https://github.com/sitepoint-editors/google-laravel-2FA</a> is a nice way to solve this problem.</p>
</div></text><author><a href="/users/536434/briankip">briankip</a></author><comments/></answer></answers></post>