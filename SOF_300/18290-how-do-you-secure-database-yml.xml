<?xml version="1.0" encoding="utf-8"?>
<post><title>ruby on rails - How Do You Secure database.yml? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>Within Ruby on Rails applications database.yml is a plain text file that stores database credentials.</p>
<p>When I deploy my Rails applications I have an after deploy callback in my Capistrano 
recipe that creates a symbolic link within the application's /config directory to the database.yml file. The file itself is stored in a separate directory that's outside the standard Capistrano /releases directory structure. I chmod 400 the file so it's only readable by the user who created it.</p>
<ul>
<li>Is this sufficient to lock it down? If not, what else do you do?</li>
<li>Is anyone encrypting their database.yml files?</li>
</ul>
</div></text><author><a href="/users/1450/john-topley">John Topley</a></author><comments/></question><answers><answer><text><div class="post-text" itemprop="text">
<p>You'll also want to make sure that your SSH system is well secured to prevent people from logging in <em>as</em> your Capistrano bot.  I'd suggest restricting access to password-protected key pairs.</p>
<p>Encrypting the .yml file on the server is useless since you have to give the bot the key, which would be stored . . . on the same server.  Encrypting it on your machine is probably a good idea.  Capistrano can decrypt it before sending.</p>
</div></text><author><a href="/users/1190/james-a-rosen">James A. Rosen</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>The way I have tackled this is to put the database password in a file with read permissions only for the user I run my application as.  Then, in database.yml I use ERB to read the file:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">production</span><span class="pun">:</span><span class="pln">
  adapter</span><span class="pun">:</span><span class="pln"> mysql
  database</span><span class="pun">:</span><span class="pln"> my_db
  username</span><span class="pun">:</span><span class="pln"> db_user
  password</span><span class="pun">:</span><span class="pln"> </span><span class="pun">&lt;%=</span><span class="pln"> </span><span class="kwd">begin</span><span class="pln"> IO</span><span class="pun">.</span><span class="pln">read</span><span class="pun">(</span><span class="str">"/home/my_deploy_user/.db"</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">rescue</span><span class="pln"> </span><span class="str">""</span><span class="pln"> </span><span class="kwd">end</span><span class="pln"> </span><span class="pun">%&gt;</span></code></pre>
<p>Works a treat.</p>
</div></text><author><a href="/users/1174/olly">Olly</a></author><comments><comment><text><span class="comment-copy">How does this improve on setting read permissions for the application user directly on database.yml?</span></text><author><a class="comment-user owner" href="/users/1450/john-topley" title="76,619 reputation">John Topley</a></author></comment><comment><text><span class="comment-copy">I took this approach because, a) the password isn't in database.yml and hence isn't committed to source control, and b) other than putting the password in a file on the production server only, there was no other work required -- no Capistrano tasks, no files outside of the main structure etc.</span></text><author><a class="comment-user" href="/users/1174/olly" title="5,231 reputation">Olly</a></author></comment><comment><text><span class="comment-copy">I feel that the database.yml shoudn't be in the repository in the first place because every developer should be able to define their own working environment.</span></text><author><a class="comment-user" href="/users/6291/jaryl" title="1,750 reputation">Jaryl</a></author></comment><comment><text><span class="comment-copy">If every developer is developing with an app-local sqlite database and not a database server, and if there is only a single canonical production deploy (on multiple identically-configured servers) and not multiple production deploys, then it is fine to keep <code>config/database.yml</code> in source control. This is the default way to do it in Rails. If your setup is more complicated than that, then you may not be able to keep <code>config/database.yml</code> in source control.</span></text><author><a class="comment-user" href="/users/12349/yfeldblum" title="54,024 reputation">yfeldblum</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Take a look at this github solution: <a href="https://github.com/NUBIC/bcdatabase" rel="noreferrer">https://github.com/NUBIC/bcdatabase</a>. bcdatabase provides an encrypted store where the passwords can be kept separated from the yaml files.</p>
<blockquote>
<p>bcdatabase</p>
<p>bcdatabase is a library and utility
  which provides database configuration
  parameter management for Ruby on Rails
  applications. It provides a simple
  mechanism for separating database
  configuration attributes from
  application source code so that
  there's no temptation to check
  passwords into the version control
  system. And it centralizes the
  parameters for a single server so that
  they can be easily shared among
  multiple applications and easily
  updated by a single administrator.</p>
</blockquote>
</div></text><author><a href="/users/33204/slm">slm</a></author><comments><comment><text><span class="comment-copy">An update: bcdatabase now lives at <a href="https://github.com/NUBIC/bcdatabase" rel="nofollow noreferrer">github.com/NUBIC/bcdatabase</a> .</span></text><author><a class="comment-user" href="/users/153896/rhett-sutphin" title="1,015 reputation">Rhett Sutphin</a></author></comment><comment><text><span class="comment-copy">This seems like a dead project now. Is there any replacement or alternate solution that is actively maintained?</span></text><author><a class="comment-user" href="/users/56082/streamline" title="638 reputation">Streamline</a></author></comment><comment><text><span class="comment-copy">@Streamline - last commit was 2014, that's not that long ago.</span></text><author><a class="comment-user" href="/users/33204/slm" title="6,388 reputation">slm</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Even if you secure the database.yml file, people can still write that uses the same credentials if they can change the code of your application.</p>
<p>An other way to look at this is: does the web application have to much access to the database. If true lower the permissions. Give just enough permissions to the application. This way an attacker can only do what the web application would be able to do.</p>
</div></text><author><a href="/users/1633/peter-stuifzand">Peter Stuifzand</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>If you're very concerned about security of the yml file, I have to ask: Is it stored in your version control?  If so, that's another point where an attacker can get at it.  If you're doing checkout/checkin over non-SSL, someone could intercept it.</p>
<p>Also, with some version control (svn, for exampl), even if you remove it, it's still there in the history.  So, even if you removed it at some point in the past, it's still a good idea to change the passwords.</p>
</div></text><author><a href="/users/19964/micah">Micah</a></author><comments><comment><text><span class="comment-copy">I never store database.yml in my source control repositories.</span></text><author><a class="comment-user owner" href="/users/1450/john-topley" title="76,619 reputation">John Topley</a></author></comment><comment><text><span class="comment-copy">Anyone who stores secrets in files and uploads them to version control should be spanked.</span></text><author><a class="comment-user" href="/users/84704/warren-p" title="32,177 reputation">Warren  P</a></author></comment></comments></answer></answers></post>