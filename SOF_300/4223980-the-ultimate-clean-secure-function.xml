<?xml version="1.0" encoding="utf-8"?>
<post><title>php - The ultimate clean/secure function - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I have a lot of user inputs from <code>$_GET</code> and <code>$_POST</code>... At the moment I always write <code>mysql_real_escape_string($_GET['var'])</code>..</p>
<p>I would like to know whether you could make a function that secures, escapes and cleans the <code>$_GET</code>/<code>$_POST</code> arrays right away, so you won't have to deal with it each time you are working with user inputs and such.</p>
<p>I was thinking of an function, e.g <code>cleanMe($input)</code>, and inside it, it should do <code>mysql_real_escape_string</code>, <code>htmlspecialchars</code>, <code>strip_tags</code>, <code>stripslashes</code> (I think that would be all to make it clean &amp; secure) and then return the <code>$input</code>.</p>
<p>So is this possible? Making a function that works for all <code>$_GET</code> and <code>$_POST</code>, so you would do only this:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="pln">$_GET  </span><span class="pun">=</span><span class="pln"> cleanMe</span><span class="pun">(</span><span class="pln">$_GET</span><span class="pun">);</span><span class="pln">
$_POST </span><span class="pun">=</span><span class="pln"> cleanMe</span><span class="pun">(</span><span class="pln">$_POST</span><span class="pun">);</span></code></pre>
<p>So in your code later, when you work with e.g <code>$_GET['blabla']</code> or <code>$_POST['haha']</code> , they are secured, stripped and so on?</p>
<p>Tried myself a little:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">function</span><span class="pln"> cleanMe</span><span class="pun">(</span><span class="pln">$input</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   $input </span><span class="pun">=</span><span class="pln"> mysql_real_escape_string</span><span class="pun">(</span><span class="pln">$input</span><span class="pun">);</span><span class="pln">
   $input </span><span class="pun">=</span><span class="pln"> htmlspecialchars</span><span class="pun">(</span><span class="pln">$input</span><span class="pun">,</span><span class="pln"> ENT_IGNORE</span><span class="pun">,</span><span class="pln"> </span><span class="str">'utf-8'</span><span class="pun">);</span><span class="pln">
   $input </span><span class="pun">=</span><span class="pln"> strip_tags</span><span class="pun">(</span><span class="pln">$input</span><span class="pun">);</span><span class="pln">
   $input </span><span class="pun">=</span><span class="pln"> stripslashes</span><span class="pun">(</span><span class="pln">$input</span><span class="pun">);</span><span class="pln">
   </span><span class="kwd">return</span><span class="pln"> $input</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/2224584/scott-arciszewski">Scott Arciszewski</a></author><comments><comment><text><span class="comment-copy"><code>stripslashes()</code> <i>after</i> <code>mysql_real_escape_string()</code> ... my eyeees!</span></text><author><a class="comment-user" href="/users/52162/jensgram" title="23,723 reputation">jensgram</a></author></comment><comment><text><span class="comment-copy">I think data security depends to what they do and where they come from. All your treatments are not necessarily needed.</span></text><author><a class="comment-user" href="/users/465233/matthecat" title="12,623 reputation">MatTheCat</a></author></comment><comment><text><span class="comment-copy">Using a one-time master sanitize function is not the right solution.  That's why <a href="http://php.net/manual/en/security.magicquotes.php" rel="nofollow noreferrer">magic quotes</a> failed.  Escape (or use better solutions like prepared statements) <i>if and when</i> you need it.  Otherwise, you will find you're escaping at the wrong times, and often more than once.  All of those functions have very different purposes, and several (e.g. <code>mysql_real_escape_string</code> and <code>stripslashes</code>) are essentially inverses.  See [What's the best method for sanitizing user input with PHP? ](<a href="http://stackoverflow.com/questions/129677">stackoverflow.com/questions/129677</a>) for more info.</span></text><author><a class="comment-user" href="/users/47773/matthew-flaschen" title="187,391 reputation">Matthew Flaschen</a></author></comment><comment><text><span class="comment-copy">Oah wow,  cleanMe() doesn't stop all xss, and doesn't do anything to stop sqli because of <code>stripslashes()</code>. This is code is painful.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/3126072/what-are-the-best-php-input-sanitizing-functions">What are the best PHP input sanitizing functions?</a></span></text><author><a class="comment-user" href="/users/2377343/t-todua" title="18,012 reputation">T.Todua</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>The idea of a generic sanitation function is a broken concept.</p>
<p>There is <strong>one</strong> right sanitation method for every purpose. Running them all indiscriminately on a string will often break it - escaping a piece of HTML code for a SQL query will break it for use in a web page, and vice versa.  Sanitation should be applied <strong>right before</strong> using the data:</p>
<ul>
<li><p>before running a database query. The right sanitation method depends on the library you use; they are listed in <a href="http://stackoverflow.com/questions/60174/how-can-i-prevent-sql-injection-in-php">How can I prevent SQL injection in PHP?</a> </p></li>
<li><p><code>htmlspecialchars()</code> for safe HTML output</p></li>
<li><p><code>preg_quote()</code> for use in a regular expression</p></li>
<li><p><code>escapeshellarg()</code> / <code>escapeshellcmd()</code> for use in an external command</p></li>
<li><p>etc. etc.</p></li>
</ul>
<p>Using a "one size fits all" sanitation function is like using five kinds of highly toxic insecticide on a plant that can by definition only contain one kind of bug - only to find out that your plants are infested by a sixth kind, on which none of the insecticides work.</p>
<p>Always use that one right method, ideally straight before passing the data to the function. <em>Never</em> mix methods unless you need to.</p>
</div></text><author><a href="/users/187606/pekka-%ec%9b%83">Pekka 웃</a></author><comments><comment><text><span class="comment-copy">We've been through 'automated sanitation' with magic_quotes. Never again.</span></text><author><a class="comment-user" href="/users/402253/mchl" title="44,113 reputation">Mchl</a></author></comment><comment><text><span class="comment-copy">@Mchl +1 That's probably the number one <i>reason</i> for insecurity in PHP solutions. It basically encouraged programmer ignorance :)</span></text><author><a class="comment-user" href="/users/52162/jensgram" title="23,723 reputation">jensgram</a></author></comment><comment><text><span class="comment-copy">I would add that it's very worth considering using prepared statements (PDO or mysqli) instead for database queries.</span></text><author><a class="comment-user" href="/users/47773/matthew-flaschen" title="187,391 reputation">Matthew Flaschen</a></author></comment><comment><text><span class="comment-copy">"Don't cross the streams"</span></text><author><a class="comment-user" href="/users/151758/arkh" title="7,073 reputation">Arkh</a></author></comment><comment><text><span class="comment-copy">+1 you hit the nail on the head,  a vulnerability is entirely dependent on how the data is being used.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">Does B.S. stand for flawed?</span></text><author><a class="comment-user" href="/users/6244/toby-allen" title="8,181 reputation">Toby Allen</a></author></comment><comment><text><span class="comment-copy">Maybe I just dont see the need for B.S in an answer to a valid question.</span></text><author><a class="comment-user" href="/users/6244/toby-allen" title="8,181 reputation">Toby Allen</a></author></comment><comment><text><span class="comment-copy">@Toby if you see fit to downvote a valid (and, by the way, accepted) answer because you don't like its choice of words, then that is your prerogative of course. But I personally think it's stupid.</span></text><author><a class="comment-user" href="/users/187606/pekka-%ec%9b%83" title="317,852 reputation">Pekka 웃</a></author></comment><comment><text><span class="comment-copy">@Pekka웃 — Feel like updating this answer with a reference to the standard Preventing SQL Injection question and a de-emphasis of mysql_real_escape_string?</span></text><author><a class="comment-user" href="/users/19068/quentin" title="529,032 reputation">Quentin</a></author></comment><comment><text><span class="comment-copy">@Quentin yeah, good idea. Done</span></text><author><a class="comment-user" href="/users/187606/pekka-%ec%9b%83" title="317,852 reputation">Pekka 웃</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>There is no point in simply passing the input through all these functions. All these functions have different meanings. Data doesn't get "cleaner" by calling more escape-functions.</p>
<p>If you want to store user input in MySQL you need to use only <code>mysql_real_escape_string</code>. It is then fully escaped to store safely in the database.</p>
<p><strong>EDIT</strong></p>
<p>Also note the problems that arise with using the other functions. If the client sends for instance a username to the server, and the username contains an  ampersand (<code>&amp;</code>), you don;t want to have called <code>htmlentities</code> before storing it in the database because then the username in the database will contain <code>&amp;amp;</code>.</p>
</div></text><author><a href="/users/181894/tomas">Tomas</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>You're looking for <a href="http://php.net/manual/en/function.filter-input-array.php" rel="noreferrer"><code>filter_input_array()</code></a>.
However, I suggest only using that for business-style validation/sanitisation and not SQL input filtering.</p>
<p>For protection against SQL injection, use parametrised queries with <a href="http://php.net/manual/en/mysqli.prepare.php" rel="noreferrer">mysqli</a> or <a href="http://php.net/pdo.prepare" rel="noreferrer">PDO</a>.</p>
</div></text><author><a href="/users/381895/alan-pearce">Alan Pearce</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>The problem is, something clean or secure for one use, won't be for another : cleaning for part of a path, for part of a mysql query, for html output (as html, or in javascript or in an input's value), for xml may require different things which contradicts.</p>
<p>But, some global things can be done.
Try to use <a href="http://php.net/manual/en/function.filter-input.php" rel="nofollow">filter_input</a> to get your user's input. And use <a href="http://www.php.net/manual/en/book.pdo.php" rel="nofollow">prepared statements</a> for your SQL queries.</p>
<p>Although, instead of a do-it-all function, you can create some class which manages your inputs. Something like that :</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">class</span><span class="pln"> inputManager</span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> toHTML</span><span class="pun">(</span><span class="pln">$field</span><span class="pun">){</span><span class="pln">
    $data </span><span class="pun">=</span><span class="pln"> filter_input</span><span class="pun">(</span><span class="pln">INPUT_GET</span><span class="pun">,</span><span class="pln"> $field</span><span class="pun">,</span><span class="pln"> FILTER_SANITIZE_SPECIAL_CHARS</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> $data</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
  </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> toSQL</span><span class="pun">(</span><span class="pln">$field</span><span class="pun">,</span><span class="pln"> $dbType </span><span class="pun">=</span><span class="pln"> </span><span class="str">'mysql'</span><span class="pun">){</span><span class="pln">
    $data </span><span class="pun">=</span><span class="pln"> filter_input</span><span class="pun">(</span><span class="pln">INPUT_GET</span><span class="pun">,</span><span class="pln"> $field</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">$dbType </span><span class="pun">==</span><span class="pln"> </span><span class="str">'mysql'</span><span class="pun">){</span><span class="pln">
      </span><span class="kwd">return</span><span class="pln"> mysql_real_escape_string</span><span class="pun">(</span><span class="pln">$data</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>With this kind of things, if you see any $_POST, $GET, $_REQUEST or $_COOKIE in your code, you know you have to change it. And if one day you have to change how you filter your inputs, just change the class you've made.</p>
</div></text><author><a href="/users/151758/arkh">Arkh</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>May I suggest to install "mod_security" if you're using apache and have full access to server?!<br/>
It did solve most of my problems. However don't rely in just one or two solutions, always write secure code ;)
<br/><b>UPDATE</b>
Found this PHP IDS (http://php-ids.org/); seems nice :)</p>
</div></text><author><a href="/users/509884/filipe-yaba-polido">Filipe YaBa Polido</a></author><comments><comment><text><span class="comment-copy">What does mod_security have to do with input escaping, SQL injection, etc?</span></text><author><a class="comment-user" href="/users/106224/boltclock" title="418,604 reputation">BoltClock<span class="mod-flair" title="moderator">♦</span></a></author></comment><comment><text><span class="comment-copy">@BoltClock See the section Commonly Used Configuration Rules in <a href="http://www.thebitsource.com/infrastructure-operations/web-application/securing-apache-web-servers-modsecurity/" rel="nofollow noreferrer">this article</a>, or see an other one by Symantec: <a href="http://www.symantec.com/connect/articles/web-security-appliance-apache-and-modsecurity" rel="nofollow noreferrer">Web Security Appliance With Apache and mod_security</a>.</span></text><author><a class="comment-user" href="/users/504270/istv%c3%a1n-ujj-m%c3%a9sz%c3%a1ros" title="2,599 reputation">István Ujj-Mészáros</a></author></comment><comment><text><span class="comment-copy">@BoltClock: it's like a bodyguard, even when you mess up, he's there to help you out ;)</span></text><author><a class="comment-user" href="/users/509884/filipe-yaba-polido" title="1,064 reputation">Filipe YaBa Polido</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>i used that pass array or get , post </p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">function</span><span class="pln"> cleanme</span><span class="pun">(&amp;</span><span class="pln">$array</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln"> 
 </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">isset</span><span class="pun">(</span><span class="pln">$array</span><span class="pun">))</span><span class="pln">
 </span><span class="pun">{</span><span class="pln">
     </span><span class="kwd">foreach</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$array </span><span class="kwd">as</span><span class="pln"> $key </span><span class="pun">=&gt;</span><span class="pln"> $value</span><span class="pun">)</span><span class="pln">
     </span><span class="pun">{</span><span class="pln">
          </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">is_array</span><span class="pun">(</span><span class="pln">$array</span><span class="pun">[</span><span class="pln">$key</span><span class="pun">]))</span><span class="pln">
          </span><span class="pun">{</span><span class="pln">
           secure_array</span><span class="pun">(</span><span class="pln">$array</span><span class="pun">[</span><span class="pln">$key</span><span class="pun">]);</span><span class="pln">
          </span><span class="pun">}</span><span class="pln">
          </span><span class="kwd">else</span><span class="pln"> 
          </span><span class="pun">{</span><span class="pln">
            $array</span><span class="pun">[</span><span class="pln">$key</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> strip_tags</span><span class="pun">(</span><span class="pln">mysql_real_escape_string</span><span class="pun">(</span><span class="pln">trim</span><span class="pun">(</span><span class="pln">$array</span><span class="pun">[</span><span class="pln">$key</span><span class="pun">])));</span><span class="pln">
          </span><span class="pun">}</span><span class="pln">
     </span><span class="pun">}</span><span class="pln">
 </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/users/889030/user889030">user889030</a></author><comments/></answer></answers></post>