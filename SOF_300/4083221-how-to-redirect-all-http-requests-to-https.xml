<?xml version="1.0" encoding="utf-8"?>
<post><title>security - How to redirect all HTTP requests to HTTPS - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I'm trying to redirect all insecure HTTP requests on my site (e.g. <code>http://www.example.com</code>) to HTTPS (<code>https://www.example.com</code>). I'm using PHP btw. Can I do this in .htaccess?</p>
</div></text><author><a href="/users/203458/kate-gregory">Kate Gregory</a></author><comments><comment><text><span class="comment-copy">You can (and should) do this through your <code>httpd</code>, not with PHP.</span></text><author><a class="comment-user" href="/users/450106/drudge" title="19,106 reputation">drudge</a></author></comment><comment><text><span class="comment-copy">@jnpcl, while I agree the httpd solution is better that the PHP-based solution, I don't think a systematic redirection is a good practice in general. If you want to redirect your users to HTTPS at all times, send them there from the "entry point" (the first link to your site), don't do it half way through, which may leak some data that you'd think is protected (if you don't notice that instantaneous redirection).</span></text><author><a class="comment-user" href="/users/372643/bruno" title="78,944 reputation">Bruno</a></author></comment><comment><text><span class="comment-copy">@Bruno: I was thinking more along the lines of duplicated http requests, the potential for lost query strings, and the possibility of the user manually typing in <code>http://</code></span></text><author><a class="comment-user" href="/users/450106/drudge" title="19,106 reputation">drudge</a></author></comment><comment><text><span class="comment-copy">@jnpcl that's a good point indeed. I was merely suggesting that, while people tend to ask for this sort of redirect to improve the security of their site, often, it doesn't actually improve it (since it doesn't prevent the same request to go through plain HTTP first).</span></text><author><a class="comment-user" href="/users/372643/bruno" title="78,944 reputation">Bruno</a></author></comment><comment><text><span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/q/4083221/">How to redirect all HTTP requests to HTTPS</a>, <a href="http://stackoverflow.com/q/1329647/">Force SSL/HTTPS with Zend Framework and mod_rewrite</a>, <a href="http://webmasters.stackexchange.com/q/8833">Force SSL and WWW in .htaccess</a></span></text><author><a class="comment-user" href="/users/90527/outis" title="51,421 reputation">outis</a></author></comment><comment><text><span class="comment-copy">@outis: the first link you posted is <i>this</i> question.</span></text><author><a class="comment-user" href="/users/82775/mei" title="802 reputation">Mei</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p><strong>Update:</strong> Although this answer has been accepted a few years ago, note that its approach is <a href="http://httpd.apache.org/docs/current/rewrite/avoid.html#redirect" rel="noreferrer">now recommended against</a> by the Apache documentation. Use a <code>Redirect</code> instead. See <a href="http://stackoverflow.com/a/21798882/56974">this answer</a>.</p>
<hr/>
<pre><code>RewriteEngine On
RewriteCond %{HTTPS} !on
RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}
</code></pre>
<p><a href="http://roshanbh.com.np/2008/05/redirect-browser-https-ssl-php.html" rel="noreferrer">Source</a></p>
</div></text><author><a href="/users/488830/reese-moore">Reese Moore</a></author><comments><comment><text><span class="comment-copy">@Cat, as I was saying in my answer/comments, if you're trying to "redirect all insecure HTTP [...] to HTTPS", this approach will not make those requests secure, it will just make the browser make them twice, once insecure and once secure.</span></text><author><a class="comment-user" href="/users/372643/bruno" title="78,944 reputation">Bruno</a></author></comment><comment><text><span class="comment-copy">What you should really be doing is using <a href="https://tools.ietf.org/html/rfc6797" rel="nofollow noreferrer">HSTS</a> in concert with this.</span></text><author><a class="comment-user" href="/users/488830/reese-moore" title="8,410 reputation">Reese Moore</a></author></comment><comment><text><span class="comment-copy">@Bruno but typically (eg on a login page) the first load of the page doesn't send or receive any sensitive data to this approach is still fine as the user will be sent to HTTPS before they submit their username/password?</span></text><author><a class="comment-user" href="/users/229587/nickg" title="3,313 reputation">NickG</a></author></comment><comment><text><span class="comment-copy">@NickG, sure, when the user types the initial request in the location bar, but having such a redirection in place also applies to <code>http://</code> links to your own site from your <code>https://</code> pages, which are a bug then hard to detect. The problem also applies to API clients.</span></text><author><a class="comment-user" href="/users/372643/bruno" title="78,944 reputation">Bruno</a></author></comment><comment><text><span class="comment-copy">If the browser makes the same requests twice, does this mean that the website will be slow in opening? I used this code and my site opens so slow.</span></text><author><a class="comment-user" href="/users/1533368/samarth-agarwal" title="867 reputation">Samarth Agarwal</a></author></comment><comment><text><span class="comment-copy">This may be a bug in my version of apache (2.4.6 as packaged in Centos 7), but this has issues for me on certain URLs. For example, <code>http://server/foo?email=someone%40example.com</code> redirects to <code>https://server/foo?email=someone%2540example.com</code> i.e. the "@" sign gets URL-quoted <i>twice</i>. Using the method in @ssc's answer does not have this issue.</span></text><author><a class="comment-user" href="/users/333698/psmears" title="13,432 reputation">psmears</a></author></comment><comment><text><span class="comment-copy">at me works so RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]</span></text><author><a class="comment-user" href="/users/2042426/killlinuxkill" title="92 reputation">killlinuxkill</a></author></comment><comment><text><span class="comment-copy">It's sad that @ReeseMoore, an intelligent man, is most recognized on StackOverflow for something that a highly intelligent seahorse could Google</span></text><author><a class="comment-user" href="/users/4162641/stepheng" title="1,299 reputation">StephenG</a></author></comment><comment><text><span class="comment-copy">This answer does not have <code>[L]</code> which is required in some instances to avoid combining with other redirects you may have active on your site.</span></text><author><a class="comment-user" href="/users/300224/full-decent" title="13,768 reputation">Full Decent</a></author></comment><comment><text><span class="comment-copy">Any particular reason you used <code>!on</code> instead of <code>off</code>? :)</span></text><author><a class="comment-user" href="/users/1142348/clifton-labrum" title="2,724 reputation">Clifton Labrum</a></author></comment><comment><text><span class="comment-copy">&lt;VirtualHost *:80&gt;     ServerName www.example.com     Redirect "/" "<a href="https://www.example.com/%22" rel="nofollow noreferrer">example.com/"</a>; &lt;/VirtualHost&gt; worked. from the lilnk you had provided thanks</span></text><author><a class="comment-user" href="/users/344774/parag" title="2,367 reputation">Parag</a></author></comment><comment><text><span class="comment-copy">Wrong answer. It will only redirect the base url, not urls in subfolders. RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]  is the correct answer</span></text><author><a class="comment-user" href="/users/1299659/fredthewebguy" title="1,627 reputation">FredTheWebGuy</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>The <a href="http://httpd.apache.org/docs/current/rewrite/avoid.html#redirect" rel="noreferrer">Apache docs</a> recommend against using a rewrite:</p>
<blockquote>
<p>To redirect <code>http</code> URLs to <code>https</code>, do the following:</p>
<pre><code>&lt;VirtualHost *:80&gt;
    ServerName www.example.com
    Redirect / https://www.example.com/
&lt;/VirtualHost&gt;

&lt;VirtualHost *:443&gt;
    ServerName www.example.com
    # ... SSL configuration goes here
&lt;/VirtualHost&gt;
</code></pre>
</blockquote>
<p>This snippet should go into main server configuration file, <strong>not</strong> into <code>.htaccess</code> as asked in the question.</p>
<p>This article might have come up only after the question was asked and answered, but seems to be the current way to go.</p>
</div></text><author><a href="/users/217844/ssc">ssc</a></author><comments><comment><text><span class="comment-copy">This should be the current answer. But what exactly goes in the "SSL configuration"? A full example would be really helpful.</span></text><author><a class="comment-user" href="/users/776121/ben" title="3,222 reputation">Ben</a></author></comment><comment><text><span class="comment-copy">@Ben: that's a different question which is extensively documented online; incidentally, I just added an almost full example yesterday: <a href="http://serverfault.com/q/597012/26210">serverfault.com/q/597012/26210</a> which might give you an idea of what goes in the SSL configuration</span></text><author><a class="comment-user" href="/users/217844/ssc" title="4,185 reputation">ssc</a></author></comment><comment><text><span class="comment-copy">+1 thanks for updating this question</span></text><author><a class="comment-user" href="/users/410826/winkbrace" title="1,793 reputation">winkbrace</a></author></comment><comment><text><span class="comment-copy">This is a great hint. But at the <a href="http://httpd.apache.org/docs/2.4/rewrite/avoid.html" rel="nofollow noreferrer">Apache doc</a> also mentions: "In the case of the http-to-https redirection, the use of RewriteRule would be appropriate if you don't have access to the main server configuration file, and are obliged to perform this task in a .htaccess file instead." Which is the case for me...</span></text><author><a class="comment-user" href="/users/818827/peter-the-oak" title="2,502 reputation">peter_the_oak</a></author></comment><comment><text><span class="comment-copy">I'm not sure about apache, but with IIS, the rewrite rule is insufficient. It will still serve insecure content in spite of the redirect, but only in special cases where the browser cached files before the rule was in place.   The rewrite rule should end the request and redirect to https, but in the case of serving simple files the redirect is just ignored by the browser, especially if its already connected to the site and trying to load a secure resource on an insecure page.  I'm looking for an IIS equivalent solution to the one proposed here.</span></text><author><a class="comment-user" href="/users/88409/triynko" title="8,997 reputation">Triynko</a></author></comment><comment><text><span class="comment-copy">This is a good answer, avoids unneeded redirects.</span></text><author><a class="comment-user" href="/users/1800854/mohammad" title="538 reputation">Mohammad</a></author></comment><comment><text><span class="comment-copy">Where does this code snippet go?</span></text><author><a class="comment-user" href="/users/659634/whitecat" title="1,445 reputation">Whitecat</a></author></comment><comment><text><span class="comment-copy">This will fail if you try to access a subfolder like "<a href="http://www.example.com/subfolder%22" rel="nofollow noreferrer">example.com/subfolder"</a>; where the redirect will remove the slash after domain name -&gt; "<a href="https://www.example.comsubfolder%22" rel="nofollow noreferrer">example.comsubfolder"</a>;. Solution: Redirect parameters should be quoted: <code>Redirect "/" "https://www.example.com/"</code></span></text><author><a class="comment-user" href="/users/255635/robert" title="1,131 reputation">Robert</a></author></comment><comment><text><span class="comment-copy">@ssc <b>Is it SEO friendly redirect?</b> because in previous method we ll use [R=301]</span></text><author><a class="comment-user" href="/users/1844933/user1844933" title="2,426 reputation">user1844933</a></author></comment><comment><text><span class="comment-copy">@user1844933 If you use the <code>permanent</code> keyword, the effect is the same (the browser receives a 301 redirect).  Eg: <code>Redirect permanent "/" "https://example.com"</code></span></text><author><a class="comment-user" href="/users/3977061/beetlejuice" title="10,491 reputation">BeetleJuice</a></author></comment><comment><text><span class="comment-copy">Of course, this snippet, which goes into Apache config (frequently named <code>httpd.conf</code>, <code>apache2.conf</code> or one of its includes in conf.d) and <b>not into .htaccess</b> like the question is tagged with, only works if you are not operating behind an <b>SSL-termination proxy</b>.</span></text><author><a class="comment-user" href="/users/2683737/rainer-rillke" title="800 reputation">Rainer Rillke</a></author></comment><comment><text><span class="comment-copy">Can someone do this: Redirect "/" "https://%{HTTP_HOST}%{REQUEST_URI}"?</span></text><author><a class="comment-user" href="/users/1579819/saichovsky" title="113 reputation">Saichovsky</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I'd recommend with 301 redirect:</p>
<pre><code>RewriteEngine On
RewriteCond %{HTTPS} off
RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]
</code></pre>
</div></text><author><a href="/users/1834361/david">David</a></author><comments><comment><text><span class="comment-copy">thanks, this works for me, the accepted answer does not.. probably due to lack of <code>[L]</code></span></text><author><a class="comment-user" href="/users/1767412/billynoah" title="6,276 reputation">billynoah</a></author></comment><comment><text><span class="comment-copy">same here. worked for me. accepted answer didn't</span></text><author><a class="comment-user" href="/users/4485147/codezilla" title="428 reputation">CodeZilla</a></author></comment><comment><text><span class="comment-copy">Yep. This is the correct answer since it also routes all urls in subfolders, too</span></text><author><a class="comment-user" href="/users/1299659/fredthewebguy" title="1,627 reputation">FredTheWebGuy</a></author></comment><comment><text><span class="comment-copy">I think the accepted answer must be this.</span></text><author><a class="comment-user" href="/users/2132069/kodmanyagha" title="310 reputation">kodmanyagha</a></author></comment><comment><text><span class="comment-copy">Is this at the top level of the htaccess file?</span></text><author><a class="comment-user" href="/users/1675976/codybugstein" title="4,559 reputation">CodyBugstein</a></author></comment><comment><text><span class="comment-copy">@CodyBugstein That's where I always place it, and it always works.</span></text><author><a class="comment-user" href="/users/4949411/daan-van-den-bergh" title="60 reputation">Daan van den Bergh</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>As I was saying in <a href="http://stackoverflow.com/questions/4070262/how-in-htaccess-can-i-redirect-the-user-to-https-from-http-and-back-again/4071655#4071655">this question</a>, I'd suggest you avoid redirecting all HTTP requests to their HTTPS equivalent blindly, as it may cause you a false impression of security. Instead, you should probably redirect the "root" of your HTTP site to the root of your HTTPS site and link from there, only to HTTPS.</p>
<p>The problem is that if some link or form on the HTTPS site makes the client send a request to the HTTP site, its content will be visible, before the redirection.</p>
<p>For example, if one of your pages served over HTTPS has a form that says <code>&lt;form action="http://example.com/doSomething"&gt;</code> and sends some data that shouldn't be sent in clear, the browser will first send the full request (including entity, if it's a POST) to the HTTP site first. The redirection will be sent immediately to the browser and, since a large number of users disable or ignore the warnings, it's likely to be ignored.</p>
<p>Of course, the mistake of providing the links that should be to the HTTPS site but that end up being for the HTTP site may cause problems as soon as you get something listening on the HTTP port on the same IP address as your HTTPS site. However, I think keeping the two sites as a "mirror" only increases the chances of making mistakes, as you may tend to make the assumption that it will auto-correct itself by redirecting the user to HTTPS, whereas it's often too late. (There were similar discussions in <a href="http://stackoverflow.com/questions/3729497/how-can-i-prevent-access-to-php-files-if-the-caller-isnt-using-https">this question.</a>)</p>
</div></text><author><a href="/users/372643/bruno">Bruno</a></author><comments><comment><text><span class="comment-copy">When making the decision to serve an entire site as HTTPS, this sort of redirection makes sense. I don't want a user to get a 403 because they specified http for their landing page. I do agree if someone DOES specify http in a link and deploys it to production that IS bad. It SHOULD be caught during testing, even with the redirection in place.  I don't like the "could" argument because this "could" happen without the redirection in place. The symptoms are the same when testing in a secure browser, except after confirming to send in the clear it redirects instead of receiving a 403.</span></text><author><a class="comment-user" href="/users/237974/derek-litz" title="4,860 reputation">Derek Litz</a></author></comment><comment><text><span class="comment-copy">Yeah, I see the benefit of failing hard if someone mistakenly puts http in a form action, but being lenient with typed-in URLs seems more important in most cases.</span></text><author><a class="comment-user" href="/users/714009/daniel-lubarov" title="5,486 reputation">Daniel Lubarov</a></author></comment><comment><text><span class="comment-copy">@Daniel, I agree it's useful to be lenient when users type in the URL. I'd say it's one of the cases where it's better to have this feature off during development/testing but turn it on on production (or in the last stages of development/testing).</span></text><author><a class="comment-user" href="/users/372643/bruno" title="78,944 reputation">Bruno</a></author></comment><comment><text><span class="comment-copy">why not do http to https at dns.</span></text><author><a class="comment-user" href="/users/1319799/muhammad-umer" title="6,136 reputation">Muhammad Umer</a></author></comment><comment><text><span class="comment-copy">@MuhammadUmer, because this has nothing to do with DNS. They'd be using the same host name in general, but even with a different host name, you'd still need to change protocol and port.</span></text><author><a class="comment-user" href="/users/372643/bruno" title="78,944 reputation">Bruno</a></author></comment><comment><text><span class="comment-copy">ok so there is no way to convert http to https with cname/aaa/etc.</span></text><author><a class="comment-user" href="/users/1319799/muhammad-umer" title="6,136 reputation">Muhammad Umer</a></author></comment><comment><text><span class="comment-copy">It does have to do with DNS when subdomains and certificates are involved, however. When you fake subdomains by rewriting URLS instead of using DNS records, especially with normal certificates involved, you get certificate errors in the browser. There are now certificates that apply to both the domain and subdomains, but -- the user typo loophole is exactly what hackers are looking for in the first place. Poking holes in security is never a good idea, not matter how awesome your server code is.</span></text><author><a class="comment-user" href="/users/3843815/jinzai" title="107 reputation">jinzai</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I found out that the best way for https and www on domain is</p>
<pre><code>RewriteCond %{HTTPS} off 
RewriteCond %{HTTPS_HOST} !^www.cheapcarhire.gr$ [NC]
RewriteRule ^(.*)$ https://www.cheapcarhire.gr/$1 [L,R=301]
</code></pre>
</div></text><author><a href="/users/3582051/giorgosk">GiorgosK</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I like this method of redirecting from http to https. Because I don't need to edit it for each site.</p>
<pre><code>RewriteEngine On
RewriteCond %{HTTPS} off
RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [R,L]
</code></pre>
</div></text><author><a href="/users/3331615/cory">Cory</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>This is the html redirect approach it works but not the best.</p>
<pre><code> &lt;meta http-equiv="Refresh" content="0;URL=https://www.example.com" /&gt;
</code></pre>
<p>PHP approach</p>
<pre><code>&lt;?php
function redirectTohttps() {
    if ($_SERVER['HTTPS']!="on") {
        $redirect= "https://".$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];
        header("Location:$redirect"); 
    } 
}
?&gt;
</code></pre>
<p>.htaccess approch</p>
<pre><code>RewriteEngine On
RewriteCond %{HTTPS} off
RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}
</code></pre>
<p>copied from:
<a href="https://www.letuslook.org/linux/redirect-http-to-https/" rel="noreferrer">www.letuslook.org</a></p>
</div></text><author><a href="/users/2258599/timothy-nwanwene">Timothy Nwanwene</a></author><comments><comment><text><span class="comment-copy">Thumbs up for the simple PHP approach.</span></text><author><a class="comment-user" href="/users/1675235/abhishek-saini" title="412 reputation">Abhishek Saini</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Add the following code to the .htaccess file:</p>
<pre><code>Options +SymLinksIfOwnerMatch
RewriteEngine On
RewriteCond %{SERVER_PORT} !=443
RewriteRule ^ https://[your domain name]%{REQUEST_URI} [R,L]
</code></pre>
<p>Where [your domain name] is your website's domain name.</p>
<p>You can also redirect specific folders off of your domain name by replacing the last line of the code above with:</p>
<pre><code>RewriteRule ^ https://[your domain name]/[directory name]%{REQUEST_URI} [R,L]
</code></pre>
</div></text><author><a href="/users/2351669/rahul">Rahul</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>This is the proper method of redirecting HTTP to HTTPS using .htaccess according to GoDaddy.com. The first line of code is self-explanatory. The second line of code checks to see if HTTPS is off, and if so it redirects HTTP to HTTPS by running the third line of code, otherwise the third line of code is ignored.</p>
<pre><code>RewriteEngine On
RewriteCond %{HTTPS} off
RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
</code></pre>
<p><a href="https://www.godaddy.com/help/redirect-http-to-https-automatically-8828" rel="nofollow">https://www.godaddy.com/help/redirect-http-to-https-automatically-8828</a></p>
</div></text><author><a href="/users/2544439/anarchyoutlaw">AnarchyOutlaw</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Using the following code in your .htaccess file automatically redirects visitors to the HTTPS version of your site:</p>
<pre><code>RewriteEngine On

RewriteCond %{HTTPS} off

RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
</code></pre>
<p>If you have an existing .htaccess file:</p>
<p>Do not duplicate RewriteEngine On.</p>
<p>Make sure the lines beginning RewriteCond and RewriteRule immediately follow the already-existing RewriteEngine On.</p>
</div></text><author><a href="/users/3449042/openwebwar">OpenWebWar</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>The best solution depends on your requirements. This is a summary of previously posted answers with some context added.</p>
<p>If you work with the Apache web server and can change its configuration, follow the <a href="http://httpd.apache.org/docs/current/rewrite/avoid.html#redirect" rel="nofollow">Apache documentation</a>:</p>
<pre><code>&lt;VirtualHost *:80&gt;
    ServerName www.example.com
    Redirect "/" "https://www.example.com/"
&lt;/VirtualHost&gt;

&lt;VirtualHost *:443&gt;
    ServerName www.example.com
    # ... SSL configuration goes here
&lt;/VirtualHost&gt;
</code></pre>
<p>But you also asked if you can do it in a <code>.htaccess</code> file. In that case you can use Apache's <a href="http://httpd.apache.org/docs/current/rewrite/remapping.html" rel="nofollow">RewriteEngine</a>:</p>
<pre><code>RewriteEngine On
RewriteCond %{HTTPS} off
RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [L]
</code></pre>
<p>If everything is working fine and you want browsers to remember this redirect, you can declare it as permanent by changing the last line to:</p>
<pre><code>RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]
</code></pre>
<p>But be careful if you may change your mind on this redirect. Browsers remember it for a very long time and won't check if it changed.</p>
<p>You may not need the first line <code>RewriteEngine On</code> depending on the webserver configuration.</p>
<p>If you look for a PHP solution, look at the <a href="http://php.net/manual/en/reserved.variables.server.php" rel="nofollow">$_SERVER array</a> and the <a href="http://php.net/manual/en/function.header.php" rel="nofollow">header function</a>:</p>
<pre><code>if (!$_SERVER['HTTPS']) {
    header("Location: https://" . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']); 
} 
</code></pre>
</div></text><author><a href="/users/3377535/maikel">maikel</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Do everything that is explained above for redirection. Just add "HTTP Strict Transport Security" to your header. This will avoid man in the middle attack.</p>
<blockquote>
<p>Edit your apache configuration file (/etc/apache2/sites-enabled/website.conf and /etc/apache2/httpd.conf for example) and add the following to your VirtualHost:</p>
</blockquote>
<pre><code># Optionally load the headers module:
LoadModule headers_module modules/mod_headers.so

&lt;VirtualHost 67.89.123.45:443&gt;
    Header always set Strict-Transport-Security "max-age=63072000; includeSubdomains; preload"
&lt;/VirtualHost&gt;
</code></pre>
<p><a href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security" rel="nofollow">https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security</a></p>
</div></text><author><a href="/users/1115751/waqas">Waqas</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>To redirect all <code>http</code> requests to <code>https</code> , you can use :</p>
<pre><code>RewriteEngine on
RewriteCond %{HTTPS} off
RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [NE,L,R]
</code></pre>
<p>If mod-rewrite isn't enabled and you are on apache 2.4, you can also use a <code>Redirect</code> inside <code>if</code> directive to redirect <code>http</code> requests to <code>https</code> .</p>
<p><strong>Apache 2.4.</strong></p>
<pre><code>&lt;if "%{HTTPS} !~ /on/"&gt;
Redirect / https://www.example.com/
&lt;/if&gt;
</code></pre>
</div></text><author><a href="/users/3160747/starkeen">starkeen</a></author><comments><comment><text><span class="comment-copy">Hi starkeen. Great answer once more ;)</span></text><author><a class="comment-user" href="/users/6086226/derk-jan-speelman" title="190 reputation">Derk Jan Speelman</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Through .htaccess This will help.</p>
<pre><code>RewriteEngine On


RewriteBase /
RewriteCond %{HTTP_HOST} ^www\.(.*)$ [NC]
RewriteRule ^(.*)$ https://%1/$1 [R=301,L]

RewriteCond %{HTTPS} !=on
RewriteRule ^/?(.*) https://%{SERVER_NAME}/$1 [R,L]
</code></pre>
<p>Also, Refer this for More Detail. <a href="https://www.httptohttpsmigration.com/redirect-http-to-https/" rel="nofollow noreferrer">How To Redirect Http To Https?</a></p>
</div></text><author><a href="/users/3402119/roshan-padole">Roshan Padole</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>If you are using Apache, mod_rewrite is the easiest solution, and has a lot of documentation online how to do that. For example: <a href="http://www.askapache.com/htaccess/http-https-rewriterule-redirect.html" rel="nofollow">http://www.askapache.com/htaccess/http-https-rewriterule-redirect.html</a></p>
</div></text><author><a href="/users/492405/vcsjones">vcsjones</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>A different edge to this problem is when a Load Balancer comes into play. </p>
<p>The situation is as follows: 
- Traffic from browser to Load Balancer, and back, is (should be) HTTPS
- Traffic between Load Balancer and actual WebServer is HTTP. </p>
<p>So, all server request variables in PHP or Apache show that the connection is just HTTP. And the HTTP and HTTPS directories on the Server are the same.</p>
<p>The RewriteCondition in the approved answer does not work. 
It gives either a loop or it just doesn't work. </p>
<p>Question is: How to get this working on a Load Balancer. </p>
<p>(Or is the Load Balancer configured wrong. Which is what I'm hoping for because then I can move the problem over to the WebHosting company :-) )</p>
</div></text><author><a href="/users/1379184/bertc">BertC</a></author><comments><comment><text><span class="comment-copy">The redirection would just have to happen on the load balancer instead. Depending on the type of load balancer, this should be possible in the config, or it is an apache instance itself, where the accepted answer would work. Just don't do it on the single nodes.</span></text><author><a class="comment-user" href="/users/1169042/marc82ch" title="389 reputation">marc82ch</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Unless you need mod_rewrite for other things, using Apache core IF directive is cleaner &amp; faster:</p>
<pre><code>&lt;If "%{HTTPS} == 'off'"&gt;
Redirect permanent / https://yoursite.com/
&lt;/If&gt;
</code></pre>
<p>You can add more conditions to the IF directive, such as ensure a single canonical domain without the www prefix:</p>
<pre><code>&lt;If "req('Host') != 'myonetruesite.com' || %{HTTPS} == 'off'"&gt;
Redirect permanent / https://myonetruesite.com/
&lt;/If&gt;
</code></pre>
<p>There's a lot of familiarity inertia in using mod_rewrite for everything, but see if this works for you.</p>
<p>More info: <a href="https://httpd.apache.org/docs/2.4/mod/core.html#if" rel="nofollow noreferrer">https://httpd.apache.org/docs/2.4/mod/core.html#if</a></p>
<p>To see it in action (try without www. or https://, or with .net instead of .com): <a href="https://nohodental.com/" rel="nofollow noreferrer">https://nohodental.com/</a> (a site I'm working on).</p>
</div></text><author><a href="/users/1313463/sashak">SashaK</a></author><comments/></answer></answers></post>