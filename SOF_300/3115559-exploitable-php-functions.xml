<?xml version="1.0" encoding="utf-8"?>
<post><title>security - Exploitable PHP functions - Stack Overflow</title><question><text><div class="post-text" itemprop="text">
<p>I'm trying to build a list of functions that can be used for arbitrary code execution. The purpose isn't to list functions that should be blacklisted or otherwise disallowed. Rather, I'd like to have a <code>grep</code>-able list of <em>red-flag</em> keywords handy when searching a compromised server for back-doors.</p>
<p>The idea is that if you want to build a multi-purpose malicious PHP script -- such as a "web shell" script like c99 or r57 -- you're going to have to use one or more of a relatively small set of functions somewhere in the file in order to allow the user to execute arbitrary code. Searching for those those functions helps you more quickly narrow down a haystack of tens-of-thousands of PHP files to a relatively small set of scripts that require closer examination.</p>
<p>Clearly, for example, any of the following would be considered malicious (or terrible coding):</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pun">&lt;?</span><span class="pln"> </span><span class="kwd">eval</span><span class="pun">(</span><span class="pln">$_GET</span><span class="pun">[</span><span class="str">'cmd'</span><span class="pun">]);</span><span class="pln"> </span><span class="pun">?&gt;</span><span class="pln">

</span><span class="pun">&lt;?</span><span class="pln"> system</span><span class="pun">(</span><span class="pln">$_GET</span><span class="pun">[</span><span class="str">'cmd'</span><span class="pun">]);</span><span class="pln"> </span><span class="pun">?&gt;</span><span class="pln">

</span><span class="pun">&lt;?</span><span class="pln"> preg_replace</span><span class="pun">(</span><span class="str">'/.*/e'</span><span class="pun">,</span><span class="pln">$_POST</span><span class="pun">[</span><span class="str">'code'</span><span class="pun">]);</span><span class="pln"> </span><span class="pun">?&gt;</span></code></pre>
<p>and so forth. </p>
<p>Searching through a compromised website the other day, I didn't notice a piece of malicious code because I didn't realize <code>preg_replace</code> could be made dangerous by the use of the <code>/e</code> flag (<em>which, seriously? Why is that even there</em>?). Are there any others that I missed?</p>
<p>Here's my list so far:</p>
<p><strong>Shell Execute</strong> </p>
<ul>
<li><code>system</code></li>
<li><code>exec</code></li>
<li><code>popen</code></li>
<li><em><code>backtick operator</code></em></li>
<li><code>pcntl_exec</code></li>
</ul>
<p><strong>PHP Execute</strong></p>
<ul>
<li><code>eval</code></li>
<li><code>preg_replace</code> (with <code>/e</code> modifier)</li>
<li><code>create_function</code></li>
<li><code>include</code>[<code>_once</code>] / <code>require</code>[<code>_once</code>] (<em>see mario's answer</em> for exploit details)</li>
</ul>
<p>It might also be useful to have a list of functions that are capable of modifying files, but I imagine 99% of the time exploit code will contain at least one of the functions above. But if you have a list of all the functions capable of editing or outputting files, post it and I'll include it here. (And I'm not counting <code>mysql_execute</code>, since that's part of another class of exploit.)</p>
</div></text><author><a href="/users/86060">tylerl</a></author><comments><comment><text><span class="comment-copy">as a sidenote, I'd like to see that list published in the near future, if possible :)</span></text><author><a class="comment-user" href="/users/168177/yoda" title="6,065 reputation">yoda</a></author></comment><comment><text><span class="comment-copy">@yoda: published where? I'll keep the list updated here, since SO is the Source of All Knowledge.</span></text><author><a class="comment-user owner" href="/users/86060/tylerl" title="20,317 reputation">tylerl</a></author></comment><comment><text><span class="comment-copy">anywhere, if you plan on giving out your specs about each of the functions</span></text><author><a class="comment-user" href="/users/168177/yoda" title="6,065 reputation">yoda</a></author></comment><comment><text><span class="comment-copy">What does the <code>/e</code> modifier do?</span></text><author><a class="comment-user" href="/users/82320/billy-oneal" title="65,262 reputation">Billy ONeal</a></author></comment><comment><text><span class="comment-copy">@Billy: the <code>e</code> modifier makes the replacement string to be evaluated as PHP code.</span></text><author><a class="comment-user" href="/users/109302/nikc-org" title="10,346 reputation">nikc.org</a></author></comment><comment><text><span class="comment-copy">how does the backtick operator hack work?</span></text><author><a class="comment-user" href="/users/280937/pinaki" title="3,556 reputation">pinaki</a></author></comment><comment><text><span class="comment-copy">@pinaki: The packtick operator is equivalent to <code>shell_exec</code>, thus you can execute arbitrary shell code and thus have pretty much control over the system ;)</span></text><author><a class="comment-user" href="/users/385378/nikic" title="70,498 reputation">NikiC</a></author></comment><comment><text><span class="comment-copy">It has to be said: executing the code in the regex is something Perl and possibly Python do too, not something exclusive to PHP. I don't know the details, though.</span></text><author><a class="comment-user" href="/users/22184/adriano-varoli-piazza" title="3,972 reputation">Adriano Varoli Piazza</a></author></comment><comment><text><span class="comment-copy">@tylerl It sounds like RATS is what you are trying to build.  Is this not the case?</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">@Rook: This question doesn't really have one right answer, so everybody can just take turns being "right"!</span></text><author><a class="comment-user owner" href="/users/86060/tylerl" title="20,317 reputation">tylerl</a></author></comment></comments></question><answers><answer><text><div class="post-text" itemprop="text">
<p>To build this list I used 2 sources.  <a href="http://seclists.org/bugtraq/2001/Jul/att-26/studyinscarlet.txt" rel="noreferrer">A Study In Scarlet</a> and <a href="https://www.fortify.com/ssa-elements/threat-intelligence/rats.html" rel="noreferrer">RATS</a>.   I have also added some of my own to the mix and people on this thread have helped out.</p>
<p><strong>Edit:</strong> After posting this list I contacted the founder of <a href="https://sourceforge.net/projects/rips-scanner/" rel="noreferrer">RIPS</a> and as of now this tools searches PHP code for the use of every function in this list.</p>
<p>Most of these function calls are classified as Sinks. When a tainted variable (like $_REQUEST) is passed to a sink function, then you have a vulnerability.  Programs like <a href="https://www.fortify.com/ssa-elements/threat-intelligence/rats.html" rel="noreferrer">RATS</a> and <a href="https://sourceforge.net/projects/rips-scanner/" rel="noreferrer">RIPS</a> use grep like functionality to identify all sinks in an application.  This means that programmers should take extra care when using these functions,  but if they where all banned then you wouldn't be able to get much done.  </p>
<p><strong>"<em>With great power comes great responsibility.</em>"</strong></p>
<p>--Stan Lee </p>
<h3>Command Execution</h3>
<pre class="lang-none prettyprint prettyprinted" style=""><code><span class="pln">exec           - Returns last line of commands output
passthru       - Passes commands output directly to the browser
system         - Passes commands output directly to the browser and returns last line
shell_exec     - Returns commands output
`` (backticks) - Same as shell_exec()
popen          - Opens read or write pipe to process of a command
proc_open      - Similar to popen() but greater degree of control
pcntl_exec     - Executes a program</span></code></pre>
<h3>PHP Code Execution</h3>
<p>Apart from <code>eval</code> there are other ways to execute PHP code: <code>include</code>/<code>require</code> can be used for remote code execution in the form of <a href="http://www.exploit-db.com/exploits/12510/" rel="noreferrer">Local File Include</a> and <a href="http://en.wikipedia.org/wiki/Remote_File_Inclusion" rel="noreferrer">Remote File Include</a> vulnerabilities.</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="kwd">eval</span><span class="pun">()</span><span class="pln">
</span><span class="kwd">assert</span><span class="pun">()</span><span class="pln">  </span><span class="pun">-</span><span class="pln"> identical to </span><span class="kwd">eval</span><span class="pun">()</span><span class="pln">
preg_replace</span><span class="pun">(</span><span class="str">'/.*/e'</span><span class="pun">,...)</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="pun">/</span><span class="pln">e does an </span><span class="kwd">eval</span><span class="pun">()</span><span class="pln"> on the match
create_function</span><span class="pun">()</span><span class="pln">
include</span><span class="pun">()</span><span class="pln">
include_once</span><span class="pun">()</span><span class="pln">
</span><span class="kwd">require</span><span class="pun">()</span><span class="pln">
require_once</span><span class="pun">()</span><span class="pln">
$_GET</span><span class="pun">[</span><span class="str">'func_name'</span><span class="pun">](</span><span class="pln">$_GET</span><span class="pun">[</span><span class="str">'argument'</span><span class="pun">]);</span><span class="pln">
$func </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ReflectionFunction</span><span class="pun">(</span><span class="pln">$_GET</span><span class="pun">[</span><span class="str">'func_name'</span><span class="pun">]);</span><span class="pln"> $func</span><span class="pun">-&gt;</span><span class="pln">invoke</span><span class="pun">();</span><span class="pln"> </span><span class="kwd">or</span><span class="pln"> $func</span><span class="pun">-&gt;</span><span class="pln">invokeArgs</span><span class="pun">(</span><span class="pln">array</span><span class="pun">());</span></code></pre>
<h3>List of functions which accept callbacks</h3>
<p>These functions accept a string parameter which could be used to call a function of the attacker's choice.  Depending on the function the attacker may or may not have the ability to pass a parameter.  In that case an <code>Information Disclosure</code> function like <code>phpinfo()</code> could be used.</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="typ">Function</span><span class="pln">                     </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="typ">Position</span><span class="pln"> of callback arguments
</span><span class="str">'ob_start'</span><span class="pln">                   </span><span class="pun">=&gt;</span><span class="pln">  </span><span class="lit">0</span><span class="pun">,</span><span class="pln">
</span><span class="str">'array_diff_uassoc'</span><span class="pln">          </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">,</span><span class="pln">
</span><span class="str">'array_diff_ukey'</span><span class="pln">            </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">,</span><span class="pln">
</span><span class="str">'array_filter'</span><span class="pln">               </span><span class="pun">=&gt;</span><span class="pln">  </span><span class="lit">1</span><span class="pun">,</span><span class="pln">
</span><span class="str">'array_intersect_uassoc'</span><span class="pln">     </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">,</span><span class="pln">
</span><span class="str">'array_intersect_ukey'</span><span class="pln">       </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">,</span><span class="pln">
</span><span class="str">'array_map'</span><span class="pln">                  </span><span class="pun">=&gt;</span><span class="pln">  </span><span class="lit">0</span><span class="pun">,</span><span class="pln">
</span><span class="str">'array_reduce'</span><span class="pln">               </span><span class="pun">=&gt;</span><span class="pln">  </span><span class="lit">1</span><span class="pun">,</span><span class="pln">
</span><span class="str">'array_udiff_assoc'</span><span class="pln">          </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">,</span><span class="pln">
</span><span class="str">'array_udiff_uassoc'</span><span class="pln">         </span><span class="pun">=&gt;</span><span class="pln"> array</span><span class="pun">(-</span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="pun">-</span><span class="lit">2</span><span class="pun">),</span><span class="pln">
</span><span class="str">'array_udiff'</span><span class="pln">                </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">,</span><span class="pln">
</span><span class="str">'array_uintersect_assoc'</span><span class="pln">     </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">,</span><span class="pln">
</span><span class="str">'array_uintersect_uassoc'</span><span class="pln">    </span><span class="pun">=&gt;</span><span class="pln"> array</span><span class="pun">(-</span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="pun">-</span><span class="lit">2</span><span class="pun">),</span><span class="pln">
</span><span class="str">'array_uintersect'</span><span class="pln">           </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">,</span><span class="pln">
</span><span class="str">'array_walk_recursive'</span><span class="pln">       </span><span class="pun">=&gt;</span><span class="pln">  </span><span class="lit">1</span><span class="pun">,</span><span class="pln">
</span><span class="str">'array_walk'</span><span class="pln">                 </span><span class="pun">=&gt;</span><span class="pln">  </span><span class="lit">1</span><span class="pun">,</span><span class="pln">
</span><span class="str">'assert_options'</span><span class="pln">             </span><span class="pun">=&gt;</span><span class="pln">  </span><span class="lit">1</span><span class="pun">,</span><span class="pln">
</span><span class="str">'uasort'</span><span class="pln">                     </span><span class="pun">=&gt;</span><span class="pln">  </span><span class="lit">1</span><span class="pun">,</span><span class="pln">
</span><span class="str">'uksort'</span><span class="pln">                     </span><span class="pun">=&gt;</span><span class="pln">  </span><span class="lit">1</span><span class="pun">,</span><span class="pln">
</span><span class="str">'usort'</span><span class="pln">                      </span><span class="pun">=&gt;</span><span class="pln">  </span><span class="lit">1</span><span class="pun">,</span><span class="pln">
</span><span class="str">'preg_replace_callback'</span><span class="pln">      </span><span class="pun">=&gt;</span><span class="pln">  </span><span class="lit">1</span><span class="pun">,</span><span class="pln">
</span><span class="str">'spl_autoload_register'</span><span class="pln">      </span><span class="pun">=&gt;</span><span class="pln">  </span><span class="lit">0</span><span class="pun">,</span><span class="pln">
</span><span class="str">'iterator_apply'</span><span class="pln">             </span><span class="pun">=&gt;</span><span class="pln">  </span><span class="lit">1</span><span class="pun">,</span><span class="pln">
</span><span class="str">'call_user_func'</span><span class="pln">             </span><span class="pun">=&gt;</span><span class="pln">  </span><span class="lit">0</span><span class="pun">,</span><span class="pln">
</span><span class="str">'call_user_func_array'</span><span class="pln">       </span><span class="pun">=&gt;</span><span class="pln">  </span><span class="lit">0</span><span class="pun">,</span><span class="pln">
</span><span class="str">'register_shutdown_function'</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln">  </span><span class="lit">0</span><span class="pun">,</span><span class="pln">
</span><span class="str">'register_tick_function'</span><span class="pln">     </span><span class="pun">=&gt;</span><span class="pln">  </span><span class="lit">0</span><span class="pun">,</span><span class="pln">
</span><span class="str">'set_error_handler'</span><span class="pln">          </span><span class="pun">=&gt;</span><span class="pln">  </span><span class="lit">0</span><span class="pun">,</span><span class="pln">
</span><span class="str">'set_exception_handler'</span><span class="pln">      </span><span class="pun">=&gt;</span><span class="pln">  </span><span class="lit">0</span><span class="pun">,</span><span class="pln">
</span><span class="str">'session_set_save_handler'</span><span class="pln">   </span><span class="pun">=&gt;</span><span class="pln"> array</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">,</span><span class="pln"> </span><span class="lit">3</span><span class="pun">,</span><span class="pln"> </span><span class="lit">4</span><span class="pun">,</span><span class="pln"> </span><span class="lit">5</span><span class="pun">),</span><span class="pln">
</span><span class="str">'sqlite_create_aggregate'</span><span class="pln">    </span><span class="pun">=&gt;</span><span class="pln"> array</span><span class="pun">(</span><span class="lit">2</span><span class="pun">,</span><span class="pln"> </span><span class="lit">3</span><span class="pun">),</span><span class="pln">
</span><span class="str">'sqlite_create_function'</span><span class="pln">     </span><span class="pun">=&gt;</span><span class="pln">  </span><span class="lit">2</span><span class="pun">,</span></code></pre>
<h3>Information Disclosure</h3>
<p>Most of these function calls are not sinks.   But rather it maybe a vulnerability if any of the data returned is viewable to an attacker.  If an attacker can see <code>phpinfo()</code> it is definitely a vulnerability. </p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">phpinfo
posix_mkfifo
posix_getlogin
posix_ttyname
getenv
get_current_user
proc_get_status
get_cfg_var
disk_free_space
disk_total_space
diskfreespace
getcwd
getlastmo
getmygid
getmyinode
getmypid
getmyuid</span></code></pre>
<h3>Other</h3>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">extract </span><span class="pun">-</span><span class="pln"> </span><span class="typ">Opens</span><span class="pln"> the door </span><span class="kwd">for</span><span class="pln"> register_globals attacks </span><span class="pun">(</span><span class="pln">see study </span><span class="kwd">in</span><span class="pln"> scarlet</span><span class="pun">).</span><span class="pln">
parse_str </span><span class="pun">-</span><span class="pln">  works like extract </span><span class="kwd">if</span><span class="pln"> only one argument </span><span class="kwd">is</span><span class="pln"> given</span><span class="pun">.</span><span class="pln">  
putenv
ini_set
mail </span><span class="pun">-</span><span class="pln"> has CRLF injection </span><span class="kwd">in</span><span class="pln"> the </span><span class="lit">3rd</span><span class="pln"> parameter</span><span class="pun">,</span><span class="pln"> opens the door </span><span class="kwd">for</span><span class="pln"> spam</span><span class="pun">.</span><span class="pln"> 
header </span><span class="pun">-</span><span class="pln"> on old systems CRLF injection could be used </span><span class="kwd">for</span><span class="pln"> xss </span><span class="kwd">or</span><span class="pln"> other purposes</span><span class="pun">,</span><span class="pln"> now it </span><span class="kwd">is</span><span class="pln"> still a problem </span><span class="kwd">if</span><span class="pln"> they </span><span class="kwd">do</span><span class="pln"> a header</span><span class="pun">(</span><span class="str">"location: ..."</span><span class="pun">);</span><span class="pln"> </span><span class="kwd">and</span><span class="pln"> they </span><span class="kwd">do</span><span class="pln"> </span><span class="kwd">not</span><span class="pln"> </span><span class="kwd">die</span><span class="pun">();.</span><span class="pln"> </span><span class="typ">The</span><span class="pln"> script keeps executing after a call to header</span><span class="pun">(),</span><span class="pln"> </span><span class="kwd">and</span><span class="pln"> will still </span><span class="kwd">print</span><span class="pln"> output normally</span><span class="pun">.</span><span class="pln"> </span><span class="typ">This</span><span class="pln"> </span><span class="kwd">is</span><span class="pln"> nasty </span><span class="kwd">if</span><span class="pln"> you are trying to protect an administrative area</span><span class="pun">.</span><span class="pln"> 
proc_nice
proc_terminate
proc_close
pfsockopen
fsockopen
apache_child_terminate
posix_kill
posix_mkfifo
posix_setpgid
posix_setsid
posix_setuid</span></code></pre>
<h3>Filesystem Functions</h3>
<p>According to RATS all <a href="http://us.php.net/manual/en/ref.filesystem.php" rel="noreferrer">filesystem functions</a> in php are nasty. Some of these don't seem very useful to the attacker. Others are more useful than you might think. For instance if <code>allow_url_fopen=On</code> then a url can be used as a file path, so a call to <code>copy($_GET['s'], $_GET['d']);</code> can be used to upload a PHP script anywhere on the system. 
Also if a site is vulnerable to a request send via GET everyone of those file system functions can be abused to channel and attack to another host through your server.</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="com">// open filesystem handler</span><span class="pln">
fopen
tmpfile
bzopen
gzopen
</span><span class="typ">SplFileObject</span><span class="pun">-&gt;</span><span class="pln">__construct
</span><span class="com">// write to filesystem (partially in combination with reading)</span><span class="pln">
chgrp
chmod
chown
copy
file_put_contents
lchgrp
lchown
link
mkdir
move_uploaded_file
rename
rmdir
symlink
tempnam
touch
unlink
imagepng   </span><span class="pun">-</span><span class="pln"> </span><span class="lit">2nd</span><span class="pln"> parameter </span><span class="kwd">is</span><span class="pln"> a path</span><span class="pun">.</span><span class="pln">
imagewbmp  </span><span class="pun">-</span><span class="pln"> </span><span class="lit">2nd</span><span class="pln"> parameter </span><span class="kwd">is</span><span class="pln"> a path</span><span class="pun">.</span><span class="pln"> 
image2wbmp </span><span class="pun">-</span><span class="pln"> </span><span class="lit">2nd</span><span class="pln"> parameter </span><span class="kwd">is</span><span class="pln"> a path</span><span class="pun">.</span><span class="pln"> 
imagejpeg  </span><span class="pun">-</span><span class="pln"> </span><span class="lit">2nd</span><span class="pln"> parameter </span><span class="kwd">is</span><span class="pln"> a path</span><span class="pun">.</span><span class="pln">
imagexbm   </span><span class="pun">-</span><span class="pln"> </span><span class="lit">2nd</span><span class="pln"> parameter </span><span class="kwd">is</span><span class="pln"> a path</span><span class="pun">.</span><span class="pln">
imagegif   </span><span class="pun">-</span><span class="pln"> </span><span class="lit">2nd</span><span class="pln"> parameter </span><span class="kwd">is</span><span class="pln"> a path</span><span class="pun">.</span><span class="pln">
imagegd    </span><span class="pun">-</span><span class="pln"> </span><span class="lit">2nd</span><span class="pln"> parameter </span><span class="kwd">is</span><span class="pln"> a path</span><span class="pun">.</span><span class="pln">
imagegd2   </span><span class="pun">-</span><span class="pln"> </span><span class="lit">2nd</span><span class="pln"> parameter </span><span class="kwd">is</span><span class="pln"> a path</span><span class="pun">.</span><span class="pln">
iptcembed
ftp_get
ftp_nb_get
</span><span class="com">// read from filesystem</span><span class="pln">
file_exists
file_get_contents
file
fileatime
filectime
filegroup
fileinode
filemtime
fileowner
fileperms
filesize
filetype
glob
is_dir
is_executable
is_file
is_link
is_readable
is_uploaded_file
is_writable
is_writeable
linkinfo
lstat
parse_ini_file
pathinfo
readfile
readlink
realpath
stat
gzfile
readgzfile
getimagesize
imagecreatefromgif
imagecreatefromjpeg
imagecreatefrompng
imagecreatefromwbmp
imagecreatefromxbm
imagecreatefromxpm
ftp_put
ftp_nb_put
exif_read_data
read_exif_data
exif_thumbnail
exif_imagetype
hash_file
hash_hmac_file
hash_update_file
md5_file
sha1_file
highlight_file
show_source
php_strip_whitespace
get_meta_tags</span></code></pre>
</div></text><author><a href="/users/183528">Rook</a></author><comments><comment><text><span class="comment-copy">Functions like popen are required for tools like pear/pecl to work. Keep that in mind.</span></text><author><a class="comment-user" href="/users/85616/the-pixel-developer" title="8,616 reputation">The Pixel Developer</a></author></comment><comment><text><span class="comment-copy">@nikic good call,  I know this list of sinks is incomplete.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">@Rook: Are you okay with other people extending this list?</span></text><author><a class="comment-user" href="/users/385378/nikic" title="70,498 reputation">NikiC</a></author></comment><comment><text><span class="comment-copy">@nikic yes,  totally.  But I would like to review the changes,  so leave a comment,  and/or  give details about the function.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">if you are considering create_function as harmful, think also about anonymous functions in php 5.3</span></text><author><a class="comment-user" href="/users/129289/ts" title="4,698 reputation">ts.</a></author></comment><comment><text><span class="comment-copy">@ts I don't think this is exploitable because you cannot pass an object or a anonymous function as a taint ($_REQUEST[]) , thus preg_replace_callback() is not really a sink. However, variable functions are $_REQUEST['func_name']($_REQUEST['param']), which could be used to call exec('cat /etc/passwd').  create_function() accepts 2 strings,  and you can pass strings and arrays as <code>$_REQUEST[]</code> variables.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">@whatnick Actually I don't see an appreciable difference between PHP and other web application languages.  At the end of the day programmers need the ability to <code>eval()</code> code, to execute system commands,  access a database, and read/write to files.  This code can be influenced by an attacker,  and that is a vulnerability.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">So many functions banned! Are you the host of my website by any chance?</span></text><author><a class="comment-user" href="/users/451672/andrew-dunn" title="12,622 reputation">Andrew Dunn</a></author></comment><comment><text><span class="comment-copy">@Andrew Dunn  haha,  no.  If you banned all of these functions than no PHP application would work.  Especially include(), require(), and the file system functions.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">@Rook : my thoughts exactly but these are for potential problems, not definite ones. If used correctly, none of these pose an immediate threat; but if they can be avoided they should be.</span></text><author><a class="comment-user" href="/users/446435/geekster" title="317 reputation">Geekster</a></author></comment><comment><text><span class="comment-copy">@nikic  Oah yes thank you,  you should create a new section just for callbacks. (or i will)</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">Added a list (though there probably are more.) I used a format with I need for my own purposes and that is most convenient if you want to use this list to really do something useful. But feel free to adjust it to a more readable format ;)</span></text><author><a class="comment-user" href="/users/385378/nikic" title="70,498 reputation">NikiC</a></author></comment><comment><text><span class="comment-copy">what's wrong with dirname()?</span></text><author><a class="comment-user" href="/users/474192/mike-c" title="1,238 reputation">Mike C</a></author></comment><comment><text><span class="comment-copy">@Mike C: It is simply a list with filesystem functions. There probably is nothing wrong if half of them ;) @Rook: Should the non-harmful functions like dirname or basename be removed? Or better keep them all instead of removing something potentially dangerous?</span></text><author><a class="comment-user" href="/users/385378/nikic" title="70,498 reputation">NikiC</a></author></comment><comment><text><span class="comment-copy">@nikic  and @Mike C You are right about the file system functions,  they need to be addressed and any help will be welcome.  And @nikic fantastic work,  I gave you a couple of +1's for that, Enjoy :)</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">dirname and basename are the only ones that stand out to me.</span></text><author><a class="comment-user" href="/users/474192/mike-c" title="1,238 reputation">Mike C</a></author></comment><comment><text><span class="comment-copy">@Rook: Thanks :) But why have you removed all the <code>f*</code> functions? I think that especially those can be misused.</span></text><author><a class="comment-user" href="/users/385378/nikic" title="70,498 reputation">NikiC</a></author></comment><comment><text><span class="comment-copy">Some others to watch for: preg_filter (can be used like preg_match), curl_* (some of the options allow writing to files, for example), getcwd, getlastmod, getmygid, getmyinode, getmypid, getmyuid (all information disclosure), imagepng, imagegif (etc. allow writing to filesystem), ...</span></text><author><a class="comment-user" href="/users/474192/mike-c" title="1,238 reputation">Mike C</a></author></comment><comment><text><span class="comment-copy">@nikic the f* functions that i removed accept a file handle and there for cannot be influenced directly by an attacker.  However,  the functions that create the handle such as <code>fopen()</code> can be,  and they remain.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">Imho <code>preg_match</code> with <code>e</code> is no harm. Manual says "Only preg_replace() uses this modifier; it is ignored by other PCRE functions."</span></text><author><a class="comment-user" href="/users/385378/nikic" title="70,498 reputation">NikiC</a></author></comment><comment><text><span class="comment-copy">@nikic i think your right.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">@nikic I have no idea how "obfuscating a function call" applies to taint/sink functions.  I have edited the post.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">I changed the order, because neither variable variables nor Reflection can be used to execute arbitrary PHP code. They may be used to execute arbitrary functions. And that is more related to callbacks (which is calling functions) then to evaling PHP ;)</span></text><author><a class="comment-user" href="/users/385378/nikic" title="70,498 reputation">NikiC</a></author></comment><comment><text><span class="comment-copy">Furthermore, why have you added "must first set assert_options(ASSERT_QUIET_EVAL, 1);"? I don't see how this relates to executing code over <code>assert</code>. This only disables error display while in an assert.</span></text><author><a class="comment-user" href="/users/385378/nikic" title="70,498 reputation">NikiC</a></author></comment><comment><text><span class="comment-copy">@nikic  If you can control the function name, then the attacker can specify any php function eval() or system().   If you can control the function name passed to the reflection class then you can also obtain remote php code execution via eval.   In terms of ASSERT_QUIET_EVAL i will have to do some testing.  Again I must stress that obfuscation has no relation to sink functions.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">@nikic assert is identical to eval,  the assert_options() are meaningless.  the docs for this function are terrible.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">@Rook: Yeah, I do know it's the same, I've added the function ^^. I simply was surprised that you said that you need <code>ASSERT_QUIET_EVAL</code> for that ;) -- Even though I think that variable functions and reflection have more in common with callbacks (as both execute functions, not code), it's your list, so if you think that the current version makes more sense... sorry for rearranging without asking.</span></text><author><a class="comment-user" href="/users/385378/nikic" title="70,498 reputation">NikiC</a></author></comment><comment><text><span class="comment-copy">Rook, this is an incredible answer. Can I suggest though that you add to the very top of it in super bold something to the effect of: "this is not a list of 'banned' functions that you should never use, it is a list of functions that you should be very careful with when passing in user input from something like $_REQUEST"? I think it would clear that up a bit.</span></text><author><a class="comment-user" href="/users/15004/shabbyrobe" title="5,897 reputation">Shabbyrobe</a></author></comment><comment><text><span class="comment-copy">@Shabbyrobe Thanks.  A lot of them are banned functions by hosting companies.  But if you banned them all then you can't get anything done.  I think my comment about sinks addresses this concern,  at least in my mind.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">Thanks Rook, it's much clearer now.</span></text><author><a class="comment-user" href="/users/15004/shabbyrobe" title="5,897 reputation">Shabbyrobe</a></author></comment><comment><text><span class="comment-copy">@Rook: Are you okay with the filesystem functions being split into r, w, rw? Imho that helps to classify how dangerous they are.</span></text><author><a class="comment-user" href="/users/385378/nikic" title="70,498 reputation">NikiC</a></author></comment><comment><text><span class="comment-copy">@nikic  That is a great idea.   Probably make an other category as well.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">@Rook: I split up into filesystem handler (for f* functions), writing and reading. I didn't create an extra read+write group, because it's sometimes hard to distinguish (as most functions will first read something before writing). Hopefully I didn't make a mistake in classifying.</span></text><author><a class="comment-user" href="/users/385378/nikic" title="70,498 reputation">NikiC</a></author></comment><comment><text><span class="comment-copy">@nikic damn your on top of this.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">a great answer !! indeed</span></text><author><a class="comment-user" href="/users/787425/justin-dominic" title="681 reputation">Justin Dominic</a></author></comment><comment><text><span class="comment-copy">updated now dead link to a study in scarlet</span></text><author><a class="comment-user" href="/users/1820/cheekysoft" title="23,093 reputation">Cheekysoft</a></author></comment><comment><text><span class="comment-copy">Hey thanks for the exhaustive list!</span></text><author><a class="comment-user" href="/users/400387/chris-l" title="229 reputation">Chris L.</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>You'd have to scan for include($tmp) and require(HTTP_REFERER) and *_once as well. If an exploit script can write to a temporary file, it could just include that later. Basically  a two-step eval.  </p>
<p>And it's even possible to hide remote code with workarounds like:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln"> include</span><span class="pun">(</span><span class="str">"data:text/plain;base64,$_GET[code]"</span><span class="pun">);</span></code></pre>
<p>Also, if your webserver has already been compromised you will not always see unencoded evil. Often the exploit shell is gzip-encoded. Think of <code>include("zlib:script2.png.gz");</code> No eval here, still same effect.</p>
</div></text><author><a href="/users/345031">mario</a></author><comments><comment><text><span class="comment-copy">Depending on how PHP is configured, include can actually include code from arbitrary URLs. Something like    include "<a href="http://example.com/code.phps%22" rel="nofollow noreferrer">example.com/code.phps"</a>;;  I saw a compromised website that had been broken into using a combination of that feature and register_globals.</span></text><author><a class="comment-user" href="/users/109400/blackaura" title="2,715 reputation">BlackAura</a></author></comment><comment><text><span class="comment-copy">@BlackAura how did regiser_globals fit in to the attack? Is it something that could have been pulled off just as easily by using <code>$_GET[xyz]</code> as opposed to <code>$xyz</code>? Or was there something deeper to it?</span></text><author><a class="comment-user owner" href="/users/86060/tylerl" title="20,317 reputation">tylerl</a></author></comment><comment><text><span class="comment-copy">I'm not quite sure why it was done this way, but the website kept doing things like this: include($prefix . '/filename.php'); I think the idea was that you could move the core code outside the web root, by setting the $prefix variable in the config file. If the attacker sets that value to something like "<a href="http://example.com/code.phps?%22" rel="nofollow noreferrer">example.com/code.phps?"</a>;, PHP will include that remote file instead.  Near as I can tell, a 'bot actually managed to break in using a generic exploit. Apparently, a lot of old PHP code made that mistake.  Basically, NEVER let any user-submitted value anywhere near an include statement.</span></text><author><a class="comment-user" href="/users/109400/blackaura" title="2,715 reputation">BlackAura</a></author></comment><comment><text><span class="comment-copy">I think you can generalize this to includes that contain a ":" in the filename... except that the filename could be a variable, making it difficult to <code>grep</code> for. PHP -- what a disaster.</span></text><author><a class="comment-user owner" href="/users/86060/tylerl" title="20,317 reputation">tylerl</a></author></comment><comment><text><span class="comment-copy">+1, nice to know.. however is it possible to exploit if allow_url_include is set to off? php version is 5.2.13</span></text><author><a class="comment-user" href="/users/280937/pinaki" title="3,556 reputation">pinaki</a></author></comment><comment><text><span class="comment-copy"><code>include</code> does not require parentheses; <code>include "…"</code> suffices.</span></text><author><a class="comment-user" href="/users/53114/gumbo" title="424,771 reputation">Gumbo</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>This is not an answer per se, but here's something interesting:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">$y </span><span class="pun">=</span><span class="pln"> str_replace</span><span class="pun">(</span><span class="str">'z'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'e'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'zxzc'</span><span class="pun">);</span><span class="pln">
$y</span><span class="pun">(</span><span class="str">"malicious code"</span><span class="pun">);</span></code></pre>
<p>In the same spirit, <code>call_user_func_array()</code> can be used to execute obfuscated functions.</p>
</div></text><author><a href="/users/414064">Aillyn</a></author><comments><comment><text><span class="comment-copy">And there is no way to find this without executing the code :( Static analysis won't help here.</span></text><author><a class="comment-user" href="/users/385378/nikic" title="70,498 reputation">NikiC</a></author></comment><comment><text><span class="comment-copy">@tylerl: ...or any other language?</span></text><author><a class="comment-user" href="/users/78928/dr-hannibal-lecter" title="5,294 reputation">dr Hannibal Lecter</a></author></comment><comment><text><span class="comment-copy">@dr Hannibal Lector: even compiled languages?</span></text><author><a class="comment-user" href="/users/216292/wallacoloo" title="3,541 reputation">Wallacoloo</a></author></comment><comment><text><span class="comment-copy">@Wallacoloo: It's even easier to hide a compiled language CGI backdoor as there are no easy text strings to grep for in a binary.</span></text><author><a class="comment-user" href="/users/118153/iiridayn" title="1,051 reputation">Iiridayn</a></author></comment><comment><text><span class="comment-copy">Nice.. I tried with $f = 'ev'.'al'; $f($_POST['c']); but did not work since 'eval' is not a function but a special construct like include, echo, etc. -&gt; interesting that exec() is not and so this would work..</span></text><author><a class="comment-user" href="/users/148845/redshadow" title="4,662 reputation">redShadow</a></author></comment><comment><text><span class="comment-copy">+1 for cleverness</span></text><author><a class="comment-user" href="/users/57068/jens-roland" title="22,312 reputation">Jens Roland</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I'm surprised no one has mentioned <code>echo</code> and <code>print</code> as points of security exploitation.</p>
<p><a href="http://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29" rel="nofollow">Cross-Site Scripting (XSS)</a> is a serious security exploit, because it's even more common than server-side code execution exploits.</p>
</div></text><author><a href="/posts/3806036/revisions" id="history-3806036" title="show revision history for this post">
        Bill Karwin
        </a></author><comments><comment><text><span class="comment-copy">That would be a vector that affects the client, not the server, technically.</span></text><author><a class="comment-user" href="/users/783103/damianb" title="1,042 reputation">damianb</a></author></comment><comment><text><span class="comment-copy">@damianb: If a site uses Ajax, and I can cause arbitrary javascript to be evaluated in any user's session, I could cause a lot of mischief on the server.</span></text><author><a class="comment-user" href="/users/20860/bill-karwin" title="305,545 reputation">Bill Karwin</a></author></comment><comment><text><span class="comment-copy">"on the server" ....to clients connected; it does not affect the server backend. That falls under client-side exploits, such as cursorjacking, CSRF, header injection, and so on.  It's dangerous, yes, but it falls under a different classification entirely.</span></text><author><a class="comment-user" href="/users/783103/damianb" title="1,042 reputation">damianb</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>i'd particularly want to add unserialize() to this list. It has had a long history of various vulnerabilities including arbitrary code execution, denial of service and memory information leakage. It should never be called on user-supplied data. Many of these vuls have been fixed in releases over the last dew years, but it still retains a couple of nasty vuls at the current time of writing.</p>
<p>For other information about dodgy php functions/usage look around the <a href="http://www.hardened-php.net/" rel="nofollow noreferrer">Hardened PHP Project</a> and its advisories. Also the recent <a href="http://php-security.org/" rel="nofollow noreferrer">Month of PHP Security</a> and 2007's <a href="http://php-security.org/MOPB/" rel="nofollow noreferrer">Month of PHP Bugs</a> projects </p>
<p>Also note that, by design, unserializing an object will cause the constructor and destructor functions to execute; another reason not to call it on user-supplied data.</p>
</div></text><author><a href="/users/1820">Cheekysoft</a></author><comments><comment><text><span class="comment-copy">I'm interested to hear more about the unserialize issue. Is this just a bug in the implementation, or is it a flaw in the design (i.e. can't be fixed)? Can you point me to more information about that issue in particular?</span></text><author><a class="comment-user owner" href="/users/86060/tylerl" title="20,317 reputation">tylerl</a></author></comment><comment><text><span class="comment-copy">For the arbitrary code execution and memory information leakage see Stefan's advisory at <a href="http://php-security.org/2010/06/25/mops-2010-061-php-splobjectstorage-deserialization-use-after-free-vulnerability/" rel="nofollow noreferrer">php-security.org/2010/06/25/…</a></span></text><author><a class="comment-user" href="/users/1820/cheekysoft" title="23,093 reputation">Cheekysoft</a></author></comment><comment><text><span class="comment-copy">The recent 5.2.14 release fixes yet another arbitrary code execution vulnerability in unserialize() <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2225" rel="nofollow noreferrer">cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2225</a> <a href="http://php.net/ChangeLog-5.php#5.2.14" rel="nofollow noreferrer">php.net/ChangeLog-5.php#5.2.14</a></span></text><author><a class="comment-user" href="/users/1820/cheekysoft" title="23,093 reputation">Cheekysoft</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>My VPS is set to disable the following functions:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pln">root@vps </span><span class="pun">[~]#</span><span class="pln"> grep disable_functions </span><span class="pun">/</span><span class="pln">usr</span><span class="pun">/</span><span class="kwd">local</span><span class="pun">/</span><span class="pln">lib</span><span class="pun">/</span><span class="pln">php</span><span class="pun">.</span><span class="pln">ini
disable_functions </span><span class="pun">=</span><span class="pln"> dl</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">exec</span><span class="pun">,</span><span class="pln"> shell_exec</span><span class="pun">,</span><span class="pln"> system</span><span class="pun">,</span><span class="pln"> passthru</span><span class="pun">,</span><span class="pln"> popen</span><span class="pun">,</span><span class="pln"> pclose</span><span class="pun">,</span><span class="pln"> proc_open</span><span class="pun">,</span><span class="pln"> proc_nice</span><span class="pun">,</span><span class="pln"> proc_terminate</span><span class="pun">,</span><span class="pln"> proc_get_status</span><span class="pun">,</span><span class="pln"> proc_close</span><span class="pun">,</span><span class="pln"> pfsockopen</span><span class="pun">,</span><span class="pln"> leak</span><span class="pun">,</span><span class="pln"> apache_child_terminate</span><span class="pun">,</span><span class="pln"> posix_kill</span><span class="pun">,</span><span class="pln"> posix_mkfifo</span><span class="pun">,</span><span class="pln"> posix_setpgid</span><span class="pun">,</span><span class="pln"> posix_setsid</span><span class="pun">,</span><span class="pln"> posix_setuid</span></code></pre>
<p>PHP has enough potentially destructible functions that your list might be too big to grep for. For example, PHP has chmod and chown, which could be used to simply deactivate a website.</p>
<p>EDIT: Perhaps you may want to build a bash script that searches for a file for an array of functions grouped by danger (functions that are bad, functions that are worse, functions that should never be used), and then calculate the relativity of danger that the file imposes into a percentage. Then output this to a tree of the directory with the percentages tagged next to each file, if greater than a threshold of say, 30% danger.</p>
</div></text><author><a href="/users/372352">Josh</a></author><comments><comment><text><span class="comment-copy">You can set the "--disable-posix" flag at compile time and remove all those posix functions from disable_functions.</span></text><author><a class="comment-user" href="/users/85616/the-pixel-developer" title="8,616 reputation">The Pixel Developer</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Also be aware of the class of "interruption vulnerabilities" that allow arbitrary memory locations to be read and written! </p>
<p>These affect functions such as trim(), rtrim(), ltrim(), explode(), strchr(), strstr(), substr(), chunk_split(), strtok(), addcslashes(), str_repeat() and more. This is largely, but not exclusively, due to the call-time pass-by-reference feature of the language that has been deprecated for 10 years but not disabled.</p>
<p>Fore more info, see Stefan Esser’s talk about interruption vulnerabilities and other lower-level PHP issues at BlackHat USA 2009 <a href="http://www.blackhat.com/presentations/bh-usa-09/ESSER/BHUSA09-Esser-PostExploitationPHP-SLIDES.pdf" rel="nofollow noreferrer">Slides</a> <a href="http://www.blackhat.com/presentations/bh-usa-09/ESSER/BHUSA09-Esser-PostExploitationPHP-PAPER.pdf" rel="nofollow noreferrer">Paper</a></p>
<p>This paper/presentation also shows how dl() can be used to execute arbitrary system code.</p>
</div></text><author><a href="/users/1820">Cheekysoft</a></author><comments><comment><text><span class="comment-copy">You should check my answer.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment><comment><text><span class="comment-copy">And it's a very nice answer too. +1 to you. An excellent summary.</span></text><author><a class="comment-user" href="/users/1820/cheekysoft" title="23,093 reputation">Cheekysoft</a></author></comment><comment><text><span class="comment-copy">Ouch. Well, I really thought that PHP was somewhat secure before I had a look at those slides...</span></text><author><a class="comment-user" href="/users/385378/nikic" title="70,498 reputation">NikiC</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Plattform-specific, but also theoretical exec vectors:</p>
<ul>
<li>dotnet_load()</li>
<li>new COM("WScript.Shell")</li>
<li>new Java("java.lang.Runtime")</li>
<li>event_new() - very eventually</li>
</ul>
<p>And there are many more disguising methods:</p>
<ul>
<li>proc_open is an alias for popen</li>
<li>call_user_func_array("exE".chr(99), array("/usr/bin/damage", "--all"));</li>
<li>file_put_contents("/cgi-bin/nextinvocation.cgi") &amp;&amp; chmod(...)</li>
<li>PharData::setDefaultStub - some more work to examine code in .phar files</li>
<li>runkit_function_rename("exec", "innocent_name") or APD rename_function</li>
</ul>
</div></text><author><a href="/users/345031">mario</a></author><comments><comment><text><span class="comment-copy">also call_user_func() in that second list</span></text><author><a class="comment-user" href="/users/1820/cheekysoft" title="23,093 reputation">Cheekysoft</a></author></comment><comment><text><span class="comment-copy">One answer is sufficient ;) You should just add it on to your previous one.</span></text><author><a class="comment-user" href="/users/126562/justin-johnson" title="23,202 reputation">Justin Johnson</a></author></comment><comment><text><span class="comment-copy">interesting list.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Apart from the <code>eval</code> language construct there is another function which allows arbitrary code execution: <a href="http://php.net/assert" rel="nofollow noreferrer"><code>assert</code></a></p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="kwd">assert</span><span class="pun">(</span><span class="str">'ex'</span><span class="pln"> </span><span class="pun">.</span><span class="pln"> </span><span class="str">'ec("kill --bill")'</span><span class="pun">);</span></code></pre>
</div></text><author><a href="/posts/3737414/revisions" id="history-3737414" title="show revision history for this post">
        NikiC
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>One source of interesting exploits has not been mentioned. PHP allows strings to have <code>0x00</code> bytes in them. Underlying (libc) functions treat this as the end of a string.</p>
<p>This allows for situations where (poorly implemented) sanity-checking in PHP can be fooled, e.g. in a situation like:</p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="com">/// note: proof of principle code, don't use</span><span class="pln">
$include </span><span class="pun">=</span><span class="pln"> $_GET</span><span class="pun">[</span><span class="str">'file'</span><span class="pun">];</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> preg_match</span><span class="pun">(</span><span class="str">"/\\.php$/"</span><span class="pun">,</span><span class="pln">$include</span><span class="pun">)</span><span class="pln"> </span><span class="pun">)</span><span class="pln"> include</span><span class="pun">(</span><span class="pln">$include</span><span class="pun">);</span></code></pre>
<p>This might include any file - not just those ending in <code>.php</code> - by calling <code>script.php?file=somefile%00.php</code></p>
<p>So any function that will not obey PHP's string length may lead to some vulnerability.</p>
</div></text><author><a href="/posts/5442372/revisions" id="history-5442372" title="show revision history for this post">
        mvds
        </a></author><comments><comment><text><span class="comment-copy">File paths with nulls won't be allowed anymore in 5.4 and latest 5.3 versions.</span></text><author><a class="comment-user" href="/users/214196/stasm" title="7,801 reputation">StasM</a></author></comment><comment><text><span class="comment-copy">@stasM That's one of the best things I've heard about PHP in a while. Thanks for sharing.</span></text><author><a class="comment-user" href="/users/511189/william" title="415 reputation">William</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>What about dangerous syntactic elements?</p>
<p>The "<a href="http://www.php.net/manual/en/language.variables.variable.php" rel="nofollow noreferrer">variable variable</a>" (<code>$$var</code>) will find a variable in the current scope by the name of $var. If used wrong, the remote user can modify or read any variable in the current scope. Basically a weaker <code>eval</code>.</p>
<p>Ex: you write some code <code>$$uservar = 1;</code>, then the remote user sets <code>$uservar</code> to "admin", causing <code>$admin</code> to be set to <code>1</code> in the current scope.</p>
</div></text><author><a href="/posts/3115698/revisions" id="history-3115698" title="show revision history for this post">
        L̲̳o̲̳̳n̲̳̳g̲̳̳p̲̳o̲̳̳k̲̳̳e̲̳̳
        </a></author><comments><comment><text><span class="comment-copy">I see what you mean, but this looks like a different class of exploit. Is there a way you can execute arbitrary PHP code with this mechanism (without using any of the above functions)? Or can it only be abused for changing variable contents? If I'm missing something, I want to get it right.</span></text><author><a class="comment-user owner" href="/users/86060/tylerl" title="20,317 reputation">tylerl</a></author></comment><comment><text><span class="comment-copy">You can also use variable functions which will be impossible to work out without evaluating the script. For example: <code>$innocentFunc = 'exec'; $innocentFunc('activate skynet');</code>.</span></text><author><a class="comment-user" href="/users/260584/erisco" title="10,123 reputation">erisco</a></author></comment><comment><text><span class="comment-copy">Also look out for reflection.</span></text><author><a class="comment-user" href="/users/260584/erisco" title="10,123 reputation">erisco</a></author></comment><comment><text><span class="comment-copy">+1 Good info, global variable manipulation can be nasty,  you should see my post.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I guess you won't be able to really find all possible exploits by parsing your source files.</p>
<ul>
<li><p>also if there are really great lists provided in here, you can miss a function which can be exploitet</p></li>
<li><p>there still could be "hidden" evil code like this</p></li>
</ul>
<blockquote>
<p>$myEvilRegex = base64_decode('Ly4qL2U=');</p>
<p>preg_replace($myEvilRegex, $_POST['code']);</p>
</blockquote>
<ul>
<li><p>you could now say, i simply extend my script to also match this</p></li>
<li><p>but then you will have that mayn "possibly evil code" which additionally is out of it's context</p></li>
<li><p>so to be (pseudo-)secure, you should really <strong>write good code</strong> and <strong>read all existing code</strong> yourself</p></li>
</ul>
</div></text><author><a href="/posts/3782031/revisions" id="history-3782031" title="show revision history for this post">
        Andreas Linden
        </a></author><comments><comment><text><span class="comment-copy">I've seen base64_decode() used for evil frequently in Wordpress-based malware.  Good addition to the list.</span></text><author><a class="comment-user" href="/users/461108/chris-allen-lane" title="3,810 reputation">Chris Allen Lane</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Backtick Operator <a href="http://www.php.net/manual/en/language.operators.execution.php" rel="nofollow noreferrer">Backtick on php manual</a></p>
</div></text><author><a href="/posts/3115580/revisions" id="history-3115580" title="show revision history for this post">
        opHASnoNAME
        </a></author><comments><comment><text><span class="comment-copy">Second to last in the first list. But thanks for the input.</span></text><author><a class="comment-user owner" href="/users/86060/tylerl" title="20,317 reputation">tylerl</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>I know <code>move_uploaded_file</code> has been mentioned, but file uploading in general is very dangerous. Just the presence of <code>$_FILES</code> should raise some concern.</p>
<p>It's quite possible to embed PHP code into any type of file. Images can be especially vulnerable with text comments. The problem is particularly troublesome if the code accepts the extension found within the <code>$_FILES</code> data as-is.</p>
<p>For example, a user could upload a valid PNG file with embedded PHP code as "foo.php". If the script is particularly naive, it may actually copy the file as "/uploads/foo.php". If the server is configured to allow script execution in user upload directories (often the case, and a terrible oversight), then you instantly can run any arbitrary PHP code. (Even if the image is saved as .png, it might be possible to get the code to execute via other security flaws.)</p>
<p>A (non-exhaustive) list of things to check on uploads:</p>
<ul>
<li>Make sure to analyze the contents to make sure the upload is the type it claims to be</li>
<li>Save the file with a known, safe file extension that will not ever be executed</li>
<li>Make sure PHP (and any other code execution) is disabled in user upload directories</li>
</ul>
</div></text><author><a href="/posts/3715941/revisions" id="history-3715941" title="show revision history for this post">
        Matthew
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Let's add <code>pcntl_signal</code> and <code>pcntl_alarm</code> to the list.</p>
<p>With the help of those functions you can work around any set_time_limit restriction created int the php.ini or in the script.</p>
<p>This script for example will run for 10 seconds despite of <code>set_time_limit(1);</code></p>
<p>(Credit goes to Sebastian Bergmanns <a href="http://twitter.com/s_bergmann/status/45265727011307520" rel="noreferrer">tweet</a> and <a href="https://gist.github.com/861356" rel="noreferrer">gist</a>: </p>
<pre class="lang-php prettyprint prettyprinted" style=""><code><span class="pun">&lt;?</span><span class="pln">php
declare</span><span class="pun">(</span><span class="pln">ticks </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span><span class="pln">

set_time_limit</span><span class="pun">(</span><span class="lit">1</span><span class="pun">);</span><span class="pln">

</span><span class="kwd">function</span><span class="pln"> foo</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(;;)</span><span class="pln"> </span><span class="pun">{}</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Invoker_TimeoutException</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">RuntimeException</span><span class="pln"> </span><span class="pun">{}</span><span class="pln">

</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Invoker</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> invoke</span><span class="pun">(</span><span class="pln">$callable</span><span class="pun">,</span><span class="pln"> $timeout</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        pcntl_signal</span><span class="pun">(</span><span class="pln">SIGALRM</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Invoker_TimeoutException</span><span class="pun">;</span><span class="pln"> </span><span class="pun">},</span><span class="pln"> TRUE</span><span class="pun">);</span><span class="pln">
        pcntl_alarm</span><span class="pun">(</span><span class="pln">$timeout</span><span class="pun">);</span><span class="pln">
        call_user_func</span><span class="pun">(</span><span class="pln">$callable</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">try</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    $invoker </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Invoker</span><span class="pun">;</span><span class="pln">
    $invoker</span><span class="pun">-&gt;</span><span class="pln">invoke</span><span class="pun">(</span><span class="str">'foo'</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Exception</span><span class="pln"> $e</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    sleep</span><span class="pun">(</span><span class="lit">10</span><span class="pun">);</span><span class="pln">
    echo </span><span class="str">"Still running despite of the timelimit"</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div></text><author><a href="/posts/5292175/revisions" id="history-5292175" title="show revision history for this post">
        edorian
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>There are loads of PHP exploits which can be disabled by settings in the PHP.ini file. Obvious example is register_globals, but depending on settings it may also be possible to include or open files from remote machines via HTTP, which can be exploited if a program uses variable filenames for any of its include() or file handling functions.</p>
<p>PHP also allows variable function calling by adding () to the end of a variable name -- eg <code>$myvariable();</code> will call the function name specified by the variable. This is exploitable; eg if an attacker can get the variable to contain the word 'eval', and can control the parameter, then he can do anything he wants, even though the program doesn't actually contain the eval() function.</p>
</div></text><author><a href="/posts/3716018/revisions" id="history-3716018" title="show revision history for this post">
        Spudley
        </a></author><comments><comment><text><span class="comment-copy">actually this doesn't work with echo and eval.</span></text><author><a class="comment-user" href="/users/619893/lawl0r" title="659 reputation">lawl0r</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>These functions can also have some nasty effects.</p>
<ul>
<li><code>str_repeat()</code></li>
<li><code>unserialize()</code></li>
<li><code>register_tick_function()</code></li>
<li><code>register_shutdown_function()</code></li>
</ul>
<p>The first two can exhaust all the available memory and the latter keep the exhaustion going...</p>
</div></text><author><a href="/posts/3746178/revisions" id="history-3746178" title="show revision history for this post">
        Alix Axel
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>There was some discussion of this on <a href="https://security.stackexchange.com/questions/1382/disable-insecure-dangerous-php-functions">security.stackexchange.com</a> recently</p>
<blockquote>
<p>functions that can be used for arbitrary code execution</p>
</blockquote>
<p>Well that reduces the scope a little - but since 'print' can be used to inject javascript (and therefore steal sessions etc) its still somewhat arbitrary.</p>
<blockquote>
<p>isn't to list functions that should be blacklisted or otherwise disallowed. Rather, I'd like to have a grep-able list</p>
</blockquote>
<p>That's a sensible approach.</p>
<p>Do consider writing your own parser though - very soon you're going to find a grep based approach getting out of control (awk would be a bit better). Pretty soon you're also going to start wishing you'd implemented a whitelist too!</p>
<p>In addition to the obvious ones, I'd recommend flagging up anything which does an include with an argument of anything other than a string literal. Watch out for __autoload() too.</p>
</div></text><author><a href="/users/223992">symcbean</a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>I fear my answer might be a bit too negative, but...</p>
<p>IMHO, every single function and method out there can be used for nefarious purposes.  Think of it as a trickle-down effect of nefariousness: a variable gets assigned to a user or remote input, the variable is used in a function, the function return value used in a class property, the class property used in a file function, and so forth.  Remember: a forged IP address or a man-in-the-middle attack can exploit your entire website.</p>
<p>Your best bet is to trace from beginning to end any possible user or remote input, starting with <code>$_SERVER</code>, <code>$_GET</code>, <code>$_POST</code>, <code>$_FILE</code>, <code>$_COOKIE</code>, <code>include(some remote file)</code> (<em>if</em> <code>allow_url_fopen</code> is on), all other functions/classes dealing with remote files, etc.  You programatically build a stack-trace profile of each user- or remote-supplied value.  This can be done programatically by getting all repeat instances of the assigned variable and functions or methods it's used in, then recursively compiling a list of all occurrences of those functions/methods, and so on.  Examine it to ensure it first goes through the proper filtering and validating functions relative to all other functions it touches.  This is of course a manual examination, otherwise you'll have a total number of <code>case</code> switches equal to the number of functions and methods in PHP (including user defined).</p>
<p>Alternatively for handling only user input, have a static controller class initialized at the beginning of <em>all</em> scripts which 1) validates and stores all user-supplied input values against a white-list of allowed purposes; 2) wipes that input source (ie <code>$_SERVER = null</code>).  You can see where this gets a little Naziesque.</p>
</div></text><author><a href="/users/352583">bob-the-destroyer</a></author><comments><comment><text><span class="comment-copy">Yes of course, as with many programming languages, there's no end of ways to hide your evil deeds. However I think that misses the intention of what I was asking. <i>The scenario is something like this:</i> You're called to help after a website is hacked. The client will pay extra if you can secure his website before morning. The site contains 475 PHP files, and the useful forensic details have been destroyed -- you've got a huge haystack and a notoriously small needle... where do you start looking? <i>(My day job in a nutshell)</i></span></text><author><a class="comment-user owner" href="/users/86060/tylerl" title="20,317 reputation">tylerl</a></author></comment></comments></answer><answer><text><div class="post-text" itemprop="text">
<p>Here is a list of functions my provider disables for security purposes:</p>
<ul>
<li>exec</li>
<li>dl</li>
<li>show_source</li>
<li>apache_note</li>
<li>apache_setenv</li>
<li>closelog</li>
<li>debugger_off</li>
<li>debugger_on</li>
<li>define_syslog_variables</li>
<li>escapeshellarg</li>
<li>escapeshellcmd</li>
<li>ini_restore</li>
<li>openlog</li>
<li>passthru</li>
<li>pclose</li>
<li>pcntl_exec</li>
<li>popen</li>
<li>proc_close</li>
<li>proc_get_status</li>
<li>proc_nice</li>
<li>proc_open</li>
<li>proc_terminate</li>
<li>shell_exec</li>
<li>syslog</li>
<li>system</li>
<li>url_exec</li>
</ul>
</div></text><author><a href="/posts/5469820/revisions" id="history-5469820" title="show revision history for this post">
        Vladislav Rastrusny
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Most of attacks in the code use multiple access sources, or multiple steps to execute themselves. I would search not only for a code, or method having malicious code, but all methods, function executing or calling it. The best security would also include encoding and validating form data as it comes in and out.</p>
<p>Watch also out from defining system variables, they can afterwards be called from any function or method in the code.</p>
</div></text><author><a href="/posts/5471118/revisions" id="history-5471118" title="show revision history for this post">
        Cninroh
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>Several buffer overflows were discovered using 4bit 
characters functions that interpret text. 
htmlentities()
htmlspecialchars()</p>
<p>were at the top, a good defence is to use
mb_convert_encoding() to convert to single
encoding prior to interpretation.</p>
</div></text><author><a href="/posts/5825870/revisions" id="history-5825870" title="show revision history for this post">
        ehime
        </a></author><comments/></answer><answer><text><div class="post-text" itemprop="text">
<p>You can find a continuously updated list of sensitive sinks (exploitable php functions) and their parameters in <a href="http://www.phpscan.net" rel="nofollow">RIPS</a> /config/sinks.php, a static source code analyser for vulnerabilities in PHP applications that also detects PHP backdoors.</p>
</div></text><author><a href="/users/1125201">Reiners</a></author><comments><comment><text><span class="comment-copy">RIPS is using the list from this page.</span></text><author><a class="comment-user" href="/users/183528/rook" title="43,765 reputation">rook</a></author></comment></comments></answer></answers></post>